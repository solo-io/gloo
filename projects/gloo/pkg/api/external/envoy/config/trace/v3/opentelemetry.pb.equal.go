// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/trace/v3/opentelemetry.proto

package v3

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *OpenTelemetryConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*OpenTelemetryConfig)
	if !ok {
		that2, ok := that.(OpenTelemetryConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetServiceName(), target.GetServiceName()) != 0 {
		return false
	}

	switch m.CollectorCluster.(type) {

	case *OpenTelemetryConfig_CollectorUpstreamRef:
		if _, ok := target.CollectorCluster.(*OpenTelemetryConfig_CollectorUpstreamRef); !ok {
			return false
		}

		if h, ok := interface{}(m.GetCollectorUpstreamRef()).(equality.Equalizer); ok {
			if !h.Equal(target.GetCollectorUpstreamRef()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetCollectorUpstreamRef(), target.GetCollectorUpstreamRef()) {
				return false
			}
		}

	case *OpenTelemetryConfig_ClusterName:
		if _, ok := target.CollectorCluster.(*OpenTelemetryConfig_ClusterName); !ok {
			return false
		}

		if strings.Compare(m.GetClusterName(), target.GetClusterName()) != 0 {
			return false
		}

	default:
		// m is nil but target is not nil
		if m.CollectorCluster != target.CollectorCluster {
			return false
		}
	}

	switch m.ServiceType.(type) {

	case *OpenTelemetryConfig_GrpcService:
		if _, ok := target.ServiceType.(*OpenTelemetryConfig_GrpcService); !ok {
			return false
		}

		if h, ok := interface{}(m.GetGrpcService()).(equality.Equalizer); ok {
			if !h.Equal(target.GetGrpcService()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetGrpcService(), target.GetGrpcService()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ServiceType != target.ServiceType {
			return false
		}
	}

	return true
}

// Equal function
func (m *GrpcService) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*GrpcService)
	if !ok {
		that2, ok := that.(GrpcService)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetAuthority(), target.GetAuthority()) != 0 {
		return false
	}

	return true
}
