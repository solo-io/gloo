// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/trace/v3/opencensus.proto

package v3

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/solo-io/gloo/projects/gloo/pkg/api/external/udpa/annotations"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpenCensusConfig_TraceContext int32

const (
	// No-op default, no trace context is utilized.
	OpenCensusConfig_NONE OpenCensusConfig_TraceContext = 0
	// W3C Trace-Context format "traceparent:" header.
	OpenCensusConfig_TRACE_CONTEXT OpenCensusConfig_TraceContext = 1
	// Binary "grpc-trace-bin:" header.
	OpenCensusConfig_GRPC_TRACE_BIN OpenCensusConfig_TraceContext = 2
	// "X-Cloud-Trace-Context:" header.
	OpenCensusConfig_CLOUD_TRACE_CONTEXT OpenCensusConfig_TraceContext = 3
	// X-B3-* headers.
	OpenCensusConfig_B3 OpenCensusConfig_TraceContext = 4
)

// Enum value maps for OpenCensusConfig_TraceContext.
var (
	OpenCensusConfig_TraceContext_name = map[int32]string{
		0: "NONE",
		1: "TRACE_CONTEXT",
		2: "GRPC_TRACE_BIN",
		3: "CLOUD_TRACE_CONTEXT",
		4: "B3",
	}
	OpenCensusConfig_TraceContext_value = map[string]int32{
		"NONE":                0,
		"TRACE_CONTEXT":       1,
		"GRPC_TRACE_BIN":      2,
		"CLOUD_TRACE_CONTEXT": 3,
		"B3":                  4,
	}
)

func (x OpenCensusConfig_TraceContext) Enum() *OpenCensusConfig_TraceContext {
	p := new(OpenCensusConfig_TraceContext)
	*p = x
	return p
}

func (x OpenCensusConfig_TraceContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenCensusConfig_TraceContext) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_enumTypes[0].Descriptor()
}

func (OpenCensusConfig_TraceContext) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_enumTypes[0]
}

func (x OpenCensusConfig_TraceContext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenCensusConfig_TraceContext.Descriptor instead.
func (OpenCensusConfig_TraceContext) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescGZIP(), []int{0, 0}
}

// How spans should be sampled:
// - Always off
// - Always on
// - Always follow the parent Span's decision (off if no parent).
type ConstantSampler_ConstantDecision int32

const (
	ConstantSampler_ALWAYS_OFF    ConstantSampler_ConstantDecision = 0
	ConstantSampler_ALWAYS_ON     ConstantSampler_ConstantDecision = 1
	ConstantSampler_ALWAYS_PARENT ConstantSampler_ConstantDecision = 2
)

// Enum value maps for ConstantSampler_ConstantDecision.
var (
	ConstantSampler_ConstantDecision_name = map[int32]string{
		0: "ALWAYS_OFF",
		1: "ALWAYS_ON",
		2: "ALWAYS_PARENT",
	}
	ConstantSampler_ConstantDecision_value = map[string]int32{
		"ALWAYS_OFF":    0,
		"ALWAYS_ON":     1,
		"ALWAYS_PARENT": 2,
	}
)

func (x ConstantSampler_ConstantDecision) Enum() *ConstantSampler_ConstantDecision {
	p := new(ConstantSampler_ConstantDecision)
	*p = x
	return p
}

func (x ConstantSampler_ConstantDecision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstantSampler_ConstantDecision) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_enumTypes[1].Descriptor()
}

func (ConstantSampler_ConstantDecision) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_enumTypes[1]
}

func (x ConstantSampler_ConstantDecision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstantSampler_ConstantDecision.Descriptor instead.
func (ConstantSampler_ConstantDecision) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescGZIP(), []int{3, 0}
}

// Configuration for the OpenCensus tracer.
//
// The OpenCensus tracer is capable of reporting metadata to a collector using W3C-standard Trace Context: https://www.w3.org/TR/trace-context/
// WARNING: users should take care to note that this plugin has a serious limitation that can cause a configuration freeze of Envoy's dynamic listeners. This plugin can be initialised once after Envoy has started. In order to change this plugin's configuration, users must first apply the new configuration, and then restart Envoy. Users should also be aware that once the new configuration is applied, Envoy will reject any changes to its dynamic listeners configuration until after it has been restarted.
// [#extension: envoy.tracers.opencensus]
type OpenCensusConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configuration of when to submit traces to the collector.
	// See https://github.com/census-instrumentation/opencensus-proto/blob/3619b5dda8bff26ff1974714c24de8f6d4953811/src/opencensus/proto/trace/v1/trace_config.proto#L29 for full documentation
	TraceConfig *TraceConfig `protobuf:"bytes,1,opt,name=trace_config,json=traceConfig,proto3" json:"trace_config,omitempty"`
	// Enables the OpenCensus agent if set to true.
	OcagentExporterEnabled bool `protobuf:"varint,2,opt,name=ocagent_exporter_enabled,json=ocagentExporterEnabled,proto3" json:"ocagent_exporter_enabled,omitempty"`
	// Upstream to which trace data should be sent
	//
	// Types that are valid to be assigned to OcagentAddress:
	//
	//	*OpenCensusConfig_HttpAddress
	//	*OpenCensusConfig_GrpcAddress
	OcagentAddress isOpenCensusConfig_OcagentAddress `protobuf_oneof:"ocagent_address"`
	// List of incoming trace context headers to accept. First one found wins
	IncomingTraceContext []OpenCensusConfig_TraceContext `protobuf:"varint,5,rep,packed,name=incoming_trace_context,json=incomingTraceContext,proto3,enum=solo.io.envoy.config.trace.v3.OpenCensusConfig_TraceContext" json:"incoming_trace_context,omitempty"`
	// List of outgoing trace context headers we will produce
	OutgoingTraceContext []OpenCensusConfig_TraceContext `protobuf:"varint,6,rep,packed,name=outgoing_trace_context,json=outgoingTraceContext,proto3,enum=solo.io.envoy.config.trace.v3.OpenCensusConfig_TraceContext" json:"outgoing_trace_context,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *OpenCensusConfig) Reset() {
	*x = OpenCensusConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenCensusConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCensusConfig) ProtoMessage() {}

func (x *OpenCensusConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCensusConfig.ProtoReflect.Descriptor instead.
func (*OpenCensusConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescGZIP(), []int{0}
}

func (x *OpenCensusConfig) GetTraceConfig() *TraceConfig {
	if x != nil {
		return x.TraceConfig
	}
	return nil
}

func (x *OpenCensusConfig) GetOcagentExporterEnabled() bool {
	if x != nil {
		return x.OcagentExporterEnabled
	}
	return false
}

func (x *OpenCensusConfig) GetOcagentAddress() isOpenCensusConfig_OcagentAddress {
	if x != nil {
		return x.OcagentAddress
	}
	return nil
}

func (x *OpenCensusConfig) GetHttpAddress() string {
	if x != nil {
		if x, ok := x.OcagentAddress.(*OpenCensusConfig_HttpAddress); ok {
			return x.HttpAddress
		}
	}
	return ""
}

func (x *OpenCensusConfig) GetGrpcAddress() *OpenCensusConfig_OcagentGrpcAddress {
	if x != nil {
		if x, ok := x.OcagentAddress.(*OpenCensusConfig_GrpcAddress); ok {
			return x.GrpcAddress
		}
	}
	return nil
}

func (x *OpenCensusConfig) GetIncomingTraceContext() []OpenCensusConfig_TraceContext {
	if x != nil {
		return x.IncomingTraceContext
	}
	return nil
}

func (x *OpenCensusConfig) GetOutgoingTraceContext() []OpenCensusConfig_TraceContext {
	if x != nil {
		return x.OutgoingTraceContext
	}
	return nil
}

type isOpenCensusConfig_OcagentAddress interface {
	isOpenCensusConfig_OcagentAddress()
}

type OpenCensusConfig_HttpAddress struct {
	// Send to upstream over http
	HttpAddress string `protobuf:"bytes,3,opt,name=http_address,json=httpAddress,proto3,oneof"`
}

type OpenCensusConfig_GrpcAddress struct {
	// Send to upstream over GRPC
	GrpcAddress *OpenCensusConfig_OcagentGrpcAddress `protobuf:"bytes,4,opt,name=grpc_address,json=grpcAddress,proto3,oneof"`
}

func (*OpenCensusConfig_HttpAddress) isOpenCensusConfig_OcagentAddress() {}

func (*OpenCensusConfig_GrpcAddress) isOpenCensusConfig_OcagentAddress() {}

type TraceConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Sampler:
	//
	//	*TraceConfig_ProbabilitySampler
	//	*TraceConfig_ConstantSampler
	//	*TraceConfig_RateLimitingSampler
	Sampler isTraceConfig_Sampler `protobuf_oneof:"sampler"`
	// The global default max number of attributes per span.
	MaxNumberOfAttributes int64 `protobuf:"varint,4,opt,name=max_number_of_attributes,json=maxNumberOfAttributes,proto3" json:"max_number_of_attributes,omitempty"`
	// The global default max number of annotation events per span.
	MaxNumberOfAnnotations int64 `protobuf:"varint,5,opt,name=max_number_of_annotations,json=maxNumberOfAnnotations,proto3" json:"max_number_of_annotations,omitempty"`
	// The global default max number of message events per span.
	MaxNumberOfMessageEvents int64 `protobuf:"varint,6,opt,name=max_number_of_message_events,json=maxNumberOfMessageEvents,proto3" json:"max_number_of_message_events,omitempty"`
	// The global default max number of link entries per span.
	MaxNumberOfLinks int64 `protobuf:"varint,7,opt,name=max_number_of_links,json=maxNumberOfLinks,proto3" json:"max_number_of_links,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TraceConfig) Reset() {
	*x = TraceConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceConfig) ProtoMessage() {}

func (x *TraceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceConfig.ProtoReflect.Descriptor instead.
func (*TraceConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescGZIP(), []int{1}
}

func (x *TraceConfig) GetSampler() isTraceConfig_Sampler {
	if x != nil {
		return x.Sampler
	}
	return nil
}

func (x *TraceConfig) GetProbabilitySampler() *ProbabilitySampler {
	if x != nil {
		if x, ok := x.Sampler.(*TraceConfig_ProbabilitySampler); ok {
			return x.ProbabilitySampler
		}
	}
	return nil
}

func (x *TraceConfig) GetConstantSampler() *ConstantSampler {
	if x != nil {
		if x, ok := x.Sampler.(*TraceConfig_ConstantSampler); ok {
			return x.ConstantSampler
		}
	}
	return nil
}

func (x *TraceConfig) GetRateLimitingSampler() *RateLimitingSampler {
	if x != nil {
		if x, ok := x.Sampler.(*TraceConfig_RateLimitingSampler); ok {
			return x.RateLimitingSampler
		}
	}
	return nil
}

func (x *TraceConfig) GetMaxNumberOfAttributes() int64 {
	if x != nil {
		return x.MaxNumberOfAttributes
	}
	return 0
}

func (x *TraceConfig) GetMaxNumberOfAnnotations() int64 {
	if x != nil {
		return x.MaxNumberOfAnnotations
	}
	return 0
}

func (x *TraceConfig) GetMaxNumberOfMessageEvents() int64 {
	if x != nil {
		return x.MaxNumberOfMessageEvents
	}
	return 0
}

func (x *TraceConfig) GetMaxNumberOfLinks() int64 {
	if x != nil {
		return x.MaxNumberOfLinks
	}
	return 0
}

type isTraceConfig_Sampler interface {
	isTraceConfig_Sampler()
}

type TraceConfig_ProbabilitySampler struct {
	ProbabilitySampler *ProbabilitySampler `protobuf:"bytes,1,opt,name=probability_sampler,json=probabilitySampler,proto3,oneof"`
}

type TraceConfig_ConstantSampler struct {
	ConstantSampler *ConstantSampler `protobuf:"bytes,2,opt,name=constant_sampler,json=constantSampler,proto3,oneof"`
}

type TraceConfig_RateLimitingSampler struct {
	RateLimitingSampler *RateLimitingSampler `protobuf:"bytes,3,opt,name=rate_limiting_sampler,json=rateLimitingSampler,proto3,oneof"`
}

func (*TraceConfig_ProbabilitySampler) isTraceConfig_Sampler() {}

func (*TraceConfig_ConstantSampler) isTraceConfig_Sampler() {}

func (*TraceConfig_RateLimitingSampler) isTraceConfig_Sampler() {}

// Sampler that tries to uniformly sample traces with a given probability.
// The probability of sampling a trace is equal to that of the specified probability.
type ProbabilitySampler struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The desired probability of sampling. Must be within [0.0, 1.0].
	SamplingProbability float64 `protobuf:"fixed64,1,opt,name=samplingProbability,proto3" json:"samplingProbability,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProbabilitySampler) Reset() {
	*x = ProbabilitySampler{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProbabilitySampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbabilitySampler) ProtoMessage() {}

func (x *ProbabilitySampler) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbabilitySampler.ProtoReflect.Descriptor instead.
func (*ProbabilitySampler) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescGZIP(), []int{2}
}

func (x *ProbabilitySampler) GetSamplingProbability() float64 {
	if x != nil {
		return x.SamplingProbability
	}
	return 0
}

// Sampler that always makes a constant decision on span sampling.
type ConstantSampler struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Decision      ConstantSampler_ConstantDecision `protobuf:"varint,1,opt,name=decision,proto3,enum=solo.io.envoy.config.trace.v3.ConstantSampler_ConstantDecision" json:"decision,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConstantSampler) Reset() {
	*x = ConstantSampler{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstantSampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstantSampler) ProtoMessage() {}

func (x *ConstantSampler) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstantSampler.ProtoReflect.Descriptor instead.
func (*ConstantSampler) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescGZIP(), []int{3}
}

func (x *ConstantSampler) GetDecision() ConstantSampler_ConstantDecision {
	if x != nil {
		return x.Decision
	}
	return ConstantSampler_ALWAYS_OFF
}

// Sampler that tries to sample with a rate per time window.
type RateLimitingSampler struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Rate per second.
	Qps           int64 `protobuf:"varint,1,opt,name=qps,proto3" json:"qps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RateLimitingSampler) Reset() {
	*x = RateLimitingSampler{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RateLimitingSampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitingSampler) ProtoMessage() {}

func (x *RateLimitingSampler) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitingSampler.ProtoReflect.Descriptor instead.
func (*RateLimitingSampler) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescGZIP(), []int{4}
}

func (x *RateLimitingSampler) GetQps() int64 {
	if x != nil {
		return x.Qps
	}
	return 0
}

type OpenCensusConfig_OcagentGrpcAddress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URI of the target address
	TargetUri string `protobuf:"bytes,1,opt,name=target_uri,json=targetUri,proto3" json:"target_uri,omitempty"`
	// Prefix for statistical measurements
	StatPrefix    string `protobuf:"bytes,2,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenCensusConfig_OcagentGrpcAddress) Reset() {
	*x = OpenCensusConfig_OcagentGrpcAddress{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenCensusConfig_OcagentGrpcAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCensusConfig_OcagentGrpcAddress) ProtoMessage() {}

func (x *OpenCensusConfig_OcagentGrpcAddress) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCensusConfig_OcagentGrpcAddress.ProtoReflect.Descriptor instead.
func (*OpenCensusConfig_OcagentGrpcAddress) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescGZIP(), []int{0, 0}
}

func (x *OpenCensusConfig_OcagentGrpcAddress) GetTargetUri() string {
	if x != nil {
		return x.TargetUri
	}
	return ""
}

func (x *OpenCensusConfig_OcagentGrpcAddress) GetStatPrefix() string {
	if x != nil {
		return x.StatPrefix
	}
	return ""
}

var File_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDesc = "" +
	"\n" +
	"Ygithub.com/solo-io/gloo/projects/gloo/api/external/envoy/config/trace/v3/opencensus.proto\x12\x1dsolo.io.envoy.config.trace.v3\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\x1a\x12extproto/ext.proto\"\x8c\x06\n" +
	"\x10OpenCensusConfig\x12M\n" +
	"\ftrace_config\x18\x01 \x01(\v2*.solo.io.envoy.config.trace.v3.TraceConfigR\vtraceConfig\x128\n" +
	"\x18ocagent_exporter_enabled\x18\x02 \x01(\bR\x16ocagentExporterEnabled\x12#\n" +
	"\fhttp_address\x18\x03 \x01(\tH\x00R\vhttpAddress\x12g\n" +
	"\fgrpc_address\x18\x04 \x01(\v2B.solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddressH\x00R\vgrpcAddress\x12r\n" +
	"\x16incoming_trace_context\x18\x05 \x03(\x0e2<.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContextR\x14incomingTraceContext\x12r\n" +
	"\x16outgoing_trace_context\x18\x06 \x03(\x0e2<.solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContextR\x14outgoingTraceContext\x1aT\n" +
	"\x12OcagentGrpcAddress\x12\x1d\n" +
	"\n" +
	"target_uri\x18\x01 \x01(\tR\ttargetUri\x12\x1f\n" +
	"\vstat_prefix\x18\x02 \x01(\tR\n" +
	"statPrefix\"`\n" +
	"\fTraceContext\x12\b\n" +
	"\x04NONE\x10\x00\x12\x11\n" +
	"\rTRACE_CONTEXT\x10\x01\x12\x12\n" +
	"\x0eGRPC_TRACE_BIN\x10\x02\x12\x17\n" +
	"\x13CLOUD_TRACE_CONTEXT\x10\x03\x12\x06\n" +
	"\x02B3\x10\x04:.\x8a\xc8ގ\x04(\n" +
	"&envoy.config.trace.v2.OpenCensusConfigB\x11\n" +
	"\x0focagent_address\"\xa8\x04\n" +
	"\vTraceConfig\x12d\n" +
	"\x13probability_sampler\x18\x01 \x01(\v21.solo.io.envoy.config.trace.v3.ProbabilitySamplerH\x00R\x12probabilitySampler\x12[\n" +
	"\x10constant_sampler\x18\x02 \x01(\v2..solo.io.envoy.config.trace.v3.ConstantSamplerH\x00R\x0fconstantSampler\x12h\n" +
	"\x15rate_limiting_sampler\x18\x03 \x01(\v22.solo.io.envoy.config.trace.v3.RateLimitingSamplerH\x00R\x13rateLimitingSampler\x127\n" +
	"\x18max_number_of_attributes\x18\x04 \x01(\x03R\x15maxNumberOfAttributes\x129\n" +
	"\x19max_number_of_annotations\x18\x05 \x01(\x03R\x16maxNumberOfAnnotations\x12>\n" +
	"\x1cmax_number_of_message_events\x18\x06 \x01(\x03R\x18maxNumberOfMessageEvents\x12-\n" +
	"\x13max_number_of_links\x18\a \x01(\x03R\x10maxNumberOfLinksB\t\n" +
	"\asampler\"F\n" +
	"\x12ProbabilitySampler\x120\n" +
	"\x13samplingProbability\x18\x01 \x01(\x01R\x13samplingProbability\"\xb4\x01\n" +
	"\x0fConstantSampler\x12[\n" +
	"\bdecision\x18\x01 \x01(\x0e2?.solo.io.envoy.config.trace.v3.ConstantSampler.ConstantDecisionR\bdecision\"D\n" +
	"\x10ConstantDecision\x12\x0e\n" +
	"\n" +
	"ALWAYS_OFF\x10\x00\x12\r\n" +
	"\tALWAYS_ON\x10\x01\x12\x11\n" +
	"\rALWAYS_PARENT\x10\x02\"'\n" +
	"\x13RateLimitingSampler\x12\x10\n" +
	"\x03qps\x18\x01 \x01(\x03R\x03qpsB\xd5\x01\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01\x82\x8a\u05ed\x04-\x12+envoy.extensions.tracers.opencensus.v4alpha\xe2\xb5\xdf\xcb\a\x02\x10\x02\n" +
	"+io.envoyproxy.solo.io.envoy.config.trace.v3B\x0fOpenCensusProtoP\x01ZLgithub.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/config/trace/v3b\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_goTypes = []any{
	(OpenCensusConfig_TraceContext)(0),          // 0: solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext
	(ConstantSampler_ConstantDecision)(0),       // 1: solo.io.envoy.config.trace.v3.ConstantSampler.ConstantDecision
	(*OpenCensusConfig)(nil),                    // 2: solo.io.envoy.config.trace.v3.OpenCensusConfig
	(*TraceConfig)(nil),                         // 3: solo.io.envoy.config.trace.v3.TraceConfig
	(*ProbabilitySampler)(nil),                  // 4: solo.io.envoy.config.trace.v3.ProbabilitySampler
	(*ConstantSampler)(nil),                     // 5: solo.io.envoy.config.trace.v3.ConstantSampler
	(*RateLimitingSampler)(nil),                 // 6: solo.io.envoy.config.trace.v3.RateLimitingSampler
	(*OpenCensusConfig_OcagentGrpcAddress)(nil), // 7: solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress
}
var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_depIdxs = []int32{
	3, // 0: solo.io.envoy.config.trace.v3.OpenCensusConfig.trace_config:type_name -> solo.io.envoy.config.trace.v3.TraceConfig
	7, // 1: solo.io.envoy.config.trace.v3.OpenCensusConfig.grpc_address:type_name -> solo.io.envoy.config.trace.v3.OpenCensusConfig.OcagentGrpcAddress
	0, // 2: solo.io.envoy.config.trace.v3.OpenCensusConfig.incoming_trace_context:type_name -> solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext
	0, // 3: solo.io.envoy.config.trace.v3.OpenCensusConfig.outgoing_trace_context:type_name -> solo.io.envoy.config.trace.v3.OpenCensusConfig.TraceContext
	4, // 4: solo.io.envoy.config.trace.v3.TraceConfig.probability_sampler:type_name -> solo.io.envoy.config.trace.v3.ProbabilitySampler
	5, // 5: solo.io.envoy.config.trace.v3.TraceConfig.constant_sampler:type_name -> solo.io.envoy.config.trace.v3.ConstantSampler
	6, // 6: solo.io.envoy.config.trace.v3.TraceConfig.rate_limiting_sampler:type_name -> solo.io.envoy.config.trace.v3.RateLimitingSampler
	1, // 7: solo.io.envoy.config.trace.v3.ConstantSampler.decision:type_name -> solo.io.envoy.config.trace.v3.ConstantSampler.ConstantDecision
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_init()
}
func file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[0].OneofWrappers = []any{
		(*OpenCensusConfig_HttpAddress)(nil),
		(*OpenCensusConfig_GrpcAddress)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes[1].OneofWrappers = []any{
		(*TraceConfig_ProbabilitySampler)(nil),
		(*TraceConfig_ConstantSampler)(nil),
		(*TraceConfig_RateLimitingSampler)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_config_trace_v3_opencensus_proto_depIdxs = nil
}
