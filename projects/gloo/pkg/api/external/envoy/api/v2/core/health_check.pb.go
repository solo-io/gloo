// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/external/envoy/api/v2/core/health_check.proto

package core

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v3 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/config/core/v3"
	_type "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/type"
	advanced_http "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/advanced_http"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Endpoint health status.
type HealthStatus int32

const (
	// The health status is not known. This is interpreted by Envoy as *HEALTHY*.
	HealthStatus_UNKNOWN HealthStatus = 0
	// Healthy.
	HealthStatus_HEALTHY HealthStatus = 1
	// Unhealthy.
	HealthStatus_UNHEALTHY HealthStatus = 2
	// Connection draining in progress. E.g.,
	// https://aws.amazon.com/blogs/aws/elb-connection-draining-remove-instances-from-service-with-care/
	// or
	// https://cloud.google.com/compute/docs/load-balancing/enabling-connection-draining.
	// This is interpreted by Envoy as *UNHEALTHY*.
	HealthStatus_DRAINING HealthStatus = 3
	// Health check timed out. This is part of HDS and is interpreted by Envoy as
	// *UNHEALTHY*.
	HealthStatus_TIMEOUT HealthStatus = 4
	// Degraded.
	HealthStatus_DEGRADED HealthStatus = 5
)

// Enum value maps for HealthStatus.
var (
	HealthStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "HEALTHY",
		2: "UNHEALTHY",
		3: "DRAINING",
		4: "TIMEOUT",
		5: "DEGRADED",
	}
	HealthStatus_value = map[string]int32{
		"UNKNOWN":   0,
		"HEALTHY":   1,
		"UNHEALTHY": 2,
		"DRAINING":  3,
		"TIMEOUT":   4,
		"DEGRADED":  5,
	}
)

func (x HealthStatus) Enum() *HealthStatus {
	p := new(HealthStatus)
	*p = x
	return p
}

func (x HealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_enumTypes[0].Descriptor()
}

func (HealthStatus) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_enumTypes[0]
}

func (x HealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatus.Descriptor instead.
func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescGZIP(), []int{0}
}

type HealthCheck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The time to wait for a health check response. If the timeout is reached the
	// health check attempt will be considered a failure.
	Timeout *durationpb.Duration `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// The interval between health checks.
	Interval *durationpb.Duration `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// An optional jitter amount in milliseconds. If specified, Envoy will start health
	// checking after for a random time in ms between 0 and initial_jitter. This only
	// applies to the first health check.
	InitialJitter *durationpb.Duration `protobuf:"bytes,20,opt,name=initial_jitter,json=initialJitter,proto3" json:"initial_jitter,omitempty"`
	// An optional jitter amount in milliseconds. If specified, during every
	// interval Envoy will add interval_jitter to the wait time.
	IntervalJitter *durationpb.Duration `protobuf:"bytes,3,opt,name=interval_jitter,json=intervalJitter,proto3" json:"interval_jitter,omitempty"`
	// An optional jitter amount as a percentage of interval_ms. If specified,
	// during every interval Envoy will add interval_ms *
	// interval_jitter_percent / 100 to the wait time.
	//
	// If interval_jitter_ms and interval_jitter_percent are both set, both of
	// them will be used to increase the wait time.
	IntervalJitterPercent uint32 `protobuf:"varint,18,opt,name=interval_jitter_percent,json=intervalJitterPercent,proto3" json:"interval_jitter_percent,omitempty"`
	// The number of unhealthy health checks required before a host is marked
	// unhealthy. Note that for *http* health checking if a host responds with 503
	// this threshold is ignored and the host is considered unhealthy immediately.
	UnhealthyThreshold *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// The number of healthy health checks required before a host is marked
	// healthy. Note that during startup, only a single successful health check is
	// required to mark a host healthy.
	HealthyThreshold *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	// Reuse health check connection between health checks. Default is true.
	ReuseConnection *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=reuse_connection,json=reuseConnection,proto3" json:"reuse_connection,omitempty"`
	// Types that are valid to be assigned to HealthChecker:
	//
	//	*HealthCheck_HttpHealthCheck_
	//	*HealthCheck_TcpHealthCheck_
	//	*HealthCheck_GrpcHealthCheck_
	//	*HealthCheck_CustomHealthCheck_
	HealthChecker isHealthCheck_HealthChecker `protobuf_oneof:"health_checker"`
	// The "no traffic interval" is a special health check interval that is used when a cluster has
	// never had traffic routed to it. This lower interval allows cluster information to be kept up to
	// date, without sending a potentially large amount of active health checking traffic for no
	// reason. Once a cluster has been used for traffic routing, Envoy will shift back to using the
	// standard health check interval that is defined. Note that this interval takes precedence over
	// any other.
	//
	// The default value for "no traffic interval" is 60 seconds.
	NoTrafficInterval *durationpb.Duration `protobuf:"bytes,12,opt,name=no_traffic_interval,json=noTrafficInterval,proto3" json:"no_traffic_interval,omitempty"`
	// The "unhealthy interval" is a health check interval that is used for hosts that are marked as
	// unhealthy. As soon as the host is marked as healthy, Envoy will shift back to using the
	// standard health check interval that is defined.
	//
	// The default value for "unhealthy interval" is the same as "interval".
	UnhealthyInterval *durationpb.Duration `protobuf:"bytes,14,opt,name=unhealthy_interval,json=unhealthyInterval,proto3" json:"unhealthy_interval,omitempty"`
	// The "unhealthy edge interval" is a special health check interval that is used for the first
	// health check right after a host is marked as unhealthy. For subsequent health checks
	// Envoy will shift back to using either "unhealthy interval" if present or the standard health
	// check interval that is defined.
	//
	// The default value for "unhealthy edge interval" is the same as "unhealthy interval".
	UnhealthyEdgeInterval *durationpb.Duration `protobuf:"bytes,15,opt,name=unhealthy_edge_interval,json=unhealthyEdgeInterval,proto3" json:"unhealthy_edge_interval,omitempty"`
	// The "healthy edge interval" is a special health check interval that is used for the first
	// health check right after a host is marked as healthy. For subsequent health checks
	// Envoy will shift back to using the standard health check interval that is defined.
	//
	// The default value for "healthy edge interval" is the same as the default interval.
	HealthyEdgeInterval *durationpb.Duration `protobuf:"bytes,16,opt,name=healthy_edge_interval,json=healthyEdgeInterval,proto3" json:"healthy_edge_interval,omitempty"`
	// Specifies the path to the `health check event log (arch_overview_health_check_logging)`.
	// If empty, no event log will be written.
	EventLogPath string `protobuf:"bytes,17,opt,name=event_log_path,json=eventLogPath,proto3" json:"event_log_path,omitempty"`
	// If set to true, health check failure events will always be logged. If set to false, only the
	// initial health check failure event will be logged.
	// The default value is false.
	AlwaysLogHealthCheckFailures bool `protobuf:"varint,19,opt,name=always_log_health_check_failures,json=alwaysLogHealthCheckFailures,proto3" json:"always_log_health_check_failures,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescGZIP(), []int{0}
}

func (x *HealthCheck) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *HealthCheck) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *HealthCheck) GetInitialJitter() *durationpb.Duration {
	if x != nil {
		return x.InitialJitter
	}
	return nil
}

func (x *HealthCheck) GetIntervalJitter() *durationpb.Duration {
	if x != nil {
		return x.IntervalJitter
	}
	return nil
}

func (x *HealthCheck) GetIntervalJitterPercent() uint32 {
	if x != nil {
		return x.IntervalJitterPercent
	}
	return 0
}

func (x *HealthCheck) GetUnhealthyThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.UnhealthyThreshold
	}
	return nil
}

func (x *HealthCheck) GetHealthyThreshold() *wrapperspb.UInt32Value {
	if x != nil {
		return x.HealthyThreshold
	}
	return nil
}

func (x *HealthCheck) GetReuseConnection() *wrapperspb.BoolValue {
	if x != nil {
		return x.ReuseConnection
	}
	return nil
}

func (x *HealthCheck) GetHealthChecker() isHealthCheck_HealthChecker {
	if x != nil {
		return x.HealthChecker
	}
	return nil
}

func (x *HealthCheck) GetHttpHealthCheck() *HealthCheck_HttpHealthCheck {
	if x != nil {
		if x, ok := x.HealthChecker.(*HealthCheck_HttpHealthCheck_); ok {
			return x.HttpHealthCheck
		}
	}
	return nil
}

func (x *HealthCheck) GetTcpHealthCheck() *HealthCheck_TcpHealthCheck {
	if x != nil {
		if x, ok := x.HealthChecker.(*HealthCheck_TcpHealthCheck_); ok {
			return x.TcpHealthCheck
		}
	}
	return nil
}

func (x *HealthCheck) GetGrpcHealthCheck() *HealthCheck_GrpcHealthCheck {
	if x != nil {
		if x, ok := x.HealthChecker.(*HealthCheck_GrpcHealthCheck_); ok {
			return x.GrpcHealthCheck
		}
	}
	return nil
}

func (x *HealthCheck) GetCustomHealthCheck() *HealthCheck_CustomHealthCheck {
	if x != nil {
		if x, ok := x.HealthChecker.(*HealthCheck_CustomHealthCheck_); ok {
			return x.CustomHealthCheck
		}
	}
	return nil
}

func (x *HealthCheck) GetNoTrafficInterval() *durationpb.Duration {
	if x != nil {
		return x.NoTrafficInterval
	}
	return nil
}

func (x *HealthCheck) GetUnhealthyInterval() *durationpb.Duration {
	if x != nil {
		return x.UnhealthyInterval
	}
	return nil
}

func (x *HealthCheck) GetUnhealthyEdgeInterval() *durationpb.Duration {
	if x != nil {
		return x.UnhealthyEdgeInterval
	}
	return nil
}

func (x *HealthCheck) GetHealthyEdgeInterval() *durationpb.Duration {
	if x != nil {
		return x.HealthyEdgeInterval
	}
	return nil
}

func (x *HealthCheck) GetEventLogPath() string {
	if x != nil {
		return x.EventLogPath
	}
	return ""
}

func (x *HealthCheck) GetAlwaysLogHealthCheckFailures() bool {
	if x != nil {
		return x.AlwaysLogHealthCheckFailures
	}
	return false
}

type isHealthCheck_HealthChecker interface {
	isHealthCheck_HealthChecker()
}

type HealthCheck_HttpHealthCheck_ struct {
	// HTTP health check.
	HttpHealthCheck *HealthCheck_HttpHealthCheck `protobuf:"bytes,8,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof"`
}

type HealthCheck_TcpHealthCheck_ struct {
	// TCP health check.
	TcpHealthCheck *HealthCheck_TcpHealthCheck `protobuf:"bytes,9,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof"`
}

type HealthCheck_GrpcHealthCheck_ struct {
	// gRPC health check.
	GrpcHealthCheck *HealthCheck_GrpcHealthCheck `protobuf:"bytes,11,opt,name=grpc_health_check,json=grpcHealthCheck,proto3,oneof"`
}

type HealthCheck_CustomHealthCheck_ struct {
	// Custom health check.
	CustomHealthCheck *HealthCheck_CustomHealthCheck `protobuf:"bytes,13,opt,name=custom_health_check,json=customHealthCheck,proto3,oneof"`
}

func (*HealthCheck_HttpHealthCheck_) isHealthCheck_HealthChecker() {}

func (*HealthCheck_TcpHealthCheck_) isHealthCheck_HealthChecker() {}

func (*HealthCheck_GrpcHealthCheck_) isHealthCheck_HealthChecker() {}

func (*HealthCheck_CustomHealthCheck_) isHealthCheck_HealthChecker() {}

// Describes the encoding of the payload bytes in the payload.
type HealthCheck_Payload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*HealthCheck_Payload_Text
	Payload       isHealthCheck_Payload_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_Payload) Reset() {
	*x = HealthCheck_Payload{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_Payload) ProtoMessage() {}

func (x *HealthCheck_Payload) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_Payload.ProtoReflect.Descriptor instead.
func (*HealthCheck_Payload) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescGZIP(), []int{0, 0}
}

func (x *HealthCheck_Payload) GetPayload() isHealthCheck_Payload_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *HealthCheck_Payload) GetText() string {
	if x != nil {
		if x, ok := x.Payload.(*HealthCheck_Payload_Text); ok {
			return x.Text
		}
	}
	return ""
}

type isHealthCheck_Payload_Payload interface {
	isHealthCheck_Payload_Payload()
}

type HealthCheck_Payload_Text struct {
	// Hex encoded payload. E.g., "000000FF".
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

func (*HealthCheck_Payload_Text) isHealthCheck_Payload_Payload() {}

// [#comment:next free field: 11]
type HealthCheck_HttpHealthCheck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value of the host header in the HTTP health check request. If
	// left empty (default value), the name of the cluster this health check is associated
	// with will be used.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Specifies the HTTP path that will be requested during health checking. For example
	// */healthcheck*.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// An optional service name parameter which is used to validate the identity of
	// the health checked cluster. See the `architecture overview
	// (arch_overview_health_checking_identity)` for more information.
	ServiceName string `protobuf:"bytes,5,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Specifies a list of HTTP headers that should be added to each request that is sent to the
	// health checked cluster. For more information, including details on header value syntax, see
	// the documentation on `custom request headers
	// (config_http_conn_man_headers_custom_request_headers)`.
	RequestHeadersToAdd []*core.HeaderValueOption `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// Specifies a list of HTTP headers that should be removed from each request that is sent to the
	// health checked cluster.
	RequestHeadersToRemove []string `protobuf:"bytes,8,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// If set, health checks will be made using http/2.
	UseHttp2 bool `protobuf:"varint,7,opt,name=use_http2,json=useHttp2,proto3" json:"use_http2,omitempty"`
	// Specifies a list of HTTP response statuses considered healthy. If provided, replaces default
	// 200-only policy - 200 must be included explicitly as needed. Ranges follow half-open
	// semantics of `Int64Range (envoy_api_msg_type.Int64Range)`.
	ExpectedStatuses []*_type.Int64Range `protobuf:"bytes,9,rep,name=expected_statuses,json=expectedStatuses,proto3" json:"expected_statuses,omitempty"`
	// (Enterprise Only): If defined, the response health check rules take precedence over the http
	// `expected_statuses`.
	ResponseAssertions *advanced_http.ResponseAssertions `protobuf:"bytes,10,opt,name=response_assertions,json=responseAssertions,proto3" json:"response_assertions,omitempty"`
	// HTTP Method that will be used for health checking, default is "GET".
	// GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE, PATCH methods are supported, but making request body is not supported.
	// CONNECT method is disallowed because it is not appropriate for health check request.
	// If a non-200 response is expected by the method, it needs to be set in expected_statuses.
	Method        v3.RequestMethod `protobuf:"varint,11,opt,name=method,proto3,enum=solo.io.envoy.config.core.v3.RequestMethod" json:"method,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_HttpHealthCheck) Reset() {
	*x = HealthCheck_HttpHealthCheck{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_HttpHealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_HttpHealthCheck) ProtoMessage() {}

func (x *HealthCheck_HttpHealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_HttpHealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck_HttpHealthCheck) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescGZIP(), []int{0, 1}
}

func (x *HealthCheck_HttpHealthCheck) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HealthCheck_HttpHealthCheck) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HealthCheck_HttpHealthCheck) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *HealthCheck_HttpHealthCheck) GetRequestHeadersToAdd() []*core.HeaderValueOption {
	if x != nil {
		return x.RequestHeadersToAdd
	}
	return nil
}

func (x *HealthCheck_HttpHealthCheck) GetRequestHeadersToRemove() []string {
	if x != nil {
		return x.RequestHeadersToRemove
	}
	return nil
}

func (x *HealthCheck_HttpHealthCheck) GetUseHttp2() bool {
	if x != nil {
		return x.UseHttp2
	}
	return false
}

func (x *HealthCheck_HttpHealthCheck) GetExpectedStatuses() []*_type.Int64Range {
	if x != nil {
		return x.ExpectedStatuses
	}
	return nil
}

func (x *HealthCheck_HttpHealthCheck) GetResponseAssertions() *advanced_http.ResponseAssertions {
	if x != nil {
		return x.ResponseAssertions
	}
	return nil
}

func (x *HealthCheck_HttpHealthCheck) GetMethod() v3.RequestMethod {
	if x != nil {
		return x.Method
	}
	return v3.RequestMethod(0)
}

type HealthCheck_TcpHealthCheck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Empty payloads imply a connect-only health check.
	Send *HealthCheck_Payload `protobuf:"bytes,1,opt,name=send,proto3" json:"send,omitempty"`
	// When checking the response, “fuzzy” matching is performed such that each
	// binary block must be found, and in the order specified, but not
	// necessarily contiguous.
	Receive       []*HealthCheck_Payload `protobuf:"bytes,2,rep,name=receive,proto3" json:"receive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_TcpHealthCheck) Reset() {
	*x = HealthCheck_TcpHealthCheck{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_TcpHealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_TcpHealthCheck) ProtoMessage() {}

func (x *HealthCheck_TcpHealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_TcpHealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck_TcpHealthCheck) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescGZIP(), []int{0, 2}
}

func (x *HealthCheck_TcpHealthCheck) GetSend() *HealthCheck_Payload {
	if x != nil {
		return x.Send
	}
	return nil
}

func (x *HealthCheck_TcpHealthCheck) GetReceive() []*HealthCheck_Payload {
	if x != nil {
		return x.Receive
	}
	return nil
}

type HealthCheck_RedisHealthCheck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If set, optionally perform `EXISTS <key>` instead of `PING`. A return value
	// from Redis of 0 (does not exist) is considered a passing healthcheck. A return value other
	// than 0 is considered a failure. This allows the user to mark a Redis instance for maintenance
	// by setting the specified key to any value and waiting for traffic to drain.
	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_RedisHealthCheck) Reset() {
	*x = HealthCheck_RedisHealthCheck{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_RedisHealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_RedisHealthCheck) ProtoMessage() {}

func (x *HealthCheck_RedisHealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_RedisHealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck_RedisHealthCheck) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescGZIP(), []int{0, 3}
}

func (x *HealthCheck_RedisHealthCheck) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// [grpc.health.v1.Health](https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto)-based
// healthcheck. See [gRPC doc](https://github.com/grpc/grpc/blob/master/doc/health-checking.md)
// for details.
type HealthCheck_GrpcHealthCheck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An optional service name parameter which will be sent to gRPC service in
	// [grpc.health.v1.HealthCheckRequest](https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto#L20)
	// message. See [gRPC health-checking overview](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for more information.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The value of the :authority header in the gRPC health check request. If
	// left empty (default value), the name of the cluster this health check is associated
	// with will be used.
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	// Specifies a list of key-value pairs that should be added to the metadata of each GRPC call
	// that is sent to the health checked cluster.
	InitialMetadata []*core.HeaderValueOption `protobuf:"bytes,3,rep,name=initial_metadata,json=initialMetadata,proto3" json:"initial_metadata,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HealthCheck_GrpcHealthCheck) Reset() {
	*x = HealthCheck_GrpcHealthCheck{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_GrpcHealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_GrpcHealthCheck) ProtoMessage() {}

func (x *HealthCheck_GrpcHealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_GrpcHealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck_GrpcHealthCheck) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescGZIP(), []int{0, 4}
}

func (x *HealthCheck_GrpcHealthCheck) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *HealthCheck_GrpcHealthCheck) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *HealthCheck_GrpcHealthCheck) GetInitialMetadata() []*core.HeaderValueOption {
	if x != nil {
		return x.InitialMetadata
	}
	return nil
}

// Custom health check.
type HealthCheck_CustomHealthCheck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The registered name of the custom health checker.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A custom health checker specific configuration which depends on the custom health checker
	// being instantiated. See :api:`envoy/config/health_checker` for reference.
	//
	// Types that are valid to be assigned to ConfigType:
	//
	//	*HealthCheck_CustomHealthCheck_Config
	//	*HealthCheck_CustomHealthCheck_TypedConfig
	ConfigType    isHealthCheck_CustomHealthCheck_ConfigType `protobuf_oneof:"config_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck_CustomHealthCheck) Reset() {
	*x = HealthCheck_CustomHealthCheck{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck_CustomHealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_CustomHealthCheck) ProtoMessage() {}

func (x *HealthCheck_CustomHealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_CustomHealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck_CustomHealthCheck) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescGZIP(), []int{0, 5}
}

func (x *HealthCheck_CustomHealthCheck) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HealthCheck_CustomHealthCheck) GetConfigType() isHealthCheck_CustomHealthCheck_ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

func (x *HealthCheck_CustomHealthCheck) GetConfig() *structpb.Struct {
	if x != nil {
		if x, ok := x.ConfigType.(*HealthCheck_CustomHealthCheck_Config); ok {
			return x.Config
		}
	}
	return nil
}

func (x *HealthCheck_CustomHealthCheck) GetTypedConfig() *anypb.Any {
	if x != nil {
		if x, ok := x.ConfigType.(*HealthCheck_CustomHealthCheck_TypedConfig); ok {
			return x.TypedConfig
		}
	}
	return nil
}

type isHealthCheck_CustomHealthCheck_ConfigType interface {
	isHealthCheck_CustomHealthCheck_ConfigType()
}

type HealthCheck_CustomHealthCheck_Config struct {
	Config *structpb.Struct `protobuf:"bytes,2,opt,name=config,proto3,oneof"`
}

type HealthCheck_CustomHealthCheck_TypedConfig struct {
	TypedConfig *anypb.Any `protobuf:"bytes,3,opt,name=typed_config,json=typedConfig,proto3,oneof"`
}

func (*HealthCheck_CustomHealthCheck_Config) isHealthCheck_CustomHealthCheck_ConfigType() {}

func (*HealthCheck_CustomHealthCheck_TypedConfig) isHealthCheck_CustomHealthCheck_ConfigType() {}

var File_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDesc = "" +
	"\n" +
	"Wgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/api/v2/core/health_check.proto\x12\x19solo.io.envoy.api.v2.core\x1aEgithub.com/solo-io/solo-kit/api/external/envoy/api/v2/core/base.proto\x1aIgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/type/range.proto\x1aVgithub.com/solo-io/gloo/projects/gloo/api/v1/options/advanced_http/advanced_http.proto\x1aRgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/config/core/v3/base.proto\x1a\x19google/protobuf/any.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x17validate/validate.proto\x1a\x12extproto/ext.proto\"\xdb\x14\n" +
	"\vHealthCheck\x12?\n" +
	"\atimeout\x18\x01 \x01(\v2\x19.google.protobuf.DurationB\n" +
	"\xfaB\a\xaa\x01\x04\b\x01*\x00R\atimeout\x12A\n" +
	"\binterval\x18\x02 \x01(\v2\x19.google.protobuf.DurationB\n" +
	"\xfaB\a\xaa\x01\x04\b\x01*\x00R\binterval\x12@\n" +
	"\x0einitial_jitter\x18\x14 \x01(\v2\x19.google.protobuf.DurationR\rinitialJitter\x12B\n" +
	"\x0finterval_jitter\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x0eintervalJitter\x126\n" +
	"\x17interval_jitter_percent\x18\x12 \x01(\rR\x15intervalJitterPercent\x12M\n" +
	"\x13unhealthy_threshold\x18\x04 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x12unhealthyThreshold\x12I\n" +
	"\x11healthy_threshold\x18\x05 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x10healthyThreshold\x12E\n" +
	"\x10reuse_connection\x18\a \x01(\v2\x1a.google.protobuf.BoolValueR\x0freuseConnection\x12d\n" +
	"\x11http_health_check\x18\b \x01(\v26.solo.io.envoy.api.v2.core.HealthCheck.HttpHealthCheckH\x00R\x0fhttpHealthCheck\x12a\n" +
	"\x10tcp_health_check\x18\t \x01(\v25.solo.io.envoy.api.v2.core.HealthCheck.TcpHealthCheckH\x00R\x0etcpHealthCheck\x12d\n" +
	"\x11grpc_health_check\x18\v \x01(\v26.solo.io.envoy.api.v2.core.HealthCheck.GrpcHealthCheckH\x00R\x0fgrpcHealthCheck\x12j\n" +
	"\x13custom_health_check\x18\r \x01(\v28.solo.io.envoy.api.v2.core.HealthCheck.CustomHealthCheckH\x00R\x11customHealthCheck\x12S\n" +
	"\x13no_traffic_interval\x18\f \x01(\v2\x19.google.protobuf.DurationB\b\xfaB\x05\xaa\x01\x02*\x00R\x11noTrafficInterval\x12R\n" +
	"\x12unhealthy_interval\x18\x0e \x01(\v2\x19.google.protobuf.DurationB\b\xfaB\x05\xaa\x01\x02*\x00R\x11unhealthyInterval\x12[\n" +
	"\x17unhealthy_edge_interval\x18\x0f \x01(\v2\x19.google.protobuf.DurationB\b\xfaB\x05\xaa\x01\x02*\x00R\x15unhealthyEdgeInterval\x12W\n" +
	"\x15healthy_edge_interval\x18\x10 \x01(\v2\x19.google.protobuf.DurationB\b\xfaB\x05\xaa\x01\x02*\x00R\x13healthyEdgeInterval\x12$\n" +
	"\x0eevent_log_path\x18\x11 \x01(\tR\feventLogPath\x12F\n" +
	" always_log_health_check_failures\x18\x13 \x01(\bR\x1calwaysLogHealthCheckFailures\x1a8\n" +
	"\aPayload\x12\x1d\n" +
	"\x04text\x18\x01 \x01(\tB\a\xfaB\x04r\x02 \x01H\x00R\x04textB\x0e\n" +
	"\apayload\x12\x03\xf8B\x01\x1a\xa5\x04\n" +
	"\x0fHttpHealthCheck\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x1b\n" +
	"\x04path\x18\x02 \x01(\tB\a\xfaB\x04r\x02 \x01R\x04path\x12!\n" +
	"\fservice_name\x18\x05 \x01(\tR\vserviceName\x12l\n" +
	"\x16request_headers_to_add\x18\x06 \x03(\v2,.solo.io.envoy.api.v2.core.HeaderValueOptionB\t\xfaB\x06\x92\x01\x03\x10\xe8\aR\x13requestHeadersToAdd\x129\n" +
	"\x19request_headers_to_remove\x18\b \x03(\tR\x16requestHeadersToRemove\x12\x1b\n" +
	"\tuse_http2\x18\a \x01(\bR\buseHttp2\x12K\n" +
	"\x11expected_statuses\x18\t \x03(\v2\x1e.solo.io.envoy.type.Int64RangeR\x10expectedStatuses\x12f\n" +
	"\x13response_assertions\x18\n" +
	" \x01(\v25.advancedhttp.options.gloo.solo.io.ResponseAssertionsR\x12responseAssertions\x12C\n" +
	"\x06method\x18\v \x01(\x0e2+.solo.io.envoy.config.core.v3.RequestMethodR\x06method\x1a\x9e\x01\n" +
	"\x0eTcpHealthCheck\x12B\n" +
	"\x04send\x18\x01 \x01(\v2..solo.io.envoy.api.v2.core.HealthCheck.PayloadR\x04send\x12H\n" +
	"\areceive\x18\x02 \x03(\v2..solo.io.envoy.api.v2.core.HealthCheck.PayloadR\areceive\x1a$\n" +
	"\x10RedisHealthCheck\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x1a\xb6\x01\n" +
	"\x0fGrpcHealthCheck\x12!\n" +
	"\fservice_name\x18\x01 \x01(\tR\vserviceName\x12\x1c\n" +
	"\tauthority\x18\x02 \x01(\tR\tauthority\x12b\n" +
	"\x10initial_metadata\x18\x03 \x03(\v2,.solo.io.envoy.api.v2.core.HeaderValueOptionB\t\xfaB\x06\x92\x01\x03\x10\xe8\aR\x0finitialMetadata\x1a\xad\x01\n" +
	"\x11CustomHealthCheck\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02 \x01R\x04name\x121\n" +
	"\x06config\x18\x02 \x01(\v2\x17.google.protobuf.StructH\x00R\x06config\x129\n" +
	"\ftyped_config\x18\x03 \x01(\v2\x14.google.protobuf.AnyH\x00R\vtypedConfigB\r\n" +
	"\vconfig_typeB\x15\n" +
	"\x0ehealth_checker\x12\x03\xf8B\x01J\x04\b\n" +
	"\x10\vR\x12redis_health_check*`\n" +
	"\fHealthStatus\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aHEALTHY\x10\x01\x12\r\n" +
	"\tUNHEALTHY\x10\x02\x12\f\n" +
	"\bDRAINING\x10\x03\x12\v\n" +
	"\aTIMEOUT\x10\x04\x12\f\n" +
	"\bDEGRADED\x10\x05B\x97\x01\xb8\xf5\x04\x01\xc0\xf5\x04\x01\n" +
	"/io.envoyproxy.solo.io.solo.io.envoy.api.v2.coreB\x10HealthCheckProtoP\x01ZHgithub.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/api/v2/coreb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_goTypes = []any{
	(HealthStatus)(0),                        // 0: solo.io.envoy.api.v2.core.HealthStatus
	(*HealthCheck)(nil),                      // 1: solo.io.envoy.api.v2.core.HealthCheck
	(*HealthCheck_Payload)(nil),              // 2: solo.io.envoy.api.v2.core.HealthCheck.Payload
	(*HealthCheck_HttpHealthCheck)(nil),      // 3: solo.io.envoy.api.v2.core.HealthCheck.HttpHealthCheck
	(*HealthCheck_TcpHealthCheck)(nil),       // 4: solo.io.envoy.api.v2.core.HealthCheck.TcpHealthCheck
	(*HealthCheck_RedisHealthCheck)(nil),     // 5: solo.io.envoy.api.v2.core.HealthCheck.RedisHealthCheck
	(*HealthCheck_GrpcHealthCheck)(nil),      // 6: solo.io.envoy.api.v2.core.HealthCheck.GrpcHealthCheck
	(*HealthCheck_CustomHealthCheck)(nil),    // 7: solo.io.envoy.api.v2.core.HealthCheck.CustomHealthCheck
	(*durationpb.Duration)(nil),              // 8: google.protobuf.Duration
	(*wrapperspb.UInt32Value)(nil),           // 9: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),             // 10: google.protobuf.BoolValue
	(*core.HeaderValueOption)(nil),           // 11: solo.io.envoy.api.v2.core.HeaderValueOption
	(*_type.Int64Range)(nil),                 // 12: solo.io.envoy.type.Int64Range
	(*advanced_http.ResponseAssertions)(nil), // 13: advancedhttp.options.gloo.solo.io.ResponseAssertions
	(v3.RequestMethod)(0),                    // 14: solo.io.envoy.config.core.v3.RequestMethod
	(*structpb.Struct)(nil),                  // 15: google.protobuf.Struct
	(*anypb.Any)(nil),                        // 16: google.protobuf.Any
}
var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_depIdxs = []int32{
	8,  // 0: solo.io.envoy.api.v2.core.HealthCheck.timeout:type_name -> google.protobuf.Duration
	8,  // 1: solo.io.envoy.api.v2.core.HealthCheck.interval:type_name -> google.protobuf.Duration
	8,  // 2: solo.io.envoy.api.v2.core.HealthCheck.initial_jitter:type_name -> google.protobuf.Duration
	8,  // 3: solo.io.envoy.api.v2.core.HealthCheck.interval_jitter:type_name -> google.protobuf.Duration
	9,  // 4: solo.io.envoy.api.v2.core.HealthCheck.unhealthy_threshold:type_name -> google.protobuf.UInt32Value
	9,  // 5: solo.io.envoy.api.v2.core.HealthCheck.healthy_threshold:type_name -> google.protobuf.UInt32Value
	10, // 6: solo.io.envoy.api.v2.core.HealthCheck.reuse_connection:type_name -> google.protobuf.BoolValue
	3,  // 7: solo.io.envoy.api.v2.core.HealthCheck.http_health_check:type_name -> solo.io.envoy.api.v2.core.HealthCheck.HttpHealthCheck
	4,  // 8: solo.io.envoy.api.v2.core.HealthCheck.tcp_health_check:type_name -> solo.io.envoy.api.v2.core.HealthCheck.TcpHealthCheck
	6,  // 9: solo.io.envoy.api.v2.core.HealthCheck.grpc_health_check:type_name -> solo.io.envoy.api.v2.core.HealthCheck.GrpcHealthCheck
	7,  // 10: solo.io.envoy.api.v2.core.HealthCheck.custom_health_check:type_name -> solo.io.envoy.api.v2.core.HealthCheck.CustomHealthCheck
	8,  // 11: solo.io.envoy.api.v2.core.HealthCheck.no_traffic_interval:type_name -> google.protobuf.Duration
	8,  // 12: solo.io.envoy.api.v2.core.HealthCheck.unhealthy_interval:type_name -> google.protobuf.Duration
	8,  // 13: solo.io.envoy.api.v2.core.HealthCheck.unhealthy_edge_interval:type_name -> google.protobuf.Duration
	8,  // 14: solo.io.envoy.api.v2.core.HealthCheck.healthy_edge_interval:type_name -> google.protobuf.Duration
	11, // 15: solo.io.envoy.api.v2.core.HealthCheck.HttpHealthCheck.request_headers_to_add:type_name -> solo.io.envoy.api.v2.core.HeaderValueOption
	12, // 16: solo.io.envoy.api.v2.core.HealthCheck.HttpHealthCheck.expected_statuses:type_name -> solo.io.envoy.type.Int64Range
	13, // 17: solo.io.envoy.api.v2.core.HealthCheck.HttpHealthCheck.response_assertions:type_name -> advancedhttp.options.gloo.solo.io.ResponseAssertions
	14, // 18: solo.io.envoy.api.v2.core.HealthCheck.HttpHealthCheck.method:type_name -> solo.io.envoy.config.core.v3.RequestMethod
	2,  // 19: solo.io.envoy.api.v2.core.HealthCheck.TcpHealthCheck.send:type_name -> solo.io.envoy.api.v2.core.HealthCheck.Payload
	2,  // 20: solo.io.envoy.api.v2.core.HealthCheck.TcpHealthCheck.receive:type_name -> solo.io.envoy.api.v2.core.HealthCheck.Payload
	11, // 21: solo.io.envoy.api.v2.core.HealthCheck.GrpcHealthCheck.initial_metadata:type_name -> solo.io.envoy.api.v2.core.HeaderValueOption
	15, // 22: solo.io.envoy.api.v2.core.HealthCheck.CustomHealthCheck.config:type_name -> google.protobuf.Struct
	16, // 23: solo.io.envoy.api.v2.core.HealthCheck.CustomHealthCheck.typed_config:type_name -> google.protobuf.Any
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_init()
}
func file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[0].OneofWrappers = []any{
		(*HealthCheck_HttpHealthCheck_)(nil),
		(*HealthCheck_TcpHealthCheck_)(nil),
		(*HealthCheck_GrpcHealthCheck_)(nil),
		(*HealthCheck_CustomHealthCheck_)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[1].OneofWrappers = []any{
		(*HealthCheck_Payload_Text)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes[6].OneofWrappers = []any{
		(*HealthCheck_CustomHealthCheck_Config)(nil),
		(*HealthCheck_CustomHealthCheck_TypedConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_api_v2_core_health_check_proto_depIdxs = nil
}
