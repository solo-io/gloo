// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/waf/waf.proto

package waf

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	transformation_ee "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/transformation_ee"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuditLogging_AuditLogAction int32

const (
	// Never generate audit logs.
	AuditLogging_NEVER AuditLogging_AuditLogAction = 0
	// When set to RELEVANT_ONLY, this will have similar behavior to `SecAuditEngine RelevantOnly`.
	AuditLogging_RELEVANT_ONLY AuditLogging_AuditLogAction = 1
	// Always generate an audit log entry (as long as the filter is not disabled).
	AuditLogging_ALWAYS AuditLogging_AuditLogAction = 2
)

// Enum value maps for AuditLogging_AuditLogAction.
var (
	AuditLogging_AuditLogAction_name = map[int32]string{
		0: "NEVER",
		1: "RELEVANT_ONLY",
		2: "ALWAYS",
	}
	AuditLogging_AuditLogAction_value = map[string]int32{
		"NEVER":         0,
		"RELEVANT_ONLY": 1,
		"ALWAYS":        2,
	}
)

func (x AuditLogging_AuditLogAction) Enum() *AuditLogging_AuditLogAction {
	p := new(AuditLogging_AuditLogAction)
	*p = x
	return p
}

func (x AuditLogging_AuditLogAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditLogging_AuditLogAction) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_enumTypes[0].Descriptor()
}

func (AuditLogging_AuditLogAction) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_enumTypes[0]
}

func (x AuditLogging_AuditLogAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditLogging_AuditLogAction.Descriptor instead.
func (AuditLogging_AuditLogAction) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDescGZIP(), []int{0, 0}
}

type AuditLogging_AuditLogLocation int32

const (
	// Add the audit log to the filter state.
	// it will be under the key "io.solo.modsecurity.audit_log".
	// You can use this formatter in the access log:
	// %FILTER_STATE(io.solo.modsecurity.audit_log)%
	AuditLogging_FILTER_STATE AuditLogging_AuditLogLocation = 0
	// Add the audit log to the dynamic metadata.
	// it will be under the filter name "io.solo.filters.http.modsecurity". with "audit_log" as the
	// key. You can use this formatter in the access log:
	// %DYNAMIC_METADATA("io.solo.filters.http.modsecurity:audit_log")%
	AuditLogging_DYNAMIC_METADATA AuditLogging_AuditLogLocation = 1
)

// Enum value maps for AuditLogging_AuditLogLocation.
var (
	AuditLogging_AuditLogLocation_name = map[int32]string{
		0: "FILTER_STATE",
		1: "DYNAMIC_METADATA",
	}
	AuditLogging_AuditLogLocation_value = map[string]int32{
		"FILTER_STATE":     0,
		"DYNAMIC_METADATA": 1,
	}
)

func (x AuditLogging_AuditLogLocation) Enum() *AuditLogging_AuditLogLocation {
	p := new(AuditLogging_AuditLogLocation)
	*p = x
	return p
}

func (x AuditLogging_AuditLogLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditLogging_AuditLogLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_enumTypes[1].Descriptor()
}

func (AuditLogging_AuditLogLocation) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_enumTypes[1]
}

func (x AuditLogging_AuditLogLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditLogging_AuditLogLocation.Descriptor instead.
func (AuditLogging_AuditLogLocation) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDescGZIP(), []int{0, 1}
}

type AuditLogging struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Action        AuditLogging_AuditLogAction   `protobuf:"varint,1,opt,name=action,proto3,enum=envoy.config.filter.http.modsecurity.v2.AuditLogging_AuditLogAction" json:"action,omitempty"`
	Location      AuditLogging_AuditLogLocation `protobuf:"varint,2,opt,name=location,proto3,enum=envoy.config.filter.http.modsecurity.v2.AuditLogging_AuditLogLocation" json:"location,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditLogging) Reset() {
	*x = AuditLogging{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLogging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogging) ProtoMessage() {}

func (x *AuditLogging) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogging.ProtoReflect.Descriptor instead.
func (*AuditLogging) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDescGZIP(), []int{0}
}

func (x *AuditLogging) GetAction() AuditLogging_AuditLogAction {
	if x != nil {
		return x.Action
	}
	return AuditLogging_NEVER
}

func (x *AuditLogging) GetLocation() AuditLogging_AuditLogLocation {
	if x != nil {
		return x.Location
	}
	return AuditLogging_FILTER_STATE
}

type ModSecurity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disable all rules on the current route
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Global rule sets for the current http connection manager
	RuleSets []*RuleSet `protobuf:"bytes,2,rep,name=rule_sets,json=ruleSets,proto3" json:"rule_sets,omitempty"`
	// Custom message to display when an intervention occurs
	CustomInterventionMessage string `protobuf:"bytes,3,opt,name=custom_intervention_message,json=customInterventionMessage,proto3" json:"custom_intervention_message,omitempty"`
	// This instructs the filter what to do with the transaction's audit log.
	AuditLogging *AuditLogging `protobuf:"bytes,5,opt,name=audit_logging,json=auditLogging,proto3" json:"audit_logging,omitempty"`
	// If set, the body will not be buffered and fed to ModSecurity. Only the headers will.
	// This can help improve performance.
	RequestHeadersOnly  bool `protobuf:"varint,6,opt,name=request_headers_only,json=requestHeadersOnly,proto3" json:"request_headers_only,omitempty"`
	ResponseHeadersOnly bool `protobuf:"varint,7,opt,name=response_headers_only,json=responseHeadersOnly,proto3" json:"response_headers_only,omitempty"`
	// log in a format suited for the OWASP regression tests.
	// this format is a multiline log format, so it is disabled for regular use.
	// do not enable this in production!
	RegressionLogs    bool                                 `protobuf:"varint,4,opt,name=regression_logs,json=regressionLogs,proto3" json:"regression_logs,omitempty"`
	DlpTransformation *transformation_ee.DlpTransformation `protobuf:"bytes,8,opt,name=dlp_transformation,json=dlpTransformation,proto3" json:"dlp_transformation,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ModSecurity) Reset() {
	*x = ModSecurity{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModSecurity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModSecurity) ProtoMessage() {}

func (x *ModSecurity) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModSecurity.ProtoReflect.Descriptor instead.
func (*ModSecurity) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDescGZIP(), []int{1}
}

func (x *ModSecurity) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *ModSecurity) GetRuleSets() []*RuleSet {
	if x != nil {
		return x.RuleSets
	}
	return nil
}

func (x *ModSecurity) GetCustomInterventionMessage() string {
	if x != nil {
		return x.CustomInterventionMessage
	}
	return ""
}

func (x *ModSecurity) GetAuditLogging() *AuditLogging {
	if x != nil {
		return x.AuditLogging
	}
	return nil
}

func (x *ModSecurity) GetRequestHeadersOnly() bool {
	if x != nil {
		return x.RequestHeadersOnly
	}
	return false
}

func (x *ModSecurity) GetResponseHeadersOnly() bool {
	if x != nil {
		return x.ResponseHeadersOnly
	}
	return false
}

func (x *ModSecurity) GetRegressionLogs() bool {
	if x != nil {
		return x.RegressionLogs
	}
	return false
}

func (x *ModSecurity) GetDlpTransformation() *transformation_ee.DlpTransformation {
	if x != nil {
		return x.DlpTransformation
	}
	return nil
}

type RuleSet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// String of rules which are added directly
	RuleStr string `protobuf:"bytes,1,opt,name=rule_str,json=ruleStr,proto3" json:"rule_str,omitempty"`
	// Array of files with rules to include.
	// Any subsequent changes to the rules in these files are not automatically updated. To update rules from files, version and update the file name.
	// If you want dynamically updated rules, use the `configMapRuleSets` option instead.
	Files []string `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
	// A directory to include. all *.conf files in this directory will be
	// included. sub directories will NOT be checked.
	Directory     string `protobuf:"bytes,4,opt,name=directory,proto3" json:"directory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuleSet) Reset() {
	*x = RuleSet{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleSet) ProtoMessage() {}

func (x *RuleSet) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleSet.ProtoReflect.Descriptor instead.
func (*RuleSet) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDescGZIP(), []int{2}
}

func (x *RuleSet) GetRuleStr() string {
	if x != nil {
		return x.RuleStr
	}
	return ""
}

func (x *RuleSet) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *RuleSet) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

type ModSecurityPerRoute struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disable all rules on the current route
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Overwrite the global rules on this route
	RuleSets []*RuleSet `protobuf:"bytes,2,rep,name=rule_sets,json=ruleSets,proto3" json:"rule_sets,omitempty"`
	// Custom message to display when an intervention occurs
	CustomInterventionMessage string `protobuf:"bytes,3,opt,name=custom_intervention_message,json=customInterventionMessage,proto3" json:"custom_intervention_message,omitempty"`
	// This instructs the filter what to do with the transaction's audit log.
	AuditLogging *AuditLogging `protobuf:"bytes,5,opt,name=audit_logging,json=auditLogging,proto3" json:"audit_logging,omitempty"`
	// If set, the body will not be buffered and fed to ModSecurity. Only the headers will.
	// This can help improve performance.
	RequestHeadersOnly  bool                                 `protobuf:"varint,6,opt,name=request_headers_only,json=requestHeadersOnly,proto3" json:"request_headers_only,omitempty"`
	ResponseHeadersOnly bool                                 `protobuf:"varint,7,opt,name=response_headers_only,json=responseHeadersOnly,proto3" json:"response_headers_only,omitempty"`
	DlpTransformation   *transformation_ee.DlpTransformation `protobuf:"bytes,8,opt,name=dlp_transformation,json=dlpTransformation,proto3" json:"dlp_transformation,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ModSecurityPerRoute) Reset() {
	*x = ModSecurityPerRoute{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModSecurityPerRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModSecurityPerRoute) ProtoMessage() {}

func (x *ModSecurityPerRoute) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModSecurityPerRoute.ProtoReflect.Descriptor instead.
func (*ModSecurityPerRoute) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDescGZIP(), []int{3}
}

func (x *ModSecurityPerRoute) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *ModSecurityPerRoute) GetRuleSets() []*RuleSet {
	if x != nil {
		return x.RuleSets
	}
	return nil
}

func (x *ModSecurityPerRoute) GetCustomInterventionMessage() string {
	if x != nil {
		return x.CustomInterventionMessage
	}
	return ""
}

func (x *ModSecurityPerRoute) GetAuditLogging() *AuditLogging {
	if x != nil {
		return x.AuditLogging
	}
	return nil
}

func (x *ModSecurityPerRoute) GetRequestHeadersOnly() bool {
	if x != nil {
		return x.RequestHeadersOnly
	}
	return false
}

func (x *ModSecurityPerRoute) GetResponseHeadersOnly() bool {
	if x != nil {
		return x.ResponseHeadersOnly
	}
	return false
}

func (x *ModSecurityPerRoute) GetDlpTransformation() *transformation_ee.DlpTransformation {
	if x != nil {
		return x.DlpTransformation
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDesc = "" +
	"\n" +
	"Qgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/waf/waf.proto\x12'envoy.config.filter.http.modsecurity.v2\x1a\x12extproto/ext.proto\x1ajgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/transformation_ee/transformation.proto\"\xc8\x02\n" +
	"\fAuditLogging\x12\\\n" +
	"\x06action\x18\x01 \x01(\x0e2D.envoy.config.filter.http.modsecurity.v2.AuditLogging.AuditLogActionR\x06action\x12b\n" +
	"\blocation\x18\x02 \x01(\x0e2F.envoy.config.filter.http.modsecurity.v2.AuditLogging.AuditLogLocationR\blocation\":\n" +
	"\x0eAuditLogAction\x12\t\n" +
	"\x05NEVER\x10\x00\x12\x11\n" +
	"\rRELEVANT_ONLY\x10\x01\x12\n" +
	"\n" +
	"\x06ALWAYS\x10\x02\":\n" +
	"\x10AuditLogLocation\x12\x10\n" +
	"\fFILTER_STATE\x10\x00\x12\x14\n" +
	"\x10DYNAMIC_METADATA\x10\x01\"\x94\x04\n" +
	"\vModSecurity\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12M\n" +
	"\trule_sets\x18\x02 \x03(\v20.envoy.config.filter.http.modsecurity.v2.RuleSetR\bruleSets\x12>\n" +
	"\x1bcustom_intervention_message\x18\x03 \x01(\tR\x19customInterventionMessage\x12Z\n" +
	"\raudit_logging\x18\x05 \x01(\v25.envoy.config.filter.http.modsecurity.v2.AuditLoggingR\fauditLogging\x120\n" +
	"\x14request_headers_only\x18\x06 \x01(\bR\x12requestHeadersOnly\x122\n" +
	"\x15response_headers_only\x18\a \x01(\bR\x13responseHeadersOnly\x12'\n" +
	"\x0fregression_logs\x18\x04 \x01(\bR\x0eregressionLogs\x12o\n" +
	"\x12dlp_transformation\x18\b \x01(\v2@.envoy.config.filter.http.transformation_ee.v2.DlpTransformationR\x11dlpTransformation\"X\n" +
	"\aRuleSet\x12\x19\n" +
	"\brule_str\x18\x01 \x01(\tR\aruleStr\x12\x14\n" +
	"\x05files\x18\x03 \x03(\tR\x05files\x12\x1c\n" +
	"\tdirectory\x18\x04 \x01(\tR\tdirectory\"\xf3\x03\n" +
	"\x13ModSecurityPerRoute\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12M\n" +
	"\trule_sets\x18\x02 \x03(\v20.envoy.config.filter.http.modsecurity.v2.RuleSetR\bruleSets\x12>\n" +
	"\x1bcustom_intervention_message\x18\x03 \x01(\tR\x19customInterventionMessage\x12Z\n" +
	"\raudit_logging\x18\x05 \x01(\v25.envoy.config.filter.http.modsecurity.v2.AuditLoggingR\fauditLogging\x120\n" +
	"\x14request_headers_only\x18\x06 \x01(\bR\x12requestHeadersOnly\x122\n" +
	"\x15response_headers_only\x18\a \x01(\bR\x13responseHeadersOnly\x12o\n" +
	"\x12dlp_transformation\x18\b \x01(\v2@.envoy.config.filter.http.transformation_ee.v2.DlpTransformationR\x11dlpTransformationBY\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01ZKgithub.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/wafb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_goTypes = []any{
	(AuditLogging_AuditLogAction)(0),            // 0: envoy.config.filter.http.modsecurity.v2.AuditLogging.AuditLogAction
	(AuditLogging_AuditLogLocation)(0),          // 1: envoy.config.filter.http.modsecurity.v2.AuditLogging.AuditLogLocation
	(*AuditLogging)(nil),                        // 2: envoy.config.filter.http.modsecurity.v2.AuditLogging
	(*ModSecurity)(nil),                         // 3: envoy.config.filter.http.modsecurity.v2.ModSecurity
	(*RuleSet)(nil),                             // 4: envoy.config.filter.http.modsecurity.v2.RuleSet
	(*ModSecurityPerRoute)(nil),                 // 5: envoy.config.filter.http.modsecurity.v2.ModSecurityPerRoute
	(*transformation_ee.DlpTransformation)(nil), // 6: envoy.config.filter.http.transformation_ee.v2.DlpTransformation
}
var file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_depIdxs = []int32{
	0, // 0: envoy.config.filter.http.modsecurity.v2.AuditLogging.action:type_name -> envoy.config.filter.http.modsecurity.v2.AuditLogging.AuditLogAction
	1, // 1: envoy.config.filter.http.modsecurity.v2.AuditLogging.location:type_name -> envoy.config.filter.http.modsecurity.v2.AuditLogging.AuditLogLocation
	4, // 2: envoy.config.filter.http.modsecurity.v2.ModSecurity.rule_sets:type_name -> envoy.config.filter.http.modsecurity.v2.RuleSet
	2, // 3: envoy.config.filter.http.modsecurity.v2.ModSecurity.audit_logging:type_name -> envoy.config.filter.http.modsecurity.v2.AuditLogging
	6, // 4: envoy.config.filter.http.modsecurity.v2.ModSecurity.dlp_transformation:type_name -> envoy.config.filter.http.transformation_ee.v2.DlpTransformation
	4, // 5: envoy.config.filter.http.modsecurity.v2.ModSecurityPerRoute.rule_sets:type_name -> envoy.config.filter.http.modsecurity.v2.RuleSet
	2, // 6: envoy.config.filter.http.modsecurity.v2.ModSecurityPerRoute.audit_logging:type_name -> envoy.config.filter.http.modsecurity.v2.AuditLogging
	6, // 7: envoy.config.filter.http.modsecurity.v2.ModSecurityPerRoute.dlp_transformation:type_name -> envoy.config.filter.http.transformation_ee.v2.DlpTransformation
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_init()
}
func file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_external_envoy_extensions_waf_waf_proto_depIdxs = nil
}
