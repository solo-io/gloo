// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/grpc/validation/gloo_validation.proto

package validation

import (
	context "context"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListenerReport_Error_Type int32

const (
	ListenerReport_Error_NameNotUniqueError     ListenerReport_Error_Type = 0
	ListenerReport_Error_BindPortNotUniqueError ListenerReport_Error_Type = 1
	ListenerReport_Error_SSLConfigError         ListenerReport_Error_Type = 2
	ListenerReport_Error_ProcessingError        ListenerReport_Error_Type = 3
)

// Enum value maps for ListenerReport_Error_Type.
var (
	ListenerReport_Error_Type_name = map[int32]string{
		0: "NameNotUniqueError",
		1: "BindPortNotUniqueError",
		2: "SSLConfigError",
		3: "ProcessingError",
	}
	ListenerReport_Error_Type_value = map[string]int32{
		"NameNotUniqueError":     0,
		"BindPortNotUniqueError": 1,
		"SSLConfigError":         2,
		"ProcessingError":        3,
	}
)

func (x ListenerReport_Error_Type) Enum() *ListenerReport_Error_Type {
	p := new(ListenerReport_Error_Type)
	*p = x
	return p
}

func (x ListenerReport_Error_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListenerReport_Error_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[0].Descriptor()
}

func (ListenerReport_Error_Type) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[0]
}

func (x ListenerReport_Error_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListenerReport_Error_Type.Descriptor instead.
func (ListenerReport_Error_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{9, 0, 0}
}

type ListenerReport_Warning_Type int32

const (
	ListenerReport_Warning_SSLConfigWarning ListenerReport_Warning_Type = 0
)

// Enum value maps for ListenerReport_Warning_Type.
var (
	ListenerReport_Warning_Type_name = map[int32]string{
		0: "SSLConfigWarning",
	}
	ListenerReport_Warning_Type_value = map[string]int32{
		"SSLConfigWarning": 0,
	}
)

func (x ListenerReport_Warning_Type) Enum() *ListenerReport_Warning_Type {
	p := new(ListenerReport_Warning_Type)
	*p = x
	return p
}

func (x ListenerReport_Warning_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListenerReport_Warning_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[1].Descriptor()
}

func (ListenerReport_Warning_Type) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[1]
}

func (x ListenerReport_Warning_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListenerReport_Warning_Type.Descriptor instead.
func (ListenerReport_Warning_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{9, 1, 0}
}

type HttpListenerReport_Error_Type int32

const (
	HttpListenerReport_Error_ProcessingError HttpListenerReport_Error_Type = 0
)

// Enum value maps for HttpListenerReport_Error_Type.
var (
	HttpListenerReport_Error_Type_name = map[int32]string{
		0: "ProcessingError",
	}
	HttpListenerReport_Error_Type_value = map[string]int32{
		"ProcessingError": 0,
	}
)

func (x HttpListenerReport_Error_Type) Enum() *HttpListenerReport_Error_Type {
	p := new(HttpListenerReport_Error_Type)
	*p = x
	return p
}

func (x HttpListenerReport_Error_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpListenerReport_Error_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[2].Descriptor()
}

func (HttpListenerReport_Error_Type) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[2]
}

func (x HttpListenerReport_Error_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpListenerReport_Error_Type.Descriptor instead.
func (HttpListenerReport_Error_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{10, 0, 0}
}

type HttpListenerReport_Warning_Type int32

const (
	HttpListenerReport_Warning_UnknownWarning            HttpListenerReport_Warning_Type = 0
	HttpListenerReport_Warning_InvalidDestinationWarning HttpListenerReport_Warning_Type = 1
)

// Enum value maps for HttpListenerReport_Warning_Type.
var (
	HttpListenerReport_Warning_Type_name = map[int32]string{
		0: "UnknownWarning",
		1: "InvalidDestinationWarning",
	}
	HttpListenerReport_Warning_Type_value = map[string]int32{
		"UnknownWarning":            0,
		"InvalidDestinationWarning": 1,
	}
)

func (x HttpListenerReport_Warning_Type) Enum() *HttpListenerReport_Warning_Type {
	p := new(HttpListenerReport_Warning_Type)
	*p = x
	return p
}

func (x HttpListenerReport_Warning_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpListenerReport_Warning_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[3].Descriptor()
}

func (HttpListenerReport_Warning_Type) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[3]
}

func (x HttpListenerReport_Warning_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpListenerReport_Warning_Type.Descriptor instead.
func (HttpListenerReport_Warning_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{10, 1, 0}
}

type VirtualHostReport_Error_Type int32

const (
	VirtualHostReport_Error_NameNotUniqueError    VirtualHostReport_Error_Type = 0
	VirtualHostReport_Error_DomainsNotUniqueError VirtualHostReport_Error_Type = 1
	VirtualHostReport_Error_ProcessingError       VirtualHostReport_Error_Type = 2
	VirtualHostReport_Error_EmptyDomainError      VirtualHostReport_Error_Type = 3
)

// Enum value maps for VirtualHostReport_Error_Type.
var (
	VirtualHostReport_Error_Type_name = map[int32]string{
		0: "NameNotUniqueError",
		1: "DomainsNotUniqueError",
		2: "ProcessingError",
		3: "EmptyDomainError",
	}
	VirtualHostReport_Error_Type_value = map[string]int32{
		"NameNotUniqueError":    0,
		"DomainsNotUniqueError": 1,
		"ProcessingError":       2,
		"EmptyDomainError":      3,
	}
)

func (x VirtualHostReport_Error_Type) Enum() *VirtualHostReport_Error_Type {
	p := new(VirtualHostReport_Error_Type)
	*p = x
	return p
}

func (x VirtualHostReport_Error_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualHostReport_Error_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[4].Descriptor()
}

func (VirtualHostReport_Error_Type) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[4]
}

func (x VirtualHostReport_Error_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualHostReport_Error_Type.Descriptor instead.
func (VirtualHostReport_Error_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{11, 0, 0}
}

type RouteReport_Error_Type int32

const (
	RouteReport_Error_InvalidMatcherError RouteReport_Error_Type = 0
	RouteReport_Error_ProcessingError     RouteReport_Error_Type = 1
)

// Enum value maps for RouteReport_Error_Type.
var (
	RouteReport_Error_Type_name = map[int32]string{
		0: "InvalidMatcherError",
		1: "ProcessingError",
	}
	RouteReport_Error_Type_value = map[string]int32{
		"InvalidMatcherError": 0,
		"ProcessingError":     1,
	}
)

func (x RouteReport_Error_Type) Enum() *RouteReport_Error_Type {
	p := new(RouteReport_Error_Type)
	*p = x
	return p
}

func (x RouteReport_Error_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteReport_Error_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[5].Descriptor()
}

func (RouteReport_Error_Type) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[5]
}

func (x RouteReport_Error_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteReport_Error_Type.Descriptor instead.
func (RouteReport_Error_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{12, 0, 0}
}

type RouteReport_Warning_Type int32

const (
	RouteReport_Warning_InvalidDestinationWarning RouteReport_Warning_Type = 0
)

// Enum value maps for RouteReport_Warning_Type.
var (
	RouteReport_Warning_Type_name = map[int32]string{
		0: "InvalidDestinationWarning",
	}
	RouteReport_Warning_Type_value = map[string]int32{
		"InvalidDestinationWarning": 0,
	}
)

func (x RouteReport_Warning_Type) Enum() *RouteReport_Warning_Type {
	p := new(RouteReport_Warning_Type)
	*p = x
	return p
}

func (x RouteReport_Warning_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteReport_Warning_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[6].Descriptor()
}

func (RouteReport_Warning_Type) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[6]
}

func (x RouteReport_Warning_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteReport_Warning_Type.Descriptor instead.
func (RouteReport_Warning_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{12, 1, 0}
}

type TcpListenerReport_Error_Type int32

const (
	TcpListenerReport_Error_NameNotUniqueError     TcpListenerReport_Error_Type = 0
	TcpListenerReport_Error_BindPortNotUniqueError TcpListenerReport_Error_Type = 1
	TcpListenerReport_Error_SSLConfigError         TcpListenerReport_Error_Type = 2
	TcpListenerReport_Error_ProcessingError        TcpListenerReport_Error_Type = 3
)

// Enum value maps for TcpListenerReport_Error_Type.
var (
	TcpListenerReport_Error_Type_name = map[int32]string{
		0: "NameNotUniqueError",
		1: "BindPortNotUniqueError",
		2: "SSLConfigError",
		3: "ProcessingError",
	}
	TcpListenerReport_Error_Type_value = map[string]int32{
		"NameNotUniqueError":     0,
		"BindPortNotUniqueError": 1,
		"SSLConfigError":         2,
		"ProcessingError":        3,
	}
)

func (x TcpListenerReport_Error_Type) Enum() *TcpListenerReport_Error_Type {
	p := new(TcpListenerReport_Error_Type)
	*p = x
	return p
}

func (x TcpListenerReport_Error_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TcpListenerReport_Error_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[7].Descriptor()
}

func (TcpListenerReport_Error_Type) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[7]
}

func (x TcpListenerReport_Error_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TcpListenerReport_Error_Type.Descriptor instead.
func (TcpListenerReport_Error_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{13, 0, 0}
}

type TcpListenerReport_Warning_Type int32

const (
	TcpListenerReport_Warning_UnknownWarning            TcpListenerReport_Warning_Type = 0
	TcpListenerReport_Warning_InvalidDestinationWarning TcpListenerReport_Warning_Type = 1
)

// Enum value maps for TcpListenerReport_Warning_Type.
var (
	TcpListenerReport_Warning_Type_name = map[int32]string{
		0: "UnknownWarning",
		1: "InvalidDestinationWarning",
	}
	TcpListenerReport_Warning_Type_value = map[string]int32{
		"UnknownWarning":            0,
		"InvalidDestinationWarning": 1,
	}
)

func (x TcpListenerReport_Warning_Type) Enum() *TcpListenerReport_Warning_Type {
	p := new(TcpListenerReport_Warning_Type)
	*p = x
	return p
}

func (x TcpListenerReport_Warning_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TcpListenerReport_Warning_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[8].Descriptor()
}

func (TcpListenerReport_Warning_Type) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[8]
}

func (x TcpListenerReport_Warning_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TcpListenerReport_Warning_Type.Descriptor instead.
func (TcpListenerReport_Warning_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{13, 1, 0}
}

type TcpHostReport_Error_Type int32

const (
	TcpHostReport_Error_NameNotUniqueError TcpHostReport_Error_Type = 0
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/grpc/validation/gloo_validation.proto.
	TcpHostReport_Error_InvalidDestinationError TcpHostReport_Error_Type = 1
	TcpHostReport_Error_ProcessingError         TcpHostReport_Error_Type = 2
)

// Enum value maps for TcpHostReport_Error_Type.
var (
	TcpHostReport_Error_Type_name = map[int32]string{
		0: "NameNotUniqueError",
		1: "InvalidDestinationError",
		2: "ProcessingError",
	}
	TcpHostReport_Error_Type_value = map[string]int32{
		"NameNotUniqueError":      0,
		"InvalidDestinationError": 1,
		"ProcessingError":         2,
	}
)

func (x TcpHostReport_Error_Type) Enum() *TcpHostReport_Error_Type {
	p := new(TcpHostReport_Error_Type)
	*p = x
	return p
}

func (x TcpHostReport_Error_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TcpHostReport_Error_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[9].Descriptor()
}

func (TcpHostReport_Error_Type) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[9]
}

func (x TcpHostReport_Error_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TcpHostReport_Error_Type.Descriptor instead.
func (TcpHostReport_Error_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{14, 0, 0}
}

type TcpHostReport_Warning_Type int32

const (
	TcpHostReport_Warning_UnknownWarning            TcpHostReport_Warning_Type = 0
	TcpHostReport_Warning_InvalidDestinationWarning TcpHostReport_Warning_Type = 1
)

// Enum value maps for TcpHostReport_Warning_Type.
var (
	TcpHostReport_Warning_Type_name = map[int32]string{
		0: "UnknownWarning",
		1: "InvalidDestinationWarning",
	}
	TcpHostReport_Warning_Type_value = map[string]int32{
		"UnknownWarning":            0,
		"InvalidDestinationWarning": 1,
	}
)

func (x TcpHostReport_Warning_Type) Enum() *TcpHostReport_Warning_Type {
	p := new(TcpHostReport_Warning_Type)
	*p = x
	return p
}

func (x TcpHostReport_Warning_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TcpHostReport_Warning_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[10].Descriptor()
}

func (TcpHostReport_Warning_Type) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes[10]
}

func (x TcpHostReport_Warning_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TcpHostReport_Warning_Type.Descriptor instead.
func (TcpHostReport_Warning_Type) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{14, 1, 0}
}

type GlooValidationServiceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. If a proxy is provided in the request, the response will contain only the report for that proxy.
	// If no proxy is provided, the response will contain a report for each proxy in the Gloo API snapshot.
	Proxy *v1.Proxy `protobuf:"bytes,1,opt,name=proxy,proto3" json:"proxy,omitempty"`
	// Each validation request can either be a create/modify request or a delete request for one or more resources.
	// For deletions, we pass in the resource refs rather than the full resources.
	//
	// Types that are valid to be assigned to Resources:
	//
	//	*GlooValidationServiceRequest_ModifiedResources
	//	*GlooValidationServiceRequest_DeletedResources
	Resources     isGlooValidationServiceRequest_Resources `protobuf_oneof:"resources"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlooValidationServiceRequest) Reset() {
	*x = GlooValidationServiceRequest{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlooValidationServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlooValidationServiceRequest) ProtoMessage() {}

func (x *GlooValidationServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlooValidationServiceRequest.ProtoReflect.Descriptor instead.
func (*GlooValidationServiceRequest) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{0}
}

func (x *GlooValidationServiceRequest) GetProxy() *v1.Proxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *GlooValidationServiceRequest) GetResources() isGlooValidationServiceRequest_Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *GlooValidationServiceRequest) GetModifiedResources() *ModifiedResources {
	if x != nil {
		if x, ok := x.Resources.(*GlooValidationServiceRequest_ModifiedResources); ok {
			return x.ModifiedResources
		}
	}
	return nil
}

func (x *GlooValidationServiceRequest) GetDeletedResources() *DeletedResources {
	if x != nil {
		if x, ok := x.Resources.(*GlooValidationServiceRequest_DeletedResources); ok {
			return x.DeletedResources
		}
	}
	return nil
}

type isGlooValidationServiceRequest_Resources interface {
	isGlooValidationServiceRequest_Resources()
}

type GlooValidationServiceRequest_ModifiedResources struct {
	// Resources to be created or modified.
	ModifiedResources *ModifiedResources `protobuf:"bytes,2,opt,name=modified_resources,json=modifiedResources,proto3,oneof"`
}

type GlooValidationServiceRequest_DeletedResources struct {
	// Resources to be deleted.
	DeletedResources *DeletedResources `protobuf:"bytes,3,opt,name=deleted_resources,json=deletedResources,proto3,oneof"`
}

func (*GlooValidationServiceRequest_ModifiedResources) isGlooValidationServiceRequest_Resources() {}

func (*GlooValidationServiceRequest_DeletedResources) isGlooValidationServiceRequest_Resources() {}

type GlooValidationServiceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This list contains a validation report for each proxy that was translated and validated with the proposed
	// Gloo API snapshot.
	ValidationReports []*ValidationReport `protobuf:"bytes,1,rep,name=validation_reports,json=validationReports,proto3" json:"validation_reports,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GlooValidationServiceResponse) Reset() {
	*x = GlooValidationServiceResponse{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlooValidationServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlooValidationServiceResponse) ProtoMessage() {}

func (x *GlooValidationServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlooValidationServiceResponse.ProtoReflect.Descriptor instead.
func (*GlooValidationServiceResponse) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{1}
}

func (x *GlooValidationServiceResponse) GetValidationReports() []*ValidationReport {
	if x != nil {
		return x.ValidationReports
	}
	return nil
}

type ModifiedResources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional, a list of the upstreams to create or modify.
	Upstreams     []*v1.Upstream `protobuf:"bytes,1,rep,name=upstreams,proto3" json:"upstreams,omitempty"` // TODO when we support other resource types, add them here
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifiedResources) Reset() {
	*x = ModifiedResources{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifiedResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifiedResources) ProtoMessage() {}

func (x *ModifiedResources) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifiedResources.ProtoReflect.Descriptor instead.
func (*ModifiedResources) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{2}
}

func (x *ModifiedResources) GetUpstreams() []*v1.Upstream {
	if x != nil {
		return x.Upstreams
	}
	return nil
}

type DeletedResources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional, a list of the upstreams to delete.
	UpstreamRefs []*core.ResourceRef `protobuf:"bytes,1,rep,name=upstream_refs,json=upstreamRefs,proto3" json:"upstream_refs,omitempty"`
	// Optional, a list of the secrets to delete.
	SecretRefs    []*core.ResourceRef `protobuf:"bytes,2,rep,name=secret_refs,json=secretRefs,proto3" json:"secret_refs,omitempty"` // TODO when we support other resource types, add them here
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletedResources) Reset() {
	*x = DeletedResources{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletedResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedResources) ProtoMessage() {}

func (x *DeletedResources) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedResources.ProtoReflect.Descriptor instead.
func (*DeletedResources) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{3}
}

func (x *DeletedResources) GetUpstreamRefs() []*core.ResourceRef {
	if x != nil {
		return x.UpstreamRefs
	}
	return nil
}

func (x *DeletedResources) GetSecretRefs() []*core.ResourceRef {
	if x != nil {
		return x.SecretRefs
	}
	return nil
}

// A validation report represents the warnings and errors that produced during
// a single translation loop of a proxy.
type ValidationReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The report for this proxy, including any warnings or errors in its sub-resources.
	ProxyReport *ProxyReport `protobuf:"bytes,1,opt,name=proxy_report,json=proxyReport,proto3" json:"proxy_report,omitempty"`
	// The reports for all upstreams that were translated with this proxy.
	UpstreamReports []*ResourceReport `protobuf:"bytes,2,rep,name=upstream_reports,json=upstreamReports,proto3" json:"upstream_reports,omitempty"`
	// The proxy for this translation loop.
	Proxy         *v1.Proxy `protobuf:"bytes,3,opt,name=proxy,proto3" json:"proxy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationReport) Reset() {
	*x = ValidationReport{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationReport) ProtoMessage() {}

func (x *ValidationReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationReport.ProtoReflect.Descriptor instead.
func (*ValidationReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{4}
}

func (x *ValidationReport) GetProxyReport() *ProxyReport {
	if x != nil {
		return x.ProxyReport
	}
	return nil
}

func (x *ValidationReport) GetUpstreamReports() []*ResourceReport {
	if x != nil {
		return x.UpstreamReports
	}
	return nil
}

func (x *ValidationReport) GetProxy() *v1.Proxy {
	if x != nil {
		return x.Proxy
	}
	return nil
}

type ResourceReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A way to refer to resources in different namespaces by including the
	// name and namespace of the resource in this `resourceRef`.
	ResourceRef *core.ResourceRef `protobuf:"bytes,1,opt,name=resource_ref,json=resourceRef,proto3" json:"resource_ref,omitempty"`
	// The warnings that are returned for the resource. Warnings do not
	// necessarily prevent an operation from happening, but might require action.
	Warnings []string `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// The errors that are returned for the resource. You cannot modify the
	// resource until the errors are resolved. For help troubleshooting, see the
	// [Debug guide]({{< versioned_link_path fromRoot="/operations/debugging_gloo/" >}}).
	Errors        []string `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceReport) Reset() {
	*x = ResourceReport{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceReport) ProtoMessage() {}

func (x *ResourceReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceReport.ProtoReflect.Descriptor instead.
func (*ResourceReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceReport) GetResourceRef() *core.ResourceRef {
	if x != nil {
		return x.ResourceRef
	}
	return nil
}

func (x *ResourceReport) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *ResourceReport) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type NotifyOnResyncRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyOnResyncRequest) Reset() {
	*x = NotifyOnResyncRequest{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyOnResyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyOnResyncRequest) ProtoMessage() {}

func (x *NotifyOnResyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyOnResyncRequest.ProtoReflect.Descriptor instead.
func (*NotifyOnResyncRequest) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{6}
}

type NotifyOnResyncResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotifyOnResyncResponse) Reset() {
	*x = NotifyOnResyncResponse{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotifyOnResyncResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyOnResyncResponse) ProtoMessage() {}

func (x *NotifyOnResyncResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyOnResyncResponse.ProtoReflect.Descriptor instead.
func (*NotifyOnResyncResponse) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{7}
}

// The Proxy Report should contain one report for each sub-resource of the Proxy
// E.g., each listener will have a corresponding report. Within each listener report is
// a route report corresponding to each route on the listener.
//
// If the report contains no errors, the (sub-)resource is valid.
type ProxyReport struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ListenerReports []*ListenerReport      `protobuf:"bytes,1,rep,name=listener_reports,json=listenerReports,proto3" json:"listener_reports,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ProxyReport) Reset() {
	*x = ProxyReport{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProxyReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyReport) ProtoMessage() {}

func (x *ProxyReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyReport.ProtoReflect.Descriptor instead.
func (*ProxyReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{8}
}

func (x *ProxyReport) GetListenerReports() []*ListenerReport {
	if x != nil {
		return x.ListenerReports
	}
	return nil
}

type ListenerReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// errors on top-level config of the listener
	Errors []*ListenerReport_Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// warnings on the top-levelconfig of the listener
	Warnings []*ListenerReport_Warning `protobuf:"bytes,7,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// Types that are valid to be assigned to ListenerTypeReport:
	//
	//	*ListenerReport_HttpListenerReport
	//	*ListenerReport_TcpListenerReport
	//	*ListenerReport_HybridListenerReport
	//	*ListenerReport_AggregateListenerReport
	ListenerTypeReport isListenerReport_ListenerTypeReport `protobuf_oneof:"listener_type_report"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListenerReport) Reset() {
	*x = ListenerReport{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerReport) ProtoMessage() {}

func (x *ListenerReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerReport.ProtoReflect.Descriptor instead.
func (*ListenerReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{9}
}

func (x *ListenerReport) GetErrors() []*ListenerReport_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ListenerReport) GetWarnings() []*ListenerReport_Warning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *ListenerReport) GetListenerTypeReport() isListenerReport_ListenerTypeReport {
	if x != nil {
		return x.ListenerTypeReport
	}
	return nil
}

func (x *ListenerReport) GetHttpListenerReport() *HttpListenerReport {
	if x != nil {
		if x, ok := x.ListenerTypeReport.(*ListenerReport_HttpListenerReport); ok {
			return x.HttpListenerReport
		}
	}
	return nil
}

func (x *ListenerReport) GetTcpListenerReport() *TcpListenerReport {
	if x != nil {
		if x, ok := x.ListenerTypeReport.(*ListenerReport_TcpListenerReport); ok {
			return x.TcpListenerReport
		}
	}
	return nil
}

func (x *ListenerReport) GetHybridListenerReport() *HybridListenerReport {
	if x != nil {
		if x, ok := x.ListenerTypeReport.(*ListenerReport_HybridListenerReport); ok {
			return x.HybridListenerReport
		}
	}
	return nil
}

func (x *ListenerReport) GetAggregateListenerReport() *AggregateListenerReport {
	if x != nil {
		if x, ok := x.ListenerTypeReport.(*ListenerReport_AggregateListenerReport); ok {
			return x.AggregateListenerReport
		}
	}
	return nil
}

type isListenerReport_ListenerTypeReport interface {
	isListenerReport_ListenerTypeReport()
}

type ListenerReport_HttpListenerReport struct {
	// report for the http listener
	HttpListenerReport *HttpListenerReport `protobuf:"bytes,3,opt,name=http_listener_report,json=httpListenerReport,proto3,oneof"`
}

type ListenerReport_TcpListenerReport struct {
	// report for the tcp listener
	TcpListenerReport *TcpListenerReport `protobuf:"bytes,4,opt,name=tcp_listener_report,json=tcpListenerReport,proto3,oneof"`
}

type ListenerReport_HybridListenerReport struct {
	// report for the hybrid listener
	HybridListenerReport *HybridListenerReport `protobuf:"bytes,5,opt,name=hybrid_listener_report,json=hybridListenerReport,proto3,oneof"`
}

type ListenerReport_AggregateListenerReport struct {
	// report for the aggregate listener
	AggregateListenerReport *AggregateListenerReport `protobuf:"bytes,6,opt,name=aggregate_listener_report,json=aggregateListenerReport,proto3,oneof"`
}

func (*ListenerReport_HttpListenerReport) isListenerReport_ListenerTypeReport() {}

func (*ListenerReport_TcpListenerReport) isListenerReport_ListenerTypeReport() {}

func (*ListenerReport_HybridListenerReport) isListenerReport_ListenerTypeReport() {}

func (*ListenerReport_AggregateListenerReport) isListenerReport_ListenerTypeReport() {}

type HttpListenerReport struct {
	state  protoimpl.MessageState      `protogen:"open.v1"`
	Errors []*HttpListenerReport_Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	// report for nested virtual hosts
	VirtualHostReports []*VirtualHostReport `protobuf:"bytes,2,rep,name=virtual_host_reports,json=virtualHostReports,proto3" json:"virtual_host_reports,omitempty"`
	// warnings on the config of listener
	Warnings      []*HttpListenerReport_Warning `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpListenerReport) Reset() {
	*x = HttpListenerReport{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpListenerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpListenerReport) ProtoMessage() {}

func (x *HttpListenerReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpListenerReport.ProtoReflect.Descriptor instead.
func (*HttpListenerReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{10}
}

func (x *HttpListenerReport) GetErrors() []*HttpListenerReport_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *HttpListenerReport) GetVirtualHostReports() []*VirtualHostReport {
	if x != nil {
		return x.VirtualHostReports
	}
	return nil
}

func (x *HttpListenerReport) GetWarnings() []*HttpListenerReport_Warning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type VirtualHostReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// errors on top-level config of the virtual host
	Errors        []*VirtualHostReport_Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	RouteReports  []*RouteReport             `protobuf:"bytes,2,rep,name=route_reports,json=routeReports,proto3" json:"route_reports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VirtualHostReport) Reset() {
	*x = VirtualHostReport{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualHostReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualHostReport) ProtoMessage() {}

func (x *VirtualHostReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualHostReport.ProtoReflect.Descriptor instead.
func (*VirtualHostReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{11}
}

func (x *VirtualHostReport) GetErrors() []*VirtualHostReport_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *VirtualHostReport) GetRouteReports() []*RouteReport {
	if x != nil {
		return x.RouteReports
	}
	return nil
}

type RouteReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// errors on the config of the route
	Errors []*RouteReport_Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	// warnings on the config of the route
	Warnings      []*RouteReport_Warning `protobuf:"bytes,2,rep,name=warnings,proto3" json:"warnings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteReport) Reset() {
	*x = RouteReport{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteReport) ProtoMessage() {}

func (x *RouteReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteReport.ProtoReflect.Descriptor instead.
func (*RouteReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{12}
}

func (x *RouteReport) GetErrors() []*RouteReport_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *RouteReport) GetWarnings() []*RouteReport_Warning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type TcpListenerReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// errors on top-level config of the listener
	Errors         []*TcpListenerReport_Error `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	TcpHostReports []*TcpHostReport           `protobuf:"bytes,2,rep,name=tcp_host_reports,json=tcpHostReports,proto3" json:"tcp_host_reports,omitempty"`
	// warnings on the config of listener
	Warnings      []*TcpListenerReport_Warning `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpListenerReport) Reset() {
	*x = TcpListenerReport{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpListenerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpListenerReport) ProtoMessage() {}

func (x *TcpListenerReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpListenerReport.ProtoReflect.Descriptor instead.
func (*TcpListenerReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{13}
}

func (x *TcpListenerReport) GetErrors() []*TcpListenerReport_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *TcpListenerReport) GetTcpHostReports() []*TcpHostReport {
	if x != nil {
		return x.TcpHostReports
	}
	return nil
}

func (x *TcpListenerReport) GetWarnings() []*TcpListenerReport_Warning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type TcpHostReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// errors on the tcp host
	Errors []*TcpHostReport_Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	// warnings on the config of the tcp host
	Warnings      []*TcpHostReport_Warning `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpHostReport) Reset() {
	*x = TcpHostReport{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpHostReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpHostReport) ProtoMessage() {}

func (x *TcpHostReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpHostReport.ProtoReflect.Descriptor instead.
func (*TcpHostReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{14}
}

func (x *TcpHostReport) GetErrors() []*TcpHostReport_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *TcpHostReport) GetWarnings() []*TcpHostReport_Warning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type HybridListenerReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// map key should uniquely identify MatchedListenerReport by matcher
	MatchedListenerReports map[string]*MatchedListenerReport `protobuf:"bytes,1,rep,name=matched_listener_reports,json=matchedListenerReports,proto3" json:"matched_listener_reports,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *HybridListenerReport) Reset() {
	*x = HybridListenerReport{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridListenerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridListenerReport) ProtoMessage() {}

func (x *HybridListenerReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridListenerReport.ProtoReflect.Descriptor instead.
func (*HybridListenerReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{15}
}

func (x *HybridListenerReport) GetMatchedListenerReports() map[string]*MatchedListenerReport {
	if x != nil {
		return x.MatchedListenerReports
	}
	return nil
}

type MatchedListenerReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ListenerReportType:
	//
	//	*MatchedListenerReport_HttpListenerReport
	//	*MatchedListenerReport_TcpListenerReport
	ListenerReportType isMatchedListenerReport_ListenerReportType `protobuf_oneof:"ListenerReportType"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MatchedListenerReport) Reset() {
	*x = MatchedListenerReport{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchedListenerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedListenerReport) ProtoMessage() {}

func (x *MatchedListenerReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedListenerReport.ProtoReflect.Descriptor instead.
func (*MatchedListenerReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{16}
}

func (x *MatchedListenerReport) GetListenerReportType() isMatchedListenerReport_ListenerReportType {
	if x != nil {
		return x.ListenerReportType
	}
	return nil
}

func (x *MatchedListenerReport) GetHttpListenerReport() *HttpListenerReport {
	if x != nil {
		if x, ok := x.ListenerReportType.(*MatchedListenerReport_HttpListenerReport); ok {
			return x.HttpListenerReport
		}
	}
	return nil
}

func (x *MatchedListenerReport) GetTcpListenerReport() *TcpListenerReport {
	if x != nil {
		if x, ok := x.ListenerReportType.(*MatchedListenerReport_TcpListenerReport); ok {
			return x.TcpListenerReport
		}
	}
	return nil
}

type isMatchedListenerReport_ListenerReportType interface {
	isMatchedListenerReport_ListenerReportType()
}

type MatchedListenerReport_HttpListenerReport struct {
	HttpListenerReport *HttpListenerReport `protobuf:"bytes,1,opt,name=http_listener_report,json=httpListenerReport,proto3,oneof"`
}

type MatchedListenerReport_TcpListenerReport struct {
	TcpListenerReport *TcpListenerReport `protobuf:"bytes,2,opt,name=tcp_listener_report,json=tcpListenerReport,proto3,oneof"`
}

func (*MatchedListenerReport_HttpListenerReport) isMatchedListenerReport_ListenerReportType() {}

func (*MatchedListenerReport_TcpListenerReport) isMatchedListenerReport_ListenerReportType() {}

// the report for an AggregateListener
type AggregateListenerReport struct {
	state               protoimpl.MessageState         `protogen:"open.v1"`
	HttpListenerReports map[string]*HttpListenerReport `protobuf:"bytes,1,rep,name=http_listener_reports,json=httpListenerReports,proto3" json:"http_listener_reports,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TcpListenerReports  map[string]*TcpListenerReport  `protobuf:"bytes,2,rep,name=tcp_listener_reports,json=tcpListenerReports,proto3" json:"tcp_listener_reports,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AggregateListenerReport) Reset() {
	*x = AggregateListenerReport{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateListenerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateListenerReport) ProtoMessage() {}

func (x *AggregateListenerReport) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateListenerReport.ProtoReflect.Descriptor instead.
func (*AggregateListenerReport) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{17}
}

func (x *AggregateListenerReport) GetHttpListenerReports() map[string]*HttpListenerReport {
	if x != nil {
		return x.HttpListenerReports
	}
	return nil
}

func (x *AggregateListenerReport) GetTcpListenerReports() map[string]*TcpListenerReport {
	if x != nil {
		return x.TcpListenerReports
	}
	return nil
}

// error types for top-level listener config
type ListenerReport_Error struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of the error
	Type ListenerReport_Error_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gloo.solo.io.ListenerReport_Error_Type" json:"type,omitempty"`
	// any extra info as a string
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Source metadata for the ListenerReport, can be used by external components to associate
	// sources with the ListenerError
	Metadata      *v1.SourceMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenerReport_Error) Reset() {
	*x = ListenerReport_Error{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerReport_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerReport_Error) ProtoMessage() {}

func (x *ListenerReport_Error) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerReport_Error.ProtoReflect.Descriptor instead.
func (*ListenerReport_Error) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListenerReport_Error) GetType() ListenerReport_Error_Type {
	if x != nil {
		return x.Type
	}
	return ListenerReport_Error_NameNotUniqueError
}

func (x *ListenerReport_Error) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ListenerReport_Error) GetMetadata() *v1.SourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// warning types for the given listener config
type ListenerReport_Warning struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of the error
	Type ListenerReport_Warning_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gloo.solo.io.ListenerReport_Warning_Type" json:"type,omitempty"`
	// any extra info as a string
	Reason        string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListenerReport_Warning) Reset() {
	*x = ListenerReport_Warning{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerReport_Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerReport_Warning) ProtoMessage() {}

func (x *ListenerReport_Warning) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerReport_Warning.ProtoReflect.Descriptor instead.
func (*ListenerReport_Warning) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{9, 1}
}

func (x *ListenerReport_Warning) GetType() ListenerReport_Warning_Type {
	if x != nil {
		return x.Type
	}
	return ListenerReport_Warning_SSLConfigWarning
}

func (x *ListenerReport_Warning) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// error types for top-level http listener config
type HttpListenerReport_Error struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of the error
	Type HttpListenerReport_Error_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gloo.solo.io.HttpListenerReport_Error_Type" json:"type,omitempty"`
	// any extra info as a string
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Source metadata for the HttpListenerReport, can be used by external components to associate sources with the HttpListenerError
	Metadata      *v1.SourceMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpListenerReport_Error) Reset() {
	*x = HttpListenerReport_Error{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpListenerReport_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpListenerReport_Error) ProtoMessage() {}

func (x *HttpListenerReport_Error) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpListenerReport_Error.ProtoReflect.Descriptor instead.
func (*HttpListenerReport_Error) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{10, 0}
}

func (x *HttpListenerReport_Error) GetType() HttpListenerReport_Error_Type {
	if x != nil {
		return x.Type
	}
	return HttpListenerReport_Error_ProcessingError
}

func (x *HttpListenerReport_Error) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *HttpListenerReport_Error) GetMetadata() *v1.SourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// warning types for the given listener
type HttpListenerReport_Warning struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of the warning
	Type HttpListenerReport_Warning_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gloo.solo.io.HttpListenerReport_Warning_Type" json:"type,omitempty"`
	// any extra info as a string
	Reason        string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpListenerReport_Warning) Reset() {
	*x = HttpListenerReport_Warning{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpListenerReport_Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpListenerReport_Warning) ProtoMessage() {}

func (x *HttpListenerReport_Warning) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpListenerReport_Warning.ProtoReflect.Descriptor instead.
func (*HttpListenerReport_Warning) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{10, 1}
}

func (x *HttpListenerReport_Warning) GetType() HttpListenerReport_Warning_Type {
	if x != nil {
		return x.Type
	}
	return HttpListenerReport_Warning_UnknownWarning
}

func (x *HttpListenerReport_Warning) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// error types for top-level virtual host config
type VirtualHostReport_Error struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of the error
	Type VirtualHostReport_Error_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gloo.solo.io.VirtualHostReport_Error_Type" json:"type,omitempty"`
	// any extra info as a string
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Source metadata for the VirtualHostReport, can be used by external components to associate sources with the VirtualHostError
	Metadata      *v1.SourceMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VirtualHostReport_Error) Reset() {
	*x = VirtualHostReport_Error{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualHostReport_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualHostReport_Error) ProtoMessage() {}

func (x *VirtualHostReport_Error) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualHostReport_Error.ProtoReflect.Descriptor instead.
func (*VirtualHostReport_Error) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{11, 0}
}

func (x *VirtualHostReport_Error) GetType() VirtualHostReport_Error_Type {
	if x != nil {
		return x.Type
	}
	return VirtualHostReport_Error_NameNotUniqueError
}

func (x *VirtualHostReport_Error) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *VirtualHostReport_Error) GetMetadata() *v1.SourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// error types for the given route config
type RouteReport_Error struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of the error
	Type RouteReport_Error_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gloo.solo.io.RouteReport_Error_Type" json:"type,omitempty"`
	// any extra info as a string
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Source metadata for the RouteReport, can be used by external components to associate sources with the RouteError
	Metadata      *v1.SourceMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteReport_Error) Reset() {
	*x = RouteReport_Error{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteReport_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteReport_Error) ProtoMessage() {}

func (x *RouteReport_Error) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteReport_Error.ProtoReflect.Descriptor instead.
func (*RouteReport_Error) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{12, 0}
}

func (x *RouteReport_Error) GetType() RouteReport_Error_Type {
	if x != nil {
		return x.Type
	}
	return RouteReport_Error_InvalidMatcherError
}

func (x *RouteReport_Error) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *RouteReport_Error) GetMetadata() *v1.SourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// warning types for the given route config
type RouteReport_Warning struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of the error
	Type RouteReport_Warning_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gloo.solo.io.RouteReport_Warning_Type" json:"type,omitempty"`
	// any extra info as a string
	Reason        string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteReport_Warning) Reset() {
	*x = RouteReport_Warning{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteReport_Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteReport_Warning) ProtoMessage() {}

func (x *RouteReport_Warning) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteReport_Warning.ProtoReflect.Descriptor instead.
func (*RouteReport_Warning) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{12, 1}
}

func (x *RouteReport_Warning) GetType() RouteReport_Warning_Type {
	if x != nil {
		return x.Type
	}
	return RouteReport_Warning_InvalidDestinationWarning
}

func (x *RouteReport_Warning) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// error types for top-level tcp listener config
type TcpListenerReport_Error struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of the error
	Type TcpListenerReport_Error_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gloo.solo.io.TcpListenerReport_Error_Type" json:"type,omitempty"`
	// any extra info as a string
	Reason        string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpListenerReport_Error) Reset() {
	*x = TcpListenerReport_Error{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpListenerReport_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpListenerReport_Error) ProtoMessage() {}

func (x *TcpListenerReport_Error) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpListenerReport_Error.ProtoReflect.Descriptor instead.
func (*TcpListenerReport_Error) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{13, 0}
}

func (x *TcpListenerReport_Error) GetType() TcpListenerReport_Error_Type {
	if x != nil {
		return x.Type
	}
	return TcpListenerReport_Error_NameNotUniqueError
}

func (x *TcpListenerReport_Error) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// warning types for the given listener
type TcpListenerReport_Warning struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of the warning
	Type TcpListenerReport_Warning_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gloo.solo.io.TcpListenerReport_Warning_Type" json:"type,omitempty"`
	// any extra info as a string
	Reason        string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpListenerReport_Warning) Reset() {
	*x = TcpListenerReport_Warning{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpListenerReport_Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpListenerReport_Warning) ProtoMessage() {}

func (x *TcpListenerReport_Warning) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpListenerReport_Warning.ProtoReflect.Descriptor instead.
func (*TcpListenerReport_Warning) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{13, 1}
}

func (x *TcpListenerReport_Warning) GetType() TcpListenerReport_Warning_Type {
	if x != nil {
		return x.Type
	}
	return TcpListenerReport_Warning_UnknownWarning
}

func (x *TcpListenerReport_Warning) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// error types for tcp host config
type TcpHostReport_Error struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of the error
	Type TcpHostReport_Error_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gloo.solo.io.TcpHostReport_Error_Type" json:"type,omitempty"`
	// any extra info as a string
	Reason        string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpHostReport_Error) Reset() {
	*x = TcpHostReport_Error{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpHostReport_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpHostReport_Error) ProtoMessage() {}

func (x *TcpHostReport_Error) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpHostReport_Error.ProtoReflect.Descriptor instead.
func (*TcpHostReport_Error) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{14, 0}
}

func (x *TcpHostReport_Error) GetType() TcpHostReport_Error_Type {
	if x != nil {
		return x.Type
	}
	return TcpHostReport_Error_NameNotUniqueError
}

func (x *TcpHostReport_Error) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// warning types for the given tcp host config
type TcpHostReport_Warning struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the type of the warning
	Type TcpHostReport_Warning_Type `protobuf:"varint,1,opt,name=type,proto3,enum=gloo.solo.io.TcpHostReport_Warning_Type" json:"type,omitempty"`
	// any extra info as a string
	Reason        string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpHostReport_Warning) Reset() {
	*x = TcpHostReport_Warning{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpHostReport_Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpHostReport_Warning) ProtoMessage() {}

func (x *TcpHostReport_Warning) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpHostReport_Warning.ProtoReflect.Descriptor instead.
func (*TcpHostReport_Warning) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP(), []int{14, 1}
}

func (x *TcpHostReport_Warning) GetType() TcpHostReport_Warning_Type {
	if x != nil {
		return x.Type
	}
	return TcpHostReport_Warning_UnknownWarning
}

func (x *TcpHostReport_Warning) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDesc = "" +
	"\n" +
	"Ogithub.com/solo-io/gloo/projects/gloo/api/grpc/validation/gloo_validation.proto\x12\fgloo.solo.io\x1a\x12extproto/ext.proto\x1a8github.com/solo-io/gloo/projects/gloo/api/v1/proxy.proto\x1a;github.com/solo-io/gloo/projects/gloo/api/v1/upstream.proto\x1a,github.com/solo-io/solo-kit/api/v1/ref.proto\"\xf7\x01\n" +
	"\x1cGlooValidationServiceRequest\x12)\n" +
	"\x05proxy\x18\x01 \x01(\v2\x13.gloo.solo.io.ProxyR\x05proxy\x12P\n" +
	"\x12modified_resources\x18\x02 \x01(\v2\x1f.gloo.solo.io.ModifiedResourcesH\x00R\x11modifiedResources\x12M\n" +
	"\x11deleted_resources\x18\x03 \x01(\v2\x1e.gloo.solo.io.DeletedResourcesH\x00R\x10deletedResourcesB\v\n" +
	"\tresources\"n\n" +
	"\x1dGlooValidationServiceResponse\x12M\n" +
	"\x12validation_reports\x18\x01 \x03(\v2\x1e.gloo.solo.io.ValidationReportR\x11validationReports\"I\n" +
	"\x11ModifiedResources\x124\n" +
	"\tupstreams\x18\x01 \x03(\v2\x16.gloo.solo.io.UpstreamR\tupstreams\"\x8e\x01\n" +
	"\x10DeletedResources\x12>\n" +
	"\rupstream_refs\x18\x01 \x03(\v2\x19.core.solo.io.ResourceRefR\fupstreamRefs\x12:\n" +
	"\vsecret_refs\x18\x02 \x03(\v2\x19.core.solo.io.ResourceRefR\n" +
	"secretRefs\"\xc4\x01\n" +
	"\x10ValidationReport\x12<\n" +
	"\fproxy_report\x18\x01 \x01(\v2\x19.gloo.solo.io.ProxyReportR\vproxyReport\x12G\n" +
	"\x10upstream_reports\x18\x02 \x03(\v2\x1c.gloo.solo.io.ResourceReportR\x0fupstreamReports\x12)\n" +
	"\x05proxy\x18\x03 \x01(\v2\x13.gloo.solo.io.ProxyR\x05proxy\"\x82\x01\n" +
	"\x0eResourceReport\x12<\n" +
	"\fresource_ref\x18\x01 \x01(\v2\x19.core.solo.io.ResourceRefR\vresourceRef\x12\x1a\n" +
	"\bwarnings\x18\x02 \x03(\tR\bwarnings\x12\x16\n" +
	"\x06errors\x18\x03 \x03(\tR\x06errors\"\x17\n" +
	"\x15NotifyOnResyncRequest\"\x18\n" +
	"\x16NotifyOnResyncResponse\"V\n" +
	"\vProxyReport\x12G\n" +
	"\x10listener_reports\x18\x01 \x03(\v2\x1c.gloo.solo.io.ListenerReportR\x0flistenerReports\"\x8e\a\n" +
	"\x0eListenerReport\x12:\n" +
	"\x06errors\x18\x02 \x03(\v2\".gloo.solo.io.ListenerReport.ErrorR\x06errors\x12@\n" +
	"\bwarnings\x18\a \x03(\v2$.gloo.solo.io.ListenerReport.WarningR\bwarnings\x12T\n" +
	"\x14http_listener_report\x18\x03 \x01(\v2 .gloo.solo.io.HttpListenerReportH\x00R\x12httpListenerReport\x12Q\n" +
	"\x13tcp_listener_report\x18\x04 \x01(\v2\x1f.gloo.solo.io.TcpListenerReportH\x00R\x11tcpListenerReport\x12Z\n" +
	"\x16hybrid_listener_report\x18\x05 \x01(\v2\".gloo.solo.io.HybridListenerReportH\x00R\x14hybridListenerReport\x12c\n" +
	"\x19aggregate_listener_report\x18\x06 \x01(\v2%.gloo.solo.io.AggregateListenerReportH\x00R\x17aggregateListenerReport\x1a\xfb\x01\n" +
	"\x05Error\x12;\n" +
	"\x04type\x18\x01 \x01(\x0e2'.gloo.solo.io.ListenerReport.Error.TypeR\x04type\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x128\n" +
	"\bmetadata\x18\x03 \x01(\v2\x1c.gloo.solo.io.SourceMetadataR\bmetadata\"c\n" +
	"\x04Type\x12\x16\n" +
	"\x12NameNotUniqueError\x10\x00\x12\x1a\n" +
	"\x16BindPortNotUniqueError\x10\x01\x12\x12\n" +
	"\x0eSSLConfigError\x10\x02\x12\x13\n" +
	"\x0fProcessingError\x10\x03\x1a~\n" +
	"\aWarning\x12=\n" +
	"\x04type\x18\x01 \x01(\x0e2).gloo.solo.io.ListenerReport.Warning.TypeR\x04type\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"\x1c\n" +
	"\x04Type\x12\x14\n" +
	"\x10SSLConfigWarning\x10\x00B\x16\n" +
	"\x14listener_type_report\"\xc9\x04\n" +
	"\x12HttpListenerReport\x12>\n" +
	"\x06errors\x18\x01 \x03(\v2&.gloo.solo.io.HttpListenerReport.ErrorR\x06errors\x12Q\n" +
	"\x14virtual_host_reports\x18\x02 \x03(\v2\x1f.gloo.solo.io.VirtualHostReportR\x12virtualHostReports\x12D\n" +
	"\bwarnings\x18\x03 \x03(\v2(.gloo.solo.io.HttpListenerReport.WarningR\bwarnings\x1a\xb7\x01\n" +
	"\x05Error\x12?\n" +
	"\x04type\x18\x01 \x01(\x0e2+.gloo.solo.io.HttpListenerReport.Error.TypeR\x04type\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x128\n" +
	"\bmetadata\x18\x03 \x01(\v2\x1c.gloo.solo.io.SourceMetadataR\bmetadata\"\x1b\n" +
	"\x04Type\x12\x13\n" +
	"\x0fProcessingError\x10\x00\x1a\x9f\x01\n" +
	"\aWarning\x12A\n" +
	"\x04type\x18\x01 \x01(\x0e2-.gloo.solo.io.HttpListenerReport.Warning.TypeR\x04type\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"9\n" +
	"\x04Type\x12\x12\n" +
	"\x0eUnknownWarning\x10\x00\x12\x1d\n" +
	"\x19InvalidDestinationWarning\x10\x01\"\x94\x03\n" +
	"\x11VirtualHostReport\x12=\n" +
	"\x06errors\x18\x01 \x03(\v2%.gloo.solo.io.VirtualHostReport.ErrorR\x06errors\x12>\n" +
	"\rroute_reports\x18\x02 \x03(\v2\x19.gloo.solo.io.RouteReportR\frouteReports\x1a\xff\x01\n" +
	"\x05Error\x12>\n" +
	"\x04type\x18\x01 \x01(\x0e2*.gloo.solo.io.VirtualHostReport.Error.TypeR\x04type\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x128\n" +
	"\bmetadata\x18\x03 \x01(\v2\x1c.gloo.solo.io.SourceMetadataR\bmetadata\"d\n" +
	"\x04Type\x12\x16\n" +
	"\x12NameNotUniqueError\x10\x00\x12\x19\n" +
	"\x15DomainsNotUniqueError\x10\x01\x12\x13\n" +
	"\x0fProcessingError\x10\x02\x12\x14\n" +
	"\x10EmptyDomainError\x10\x03\"\xd8\x03\n" +
	"\vRouteReport\x127\n" +
	"\x06errors\x18\x01 \x03(\v2\x1f.gloo.solo.io.RouteReport.ErrorR\x06errors\x12=\n" +
	"\bwarnings\x18\x02 \x03(\v2!.gloo.solo.io.RouteReport.WarningR\bwarnings\x1a\xc9\x01\n" +
	"\x05Error\x128\n" +
	"\x04type\x18\x01 \x01(\x0e2$.gloo.solo.io.RouteReport.Error.TypeR\x04type\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\x128\n" +
	"\bmetadata\x18\x03 \x01(\v2\x1c.gloo.solo.io.SourceMetadataR\bmetadata\"4\n" +
	"\x04Type\x12\x17\n" +
	"\x13InvalidMatcherError\x10\x00\x12\x13\n" +
	"\x0fProcessingError\x10\x01\x1a\x84\x01\n" +
	"\aWarning\x12:\n" +
	"\x04type\x18\x01 \x01(\x0e2&.gloo.solo.io.RouteReport.Warning.TypeR\x04type\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"%\n" +
	"\x04Type\x12\x1d\n" +
	"\x19InvalidDestinationWarning\x10\x00\"\xc6\x04\n" +
	"\x11TcpListenerReport\x12=\n" +
	"\x06errors\x18\x01 \x03(\v2%.gloo.solo.io.TcpListenerReport.ErrorR\x06errors\x12E\n" +
	"\x10tcp_host_reports\x18\x02 \x03(\v2\x1b.gloo.solo.io.TcpHostReportR\x0etcpHostReports\x12C\n" +
	"\bwarnings\x18\x03 \x03(\v2'.gloo.solo.io.TcpListenerReport.WarningR\bwarnings\x1a\xc4\x01\n" +
	"\x05Error\x12>\n" +
	"\x04type\x18\x01 \x01(\x0e2*.gloo.solo.io.TcpListenerReport.Error.TypeR\x04type\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"c\n" +
	"\x04Type\x12\x16\n" +
	"\x12NameNotUniqueError\x10\x00\x12\x1a\n" +
	"\x16BindPortNotUniqueError\x10\x01\x12\x12\n" +
	"\x0eSSLConfigError\x10\x02\x12\x13\n" +
	"\x0fProcessingError\x10\x03\x1a\x9e\x01\n" +
	"\aWarning\x12@\n" +
	"\x04type\x18\x01 \x01(\x0e2,.gloo.solo.io.TcpListenerReport.Warning.TypeR\x04type\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"9\n" +
	"\x04Type\x12\x12\n" +
	"\x0eUnknownWarning\x10\x00\x12\x1d\n" +
	"\x19InvalidDestinationWarning\x10\x01\"\xdc\x03\n" +
	"\rTcpHostReport\x129\n" +
	"\x06errors\x18\x02 \x03(\v2!.gloo.solo.io.TcpHostReport.ErrorR\x06errors\x12?\n" +
	"\bwarnings\x18\x03 \x03(\v2#.gloo.solo.io.TcpHostReport.WarningR\bwarnings\x1a\xb1\x01\n" +
	"\x05Error\x12:\n" +
	"\x04type\x18\x01 \x01(\x0e2&.gloo.solo.io.TcpHostReport.Error.TypeR\x04type\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"T\n" +
	"\x04Type\x12\x16\n" +
	"\x12NameNotUniqueError\x10\x00\x12\x1f\n" +
	"\x17InvalidDestinationError\x10\x01\x1a\x02\b\x01\x12\x13\n" +
	"\x0fProcessingError\x10\x02\x1a\x9a\x01\n" +
	"\aWarning\x12<\n" +
	"\x04type\x18\x01 \x01(\x0e2(.gloo.solo.io.TcpHostReport.Warning.TypeR\x04type\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"9\n" +
	"\x04Type\x12\x12\n" +
	"\x0eUnknownWarning\x10\x00\x12\x1d\n" +
	"\x19InvalidDestinationWarning\x10\x01\"\x80\x02\n" +
	"\x14HybridListenerReport\x12x\n" +
	"\x18matched_listener_reports\x18\x01 \x03(\v2>.gloo.solo.io.HybridListenerReport.MatchedListenerReportsEntryR\x16matchedListenerReports\x1an\n" +
	"\x1bMatchedListenerReportsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x129\n" +
	"\x05value\x18\x02 \x01(\v2#.gloo.solo.io.MatchedListenerReportR\x05value:\x028\x01\"\xd6\x01\n" +
	"\x15MatchedListenerReport\x12T\n" +
	"\x14http_listener_report\x18\x01 \x01(\v2 .gloo.solo.io.HttpListenerReportH\x00R\x12httpListenerReport\x12Q\n" +
	"\x13tcp_listener_report\x18\x02 \x01(\v2\x1f.gloo.solo.io.TcpListenerReportH\x00R\x11tcpListenerReportB\x14\n" +
	"\x12ListenerReportType\"\xd0\x03\n" +
	"\x17AggregateListenerReport\x12r\n" +
	"\x15http_listener_reports\x18\x01 \x03(\v2>.gloo.solo.io.AggregateListenerReport.HttpListenerReportsEntryR\x13httpListenerReports\x12o\n" +
	"\x14tcp_listener_reports\x18\x02 \x03(\v2=.gloo.solo.io.AggregateListenerReport.TcpListenerReportsEntryR\x12tcpListenerReports\x1ah\n" +
	"\x18HttpListenerReportsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\x05value\x18\x02 \x01(\v2 .gloo.solo.io.HttpListenerReportR\x05value:\x028\x01\x1af\n" +
	"\x17TcpListenerReportsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x125\n" +
	"\x05value\x18\x02 \x01(\v2\x1f.gloo.solo.io.TcpListenerReportR\x05value:\x028\x012\xdf\x01\n" +
	"\x15GlooValidationService\x12_\n" +
	"\x0eNotifyOnResync\x12#.gloo.solo.io.NotifyOnResyncRequest\x1a$.gloo.solo.io.NotifyOnResyncResponse\"\x000\x01\x12e\n" +
	"\bValidate\x12*.gloo.solo.io.GlooValidationServiceRequest\x1a+.gloo.solo.io.GlooValidationServiceResponse\"\x00BK\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z=github.com/solo-io/gloo/projects/gloo/pkg/api/grpc/validationb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_goTypes = []any{
	(ListenerReport_Error_Type)(0),        // 0: gloo.solo.io.ListenerReport.Error.Type
	(ListenerReport_Warning_Type)(0),      // 1: gloo.solo.io.ListenerReport.Warning.Type
	(HttpListenerReport_Error_Type)(0),    // 2: gloo.solo.io.HttpListenerReport.Error.Type
	(HttpListenerReport_Warning_Type)(0),  // 3: gloo.solo.io.HttpListenerReport.Warning.Type
	(VirtualHostReport_Error_Type)(0),     // 4: gloo.solo.io.VirtualHostReport.Error.Type
	(RouteReport_Error_Type)(0),           // 5: gloo.solo.io.RouteReport.Error.Type
	(RouteReport_Warning_Type)(0),         // 6: gloo.solo.io.RouteReport.Warning.Type
	(TcpListenerReport_Error_Type)(0),     // 7: gloo.solo.io.TcpListenerReport.Error.Type
	(TcpListenerReport_Warning_Type)(0),   // 8: gloo.solo.io.TcpListenerReport.Warning.Type
	(TcpHostReport_Error_Type)(0),         // 9: gloo.solo.io.TcpHostReport.Error.Type
	(TcpHostReport_Warning_Type)(0),       // 10: gloo.solo.io.TcpHostReport.Warning.Type
	(*GlooValidationServiceRequest)(nil),  // 11: gloo.solo.io.GlooValidationServiceRequest
	(*GlooValidationServiceResponse)(nil), // 12: gloo.solo.io.GlooValidationServiceResponse
	(*ModifiedResources)(nil),             // 13: gloo.solo.io.ModifiedResources
	(*DeletedResources)(nil),              // 14: gloo.solo.io.DeletedResources
	(*ValidationReport)(nil),              // 15: gloo.solo.io.ValidationReport
	(*ResourceReport)(nil),                // 16: gloo.solo.io.ResourceReport
	(*NotifyOnResyncRequest)(nil),         // 17: gloo.solo.io.NotifyOnResyncRequest
	(*NotifyOnResyncResponse)(nil),        // 18: gloo.solo.io.NotifyOnResyncResponse
	(*ProxyReport)(nil),                   // 19: gloo.solo.io.ProxyReport
	(*ListenerReport)(nil),                // 20: gloo.solo.io.ListenerReport
	(*HttpListenerReport)(nil),            // 21: gloo.solo.io.HttpListenerReport
	(*VirtualHostReport)(nil),             // 22: gloo.solo.io.VirtualHostReport
	(*RouteReport)(nil),                   // 23: gloo.solo.io.RouteReport
	(*TcpListenerReport)(nil),             // 24: gloo.solo.io.TcpListenerReport
	(*TcpHostReport)(nil),                 // 25: gloo.solo.io.TcpHostReport
	(*HybridListenerReport)(nil),          // 26: gloo.solo.io.HybridListenerReport
	(*MatchedListenerReport)(nil),         // 27: gloo.solo.io.MatchedListenerReport
	(*AggregateListenerReport)(nil),       // 28: gloo.solo.io.AggregateListenerReport
	(*ListenerReport_Error)(nil),          // 29: gloo.solo.io.ListenerReport.Error
	(*ListenerReport_Warning)(nil),        // 30: gloo.solo.io.ListenerReport.Warning
	(*HttpListenerReport_Error)(nil),      // 31: gloo.solo.io.HttpListenerReport.Error
	(*HttpListenerReport_Warning)(nil),    // 32: gloo.solo.io.HttpListenerReport.Warning
	(*VirtualHostReport_Error)(nil),       // 33: gloo.solo.io.VirtualHostReport.Error
	(*RouteReport_Error)(nil),             // 34: gloo.solo.io.RouteReport.Error
	(*RouteReport_Warning)(nil),           // 35: gloo.solo.io.RouteReport.Warning
	(*TcpListenerReport_Error)(nil),       // 36: gloo.solo.io.TcpListenerReport.Error
	(*TcpListenerReport_Warning)(nil),     // 37: gloo.solo.io.TcpListenerReport.Warning
	(*TcpHostReport_Error)(nil),           // 38: gloo.solo.io.TcpHostReport.Error
	(*TcpHostReport_Warning)(nil),         // 39: gloo.solo.io.TcpHostReport.Warning
	nil,                                   // 40: gloo.solo.io.HybridListenerReport.MatchedListenerReportsEntry
	nil,                                   // 41: gloo.solo.io.AggregateListenerReport.HttpListenerReportsEntry
	nil,                                   // 42: gloo.solo.io.AggregateListenerReport.TcpListenerReportsEntry
	(*v1.Proxy)(nil),                      // 43: gloo.solo.io.Proxy
	(*v1.Upstream)(nil),                   // 44: gloo.solo.io.Upstream
	(*core.ResourceRef)(nil),              // 45: core.solo.io.ResourceRef
	(*v1.SourceMetadata)(nil),             // 46: gloo.solo.io.SourceMetadata
}
var file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_depIdxs = []int32{
	43, // 0: gloo.solo.io.GlooValidationServiceRequest.proxy:type_name -> gloo.solo.io.Proxy
	13, // 1: gloo.solo.io.GlooValidationServiceRequest.modified_resources:type_name -> gloo.solo.io.ModifiedResources
	14, // 2: gloo.solo.io.GlooValidationServiceRequest.deleted_resources:type_name -> gloo.solo.io.DeletedResources
	15, // 3: gloo.solo.io.GlooValidationServiceResponse.validation_reports:type_name -> gloo.solo.io.ValidationReport
	44, // 4: gloo.solo.io.ModifiedResources.upstreams:type_name -> gloo.solo.io.Upstream
	45, // 5: gloo.solo.io.DeletedResources.upstream_refs:type_name -> core.solo.io.ResourceRef
	45, // 6: gloo.solo.io.DeletedResources.secret_refs:type_name -> core.solo.io.ResourceRef
	19, // 7: gloo.solo.io.ValidationReport.proxy_report:type_name -> gloo.solo.io.ProxyReport
	16, // 8: gloo.solo.io.ValidationReport.upstream_reports:type_name -> gloo.solo.io.ResourceReport
	43, // 9: gloo.solo.io.ValidationReport.proxy:type_name -> gloo.solo.io.Proxy
	45, // 10: gloo.solo.io.ResourceReport.resource_ref:type_name -> core.solo.io.ResourceRef
	20, // 11: gloo.solo.io.ProxyReport.listener_reports:type_name -> gloo.solo.io.ListenerReport
	29, // 12: gloo.solo.io.ListenerReport.errors:type_name -> gloo.solo.io.ListenerReport.Error
	30, // 13: gloo.solo.io.ListenerReport.warnings:type_name -> gloo.solo.io.ListenerReport.Warning
	21, // 14: gloo.solo.io.ListenerReport.http_listener_report:type_name -> gloo.solo.io.HttpListenerReport
	24, // 15: gloo.solo.io.ListenerReport.tcp_listener_report:type_name -> gloo.solo.io.TcpListenerReport
	26, // 16: gloo.solo.io.ListenerReport.hybrid_listener_report:type_name -> gloo.solo.io.HybridListenerReport
	28, // 17: gloo.solo.io.ListenerReport.aggregate_listener_report:type_name -> gloo.solo.io.AggregateListenerReport
	31, // 18: gloo.solo.io.HttpListenerReport.errors:type_name -> gloo.solo.io.HttpListenerReport.Error
	22, // 19: gloo.solo.io.HttpListenerReport.virtual_host_reports:type_name -> gloo.solo.io.VirtualHostReport
	32, // 20: gloo.solo.io.HttpListenerReport.warnings:type_name -> gloo.solo.io.HttpListenerReport.Warning
	33, // 21: gloo.solo.io.VirtualHostReport.errors:type_name -> gloo.solo.io.VirtualHostReport.Error
	23, // 22: gloo.solo.io.VirtualHostReport.route_reports:type_name -> gloo.solo.io.RouteReport
	34, // 23: gloo.solo.io.RouteReport.errors:type_name -> gloo.solo.io.RouteReport.Error
	35, // 24: gloo.solo.io.RouteReport.warnings:type_name -> gloo.solo.io.RouteReport.Warning
	36, // 25: gloo.solo.io.TcpListenerReport.errors:type_name -> gloo.solo.io.TcpListenerReport.Error
	25, // 26: gloo.solo.io.TcpListenerReport.tcp_host_reports:type_name -> gloo.solo.io.TcpHostReport
	37, // 27: gloo.solo.io.TcpListenerReport.warnings:type_name -> gloo.solo.io.TcpListenerReport.Warning
	38, // 28: gloo.solo.io.TcpHostReport.errors:type_name -> gloo.solo.io.TcpHostReport.Error
	39, // 29: gloo.solo.io.TcpHostReport.warnings:type_name -> gloo.solo.io.TcpHostReport.Warning
	40, // 30: gloo.solo.io.HybridListenerReport.matched_listener_reports:type_name -> gloo.solo.io.HybridListenerReport.MatchedListenerReportsEntry
	21, // 31: gloo.solo.io.MatchedListenerReport.http_listener_report:type_name -> gloo.solo.io.HttpListenerReport
	24, // 32: gloo.solo.io.MatchedListenerReport.tcp_listener_report:type_name -> gloo.solo.io.TcpListenerReport
	41, // 33: gloo.solo.io.AggregateListenerReport.http_listener_reports:type_name -> gloo.solo.io.AggregateListenerReport.HttpListenerReportsEntry
	42, // 34: gloo.solo.io.AggregateListenerReport.tcp_listener_reports:type_name -> gloo.solo.io.AggregateListenerReport.TcpListenerReportsEntry
	0,  // 35: gloo.solo.io.ListenerReport.Error.type:type_name -> gloo.solo.io.ListenerReport.Error.Type
	46, // 36: gloo.solo.io.ListenerReport.Error.metadata:type_name -> gloo.solo.io.SourceMetadata
	1,  // 37: gloo.solo.io.ListenerReport.Warning.type:type_name -> gloo.solo.io.ListenerReport.Warning.Type
	2,  // 38: gloo.solo.io.HttpListenerReport.Error.type:type_name -> gloo.solo.io.HttpListenerReport.Error.Type
	46, // 39: gloo.solo.io.HttpListenerReport.Error.metadata:type_name -> gloo.solo.io.SourceMetadata
	3,  // 40: gloo.solo.io.HttpListenerReport.Warning.type:type_name -> gloo.solo.io.HttpListenerReport.Warning.Type
	4,  // 41: gloo.solo.io.VirtualHostReport.Error.type:type_name -> gloo.solo.io.VirtualHostReport.Error.Type
	46, // 42: gloo.solo.io.VirtualHostReport.Error.metadata:type_name -> gloo.solo.io.SourceMetadata
	5,  // 43: gloo.solo.io.RouteReport.Error.type:type_name -> gloo.solo.io.RouteReport.Error.Type
	46, // 44: gloo.solo.io.RouteReport.Error.metadata:type_name -> gloo.solo.io.SourceMetadata
	6,  // 45: gloo.solo.io.RouteReport.Warning.type:type_name -> gloo.solo.io.RouteReport.Warning.Type
	7,  // 46: gloo.solo.io.TcpListenerReport.Error.type:type_name -> gloo.solo.io.TcpListenerReport.Error.Type
	8,  // 47: gloo.solo.io.TcpListenerReport.Warning.type:type_name -> gloo.solo.io.TcpListenerReport.Warning.Type
	9,  // 48: gloo.solo.io.TcpHostReport.Error.type:type_name -> gloo.solo.io.TcpHostReport.Error.Type
	10, // 49: gloo.solo.io.TcpHostReport.Warning.type:type_name -> gloo.solo.io.TcpHostReport.Warning.Type
	27, // 50: gloo.solo.io.HybridListenerReport.MatchedListenerReportsEntry.value:type_name -> gloo.solo.io.MatchedListenerReport
	21, // 51: gloo.solo.io.AggregateListenerReport.HttpListenerReportsEntry.value:type_name -> gloo.solo.io.HttpListenerReport
	24, // 52: gloo.solo.io.AggregateListenerReport.TcpListenerReportsEntry.value:type_name -> gloo.solo.io.TcpListenerReport
	17, // 53: gloo.solo.io.GlooValidationService.NotifyOnResync:input_type -> gloo.solo.io.NotifyOnResyncRequest
	11, // 54: gloo.solo.io.GlooValidationService.Validate:input_type -> gloo.solo.io.GlooValidationServiceRequest
	18, // 55: gloo.solo.io.GlooValidationService.NotifyOnResync:output_type -> gloo.solo.io.NotifyOnResyncResponse
	12, // 56: gloo.solo.io.GlooValidationService.Validate:output_type -> gloo.solo.io.GlooValidationServiceResponse
	55, // [55:57] is the sub-list for method output_type
	53, // [53:55] is the sub-list for method input_type
	53, // [53:53] is the sub-list for extension type_name
	53, // [53:53] is the sub-list for extension extendee
	0,  // [0:53] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_init()
}
func file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[0].OneofWrappers = []any{
		(*GlooValidationServiceRequest_ModifiedResources)(nil),
		(*GlooValidationServiceRequest_DeletedResources)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[9].OneofWrappers = []any{
		(*ListenerReport_HttpListenerReport)(nil),
		(*ListenerReport_TcpListenerReport)(nil),
		(*ListenerReport_HybridListenerReport)(nil),
		(*ListenerReport_AggregateListenerReport)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes[16].OneofWrappers = []any{
		(*MatchedListenerReport_HttpListenerReport)(nil),
		(*MatchedListenerReport_TcpListenerReport)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_rawDesc)),
			NumEnums:      11,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_grpc_validation_gloo_validation_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GlooValidationServiceClient is the client API for GlooValidationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GlooValidationServiceClient interface {
	// Notify the client whenever the Gloo Validation Service resyncs
	NotifyOnResync(ctx context.Context, in *NotifyOnResyncRequest, opts ...grpc.CallOption) (GlooValidationService_NotifyOnResyncClient, error)
	// Submit gloo resources for validation
	Validate(ctx context.Context, in *GlooValidationServiceRequest, opts ...grpc.CallOption) (*GlooValidationServiceResponse, error)
}

type glooValidationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlooValidationServiceClient(cc grpc.ClientConnInterface) GlooValidationServiceClient {
	return &glooValidationServiceClient{cc}
}

func (c *glooValidationServiceClient) NotifyOnResync(ctx context.Context, in *NotifyOnResyncRequest, opts ...grpc.CallOption) (GlooValidationService_NotifyOnResyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GlooValidationService_serviceDesc.Streams[0], "/gloo.solo.io.GlooValidationService/NotifyOnResync", opts...)
	if err != nil {
		return nil, err
	}
	x := &glooValidationServiceNotifyOnResyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GlooValidationService_NotifyOnResyncClient interface {
	Recv() (*NotifyOnResyncResponse, error)
	grpc.ClientStream
}

type glooValidationServiceNotifyOnResyncClient struct {
	grpc.ClientStream
}

func (x *glooValidationServiceNotifyOnResyncClient) Recv() (*NotifyOnResyncResponse, error) {
	m := new(NotifyOnResyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *glooValidationServiceClient) Validate(ctx context.Context, in *GlooValidationServiceRequest, opts ...grpc.CallOption) (*GlooValidationServiceResponse, error) {
	out := new(GlooValidationServiceResponse)
	err := c.cc.Invoke(ctx, "/gloo.solo.io.GlooValidationService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlooValidationServiceServer is the server API for GlooValidationService service.
type GlooValidationServiceServer interface {
	// Notify the client whenever the Gloo Validation Service resyncs
	NotifyOnResync(*NotifyOnResyncRequest, GlooValidationService_NotifyOnResyncServer) error
	// Submit gloo resources for validation
	Validate(context.Context, *GlooValidationServiceRequest) (*GlooValidationServiceResponse, error)
}

// UnimplementedGlooValidationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGlooValidationServiceServer struct {
}

func (*UnimplementedGlooValidationServiceServer) NotifyOnResync(*NotifyOnResyncRequest, GlooValidationService_NotifyOnResyncServer) error {
	return status.Errorf(codes.Unimplemented, "method NotifyOnResync not implemented")
}
func (*UnimplementedGlooValidationServiceServer) Validate(context.Context, *GlooValidationServiceRequest) (*GlooValidationServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}

func RegisterGlooValidationServiceServer(s *grpc.Server, srv GlooValidationServiceServer) {
	s.RegisterService(&_GlooValidationService_serviceDesc, srv)
}

func _GlooValidationService_NotifyOnResync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotifyOnResyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GlooValidationServiceServer).NotifyOnResync(m, &glooValidationServiceNotifyOnResyncServer{stream})
}

type GlooValidationService_NotifyOnResyncServer interface {
	Send(*NotifyOnResyncResponse) error
	grpc.ServerStream
}

type glooValidationServiceNotifyOnResyncServer struct {
	grpc.ServerStream
}

func (x *glooValidationServiceNotifyOnResyncServer) Send(m *NotifyOnResyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GlooValidationService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlooValidationServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlooValidationServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gloo.solo.io.GlooValidationService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlooValidationServiceServer).Validate(ctx, req.(*GlooValidationServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GlooValidationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gloo.solo.io.GlooValidationService",
	HandlerType: (*GlooValidationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _GlooValidationService_Validate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NotifyOnResync",
			Handler:       _GlooValidationService_NotifyOnResync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/solo-io/gloo/projects/gloo/api/grpc/validation/gloo_validation.proto",
}
