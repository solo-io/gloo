// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/proxy.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_config_core_v3 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/config/core/v3"

	github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_type_matcher_v3 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/type/matcher/v3"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_core_matchers "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/core/matchers"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_filters "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/filters"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_dynamic_forward_proxy "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/dynamic_forward_proxy"

	github_com_solo_io_gloo_projects_gloo_pkg_api_v1_ssl "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/ssl"

	github_com_solo_io_solo_kit_pkg_api_v1_resources_core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"

	google_golang_org_protobuf_types_known_anypb "google.golang.org/protobuf/types/known/anypb"

	google_golang_org_protobuf_types_known_emptypb "google.golang.org/protobuf/types/known/emptypb"

	google_golang_org_protobuf_types_known_structpb "google.golang.org/protobuf/types/known/structpb"

	google_golang_org_protobuf_types_known_wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *Proxy) Clone() proto.Message {
	var target *Proxy
	if m == nil {
		return target
	}
	target = &Proxy{}

	target.CompressedSpec = m.GetCompressedSpec()

	if m.GetListeners() != nil {
		target.Listeners = make([]*Listener, len(m.GetListeners()))
		for idx, v := range m.GetListeners() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Listeners[idx] = h.Clone().(*Listener)
			} else {
				target.Listeners[idx] = proto.Clone(v).(*Listener)
			}

		}
	}

	if h, ok := interface{}(m.GetNamespacedStatuses()).(clone.Cloner); ok {
		target.NamespacedStatuses = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.NamespacedStatuses)
	} else {
		target.NamespacedStatuses = proto.Clone(m.GetNamespacedStatuses()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.NamespacedStatuses)
	}

	if h, ok := interface{}(m.GetMetadata()).(clone.Cloner); ok {
		target.Metadata = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Metadata)
	} else {
		target.Metadata = proto.Clone(m.GetMetadata()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Metadata)
	}

	return target
}

// Clone function
func (m *Listener) Clone() proto.Message {
	var target *Listener
	if m == nil {
		return target
	}
	target = &Listener{}

	target.Name = m.GetName()

	target.BindAddress = m.GetBindAddress()

	target.BindPort = m.GetBindPort()

	if m.GetSslConfigurations() != nil {
		target.SslConfigurations = make([]*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_ssl.SslConfig, len(m.GetSslConfigurations()))
		for idx, v := range m.GetSslConfigurations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SslConfigurations[idx] = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_ssl.SslConfig)
			} else {
				target.SslConfigurations[idx] = proto.Clone(v).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_ssl.SslConfig)
			}

		}
	}

	if h, ok := interface{}(m.GetUseProxyProto()).(clone.Cloner); ok {
		target.UseProxyProto = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.BoolValue)
	} else {
		target.UseProxyProto = proto.Clone(m.GetUseProxyProto()).(*google_golang_org_protobuf_types_known_wrapperspb.BoolValue)
	}

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*ListenerOptions)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*ListenerOptions)
	}

	if h, ok := interface{}(m.GetRouteOptions()).(clone.Cloner); ok {
		target.RouteOptions = h.Clone().(*RouteConfigurationOptions)
	} else {
		target.RouteOptions = proto.Clone(m.GetRouteOptions()).(*RouteConfigurationOptions)
	}

	switch m.ListenerType.(type) {

	case *Listener_HttpListener:

		if h, ok := interface{}(m.GetHttpListener()).(clone.Cloner); ok {
			target.ListenerType = &Listener_HttpListener{
				HttpListener: h.Clone().(*HttpListener),
			}
		} else {
			target.ListenerType = &Listener_HttpListener{
				HttpListener: proto.Clone(m.GetHttpListener()).(*HttpListener),
			}
		}

	case *Listener_TcpListener:

		if h, ok := interface{}(m.GetTcpListener()).(clone.Cloner); ok {
			target.ListenerType = &Listener_TcpListener{
				TcpListener: h.Clone().(*TcpListener),
			}
		} else {
			target.ListenerType = &Listener_TcpListener{
				TcpListener: proto.Clone(m.GetTcpListener()).(*TcpListener),
			}
		}

	case *Listener_HybridListener:

		if h, ok := interface{}(m.GetHybridListener()).(clone.Cloner); ok {
			target.ListenerType = &Listener_HybridListener{
				HybridListener: h.Clone().(*HybridListener),
			}
		} else {
			target.ListenerType = &Listener_HybridListener{
				HybridListener: proto.Clone(m.GetHybridListener()).(*HybridListener),
			}
		}

	case *Listener_AggregateListener:

		if h, ok := interface{}(m.GetAggregateListener()).(clone.Cloner); ok {
			target.ListenerType = &Listener_AggregateListener{
				AggregateListener: h.Clone().(*AggregateListener),
			}
		} else {
			target.ListenerType = &Listener_AggregateListener{
				AggregateListener: proto.Clone(m.GetAggregateListener()).(*AggregateListener),
			}
		}

	}

	switch m.OpaqueMetadata.(type) {

	case *Listener_Metadata:

		if h, ok := interface{}(m.GetMetadata()).(clone.Cloner); ok {
			target.OpaqueMetadata = &Listener_Metadata{
				Metadata: h.Clone().(*google_golang_org_protobuf_types_known_structpb.Struct),
			}
		} else {
			target.OpaqueMetadata = &Listener_Metadata{
				Metadata: proto.Clone(m.GetMetadata()).(*google_golang_org_protobuf_types_known_structpb.Struct),
			}
		}

	case *Listener_MetadataStatic:

		if h, ok := interface{}(m.GetMetadataStatic()).(clone.Cloner); ok {
			target.OpaqueMetadata = &Listener_MetadataStatic{
				MetadataStatic: h.Clone().(*SourceMetadata),
			}
		} else {
			target.OpaqueMetadata = &Listener_MetadataStatic{
				MetadataStatic: proto.Clone(m.GetMetadataStatic()).(*SourceMetadata),
			}
		}

	}

	return target
}

// Clone function
func (m *TcpListener) Clone() proto.Message {
	var target *TcpListener
	if m == nil {
		return target
	}
	target = &TcpListener{}

	if m.GetTcpHosts() != nil {
		target.TcpHosts = make([]*TcpHost, len(m.GetTcpHosts()))
		for idx, v := range m.GetTcpHosts() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.TcpHosts[idx] = h.Clone().(*TcpHost)
			} else {
				target.TcpHosts[idx] = proto.Clone(v).(*TcpHost)
			}

		}
	}

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*TcpListenerOptions)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*TcpListenerOptions)
	}

	target.StatPrefix = m.GetStatPrefix()

	if m.GetCustomNetworkFilters() != nil {
		target.CustomNetworkFilters = make([]*CustomEnvoyFilter, len(m.GetCustomNetworkFilters()))
		for idx, v := range m.GetCustomNetworkFilters() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.CustomNetworkFilters[idx] = h.Clone().(*CustomEnvoyFilter)
			} else {
				target.CustomNetworkFilters[idx] = proto.Clone(v).(*CustomEnvoyFilter)
			}

		}
	}

	return target
}

// Clone function
func (m *TcpHost) Clone() proto.Message {
	var target *TcpHost
	if m == nil {
		return target
	}
	target = &TcpHost{}

	target.Name = m.GetName()

	if h, ok := interface{}(m.GetSslConfig()).(clone.Cloner); ok {
		target.SslConfig = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_ssl.SslConfig)
	} else {
		target.SslConfig = proto.Clone(m.GetSslConfig()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_ssl.SslConfig)
	}

	if h, ok := interface{}(m.GetDestination()).(clone.Cloner); ok {
		target.Destination = h.Clone().(*TcpHost_TcpAction)
	} else {
		target.Destination = proto.Clone(m.GetDestination()).(*TcpHost_TcpAction)
	}

	return target
}

// Clone function
func (m *HttpListener) Clone() proto.Message {
	var target *HttpListener
	if m == nil {
		return target
	}
	target = &HttpListener{}

	if m.GetVirtualHosts() != nil {
		target.VirtualHosts = make([]*VirtualHost, len(m.GetVirtualHosts()))
		for idx, v := range m.GetVirtualHosts() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.VirtualHosts[idx] = h.Clone().(*VirtualHost)
			} else {
				target.VirtualHosts[idx] = proto.Clone(v).(*VirtualHost)
			}

		}
	}

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*HttpListenerOptions)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*HttpListenerOptions)
	}

	target.StatPrefix = m.GetStatPrefix()

	if m.GetCustomHttpFilters() != nil {
		target.CustomHttpFilters = make([]*CustomEnvoyFilter, len(m.GetCustomHttpFilters()))
		for idx, v := range m.GetCustomHttpFilters() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.CustomHttpFilters[idx] = h.Clone().(*CustomEnvoyFilter)
			} else {
				target.CustomHttpFilters[idx] = proto.Clone(v).(*CustomEnvoyFilter)
			}

		}
	}

	if m.GetCustomNetworkFilters() != nil {
		target.CustomNetworkFilters = make([]*CustomEnvoyFilter, len(m.GetCustomNetworkFilters()))
		for idx, v := range m.GetCustomNetworkFilters() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.CustomNetworkFilters[idx] = h.Clone().(*CustomEnvoyFilter)
			} else {
				target.CustomNetworkFilters[idx] = proto.Clone(v).(*CustomEnvoyFilter)
			}

		}
	}

	switch m.OpaqueMetadata.(type) {

	case *HttpListener_Metadata:

		if h, ok := interface{}(m.GetMetadata()).(clone.Cloner); ok {
			target.OpaqueMetadata = &HttpListener_Metadata{
				Metadata: h.Clone().(*google_golang_org_protobuf_types_known_structpb.Struct),
			}
		} else {
			target.OpaqueMetadata = &HttpListener_Metadata{
				Metadata: proto.Clone(m.GetMetadata()).(*google_golang_org_protobuf_types_known_structpb.Struct),
			}
		}

	case *HttpListener_MetadataStatic:

		if h, ok := interface{}(m.GetMetadataStatic()).(clone.Cloner); ok {
			target.OpaqueMetadata = &HttpListener_MetadataStatic{
				MetadataStatic: h.Clone().(*SourceMetadata),
			}
		} else {
			target.OpaqueMetadata = &HttpListener_MetadataStatic{
				MetadataStatic: proto.Clone(m.GetMetadataStatic()).(*SourceMetadata),
			}
		}

	}

	return target
}

// Clone function
func (m *HybridListener) Clone() proto.Message {
	var target *HybridListener
	if m == nil {
		return target
	}
	target = &HybridListener{}

	if m.GetMatchedListeners() != nil {
		target.MatchedListeners = make([]*MatchedListener, len(m.GetMatchedListeners()))
		for idx, v := range m.GetMatchedListeners() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.MatchedListeners[idx] = h.Clone().(*MatchedListener)
			} else {
				target.MatchedListeners[idx] = proto.Clone(v).(*MatchedListener)
			}

		}
	}

	return target
}

// Clone function
func (m *MatchedListener) Clone() proto.Message {
	var target *MatchedListener
	if m == nil {
		return target
	}
	target = &MatchedListener{}

	if h, ok := interface{}(m.GetMatcher()).(clone.Cloner); ok {
		target.Matcher = h.Clone().(*Matcher)
	} else {
		target.Matcher = proto.Clone(m.GetMatcher()).(*Matcher)
	}

	if m.GetSslConfigurations() != nil {
		target.SslConfigurations = make([]*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_ssl.SslConfig, len(m.GetSslConfigurations()))
		for idx, v := range m.GetSslConfigurations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SslConfigurations[idx] = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_ssl.SslConfig)
			} else {
				target.SslConfigurations[idx] = proto.Clone(v).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_ssl.SslConfig)
			}

		}
	}

	switch m.ListenerType.(type) {

	case *MatchedListener_HttpListener:

		if h, ok := interface{}(m.GetHttpListener()).(clone.Cloner); ok {
			target.ListenerType = &MatchedListener_HttpListener{
				HttpListener: h.Clone().(*HttpListener),
			}
		} else {
			target.ListenerType = &MatchedListener_HttpListener{
				HttpListener: proto.Clone(m.GetHttpListener()).(*HttpListener),
			}
		}

	case *MatchedListener_TcpListener:

		if h, ok := interface{}(m.GetTcpListener()).(clone.Cloner); ok {
			target.ListenerType = &MatchedListener_TcpListener{
				TcpListener: h.Clone().(*TcpListener),
			}
		} else {
			target.ListenerType = &MatchedListener_TcpListener{
				TcpListener: proto.Clone(m.GetTcpListener()).(*TcpListener),
			}
		}

	}

	return target
}

// Clone function
func (m *MatchedTcpListener) Clone() proto.Message {
	var target *MatchedTcpListener
	if m == nil {
		return target
	}
	target = &MatchedTcpListener{}

	if h, ok := interface{}(m.GetMatcher()).(clone.Cloner); ok {
		target.Matcher = h.Clone().(*Matcher)
	} else {
		target.Matcher = proto.Clone(m.GetMatcher()).(*Matcher)
	}

	if h, ok := interface{}(m.GetTcpListener()).(clone.Cloner); ok {
		target.TcpListener = h.Clone().(*TcpListener)
	} else {
		target.TcpListener = proto.Clone(m.GetTcpListener()).(*TcpListener)
	}

	return target
}

// Clone function
func (m *Matcher) Clone() proto.Message {
	var target *Matcher
	if m == nil {
		return target
	}
	target = &Matcher{}

	if h, ok := interface{}(m.GetSslConfig()).(clone.Cloner); ok {
		target.SslConfig = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_ssl.SslConfig)
	} else {
		target.SslConfig = proto.Clone(m.GetSslConfig()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_ssl.SslConfig)
	}

	if m.GetSourcePrefixRanges() != nil {
		target.SourcePrefixRanges = make([]*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_config_core_v3.CidrRange, len(m.GetSourcePrefixRanges()))
		for idx, v := range m.GetSourcePrefixRanges() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.SourcePrefixRanges[idx] = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_config_core_v3.CidrRange)
			} else {
				target.SourcePrefixRanges[idx] = proto.Clone(v).(*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_config_core_v3.CidrRange)
			}

		}
	}

	if m.GetPrefixRanges() != nil {
		target.PrefixRanges = make([]*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_config_core_v3.CidrRange, len(m.GetPrefixRanges()))
		for idx, v := range m.GetPrefixRanges() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.PrefixRanges[idx] = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_config_core_v3.CidrRange)
			} else {
				target.PrefixRanges[idx] = proto.Clone(v).(*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_config_core_v3.CidrRange)
			}

		}
	}

	if h, ok := interface{}(m.GetDestinationPort()).(clone.Cloner); ok {
		target.DestinationPort = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	} else {
		target.DestinationPort = proto.Clone(m.GetDestinationPort()).(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	}

	if m.GetPassthroughCipherSuites() != nil {
		target.PassthroughCipherSuites = make([]string, len(m.GetPassthroughCipherSuites()))
		for idx, v := range m.GetPassthroughCipherSuites() {

			target.PassthroughCipherSuites[idx] = v

		}
	}

	return target
}

// Clone function
func (m *AggregateListener) Clone() proto.Message {
	var target *AggregateListener
	if m == nil {
		return target
	}
	target = &AggregateListener{}

	if h, ok := interface{}(m.GetHttpResources()).(clone.Cloner); ok {
		target.HttpResources = h.Clone().(*AggregateListener_HttpResources)
	} else {
		target.HttpResources = proto.Clone(m.GetHttpResources()).(*AggregateListener_HttpResources)
	}

	if m.GetHttpFilterChains() != nil {
		target.HttpFilterChains = make([]*AggregateListener_HttpFilterChain, len(m.GetHttpFilterChains()))
		for idx, v := range m.GetHttpFilterChains() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.HttpFilterChains[idx] = h.Clone().(*AggregateListener_HttpFilterChain)
			} else {
				target.HttpFilterChains[idx] = proto.Clone(v).(*AggregateListener_HttpFilterChain)
			}

		}
	}

	if m.GetTcpListeners() != nil {
		target.TcpListeners = make([]*MatchedTcpListener, len(m.GetTcpListeners()))
		for idx, v := range m.GetTcpListeners() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.TcpListeners[idx] = h.Clone().(*MatchedTcpListener)
			} else {
				target.TcpListeners[idx] = proto.Clone(v).(*MatchedTcpListener)
			}

		}
	}

	return target
}

// Clone function
func (m *VirtualHost) Clone() proto.Message {
	var target *VirtualHost
	if m == nil {
		return target
	}
	target = &VirtualHost{}

	target.Name = m.GetName()

	if m.GetDomains() != nil {
		target.Domains = make([]string, len(m.GetDomains()))
		for idx, v := range m.GetDomains() {

			target.Domains[idx] = v

		}
	}

	if m.GetRoutes() != nil {
		target.Routes = make([]*Route, len(m.GetRoutes()))
		for idx, v := range m.GetRoutes() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Routes[idx] = h.Clone().(*Route)
			} else {
				target.Routes[idx] = proto.Clone(v).(*Route)
			}

		}
	}

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*VirtualHostOptions)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*VirtualHostOptions)
	}

	switch m.OpaqueMetadata.(type) {

	case *VirtualHost_Metadata:

		if h, ok := interface{}(m.GetMetadata()).(clone.Cloner); ok {
			target.OpaqueMetadata = &VirtualHost_Metadata{
				Metadata: h.Clone().(*google_golang_org_protobuf_types_known_structpb.Struct),
			}
		} else {
			target.OpaqueMetadata = &VirtualHost_Metadata{
				Metadata: proto.Clone(m.GetMetadata()).(*google_golang_org_protobuf_types_known_structpb.Struct),
			}
		}

	case *VirtualHost_MetadataStatic:

		if h, ok := interface{}(m.GetMetadataStatic()).(clone.Cloner); ok {
			target.OpaqueMetadata = &VirtualHost_MetadataStatic{
				MetadataStatic: h.Clone().(*SourceMetadata),
			}
		} else {
			target.OpaqueMetadata = &VirtualHost_MetadataStatic{
				MetadataStatic: proto.Clone(m.GetMetadataStatic()).(*SourceMetadata),
			}
		}

	}

	return target
}

// Clone function
func (m *Route) Clone() proto.Message {
	var target *Route
	if m == nil {
		return target
	}
	target = &Route{}

	if m.GetMatchers() != nil {
		target.Matchers = make([]*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_core_matchers.Matcher, len(m.GetMatchers()))
		for idx, v := range m.GetMatchers() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Matchers[idx] = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_core_matchers.Matcher)
			} else {
				target.Matchers[idx] = proto.Clone(v).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_core_matchers.Matcher)
			}

		}
	}

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*RouteOptions)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*RouteOptions)
	}

	target.Name = m.GetName()

	switch m.Action.(type) {

	case *Route_RouteAction:

		if h, ok := interface{}(m.GetRouteAction()).(clone.Cloner); ok {
			target.Action = &Route_RouteAction{
				RouteAction: h.Clone().(*RouteAction),
			}
		} else {
			target.Action = &Route_RouteAction{
				RouteAction: proto.Clone(m.GetRouteAction()).(*RouteAction),
			}
		}

	case *Route_RedirectAction:

		if h, ok := interface{}(m.GetRedirectAction()).(clone.Cloner); ok {
			target.Action = &Route_RedirectAction{
				RedirectAction: h.Clone().(*RedirectAction),
			}
		} else {
			target.Action = &Route_RedirectAction{
				RedirectAction: proto.Clone(m.GetRedirectAction()).(*RedirectAction),
			}
		}

	case *Route_DirectResponseAction:

		if h, ok := interface{}(m.GetDirectResponseAction()).(clone.Cloner); ok {
			target.Action = &Route_DirectResponseAction{
				DirectResponseAction: h.Clone().(*DirectResponseAction),
			}
		} else {
			target.Action = &Route_DirectResponseAction{
				DirectResponseAction: proto.Clone(m.GetDirectResponseAction()).(*DirectResponseAction),
			}
		}

	case *Route_GraphqlApiRef:

		if h, ok := interface{}(m.GetGraphqlApiRef()).(clone.Cloner); ok {
			target.Action = &Route_GraphqlApiRef{
				GraphqlApiRef: h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef),
			}
		} else {
			target.Action = &Route_GraphqlApiRef{
				GraphqlApiRef: proto.Clone(m.GetGraphqlApiRef()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef),
			}
		}

	}

	switch m.OpaqueMetadata.(type) {

	case *Route_Metadata:

		if h, ok := interface{}(m.GetMetadata()).(clone.Cloner); ok {
			target.OpaqueMetadata = &Route_Metadata{
				Metadata: h.Clone().(*google_golang_org_protobuf_types_known_structpb.Struct),
			}
		} else {
			target.OpaqueMetadata = &Route_Metadata{
				Metadata: proto.Clone(m.GetMetadata()).(*google_golang_org_protobuf_types_known_structpb.Struct),
			}
		}

	case *Route_MetadataStatic:

		if h, ok := interface{}(m.GetMetadataStatic()).(clone.Cloner); ok {
			target.OpaqueMetadata = &Route_MetadataStatic{
				MetadataStatic: h.Clone().(*SourceMetadata),
			}
		} else {
			target.OpaqueMetadata = &Route_MetadataStatic{
				MetadataStatic: proto.Clone(m.GetMetadataStatic()).(*SourceMetadata),
			}
		}

	}

	return target
}

// Clone function
func (m *RouteAction) Clone() proto.Message {
	var target *RouteAction
	if m == nil {
		return target
	}
	target = &RouteAction{}

	switch m.Destination.(type) {

	case *RouteAction_Single:

		if h, ok := interface{}(m.GetSingle()).(clone.Cloner); ok {
			target.Destination = &RouteAction_Single{
				Single: h.Clone().(*Destination),
			}
		} else {
			target.Destination = &RouteAction_Single{
				Single: proto.Clone(m.GetSingle()).(*Destination),
			}
		}

	case *RouteAction_Multi:

		if h, ok := interface{}(m.GetMulti()).(clone.Cloner); ok {
			target.Destination = &RouteAction_Multi{
				Multi: h.Clone().(*MultiDestination),
			}
		} else {
			target.Destination = &RouteAction_Multi{
				Multi: proto.Clone(m.GetMulti()).(*MultiDestination),
			}
		}

	case *RouteAction_UpstreamGroup:

		if h, ok := interface{}(m.GetUpstreamGroup()).(clone.Cloner); ok {
			target.Destination = &RouteAction_UpstreamGroup{
				UpstreamGroup: h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef),
			}
		} else {
			target.Destination = &RouteAction_UpstreamGroup{
				UpstreamGroup: proto.Clone(m.GetUpstreamGroup()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef),
			}
		}

	case *RouteAction_ClusterHeader:

		target.Destination = &RouteAction_ClusterHeader{
			ClusterHeader: m.GetClusterHeader(),
		}

	case *RouteAction_DynamicForwardProxy:

		if h, ok := interface{}(m.GetDynamicForwardProxy()).(clone.Cloner); ok {
			target.Destination = &RouteAction_DynamicForwardProxy{
				DynamicForwardProxy: h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_dynamic_forward_proxy.PerRouteConfig),
			}
		} else {
			target.Destination = &RouteAction_DynamicForwardProxy{
				DynamicForwardProxy: proto.Clone(m.GetDynamicForwardProxy()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_options_dynamic_forward_proxy.PerRouteConfig),
			}
		}

	}

	return target
}

// Clone function
func (m *Destination) Clone() proto.Message {
	var target *Destination
	if m == nil {
		return target
	}
	target = &Destination{}

	if h, ok := interface{}(m.GetDestinationSpec()).(clone.Cloner); ok {
		target.DestinationSpec = h.Clone().(*DestinationSpec)
	} else {
		target.DestinationSpec = proto.Clone(m.GetDestinationSpec()).(*DestinationSpec)
	}

	if h, ok := interface{}(m.GetSubset()).(clone.Cloner); ok {
		target.Subset = h.Clone().(*Subset)
	} else {
		target.Subset = proto.Clone(m.GetSubset()).(*Subset)
	}

	switch m.DestinationType.(type) {

	case *Destination_Upstream:

		if h, ok := interface{}(m.GetUpstream()).(clone.Cloner); ok {
			target.DestinationType = &Destination_Upstream{
				Upstream: h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef),
			}
		} else {
			target.DestinationType = &Destination_Upstream{
				Upstream: proto.Clone(m.GetUpstream()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef),
			}
		}

	case *Destination_Kube:

		if h, ok := interface{}(m.GetKube()).(clone.Cloner); ok {
			target.DestinationType = &Destination_Kube{
				Kube: h.Clone().(*KubernetesServiceDestination),
			}
		} else {
			target.DestinationType = &Destination_Kube{
				Kube: proto.Clone(m.GetKube()).(*KubernetesServiceDestination),
			}
		}

	case *Destination_Consul:

		if h, ok := interface{}(m.GetConsul()).(clone.Cloner); ok {
			target.DestinationType = &Destination_Consul{
				Consul: h.Clone().(*ConsulServiceDestination),
			}
		} else {
			target.DestinationType = &Destination_Consul{
				Consul: proto.Clone(m.GetConsul()).(*ConsulServiceDestination),
			}
		}

	}

	return target
}

// Clone function
func (m *KubernetesServiceDestination) Clone() proto.Message {
	var target *KubernetesServiceDestination
	if m == nil {
		return target
	}
	target = &KubernetesServiceDestination{}

	if h, ok := interface{}(m.GetRef()).(clone.Cloner); ok {
		target.Ref = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef)
	} else {
		target.Ref = proto.Clone(m.GetRef()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef)
	}

	target.Port = m.GetPort()

	return target
}

// Clone function
func (m *ConsulServiceDestination) Clone() proto.Message {
	var target *ConsulServiceDestination
	if m == nil {
		return target
	}
	target = &ConsulServiceDestination{}

	target.ServiceName = m.GetServiceName()

	if m.GetTags() != nil {
		target.Tags = make([]string, len(m.GetTags()))
		for idx, v := range m.GetTags() {

			target.Tags[idx] = v

		}
	}

	if m.GetDataCenters() != nil {
		target.DataCenters = make([]string, len(m.GetDataCenters()))
		for idx, v := range m.GetDataCenters() {

			target.DataCenters[idx] = v

		}
	}

	return target
}

// Clone function
func (m *UpstreamGroup) Clone() proto.Message {
	var target *UpstreamGroup
	if m == nil {
		return target
	}
	target = &UpstreamGroup{}

	if m.GetDestinations() != nil {
		target.Destinations = make([]*WeightedDestination, len(m.GetDestinations()))
		for idx, v := range m.GetDestinations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Destinations[idx] = h.Clone().(*WeightedDestination)
			} else {
				target.Destinations[idx] = proto.Clone(v).(*WeightedDestination)
			}

		}
	}

	if h, ok := interface{}(m.GetNamespacedStatuses()).(clone.Cloner); ok {
		target.NamespacedStatuses = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.NamespacedStatuses)
	} else {
		target.NamespacedStatuses = proto.Clone(m.GetNamespacedStatuses()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.NamespacedStatuses)
	}

	if h, ok := interface{}(m.GetMetadata()).(clone.Cloner); ok {
		target.Metadata = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Metadata)
	} else {
		target.Metadata = proto.Clone(m.GetMetadata()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.Metadata)
	}

	return target
}

// Clone function
func (m *MultiDestination) Clone() proto.Message {
	var target *MultiDestination
	if m == nil {
		return target
	}
	target = &MultiDestination{}

	if m.GetDestinations() != nil {
		target.Destinations = make([]*WeightedDestination, len(m.GetDestinations()))
		for idx, v := range m.GetDestinations() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Destinations[idx] = h.Clone().(*WeightedDestination)
			} else {
				target.Destinations[idx] = proto.Clone(v).(*WeightedDestination)
			}

		}
	}

	return target
}

// Clone function
func (m *WeightedDestination) Clone() proto.Message {
	var target *WeightedDestination
	if m == nil {
		return target
	}
	target = &WeightedDestination{}

	if h, ok := interface{}(m.GetDestination()).(clone.Cloner); ok {
		target.Destination = h.Clone().(*Destination)
	} else {
		target.Destination = proto.Clone(m.GetDestination()).(*Destination)
	}

	if h, ok := interface{}(m.GetWeight()).(clone.Cloner); ok {
		target.Weight = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	} else {
		target.Weight = proto.Clone(m.GetWeight()).(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	}

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*WeightedDestinationOptions)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*WeightedDestinationOptions)
	}

	return target
}

// Clone function
func (m *RedirectAction) Clone() proto.Message {
	var target *RedirectAction
	if m == nil {
		return target
	}
	target = &RedirectAction{}

	target.HostRedirect = m.GetHostRedirect()

	target.ResponseCode = m.GetResponseCode()

	target.HttpsRedirect = m.GetHttpsRedirect()

	target.StripQuery = m.GetStripQuery()

	if h, ok := interface{}(m.GetPortRedirect()).(clone.Cloner); ok {
		target.PortRedirect = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	} else {
		target.PortRedirect = proto.Clone(m.GetPortRedirect()).(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	}

	switch m.PathRewriteSpecifier.(type) {

	case *RedirectAction_PathRedirect:

		target.PathRewriteSpecifier = &RedirectAction_PathRedirect{
			PathRedirect: m.GetPathRedirect(),
		}

	case *RedirectAction_PrefixRewrite:

		target.PathRewriteSpecifier = &RedirectAction_PrefixRewrite{
			PrefixRewrite: m.GetPrefixRewrite(),
		}

	case *RedirectAction_RegexRewrite:

		if h, ok := interface{}(m.GetRegexRewrite()).(clone.Cloner); ok {
			target.PathRewriteSpecifier = &RedirectAction_RegexRewrite{
				RegexRewrite: h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_type_matcher_v3.RegexMatchAndSubstitute),
			}
		} else {
			target.PathRewriteSpecifier = &RedirectAction_RegexRewrite{
				RegexRewrite: proto.Clone(m.GetRegexRewrite()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_external_envoy_type_matcher_v3.RegexMatchAndSubstitute),
			}
		}

	}

	return target
}

// Clone function
func (m *DirectResponseAction) Clone() proto.Message {
	var target *DirectResponseAction
	if m == nil {
		return target
	}
	target = &DirectResponseAction{}

	target.Status = m.GetStatus()

	target.Body = m.GetBody()

	return target
}

// Clone function
func (m *SourceMetadata) Clone() proto.Message {
	var target *SourceMetadata
	if m == nil {
		return target
	}
	target = &SourceMetadata{}

	if m.GetSources() != nil {
		target.Sources = make([]*SourceMetadata_SourceRef, len(m.GetSources()))
		for idx, v := range m.GetSources() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Sources[idx] = h.Clone().(*SourceMetadata_SourceRef)
			} else {
				target.Sources[idx] = proto.Clone(v).(*SourceMetadata_SourceRef)
			}

		}
	}

	return target
}

// Clone function
func (m *CustomEnvoyFilter) Clone() proto.Message {
	var target *CustomEnvoyFilter
	if m == nil {
		return target
	}
	target = &CustomEnvoyFilter{}

	if h, ok := interface{}(m.GetFilterStage()).(clone.Cloner); ok {
		target.FilterStage = h.Clone().(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_filters.FilterStage)
	} else {
		target.FilterStage = proto.Clone(m.GetFilterStage()).(*github_com_solo_io_gloo_projects_gloo_pkg_api_v1_filters.FilterStage)
	}

	target.Name = m.GetName()

	if h, ok := interface{}(m.GetConfig()).(clone.Cloner); ok {
		target.Config = h.Clone().(*google_golang_org_protobuf_types_known_anypb.Any)
	} else {
		target.Config = proto.Clone(m.GetConfig()).(*google_golang_org_protobuf_types_known_anypb.Any)
	}

	return target
}

// Clone function
func (m *TcpHost_TcpAction) Clone() proto.Message {
	var target *TcpHost_TcpAction
	if m == nil {
		return target
	}
	target = &TcpHost_TcpAction{}

	switch m.Destination.(type) {

	case *TcpHost_TcpAction_Single:

		if h, ok := interface{}(m.GetSingle()).(clone.Cloner); ok {
			target.Destination = &TcpHost_TcpAction_Single{
				Single: h.Clone().(*Destination),
			}
		} else {
			target.Destination = &TcpHost_TcpAction_Single{
				Single: proto.Clone(m.GetSingle()).(*Destination),
			}
		}

	case *TcpHost_TcpAction_Multi:

		if h, ok := interface{}(m.GetMulti()).(clone.Cloner); ok {
			target.Destination = &TcpHost_TcpAction_Multi{
				Multi: h.Clone().(*MultiDestination),
			}
		} else {
			target.Destination = &TcpHost_TcpAction_Multi{
				Multi: proto.Clone(m.GetMulti()).(*MultiDestination),
			}
		}

	case *TcpHost_TcpAction_UpstreamGroup:

		if h, ok := interface{}(m.GetUpstreamGroup()).(clone.Cloner); ok {
			target.Destination = &TcpHost_TcpAction_UpstreamGroup{
				UpstreamGroup: h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef),
			}
		} else {
			target.Destination = &TcpHost_TcpAction_UpstreamGroup{
				UpstreamGroup: proto.Clone(m.GetUpstreamGroup()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef),
			}
		}

	case *TcpHost_TcpAction_ForwardSniClusterName:

		if h, ok := interface{}(m.GetForwardSniClusterName()).(clone.Cloner); ok {
			target.Destination = &TcpHost_TcpAction_ForwardSniClusterName{
				ForwardSniClusterName: h.Clone().(*google_golang_org_protobuf_types_known_emptypb.Empty),
			}
		} else {
			target.Destination = &TcpHost_TcpAction_ForwardSniClusterName{
				ForwardSniClusterName: proto.Clone(m.GetForwardSniClusterName()).(*google_golang_org_protobuf_types_known_emptypb.Empty),
			}
		}

	}

	return target
}

// Clone function
func (m *AggregateListener_HttpResources) Clone() proto.Message {
	var target *AggregateListener_HttpResources
	if m == nil {
		return target
	}
	target = &AggregateListener_HttpResources{}

	if m.GetVirtualHosts() != nil {
		target.VirtualHosts = make(map[string]*VirtualHost, len(m.GetVirtualHosts()))
		for k, v := range m.GetVirtualHosts() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.VirtualHosts[k] = h.Clone().(*VirtualHost)
			} else {
				target.VirtualHosts[k] = proto.Clone(v).(*VirtualHost)
			}

		}
	}

	if m.GetHttpOptions() != nil {
		target.HttpOptions = make(map[string]*HttpListenerOptions, len(m.GetHttpOptions()))
		for k, v := range m.GetHttpOptions() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.HttpOptions[k] = h.Clone().(*HttpListenerOptions)
			} else {
				target.HttpOptions[k] = proto.Clone(v).(*HttpListenerOptions)
			}

		}
	}

	return target
}

// Clone function
func (m *AggregateListener_HttpFilterChain) Clone() proto.Message {
	var target *AggregateListener_HttpFilterChain
	if m == nil {
		return target
	}
	target = &AggregateListener_HttpFilterChain{}

	if h, ok := interface{}(m.GetMatcher()).(clone.Cloner); ok {
		target.Matcher = h.Clone().(*Matcher)
	} else {
		target.Matcher = proto.Clone(m.GetMatcher()).(*Matcher)
	}

	target.HttpOptionsRef = m.GetHttpOptionsRef()

	if m.GetVirtualHostRefs() != nil {
		target.VirtualHostRefs = make([]string, len(m.GetVirtualHostRefs()))
		for idx, v := range m.GetVirtualHostRefs() {

			target.VirtualHostRefs[idx] = v

		}
	}

	if m.GetCustomHttpFilters() != nil {
		target.CustomHttpFilters = make([]*CustomEnvoyFilter, len(m.GetCustomHttpFilters()))
		for idx, v := range m.GetCustomHttpFilters() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.CustomHttpFilters[idx] = h.Clone().(*CustomEnvoyFilter)
			} else {
				target.CustomHttpFilters[idx] = proto.Clone(v).(*CustomEnvoyFilter)
			}

		}
	}

	if m.GetCustomNetworkFilters() != nil {
		target.CustomNetworkFilters = make([]*CustomEnvoyFilter, len(m.GetCustomNetworkFilters()))
		for idx, v := range m.GetCustomNetworkFilters() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.CustomNetworkFilters[idx] = h.Clone().(*CustomEnvoyFilter)
			} else {
				target.CustomNetworkFilters[idx] = proto.Clone(v).(*CustomEnvoyFilter)
			}

		}
	}

	return target
}

// Clone function
func (m *SourceMetadata_SourceRef) Clone() proto.Message {
	var target *SourceMetadata_SourceRef
	if m == nil {
		return target
	}
	target = &SourceMetadata_SourceRef{}

	if h, ok := interface{}(m.GetResourceRef()).(clone.Cloner); ok {
		target.ResourceRef = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef)
	} else {
		target.ResourceRef = proto.Clone(m.GetResourceRef()).(*github_com_solo_io_solo_kit_pkg_api_v1_resources_core.ResourceRef)
	}

	target.ResourceKind = m.GetResourceKind()

	target.ObservedGeneration = m.GetObservedGeneration()

	return target
}
