// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options.proto

package v1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	v2 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/config/filter/http/gzip/v2"
	v3 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/filters/http/buffer/v3"
	v31 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/filters/http/csrf/v3"
	proxylatency "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/proxylatency"
	v32 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/type/matcher/v3"
	caching "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/caching"
	dlp "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/dlp"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/extauth/v1"
	extproc "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/extproc"
	jwt "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/jwt"
	ratelimit "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/ratelimit"
	rbac "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/rbac"
	waf "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/waf"
	als "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/als"
	aws "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/aws"
	azure "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/azure"
	connection_limit "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/connection_limit"
	cors "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/cors"
	dynamic_forward_proxy "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/dynamic_forward_proxy"
	faultinjection "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/faultinjection"
	grpc "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/grpc"
	grpc_json "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/grpc_json"
	grpc_web "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/grpc_web"
	hcm "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/hcm"
	headers "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/headers"
	healthcheck "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/healthcheck"
	lbhash "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/lbhash"
	local_ratelimit "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/local_ratelimit"
	protocol_upgrade "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/protocol_upgrade"
	proxy_protocol "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/proxy_protocol"
	rest "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/rest"
	retries "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/retries"
	router "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/router"
	shadowing "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/shadowing"
	stats "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/stats"
	tap "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/tap"
	tcp "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/tcp"
	tracing "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/tracing"
	transformation "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/transformation"
	wasm "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/wasm"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Optional, feature-specific configuration that lives on gateways.
// Each ListenerOption object contains configuration for a specific feature.
// Note to developers: new Listener plugins must be added to this struct
// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
type ListenerOptions struct {
	state                protoimpl.MessageState    `protogen:"open.v1"`
	AccessLoggingService *als.AccessLoggingService `protobuf:"bytes,1,opt,name=access_logging_service,json=accessLoggingService,proto3" json:"access_logging_service,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,2,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Soft limit on size of the listener's new connection read and write buffers. If unspecified, defaults to 1MiB
	// For more info, check out the [Envoy docs](https://www.envoyproxy.io/docs/envoy/v1.14.1/api-v2/api/v2/listener.proto)
	PerConnectionBufferLimitBytes *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=per_connection_buffer_limit_bytes,json=perConnectionBufferLimitBytes,proto3" json:"per_connection_buffer_limit_bytes,omitempty"`
	// Additional socket options that may not be present in Envoy source code or
	// precompiled binaries.
	SocketOptions []*core.SocketOption `protobuf:"bytes,4,rep,name=socket_options,json=socketOptions,proto3" json:"socket_options,omitempty"`
	// Enable ProxyProtocol support for this listener.
	ProxyProtocol *proxy_protocol.ProxyProtocol `protobuf:"bytes,5,opt,name=proxy_protocol,json=proxyProtocol,proto3" json:"proxy_protocol,omitempty"`
	// Configuration for listener connection balancing.
	ConnectionBalanceConfig *ConnectionBalanceConfig `protobuf:"bytes,6,opt,name=connection_balance_config,json=connectionBalanceConfig,proto3" json:"connection_balance_config,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *ListenerOptions) Reset() {
	*x = ListenerOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerOptions) ProtoMessage() {}

func (x *ListenerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerOptions.ProtoReflect.Descriptor instead.
func (*ListenerOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescGZIP(), []int{0}
}

func (x *ListenerOptions) GetAccessLoggingService() *als.AccessLoggingService {
	if x != nil {
		return x.AccessLoggingService
	}
	return nil
}

func (x *ListenerOptions) GetExtensions() *Extensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *ListenerOptions) GetPerConnectionBufferLimitBytes() *wrappers.UInt32Value {
	if x != nil {
		return x.PerConnectionBufferLimitBytes
	}
	return nil
}

func (x *ListenerOptions) GetSocketOptions() []*core.SocketOption {
	if x != nil {
		return x.SocketOptions
	}
	return nil
}

func (x *ListenerOptions) GetProxyProtocol() *proxy_protocol.ProxyProtocol {
	if x != nil {
		return x.ProxyProtocol
	}
	return nil
}

func (x *ListenerOptions) GetConnectionBalanceConfig() *ConnectionBalanceConfig {
	if x != nil {
		return x.ConnectionBalanceConfig
	}
	return nil
}

// Configuration for listener connection balancing.
type ConnectionBalanceConfig struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	ExactBalance  *ConnectionBalanceConfig_ExactBalance `protobuf:"bytes,1,opt,name=exact_balance,json=exactBalance,proto3" json:"exact_balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionBalanceConfig) Reset() {
	*x = ConnectionBalanceConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionBalanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionBalanceConfig) ProtoMessage() {}

func (x *ConnectionBalanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionBalanceConfig.ProtoReflect.Descriptor instead.
func (*ConnectionBalanceConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectionBalanceConfig) GetExactBalance() *ConnectionBalanceConfig_ExactBalance {
	if x != nil {
		return x.ExactBalance
	}
	return nil
}

type RouteConfigurationOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum bytes of the response direct response body size. If not specified the default is 4096.
	// Please refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-v3-api-field-config-route-v3-routeconfiguration-max-direct-response-body-size-bytes)
	// for more details about the `max_direct_response_body_size_bytes` attribute.
	MaxDirectResponseBodySizeBytes *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=max_direct_response_body_size_bytes,json=maxDirectResponseBodySizeBytes,proto3" json:"max_direct_response_body_size_bytes,omitempty"`
	// By default, headers that should be added/removed are evaluated from most to least specific.
	// To allow setting overrides at the route or virtual host level, this order can be reversed by setting this option to true.
	// Refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-v3-api-field-config-route-v3-routeconfiguration-most-specific-header-mutations-wins) for more details.
	MostSpecificHeaderMutationsWins *wrappers.BoolValue `protobuf:"bytes,2,opt,name=most_specific_header_mutations_wins,json=mostSpecificHeaderMutationsWins,proto3" json:"most_specific_header_mutations_wins,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *RouteConfigurationOptions) Reset() {
	*x = RouteConfigurationOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteConfigurationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteConfigurationOptions) ProtoMessage() {}

func (x *RouteConfigurationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteConfigurationOptions.ProtoReflect.Descriptor instead.
func (*RouteConfigurationOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescGZIP(), []int{2}
}

func (x *RouteConfigurationOptions) GetMaxDirectResponseBodySizeBytes() *wrappers.UInt32Value {
	if x != nil {
		return x.MaxDirectResponseBodySizeBytes
	}
	return nil
}

func (x *RouteConfigurationOptions) GetMostSpecificHeaderMutationsWins() *wrappers.BoolValue {
	if x != nil {
		return x.MostSpecificHeaderMutationsWins
	}
	return nil
}

// Optional, feature-specific configuration that lives on http listeners
type HttpListenerOptions struct {
	state                         protoimpl.MessageState             `protogen:"open.v1"`
	GrpcWeb                       *grpc_web.GrpcWeb                  `protobuf:"bytes,1,opt,name=grpc_web,json=grpcWeb,proto3" json:"grpc_web,omitempty"`
	HttpConnectionManagerSettings *hcm.HttpConnectionManagerSettings `protobuf:"bytes,2,opt,name=http_connection_manager_settings,json=httpConnectionManagerSettings,proto3" json:"http_connection_manager_settings,omitempty"`
	// enable [Envoy health checks](https://www.envoyproxy.io/docs/envoy/v1.7.0/api-v2/config/filter/http/health_check/v2/health_check.proto) on this listener
	HealthCheck *healthcheck.HealthCheck `protobuf:"bytes,4,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,3,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Enterprise-only: Config for Web Application Firewall (WAF), supporting
	// the popular ModSecurity 3.0 ruleset
	Waf *waf.Settings `protobuf:"bytes,5,opt,name=waf,proto3" json:"waf,omitempty"`
	// Enterprise-only: Config for data loss prevention
	Dlp *dlp.FilterConfig `protobuf:"bytes,6,opt,name=dlp,proto3" json:"dlp,omitempty"`
	// Enterprise-only: WASM related configuration [experimental!]
	Wasm *wasm.PluginSource `protobuf:"bytes,7,opt,name=wasm,proto3" json:"wasm,omitempty"`
	// Enterprise-only: External auth related settings
	Extauth *v1.Settings `protobuf:"bytes,10,opt,name=extauth,proto3" json:"extauth,omitempty"`
	// Enterprise-only: Settings for the rate limiting server itself
	RatelimitServer *ratelimit.Settings `protobuf:"bytes,11,opt,name=ratelimit_server,json=ratelimitServer,proto3" json:"ratelimit_server,omitempty"`
	// Enterprise-only: Settings for the cache server itself
	Caching *caching.Settings `protobuf:"bytes,17,opt,name=caching,proto3" json:"caching,omitempty"`
	// Types that are valid to be assigned to ExtProcConfig:
	//
	//	*HttpListenerOptions_DisableExtProc
	//	*HttpListenerOptions_ExtProc
	ExtProcConfig isHttpListenerOptions_ExtProcConfig `protobuf_oneof:"ext_proc_config"`
	// Gzip is an HTTP option which enables Gloo to compress
	// data returned from an upstream service upon client request.
	// Compression is useful in situations where large payloads need to be transmitted without compromising the response time.
	// Example:
	// ```
	// gzip:
	//
	//	contentType:
	//	- "application/json"
	//	compressionLevel: BEST
	//
	// ```
	Gzip *v2.Gzip `protobuf:"bytes,8,opt,name=gzip,proto3" json:"gzip,omitempty"`
	// Enterprise-only: Proxy latency
	ProxyLatency *proxylatency.ProxyLatency `protobuf:"bytes,9,opt,name=proxy_latency,json=proxyLatency,proto3" json:"proxy_latency,omitempty"`
	// Buffer can be used to set the maximum request size
	// that the filter will buffer before the connection
	// manager will stop buffering and return a 413 response.
	Buffer *v3.Buffer `protobuf:"bytes,12,opt,name=buffer,proto3" json:"buffer,omitempty"`
	// Csrf can be used to set percent of requests for which the CSRF filter is enabled, enable shadow-only mode
	// where policies will be evaluated and tracked, but not enforced and add additional source origins
	// that will be allowed in addition to the destination origin.
	// For more, see https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/http/csrf/v2/csrf.proto
	Csrf *v31.CsrfPolicy `protobuf:"bytes,15,opt,name=csrf,proto3" json:"csrf,omitempty"`
	// Exposed envoy config for the gRPC to JSON transcoding filter,
	// envoy.filters.http.grpc_json_transcoder.
	// For more, see https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/grpc_json_transcoder/v3/transcoder.proto
	GrpcJsonTranscoder *grpc_json.GrpcJsonTranscoder `protobuf:"bytes,13,opt,name=grpc_json_transcoder,json=grpcJsonTranscoder,proto3" json:"grpc_json_transcoder,omitempty"`
	// Enterprise-only: If using the HTTP header specified by cluster_header to direct traffic to a cluster,
	// this option will sanitize that header from downstream traffic.
	// Defaults to false
	SanitizeClusterHeader *wrappers.BoolValue `protobuf:"bytes,14,opt,name=sanitize_cluster_header,json=sanitizeClusterHeader,proto3" json:"sanitize_cluster_header,omitempty"`
	// Enterprise-only: Setting this value to true will grab the leftmost IP address from
	// the x-forwarded-for header and set it as the downstream address.
	// It is worth noting that the x-forwarded-for header can be tampered with by clients
	// and should therefore be sanitized by any preceding proxies / load balancers if this option is to be used.
	LeftmostXffAddress  *wrappers.BoolValue                 `protobuf:"bytes,16,opt,name=leftmost_xff_address,json=leftmostXffAddress,proto3" json:"leftmost_xff_address,omitempty"`
	DynamicForwardProxy *dynamic_forward_proxy.FilterConfig `protobuf:"bytes,28,opt,name=dynamic_forward_proxy,json=dynamicForwardProxy,proto3" json:"dynamic_forward_proxy,omitempty"`
	// ConnectionLimit can be used to limit the number of active connections per gateway. Useful for resource protection as well as DoS prevention.
	ConnectionLimit *connection_limit.ConnectionLimit `protobuf:"bytes,29,opt,name=connection_limit,json=connectionLimit,proto3" json:"connection_limit,omitempty"`
	// NetworkLocalRatelimit can be used to rate limit the connections per gateway at the L4 layer and works pre-auth.
	// It uses envoy's own local rate limit filter to do so, without the need for an external rate limit server to be set up.
	NetworkLocalRatelimit *local_ratelimit.TokenBucket `protobuf:"bytes,32,opt,name=network_local_ratelimit,json=networkLocalRatelimit,proto3" json:"network_local_ratelimit,omitempty"`
	// HttpLocalRatelimit can be used to rate limit the number of requests per gateway and works pre-auth.
	// Unlike the NetworkLocalRatelimit, this works as part of the HCM (ie: L7 layer).
	// All virtual host and routes that are part of this gateway will share this rate limit unless explicity configured with another limit.
	// It uses envoy's own local rate limit filter to do so, without the need for an external rate limit server to be set up.
	HttpLocalRatelimit *local_ratelimit.Settings `protobuf:"bytes,33,opt,name=http_local_ratelimit,json=httpLocalRatelimit,proto3" json:"http_local_ratelimit,omitempty"`
	// Router is an extension of the envoy http filters
	// Maps to https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/router/v3/router.proto
	Router *router.Router `protobuf:"bytes,18,opt,name=router,proto3" json:"router,omitempty"`
	// Enterprise only: Tap filter settings (experimental).
	Tap           *tap.Tap `protobuf:"bytes,34,opt,name=tap,proto3" json:"tap,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpListenerOptions) Reset() {
	*x = HttpListenerOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpListenerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpListenerOptions) ProtoMessage() {}

func (x *HttpListenerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpListenerOptions.ProtoReflect.Descriptor instead.
func (*HttpListenerOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescGZIP(), []int{3}
}

func (x *HttpListenerOptions) GetGrpcWeb() *grpc_web.GrpcWeb {
	if x != nil {
		return x.GrpcWeb
	}
	return nil
}

func (x *HttpListenerOptions) GetHttpConnectionManagerSettings() *hcm.HttpConnectionManagerSettings {
	if x != nil {
		return x.HttpConnectionManagerSettings
	}
	return nil
}

func (x *HttpListenerOptions) GetHealthCheck() *healthcheck.HealthCheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *HttpListenerOptions) GetExtensions() *Extensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *HttpListenerOptions) GetWaf() *waf.Settings {
	if x != nil {
		return x.Waf
	}
	return nil
}

func (x *HttpListenerOptions) GetDlp() *dlp.FilterConfig {
	if x != nil {
		return x.Dlp
	}
	return nil
}

func (x *HttpListenerOptions) GetWasm() *wasm.PluginSource {
	if x != nil {
		return x.Wasm
	}
	return nil
}

func (x *HttpListenerOptions) GetExtauth() *v1.Settings {
	if x != nil {
		return x.Extauth
	}
	return nil
}

func (x *HttpListenerOptions) GetRatelimitServer() *ratelimit.Settings {
	if x != nil {
		return x.RatelimitServer
	}
	return nil
}

func (x *HttpListenerOptions) GetCaching() *caching.Settings {
	if x != nil {
		return x.Caching
	}
	return nil
}

func (x *HttpListenerOptions) GetExtProcConfig() isHttpListenerOptions_ExtProcConfig {
	if x != nil {
		return x.ExtProcConfig
	}
	return nil
}

func (x *HttpListenerOptions) GetDisableExtProc() *wrappers.BoolValue {
	if x != nil {
		if x, ok := x.ExtProcConfig.(*HttpListenerOptions_DisableExtProc); ok {
			return x.DisableExtProc
		}
	}
	return nil
}

func (x *HttpListenerOptions) GetExtProc() *extproc.Settings {
	if x != nil {
		if x, ok := x.ExtProcConfig.(*HttpListenerOptions_ExtProc); ok {
			return x.ExtProc
		}
	}
	return nil
}

func (x *HttpListenerOptions) GetGzip() *v2.Gzip {
	if x != nil {
		return x.Gzip
	}
	return nil
}

func (x *HttpListenerOptions) GetProxyLatency() *proxylatency.ProxyLatency {
	if x != nil {
		return x.ProxyLatency
	}
	return nil
}

func (x *HttpListenerOptions) GetBuffer() *v3.Buffer {
	if x != nil {
		return x.Buffer
	}
	return nil
}

func (x *HttpListenerOptions) GetCsrf() *v31.CsrfPolicy {
	if x != nil {
		return x.Csrf
	}
	return nil
}

func (x *HttpListenerOptions) GetGrpcJsonTranscoder() *grpc_json.GrpcJsonTranscoder {
	if x != nil {
		return x.GrpcJsonTranscoder
	}
	return nil
}

func (x *HttpListenerOptions) GetSanitizeClusterHeader() *wrappers.BoolValue {
	if x != nil {
		return x.SanitizeClusterHeader
	}
	return nil
}

func (x *HttpListenerOptions) GetLeftmostXffAddress() *wrappers.BoolValue {
	if x != nil {
		return x.LeftmostXffAddress
	}
	return nil
}

func (x *HttpListenerOptions) GetDynamicForwardProxy() *dynamic_forward_proxy.FilterConfig {
	if x != nil {
		return x.DynamicForwardProxy
	}
	return nil
}

func (x *HttpListenerOptions) GetConnectionLimit() *connection_limit.ConnectionLimit {
	if x != nil {
		return x.ConnectionLimit
	}
	return nil
}

func (x *HttpListenerOptions) GetNetworkLocalRatelimit() *local_ratelimit.TokenBucket {
	if x != nil {
		return x.NetworkLocalRatelimit
	}
	return nil
}

func (x *HttpListenerOptions) GetHttpLocalRatelimit() *local_ratelimit.Settings {
	if x != nil {
		return x.HttpLocalRatelimit
	}
	return nil
}

func (x *HttpListenerOptions) GetRouter() *router.Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *HttpListenerOptions) GetTap() *tap.Tap {
	if x != nil {
		return x.Tap
	}
	return nil
}

type isHttpListenerOptions_ExtProcConfig interface {
	isHttpListenerOptions_ExtProcConfig()
}

type HttpListenerOptions_DisableExtProc struct {
	// Enterprise-only: Set to true to disable the External Processing filter for this listener.
	// This can be overridden by child VirtualHostOptions or RouteOptions.
	DisableExtProc *wrappers.BoolValue `protobuf:"bytes,30,opt,name=disable_ext_proc,json=disableExtProc,proto3,oneof"`
}

type HttpListenerOptions_ExtProc struct {
	// Enterprise-only: External Processing filter settings for the listener. This can be used to
	// override the defaults from the global settings (via shallow merge). Some of the settings
	// on the listener can be overridden by child VirtualHostOptions or RouteOptions.
	ExtProc *extproc.Settings `protobuf:"bytes,31,opt,name=ext_proc,json=extProc,proto3,oneof"`
}

func (*HttpListenerOptions_DisableExtProc) isHttpListenerOptions_ExtProcConfig() {}

func (*HttpListenerOptions_ExtProc) isHttpListenerOptions_ExtProcConfig() {}

// Optional, feature-specific configuration that lives on tcp listeners
type TcpListenerOptions struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TcpProxySettings *tcp.TcpProxySettings  `protobuf:"bytes,3,opt,name=tcp_proxy_settings,json=tcpProxySettings,proto3" json:"tcp_proxy_settings,omitempty"`
	// ConnectionLimit can be used to limit the number of active connections per gateway. Useful for resource protection as well as DoS prevention.
	ConnectionLimit *connection_limit.ConnectionLimit `protobuf:"bytes,4,opt,name=connection_limit,json=connectionLimit,proto3" json:"connection_limit,omitempty"`
	// LocalRatelimit can be used to rate limit the connections per gateway at the L4 layer.
	// It uses envoy's own local rate limit filter to do so, without the need for an external rate limit server to be set up.
	LocalRatelimit *local_ratelimit.TokenBucket `protobuf:"bytes,5,opt,name=local_ratelimit,json=localRatelimit,proto3" json:"local_ratelimit,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TcpListenerOptions) Reset() {
	*x = TcpListenerOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpListenerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpListenerOptions) ProtoMessage() {}

func (x *TcpListenerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpListenerOptions.ProtoReflect.Descriptor instead.
func (*TcpListenerOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescGZIP(), []int{4}
}

func (x *TcpListenerOptions) GetTcpProxySettings() *tcp.TcpProxySettings {
	if x != nil {
		return x.TcpProxySettings
	}
	return nil
}

func (x *TcpListenerOptions) GetConnectionLimit() *connection_limit.ConnectionLimit {
	if x != nil {
		return x.ConnectionLimit
	}
	return nil
}

func (x *TcpListenerOptions) GetLocalRatelimit() *local_ratelimit.TokenBucket {
	if x != nil {
		return x.LocalRatelimit
	}
	return nil
}

// Optional, feature-specific configuration that lives on virtual hosts.
// Each VirtualHostOptions object contains configuration for a specific feature.
// Note to developers: new Virtual Host plugins must be added to this struct
// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
type VirtualHostOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions          `protobuf:"bytes,1,opt,name=extensions,proto3" json:"extensions,omitempty"`
	Retries    *retries.RetryPolicy `protobuf:"bytes,5,opt,name=retries,proto3" json:"retries,omitempty"`
	Stats      *stats.Stats         `protobuf:"bytes,10,opt,name=stats,proto3" json:"stats,omitempty"`
	// Append/Remove headers on Requests or Responses on all routes contained in this Virtual Host
	HeaderManipulation *headers.HeaderManipulation `protobuf:"bytes,2,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// Defines a CORS policy for the virtual host
	// If a CORS policy is also defined on the route matched by the request, the policies are merged.
	Cors *cors.CorsPolicy `protobuf:"bytes,3,opt,name=cors,proto3" json:"cors,omitempty"`
	// Transformations to apply. Note: this field is superseded by `staged_transformations`.
	// If `staged_transformations.regular` is set, this field will be ignored.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/options.proto.
	Transformations *transformation.Transformations `protobuf:"bytes,4,opt,name=transformations,proto3" json:"transformations,omitempty"`
	// Enterprise-only: Config for GlooE rate-limiting using simplified (gloo-specific) API
	RatelimitBasic *ratelimit.IngressRateLimit `protobuf:"bytes,6,opt,name=ratelimit_basic,json=ratelimitBasic,proto3" json:"ratelimit_basic,omitempty"`
	// Types that are valid to be assigned to RateLimitEarlyConfigType:
	//
	//	*VirtualHostOptions_RatelimitEarly
	//	*VirtualHostOptions_RateLimitEarlyConfigs
	RateLimitEarlyConfigType isVirtualHostOptions_RateLimitEarlyConfigType `protobuf_oneof:"rate_limit_early_config_type"`
	// Types that are valid to be assigned to RateLimitConfigType:
	//
	//	*VirtualHostOptions_Ratelimit
	//	*VirtualHostOptions_RateLimitConfigs
	RateLimitConfigType isVirtualHostOptions_RateLimitConfigType `protobuf_oneof:"rate_limit_config_type"`
	// Types that are valid to be assigned to RateLimitRegularConfigType:
	//
	//	*VirtualHostOptions_RatelimitRegular
	//	*VirtualHostOptions_RateLimitRegularConfigs
	RateLimitRegularConfigType isVirtualHostOptions_RateLimitRegularConfigType `protobuf_oneof:"rate_limit_regular_config_type"`
	// Enterprise-only: Config for Web Application Firewall (WAF), supporting
	// the popular ModSecurity 3.0 ruleset
	Waf *waf.Settings `protobuf:"bytes,8,opt,name=waf,proto3" json:"waf,omitempty"`
	// Types that are valid to be assigned to JwtConfig:
	//
	//	*VirtualHostOptions_Jwt
	//	*VirtualHostOptions_JwtStaged
	JwtConfig isVirtualHostOptions_JwtConfig `protobuf_oneof:"jwt_config"`
	// Enterprise-only: Config for RBAC (currently only supports RBAC based on JWT claims)
	Rbac *rbac.ExtensionSettings `protobuf:"bytes,11,opt,name=rbac,proto3" json:"rbac,omitempty"`
	// Enterprise-only: Authentication configuration
	Extauth *v1.ExtAuthExtension `protobuf:"bytes,12,opt,name=extauth,proto3" json:"extauth,omitempty"`
	// Enterprise-only: Config for data loss prevention
	Dlp *dlp.Config `protobuf:"bytes,13,opt,name=dlp,proto3" json:"dlp,omitempty"`
	// BufferPerRoute can be used to set the maximum request size
	// that the filter will buffer before the connection
	// manager will stop buffering and return a 413 response.
	// Note: If you have not set a global config (at the gateway level), this
	// override will not do anything by itself.
	BufferPerRoute *v3.BufferPerRoute `protobuf:"bytes,14,opt,name=buffer_per_route,json=bufferPerRoute,proto3" json:"buffer_per_route,omitempty"`
	// Csrf can be used to set percent of requests for which the CSRF filter is enabled, enable shadow-only mode
	// where policies will be evaluated and tracked, but not enforced and add additional source origins
	// that will be allowed in addition to the destination origin.
	// For more, see https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/http/csrf/v2/csrf.proto
	Csrf *v31.CsrfPolicy `protobuf:"bytes,18,opt,name=csrf,proto3" json:"csrf,omitempty"`
	// IncludeRequestAttemptCount decides whether the x-envoy-attempt-count header
	// should be included in the upstream request.
	// Setting this option will cause it to override any existing header value,
	// so in the case of two Envoys on the request path with this option enabled,
	// the upstream will see the attempt count as perceived by the second Envoy.
	// Defaults to false.
	IncludeRequestAttemptCount *wrappers.BoolValue `protobuf:"bytes,15,opt,name=include_request_attempt_count,json=includeRequestAttemptCount,proto3" json:"include_request_attempt_count,omitempty"`
	// IncludeAttemptCountInResponse decides whether the x-envoy-attempt-count header
	// should be included in the downstream response.
	// Setting this option will cause the router to override any existing header value,
	// so in the case of two Envoys on the request path with this option enabled,
	// the downstream will see the attempt count as perceived by the Envoy closest upstream from itself.
	// Defaults to false.
	IncludeAttemptCountInResponse *wrappers.BoolValue `protobuf:"bytes,16,opt,name=include_attempt_count_in_response,json=includeAttemptCountInResponse,proto3" json:"include_attempt_count_in_response,omitempty"`
	// Early transformations stage. These transformations run before most other options are processed.
	// If the `regular` field is set in here, the `transformations` field is ignored.
	StagedTransformations *transformation.TransformationStages `protobuf:"bytes,17,opt,name=staged_transformations,json=stagedTransformations,proto3" json:"staged_transformations,omitempty"`
	// Enterprise-only: External Processing filter settings for the virtual host. This can be used to
	// override certain HttpListenerOptions settings, and can be overridden by RouteOptions settings.
	ExtProc       *extproc.RouteSettings `protobuf:"bytes,30,opt,name=ext_proc,json=extProc,proto3" json:"ext_proc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VirtualHostOptions) Reset() {
	*x = VirtualHostOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualHostOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualHostOptions) ProtoMessage() {}

func (x *VirtualHostOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualHostOptions.ProtoReflect.Descriptor instead.
func (*VirtualHostOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescGZIP(), []int{5}
}

func (x *VirtualHostOptions) GetExtensions() *Extensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *VirtualHostOptions) GetRetries() *retries.RetryPolicy {
	if x != nil {
		return x.Retries
	}
	return nil
}

func (x *VirtualHostOptions) GetStats() *stats.Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *VirtualHostOptions) GetHeaderManipulation() *headers.HeaderManipulation {
	if x != nil {
		return x.HeaderManipulation
	}
	return nil
}

func (x *VirtualHostOptions) GetCors() *cors.CorsPolicy {
	if x != nil {
		return x.Cors
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/options.proto.
func (x *VirtualHostOptions) GetTransformations() *transformation.Transformations {
	if x != nil {
		return x.Transformations
	}
	return nil
}

func (x *VirtualHostOptions) GetRatelimitBasic() *ratelimit.IngressRateLimit {
	if x != nil {
		return x.RatelimitBasic
	}
	return nil
}

func (x *VirtualHostOptions) GetRateLimitEarlyConfigType() isVirtualHostOptions_RateLimitEarlyConfigType {
	if x != nil {
		return x.RateLimitEarlyConfigType
	}
	return nil
}

func (x *VirtualHostOptions) GetRatelimitEarly() *ratelimit.RateLimitVhostExtension {
	if x != nil {
		if x, ok := x.RateLimitEarlyConfigType.(*VirtualHostOptions_RatelimitEarly); ok {
			return x.RatelimitEarly
		}
	}
	return nil
}

func (x *VirtualHostOptions) GetRateLimitEarlyConfigs() *ratelimit.RateLimitConfigRefs {
	if x != nil {
		if x, ok := x.RateLimitEarlyConfigType.(*VirtualHostOptions_RateLimitEarlyConfigs); ok {
			return x.RateLimitEarlyConfigs
		}
	}
	return nil
}

func (x *VirtualHostOptions) GetRateLimitConfigType() isVirtualHostOptions_RateLimitConfigType {
	if x != nil {
		return x.RateLimitConfigType
	}
	return nil
}

func (x *VirtualHostOptions) GetRatelimit() *ratelimit.RateLimitVhostExtension {
	if x != nil {
		if x, ok := x.RateLimitConfigType.(*VirtualHostOptions_Ratelimit); ok {
			return x.Ratelimit
		}
	}
	return nil
}

func (x *VirtualHostOptions) GetRateLimitConfigs() *ratelimit.RateLimitConfigRefs {
	if x != nil {
		if x, ok := x.RateLimitConfigType.(*VirtualHostOptions_RateLimitConfigs); ok {
			return x.RateLimitConfigs
		}
	}
	return nil
}

func (x *VirtualHostOptions) GetRateLimitRegularConfigType() isVirtualHostOptions_RateLimitRegularConfigType {
	if x != nil {
		return x.RateLimitRegularConfigType
	}
	return nil
}

func (x *VirtualHostOptions) GetRatelimitRegular() *ratelimit.RateLimitVhostExtension {
	if x != nil {
		if x, ok := x.RateLimitRegularConfigType.(*VirtualHostOptions_RatelimitRegular); ok {
			return x.RatelimitRegular
		}
	}
	return nil
}

func (x *VirtualHostOptions) GetRateLimitRegularConfigs() *ratelimit.RateLimitConfigRefs {
	if x != nil {
		if x, ok := x.RateLimitRegularConfigType.(*VirtualHostOptions_RateLimitRegularConfigs); ok {
			return x.RateLimitRegularConfigs
		}
	}
	return nil
}

func (x *VirtualHostOptions) GetWaf() *waf.Settings {
	if x != nil {
		return x.Waf
	}
	return nil
}

func (x *VirtualHostOptions) GetJwtConfig() isVirtualHostOptions_JwtConfig {
	if x != nil {
		return x.JwtConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/options.proto.
func (x *VirtualHostOptions) GetJwt() *jwt.VhostExtension {
	if x != nil {
		if x, ok := x.JwtConfig.(*VirtualHostOptions_Jwt); ok {
			return x.Jwt
		}
	}
	return nil
}

func (x *VirtualHostOptions) GetJwtStaged() *jwt.JwtStagedVhostExtension {
	if x != nil {
		if x, ok := x.JwtConfig.(*VirtualHostOptions_JwtStaged); ok {
			return x.JwtStaged
		}
	}
	return nil
}

func (x *VirtualHostOptions) GetRbac() *rbac.ExtensionSettings {
	if x != nil {
		return x.Rbac
	}
	return nil
}

func (x *VirtualHostOptions) GetExtauth() *v1.ExtAuthExtension {
	if x != nil {
		return x.Extauth
	}
	return nil
}

func (x *VirtualHostOptions) GetDlp() *dlp.Config {
	if x != nil {
		return x.Dlp
	}
	return nil
}

func (x *VirtualHostOptions) GetBufferPerRoute() *v3.BufferPerRoute {
	if x != nil {
		return x.BufferPerRoute
	}
	return nil
}

func (x *VirtualHostOptions) GetCsrf() *v31.CsrfPolicy {
	if x != nil {
		return x.Csrf
	}
	return nil
}

func (x *VirtualHostOptions) GetIncludeRequestAttemptCount() *wrappers.BoolValue {
	if x != nil {
		return x.IncludeRequestAttemptCount
	}
	return nil
}

func (x *VirtualHostOptions) GetIncludeAttemptCountInResponse() *wrappers.BoolValue {
	if x != nil {
		return x.IncludeAttemptCountInResponse
	}
	return nil
}

func (x *VirtualHostOptions) GetStagedTransformations() *transformation.TransformationStages {
	if x != nil {
		return x.StagedTransformations
	}
	return nil
}

func (x *VirtualHostOptions) GetExtProc() *extproc.RouteSettings {
	if x != nil {
		return x.ExtProc
	}
	return nil
}

type isVirtualHostOptions_RateLimitEarlyConfigType interface {
	isVirtualHostOptions_RateLimitEarlyConfigType()
}

type VirtualHostOptions_RatelimitEarly struct {
	// Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings.
	// Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
	RatelimitEarly *ratelimit.RateLimitVhostExtension `protobuf:"bytes,72,opt,name=ratelimit_early,json=ratelimitEarly,proto3,oneof"`
}

type VirtualHostOptions_RateLimitEarlyConfigs struct {
	// References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
	// Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
	RateLimitEarlyConfigs *ratelimit.RateLimitConfigRefs `protobuf:"bytes,73,opt,name=rate_limit_early_configs,json=rateLimitEarlyConfigs,proto3,oneof"`
}

func (*VirtualHostOptions_RatelimitEarly) isVirtualHostOptions_RateLimitEarlyConfigType() {}

func (*VirtualHostOptions_RateLimitEarlyConfigs) isVirtualHostOptions_RateLimitEarlyConfigType() {}

type isVirtualHostOptions_RateLimitConfigType interface {
	isVirtualHostOptions_RateLimitConfigType()
}

type VirtualHostOptions_Ratelimit struct {
	// Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings.
	// Only one of `ratelimit` or `rate_limit_configs` can be set.
	Ratelimit *ratelimit.RateLimitVhostExtension `protobuf:"bytes,70,opt,name=ratelimit,proto3,oneof"`
}

type VirtualHostOptions_RateLimitConfigs struct {
	// References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
	// Only one of `ratelimit` or `rate_limit_configs` can be set.
	RateLimitConfigs *ratelimit.RateLimitConfigRefs `protobuf:"bytes,71,opt,name=rate_limit_configs,json=rateLimitConfigs,proto3,oneof"`
}

func (*VirtualHostOptions_Ratelimit) isVirtualHostOptions_RateLimitConfigType() {}

func (*VirtualHostOptions_RateLimitConfigs) isVirtualHostOptions_RateLimitConfigType() {}

type isVirtualHostOptions_RateLimitRegularConfigType interface {
	isVirtualHostOptions_RateLimitRegularConfigType()
}

type VirtualHostOptions_RatelimitRegular struct {
	// Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings.
	// Only one of `ratelimit_regular` or `rate_limit_regular_configs` can be set.
	RatelimitRegular *ratelimit.RateLimitVhostExtension `protobuf:"bytes,74,opt,name=ratelimit_regular,json=ratelimitRegular,proto3,oneof"`
}

type VirtualHostOptions_RateLimitRegularConfigs struct {
	// References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
	// Only one of `ratelimit_regular` or `rate_limit_regular_configs` can be set.
	RateLimitRegularConfigs *ratelimit.RateLimitConfigRefs `protobuf:"bytes,75,opt,name=rate_limit_regular_configs,json=rateLimitRegularConfigs,proto3,oneof"`
}

func (*VirtualHostOptions_RatelimitRegular) isVirtualHostOptions_RateLimitRegularConfigType() {}

func (*VirtualHostOptions_RateLimitRegularConfigs) isVirtualHostOptions_RateLimitRegularConfigType() {
}

type isVirtualHostOptions_JwtConfig interface {
	isVirtualHostOptions_JwtConfig()
}

type VirtualHostOptions_Jwt struct {
	// Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
	// headers to make routing decisions or combine with RBAC for fine-grained access control.
	// This has been deprecated in favor of staged jwt. The same configuration can be achieved through staged jwt
	// using AfterExtAuth.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/options.proto.
	Jwt *jwt.VhostExtension `protobuf:"bytes,9,opt,name=jwt,proto3,oneof"`
}

type VirtualHostOptions_JwtStaged struct {
	// Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
	// headers to make routing decisions or combine with RBAC for fine-grained access control.
	// JWT configuration has stages "BeforeExtAuth" and "AfterExtAuth". BeforeExtAuth JWT
	// validation runs before the external authentication service. This is useful when JWT
	// is used in conjunction with other auth mechanisms specified in the [boolean expression Extauth API](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto.sk/#authconfig).
	// AfterExtAuth validation runs after external authentication service, which is useful for verifying
	// JWTs obtained during extauth (e.g. oauth/oidc)
	JwtStaged *jwt.JwtStagedVhostExtension `protobuf:"bytes,19,opt,name=jwt_staged,json=jwtStaged,proto3,oneof"`
}

func (*VirtualHostOptions_Jwt) isVirtualHostOptions_JwtConfig() {}

func (*VirtualHostOptions_JwtStaged) isVirtualHostOptions_JwtConfig() {}

// Optional, feature-specific configuration that lives on routes.
// Each RouteOptions object contains configuration for a specific feature.
// Note to developers: new Route plugins must be added to this struct
// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
type RouteOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transformations to apply. Note: this field is superseded by `staged_transformations`.
	// If `staged_transformations.regular` is set, this field will be ignored.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/options.proto.
	Transformations *transformation.Transformations `protobuf:"bytes,1,opt,name=transformations,proto3" json:"transformations,omitempty"`
	Faults          *faultinjection.RouteFaults     `protobuf:"bytes,2,opt,name=faults,proto3" json:"faults,omitempty"`
	// For requests matched on this route, rewrite the HTTP request path to the provided value before forwarding upstream
	PrefixRewrite *wrappers.StringValue `protobuf:"bytes,3,opt,name=prefix_rewrite,json=prefixRewrite,proto3" json:"prefix_rewrite,omitempty"`
	// Specifies the upstream timeout for the route. If not specified, the default is 15s. This spans between the point
	// at which the entire downstream request (i.e. end-of-stream) has been processed and when the upstream response has
	// been completely processed. A value of 0 will disable the route’s timeout.
	Timeout *duration.Duration   `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Retries *retries.RetryPolicy `protobuf:"bytes,5,opt,name=retries,proto3" json:"retries,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,6,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Defines route-specific tracing configuration.
	// See here for additional information on Envoy's tracing capabilities: https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing.html
	// See [here](https://docs.solo.io/gloo-edge/latest/guides/observability/tracing/) for additional information about configuring tracing with Gloo Edge.
	Tracing *tracing.RouteTracingSettings `protobuf:"bytes,7,opt,name=tracing,proto3" json:"tracing,omitempty"`
	// Specifies traffic shadowing configuration for the route.
	// See here for additional information on Envoy's shadowing capabilities: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-api-msg-route-routeaction-requestmirrorpolicy
	Shadowing *shadowing.RouteShadowing `protobuf:"bytes,8,opt,name=shadowing,proto3" json:"shadowing,omitempty"`
	// Append/Remove headers on Requests or Responses on this Route
	HeaderManipulation *headers.HeaderManipulation `protobuf:"bytes,9,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// For requests matched on this route, rewrite the Host header before forwarding upstream
	//
	// Types that are valid to be assigned to HostRewriteType:
	//
	//	*RouteOptions_HostRewrite
	//	*RouteOptions_AutoHostRewrite
	//	*RouteOptions_HostRewritePathRegex
	//	*RouteOptions_HostRewriteHeader
	HostRewriteType isRouteOptions_HostRewriteType `protobuf_oneof:"host_rewrite_type"`
	// If true and there is a host rewrite, appends the x-forwarded-host header to requests.
	AppendXForwardedHost *wrappers.BoolValue `protobuf:"bytes,146,opt,name=append_x_forwarded_host,json=appendXForwardedHost,proto3" json:"append_x_forwarded_host,omitempty"`
	// Defines a CORS policy for the route
	// If a CORS policy is also defined on the route's virtual host, the policies are merged.
	Cors *cors.CorsPolicy `protobuf:"bytes,11,opt,name=cors,proto3" json:"cors,omitempty"`
	// For routes served by a hashing load balancer, this defines the input to the hash key
	// Gloo configures Envoy with the first available RouteActionHashConfig among the following ordered list of providers:
	// - route, upstream, virtual service
	LbHash *lbhash.RouteActionHashConfig `protobuf:"bytes,12,opt,name=lb_hash,json=lbHash,proto3" json:"lb_hash,omitempty"`
	// Route configuration for protocol upgrade requests.
	Upgrades []*protocol_upgrade.ProtocolUpgradeConfig `protobuf:"bytes,21,rep,name=upgrades,proto3" json:"upgrades,omitempty"`
	// Enterprise-only: Config for GlooE rate-limiting using simplified (gloo-specific) API
	RatelimitBasic *ratelimit.IngressRateLimit `protobuf:"bytes,13,opt,name=ratelimit_basic,json=ratelimitBasic,proto3" json:"ratelimit_basic,omitempty"`
	// Types that are valid to be assigned to RateLimitEarlyConfigType:
	//
	//	*RouteOptions_RatelimitEarly
	//	*RouteOptions_RateLimitEarlyConfigs
	RateLimitEarlyConfigType isRouteOptions_RateLimitEarlyConfigType `protobuf_oneof:"rate_limit_early_config_type"`
	// Types that are valid to be assigned to RateLimitConfigType:
	//
	//	*RouteOptions_Ratelimit
	//	*RouteOptions_RateLimitConfigs
	RateLimitConfigType isRouteOptions_RateLimitConfigType `protobuf_oneof:"rate_limit_config_type"`
	// Types that are valid to be assigned to RateLimitRegularConfigType:
	//
	//	*RouteOptions_RatelimitRegular
	//	*RouteOptions_RateLimitRegularConfigs
	RateLimitRegularConfigType isRouteOptions_RateLimitRegularConfigType `protobuf_oneof:"rate_limit_regular_config_type"`
	// Enterprise-only: Config for Web Application Firewall (WAF), supporting
	// the popular ModSecurity 3.0 ruleset
	Waf *waf.Settings `protobuf:"bytes,15,opt,name=waf,proto3" json:"waf,omitempty"`
	// Types that are valid to be assigned to JwtConfig:
	//
	//	*RouteOptions_Jwt
	//	*RouteOptions_JwtStaged
	JwtConfig isRouteOptions_JwtConfig `protobuf_oneof:"jwt_config"`
	// Enterprise-only: Config for RBAC (currently only supports RBAC based on JWT claims)
	Rbac *rbac.ExtensionSettings `protobuf:"bytes,17,opt,name=rbac,proto3" json:"rbac,omitempty"`
	// Enterprise-only: Authentication configuration
	Extauth *v1.ExtAuthExtension `protobuf:"bytes,18,opt,name=extauth,proto3" json:"extauth,omitempty"`
	// Enterprise-only: Config for data loss prevention
	Dlp *dlp.Config `protobuf:"bytes,20,opt,name=dlp,proto3" json:"dlp,omitempty"`
	// BufferPerRoute can be used to set the maximum request size
	// that the filter will buffer before the connection
	// manager will stop buffering and return a 413 response.
	// Note: If you have not set a global config (at the gateway level), this
	// override will not do anything by itself.
	BufferPerRoute *v3.BufferPerRoute `protobuf:"bytes,22,opt,name=buffer_per_route,json=bufferPerRoute,proto3" json:"buffer_per_route,omitempty"`
	// Csrf can be used to set percent of requests for which the CSRF filter is enabled, enable shadow-only mode
	// where policies will be evaluated and tracked, but not enforced and add additional source origins
	// that will be allowed in addition to the destination origin.
	// For more, see https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/http/csrf/v2/csrf.proto
	Csrf *v31.CsrfPolicy `protobuf:"bytes,24,opt,name=csrf,proto3" json:"csrf,omitempty"`
	// Early transformations stage. These transformations run before most other options are processed.
	// If the `regular` field is set in here, the `transformations` field is ignored.
	StagedTransformations *transformation.TransformationStages `protobuf:"bytes,23,opt,name=staged_transformations,json=stagedTransformations,proto3" json:"staged_transformations,omitempty"`
	// This field can be used to provide additional information about the route. This metadata can be consumed
	// by the Envoy filters that process requests that match the route. For more info about metadata, see
	// [here](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/data_sharing_between_filters#metadata).
	//
	// The value of this field will be propagated to the `metadata` attribute of the corresponding Envoy route.
	// Please refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#config-route-v3-route)
	// for more details about the `metadata` attribute.
	EnvoyMetadata map[string]*_struct.Struct `protobuf:"bytes,26,rep,name=envoy_metadata,json=envoyMetadata,proto3" json:"envoy_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// For requests matched on this route, rewrite the HTTP request path according to the provided regex pattern before forwarding upstream
	// Please refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/v1.14.1/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-routeaction-regex-rewrite)
	// for more details about the `regex_rewrite` attribute
	RegexRewrite *v32.RegexMatchAndSubstitute `protobuf:"bytes,27,opt,name=regex_rewrite,json=regexRewrite,proto3" json:"regex_rewrite,omitempty"`
	// Settings for maximum durations and timeouts for streams on the route.
	// Please refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-msg-config-route-v3-routeaction-maxstreamduration)
	MaxStreamDuration *RouteOptions_MaxStreamDuration `protobuf:"bytes,28,opt,name=max_stream_duration,json=maxStreamDuration,proto3" json:"max_stream_duration,omitempty"`
	// Specifies the idle timeout for the route. If not specified, there is no per-route idle timeout,
	// although the Gateway's [httpConnectionManagerSettings](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/options/hcm/hcm.proto.sk/#httpconnectionmanagersettings)
	// wide stream_idle_timeout will still apply. A value of 0 will completely disable the route’s idle timeout, even if a connection manager stream idle timeout is configured.
	// Please refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-routeaction-idle-timeout)
	IdleTimeout *duration.Duration `protobuf:"bytes,29,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Enterprise-only: External Processing filter settings for the route. This can be used to
	// override certain HttpListenerOptions or VirtualHostOptions settings.
	ExtProc       *extproc.RouteSettings `protobuf:"bytes,30,opt,name=ext_proc,json=extProc,proto3" json:"ext_proc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteOptions) Reset() {
	*x = RouteOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteOptions) ProtoMessage() {}

func (x *RouteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteOptions.ProtoReflect.Descriptor instead.
func (*RouteOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescGZIP(), []int{6}
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/options.proto.
func (x *RouteOptions) GetTransformations() *transformation.Transformations {
	if x != nil {
		return x.Transformations
	}
	return nil
}

func (x *RouteOptions) GetFaults() *faultinjection.RouteFaults {
	if x != nil {
		return x.Faults
	}
	return nil
}

func (x *RouteOptions) GetPrefixRewrite() *wrappers.StringValue {
	if x != nil {
		return x.PrefixRewrite
	}
	return nil
}

func (x *RouteOptions) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *RouteOptions) GetRetries() *retries.RetryPolicy {
	if x != nil {
		return x.Retries
	}
	return nil
}

func (x *RouteOptions) GetExtensions() *Extensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *RouteOptions) GetTracing() *tracing.RouteTracingSettings {
	if x != nil {
		return x.Tracing
	}
	return nil
}

func (x *RouteOptions) GetShadowing() *shadowing.RouteShadowing {
	if x != nil {
		return x.Shadowing
	}
	return nil
}

func (x *RouteOptions) GetHeaderManipulation() *headers.HeaderManipulation {
	if x != nil {
		return x.HeaderManipulation
	}
	return nil
}

func (x *RouteOptions) GetHostRewriteType() isRouteOptions_HostRewriteType {
	if x != nil {
		return x.HostRewriteType
	}
	return nil
}

func (x *RouteOptions) GetHostRewrite() string {
	if x != nil {
		if x, ok := x.HostRewriteType.(*RouteOptions_HostRewrite); ok {
			return x.HostRewrite
		}
	}
	return ""
}

func (x *RouteOptions) GetAutoHostRewrite() *wrappers.BoolValue {
	if x != nil {
		if x, ok := x.HostRewriteType.(*RouteOptions_AutoHostRewrite); ok {
			return x.AutoHostRewrite
		}
	}
	return nil
}

func (x *RouteOptions) GetHostRewritePathRegex() *v32.RegexMatchAndSubstitute {
	if x != nil {
		if x, ok := x.HostRewriteType.(*RouteOptions_HostRewritePathRegex); ok {
			return x.HostRewritePathRegex
		}
	}
	return nil
}

func (x *RouteOptions) GetHostRewriteHeader() *wrappers.StringValue {
	if x != nil {
		if x, ok := x.HostRewriteType.(*RouteOptions_HostRewriteHeader); ok {
			return x.HostRewriteHeader
		}
	}
	return nil
}

func (x *RouteOptions) GetAppendXForwardedHost() *wrappers.BoolValue {
	if x != nil {
		return x.AppendXForwardedHost
	}
	return nil
}

func (x *RouteOptions) GetCors() *cors.CorsPolicy {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *RouteOptions) GetLbHash() *lbhash.RouteActionHashConfig {
	if x != nil {
		return x.LbHash
	}
	return nil
}

func (x *RouteOptions) GetUpgrades() []*protocol_upgrade.ProtocolUpgradeConfig {
	if x != nil {
		return x.Upgrades
	}
	return nil
}

func (x *RouteOptions) GetRatelimitBasic() *ratelimit.IngressRateLimit {
	if x != nil {
		return x.RatelimitBasic
	}
	return nil
}

func (x *RouteOptions) GetRateLimitEarlyConfigType() isRouteOptions_RateLimitEarlyConfigType {
	if x != nil {
		return x.RateLimitEarlyConfigType
	}
	return nil
}

func (x *RouteOptions) GetRatelimitEarly() *ratelimit.RateLimitRouteExtension {
	if x != nil {
		if x, ok := x.RateLimitEarlyConfigType.(*RouteOptions_RatelimitEarly); ok {
			return x.RatelimitEarly
		}
	}
	return nil
}

func (x *RouteOptions) GetRateLimitEarlyConfigs() *ratelimit.RateLimitConfigRefs {
	if x != nil {
		if x, ok := x.RateLimitEarlyConfigType.(*RouteOptions_RateLimitEarlyConfigs); ok {
			return x.RateLimitEarlyConfigs
		}
	}
	return nil
}

func (x *RouteOptions) GetRateLimitConfigType() isRouteOptions_RateLimitConfigType {
	if x != nil {
		return x.RateLimitConfigType
	}
	return nil
}

func (x *RouteOptions) GetRatelimit() *ratelimit.RateLimitRouteExtension {
	if x != nil {
		if x, ok := x.RateLimitConfigType.(*RouteOptions_Ratelimit); ok {
			return x.Ratelimit
		}
	}
	return nil
}

func (x *RouteOptions) GetRateLimitConfigs() *ratelimit.RateLimitConfigRefs {
	if x != nil {
		if x, ok := x.RateLimitConfigType.(*RouteOptions_RateLimitConfigs); ok {
			return x.RateLimitConfigs
		}
	}
	return nil
}

func (x *RouteOptions) GetRateLimitRegularConfigType() isRouteOptions_RateLimitRegularConfigType {
	if x != nil {
		return x.RateLimitRegularConfigType
	}
	return nil
}

func (x *RouteOptions) GetRatelimitRegular() *ratelimit.RateLimitRouteExtension {
	if x != nil {
		if x, ok := x.RateLimitRegularConfigType.(*RouteOptions_RatelimitRegular); ok {
			return x.RatelimitRegular
		}
	}
	return nil
}

func (x *RouteOptions) GetRateLimitRegularConfigs() *ratelimit.RateLimitConfigRefs {
	if x != nil {
		if x, ok := x.RateLimitRegularConfigType.(*RouteOptions_RateLimitRegularConfigs); ok {
			return x.RateLimitRegularConfigs
		}
	}
	return nil
}

func (x *RouteOptions) GetWaf() *waf.Settings {
	if x != nil {
		return x.Waf
	}
	return nil
}

func (x *RouteOptions) GetJwtConfig() isRouteOptions_JwtConfig {
	if x != nil {
		return x.JwtConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/options.proto.
func (x *RouteOptions) GetJwt() *jwt.RouteExtension {
	if x != nil {
		if x, ok := x.JwtConfig.(*RouteOptions_Jwt); ok {
			return x.Jwt
		}
	}
	return nil
}

func (x *RouteOptions) GetJwtStaged() *jwt.JwtStagedRouteExtension {
	if x != nil {
		if x, ok := x.JwtConfig.(*RouteOptions_JwtStaged); ok {
			return x.JwtStaged
		}
	}
	return nil
}

func (x *RouteOptions) GetRbac() *rbac.ExtensionSettings {
	if x != nil {
		return x.Rbac
	}
	return nil
}

func (x *RouteOptions) GetExtauth() *v1.ExtAuthExtension {
	if x != nil {
		return x.Extauth
	}
	return nil
}

func (x *RouteOptions) GetDlp() *dlp.Config {
	if x != nil {
		return x.Dlp
	}
	return nil
}

func (x *RouteOptions) GetBufferPerRoute() *v3.BufferPerRoute {
	if x != nil {
		return x.BufferPerRoute
	}
	return nil
}

func (x *RouteOptions) GetCsrf() *v31.CsrfPolicy {
	if x != nil {
		return x.Csrf
	}
	return nil
}

func (x *RouteOptions) GetStagedTransformations() *transformation.TransformationStages {
	if x != nil {
		return x.StagedTransformations
	}
	return nil
}

func (x *RouteOptions) GetEnvoyMetadata() map[string]*_struct.Struct {
	if x != nil {
		return x.EnvoyMetadata
	}
	return nil
}

func (x *RouteOptions) GetRegexRewrite() *v32.RegexMatchAndSubstitute {
	if x != nil {
		return x.RegexRewrite
	}
	return nil
}

func (x *RouteOptions) GetMaxStreamDuration() *RouteOptions_MaxStreamDuration {
	if x != nil {
		return x.MaxStreamDuration
	}
	return nil
}

func (x *RouteOptions) GetIdleTimeout() *duration.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *RouteOptions) GetExtProc() *extproc.RouteSettings {
	if x != nil {
		return x.ExtProc
	}
	return nil
}

type isRouteOptions_HostRewriteType interface {
	isRouteOptions_HostRewriteType()
}

type RouteOptions_HostRewrite struct {
	// Indicates that during forwarding, the host header will be swapped with this value.
	HostRewrite string `protobuf:"bytes,10,opt,name=host_rewrite,json=hostRewrite,proto3,oneof"`
}

type RouteOptions_AutoHostRewrite struct {
	// Enable/Disable auto host re-write.
	// Indicates that the host header will be swapped with the hostname of the upstream host.
	// This setting is only honored for upstreams that use DNS resolution (i.e., their generated Envoy cluster is
	// of type STRICT_DNS or LOGICAL_DNS -- think aws, azure, or static upstreams with hostnames)
	AutoHostRewrite *wrappers.BoolValue `protobuf:"bytes,19,opt,name=auto_host_rewrite,json=autoHostRewrite,proto3,oneof"`
}

type RouteOptions_HostRewritePathRegex struct {
	// Indicates that during forwarding, the host header will be swapped with the result of the regex
	// substitution executed on path value with query and fragment removed.
	HostRewritePathRegex *v32.RegexMatchAndSubstitute `protobuf:"bytes,101,opt,name=host_rewrite_path_regex,json=hostRewritePathRegex,proto3,oneof"`
}

type RouteOptions_HostRewriteHeader struct {
	// Indicates that during forwarding, the host header will be swapped with the content of given downstream or custom header.
	// If header value is empty, host header is left intact.
	// Using this option will append the x-forwarded-host header if append_x_forwarded_host is set.
	HostRewriteHeader *wrappers.StringValue `protobuf:"bytes,147,opt,name=host_rewrite_header,json=hostRewriteHeader,proto3,oneof"`
}

func (*RouteOptions_HostRewrite) isRouteOptions_HostRewriteType() {}

func (*RouteOptions_AutoHostRewrite) isRouteOptions_HostRewriteType() {}

func (*RouteOptions_HostRewritePathRegex) isRouteOptions_HostRewriteType() {}

func (*RouteOptions_HostRewriteHeader) isRouteOptions_HostRewriteType() {}

type isRouteOptions_RateLimitEarlyConfigType interface {
	isRouteOptions_RateLimitEarlyConfigType()
}

type RouteOptions_RatelimitEarly struct {
	// Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings.
	// Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
	RatelimitEarly *ratelimit.RateLimitRouteExtension `protobuf:"bytes,142,opt,name=ratelimit_early,json=ratelimitEarly,proto3,oneof"`
}

type RouteOptions_RateLimitEarlyConfigs struct {
	// References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
	// Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
	RateLimitEarlyConfigs *ratelimit.RateLimitConfigRefs `protobuf:"bytes,143,opt,name=rate_limit_early_configs,json=rateLimitEarlyConfigs,proto3,oneof"`
}

func (*RouteOptions_RatelimitEarly) isRouteOptions_RateLimitEarlyConfigType() {}

func (*RouteOptions_RateLimitEarlyConfigs) isRouteOptions_RateLimitEarlyConfigType() {}

type isRouteOptions_RateLimitConfigType interface {
	isRouteOptions_RateLimitConfigType()
}

type RouteOptions_Ratelimit struct {
	// Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings.
	// Only one of `ratelimit` or `rate_limit_configs` can be set.
	Ratelimit *ratelimit.RateLimitRouteExtension `protobuf:"bytes,140,opt,name=ratelimit,proto3,oneof"`
}

type RouteOptions_RateLimitConfigs struct {
	// References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
	// Only one of `ratelimit` or `rate_limit_configs` can be set.
	RateLimitConfigs *ratelimit.RateLimitConfigRefs `protobuf:"bytes,141,opt,name=rate_limit_configs,json=rateLimitConfigs,proto3,oneof"`
}

func (*RouteOptions_Ratelimit) isRouteOptions_RateLimitConfigType() {}

func (*RouteOptions_RateLimitConfigs) isRouteOptions_RateLimitConfigType() {}

type isRouteOptions_RateLimitRegularConfigType interface {
	isRouteOptions_RateLimitRegularConfigType()
}

type RouteOptions_RatelimitRegular struct {
	// Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings.
	// Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
	RatelimitRegular *ratelimit.RateLimitRouteExtension `protobuf:"bytes,144,opt,name=ratelimit_regular,json=ratelimitRegular,proto3,oneof"`
}

type RouteOptions_RateLimitRegularConfigs struct {
	// References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
	// Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
	RateLimitRegularConfigs *ratelimit.RateLimitConfigRefs `protobuf:"bytes,145,opt,name=rate_limit_regular_configs,json=rateLimitRegularConfigs,proto3,oneof"`
}

func (*RouteOptions_RatelimitRegular) isRouteOptions_RateLimitRegularConfigType() {}

func (*RouteOptions_RateLimitRegularConfigs) isRouteOptions_RateLimitRegularConfigType() {}

type isRouteOptions_JwtConfig interface {
	isRouteOptions_JwtConfig()
}

type RouteOptions_Jwt struct {
	// Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
	// headers to make routing decisions or combine with RBAC for fine-grained access control.
	// This has been deprecated in favor of staged jwt. The same configuration can be achieved through staged jwt
	// using AfterExtAuth.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/options.proto.
	Jwt *jwt.RouteExtension `protobuf:"bytes,16,opt,name=jwt,proto3,oneof"`
}

type RouteOptions_JwtStaged struct {
	// Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
	// headers to make routing decisions or combine with RBAC for fine-grained access control.
	// JWT configuration has stages "BeforeExtAuth" and "AfterExtAuth". BeforeExtAuth JWT
	// validation runs before the external authentication service. This is useful when JWT
	// is used in conjunction with other auth mechanisms specified in the [boolean expression Extauth API](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto.sk/#authconfig).
	// AfterExtAuth validation runs after external authentication service, which is useful for verifying
	// JWTs obtained during extauth (e.g. oauth/oidc)
	JwtStaged *jwt.JwtStagedRouteExtension `protobuf:"bytes,25,opt,name=jwt_staged,json=jwtStaged,proto3,oneof"`
}

func (*RouteOptions_Jwt) isRouteOptions_JwtConfig() {}

func (*RouteOptions_JwtStaged) isRouteOptions_JwtConfig() {}

// Configuration for Destinations that are tied to the UpstreamSpec or ServiceSpec on that destination
type DestinationSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Note to developers: new DestinationSpecs must be added to this oneof field
	// to be usable by Gloo.
	//
	// Types that are valid to be assigned to DestinationType:
	//
	//	*DestinationSpec_Aws
	//	*DestinationSpec_Azure
	//	*DestinationSpec_Rest
	//	*DestinationSpec_Grpc
	DestinationType isDestinationSpec_DestinationType `protobuf_oneof:"destination_type"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DestinationSpec) Reset() {
	*x = DestinationSpec{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DestinationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationSpec) ProtoMessage() {}

func (x *DestinationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationSpec.ProtoReflect.Descriptor instead.
func (*DestinationSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescGZIP(), []int{7}
}

func (x *DestinationSpec) GetDestinationType() isDestinationSpec_DestinationType {
	if x != nil {
		return x.DestinationType
	}
	return nil
}

func (x *DestinationSpec) GetAws() *aws.DestinationSpec {
	if x != nil {
		if x, ok := x.DestinationType.(*DestinationSpec_Aws); ok {
			return x.Aws
		}
	}
	return nil
}

func (x *DestinationSpec) GetAzure() *azure.DestinationSpec {
	if x != nil {
		if x, ok := x.DestinationType.(*DestinationSpec_Azure); ok {
			return x.Azure
		}
	}
	return nil
}

func (x *DestinationSpec) GetRest() *rest.DestinationSpec {
	if x != nil {
		if x, ok := x.DestinationType.(*DestinationSpec_Rest); ok {
			return x.Rest
		}
	}
	return nil
}

func (x *DestinationSpec) GetGrpc() *grpc.DestinationSpec {
	if x != nil {
		if x, ok := x.DestinationType.(*DestinationSpec_Grpc); ok {
			return x.Grpc
		}
	}
	return nil
}

type isDestinationSpec_DestinationType interface {
	isDestinationSpec_DestinationType()
}

type DestinationSpec_Aws struct {
	Aws *aws.DestinationSpec `protobuf:"bytes,1,opt,name=aws,proto3,oneof"`
}

type DestinationSpec_Azure struct {
	Azure *azure.DestinationSpec `protobuf:"bytes,2,opt,name=azure,proto3,oneof"`
}

type DestinationSpec_Rest struct {
	Rest *rest.DestinationSpec `protobuf:"bytes,3,opt,name=rest,proto3,oneof"`
}

type DestinationSpec_Grpc struct {
	Grpc *grpc.DestinationSpec `protobuf:"bytes,4,opt,name=grpc,proto3,oneof"`
}

func (*DestinationSpec_Aws) isDestinationSpec_DestinationType() {}

func (*DestinationSpec_Azure) isDestinationSpec_DestinationType() {}

func (*DestinationSpec_Rest) isDestinationSpec_DestinationType() {}

func (*DestinationSpec_Grpc) isDestinationSpec_DestinationType() {}

// Optional, feature-specific configuration that is applied when a specific weighted destination
// is selected for routing.
type WeightedDestinationOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Append/Remove headers on Requests or Responses to/from this Weighted Destination
	HeaderManipulation *headers.HeaderManipulation `protobuf:"bytes,1,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// Transformations to apply. Note: this field is superseded by `staged_transformations`.
	// If `staged_transformations.regular` is set, this field will be ignored.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/options.proto.
	Transformations *transformation.Transformations `protobuf:"bytes,2,opt,name=transformations,proto3" json:"transformations,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,3,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Enterprise-only: Authentication configuration
	Extauth *v1.ExtAuthExtension `protobuf:"bytes,4,opt,name=extauth,proto3" json:"extauth,omitempty"`
	// BufferPerRoute can be used to set the maximum request size
	// that the filter will buffer before the connection
	// manager will stop buffering and return a 413 response.
	// Note: If you have not set a global config (at the gateway level), this
	// override will not do anything by itself.
	BufferPerRoute *v3.BufferPerRoute `protobuf:"bytes,5,opt,name=buffer_per_route,json=bufferPerRoute,proto3" json:"buffer_per_route,omitempty"`
	// Csrf can be used to set percent of requests for which the CSRF filter is enabled, enable shadow-only mode
	// where policies will be evaluated and tracked, but not enforced and add additional source origins
	// that will be allowed in addition to the destination origin.
	// For more, see https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/http/csrf/v2/csrf.proto
	Csrf *v31.CsrfPolicy `protobuf:"bytes,7,opt,name=csrf,proto3" json:"csrf,omitempty"`
	// Early transformations stage. These transformations run before most other options are processed.
	// If the `regular` field is set in here, the `transformations` field is ignored.
	StagedTransformations *transformation.TransformationStages `protobuf:"bytes,6,opt,name=staged_transformations,json=stagedTransformations,proto3" json:"staged_transformations,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *WeightedDestinationOptions) Reset() {
	*x = WeightedDestinationOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeightedDestinationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedDestinationOptions) ProtoMessage() {}

func (x *WeightedDestinationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedDestinationOptions.ProtoReflect.Descriptor instead.
func (*WeightedDestinationOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescGZIP(), []int{8}
}

func (x *WeightedDestinationOptions) GetHeaderManipulation() *headers.HeaderManipulation {
	if x != nil {
		return x.HeaderManipulation
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/options.proto.
func (x *WeightedDestinationOptions) GetTransformations() *transformation.Transformations {
	if x != nil {
		return x.Transformations
	}
	return nil
}

func (x *WeightedDestinationOptions) GetExtensions() *Extensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *WeightedDestinationOptions) GetExtauth() *v1.ExtAuthExtension {
	if x != nil {
		return x.Extauth
	}
	return nil
}

func (x *WeightedDestinationOptions) GetBufferPerRoute() *v3.BufferPerRoute {
	if x != nil {
		return x.BufferPerRoute
	}
	return nil
}

func (x *WeightedDestinationOptions) GetCsrf() *v31.CsrfPolicy {
	if x != nil {
		return x.Csrf
	}
	return nil
}

func (x *WeightedDestinationOptions) GetStagedTransformations() *transformation.TransformationStages {
	if x != nil {
		return x.StagedTransformations
	}
	return nil
}

// A connection balancer implementation that does exact balancing. This means that a lock is
// held during balancing so that connection counts are nearly exactly balanced between worker
// threads. This is "nearly" exact in the sense that a connection might close in parallel thus
// making the counts incorrect, but this should be rectified on the next accept. This balancer
// sacrifices accept throughput for accuracy and should be used when there are a small number of
// connections that rarely cycle (e.g., service mesh gRPC egress).
type ConnectionBalanceConfig_ExactBalance struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionBalanceConfig_ExactBalance) Reset() {
	*x = ConnectionBalanceConfig_ExactBalance{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionBalanceConfig_ExactBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionBalanceConfig_ExactBalance) ProtoMessage() {}

func (x *ConnectionBalanceConfig_ExactBalance) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionBalanceConfig_ExactBalance.ProtoReflect.Descriptor instead.
func (*ConnectionBalanceConfig_ExactBalance) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescGZIP(), []int{1, 0}
}

// This is a 1:1 translation to the [Envoy API described here](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-msg-config-route-v3-routeaction-maxstreamduration)
type RouteOptions_MaxStreamDuration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the maximum duration allowed for streams on the route. If not specified, the value
	// from the [max_stream_duration](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#envoy-v3-api-field-config-core-v3-httpprotocoloptions-max-stream-duration)
	// field in [HttpConnectionManager.common_http_protocol_options](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-common-http-protocol-options)
	// is used. If this field is set explicitly to zero, any HttpConnectionManager max_stream_duration timeout will be disabled for this route.
	MaxStreamDuration *duration.Duration `protobuf:"bytes,1,opt,name=max_stream_duration,json=maxStreamDuration,proto3" json:"max_stream_duration,omitempty"`
	// If present, and the request contains a [grpc-timeout header](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md), use that value as the
	// `max_stream_duration`, but limit the applied timeout to the maximum value specified here.
	// If set to 0, the `grpc-timeout` header is used without modification.
	GrpcTimeoutHeaderMax *duration.Duration `protobuf:"bytes,2,opt,name=grpc_timeout_header_max,json=grpcTimeoutHeaderMax,proto3" json:"grpc_timeout_header_max,omitempty"`
	// If present, Envoy will adjust the timeout provided by the `grpc-timeout` header by
	// subtracting the provided duration from the header. This is useful for allowing Envoy to set
	// its global timeout to be less than that of the deadline imposed by the calling client, which
	// makes it more likely that Envoy will handle the timeout instead of having the call canceled
	// by the client. If, after applying the offset, the resulting timeout is zero or negative,
	// the stream will timeout immediately.
	GrpcTimeoutHeaderOffset *duration.Duration `protobuf:"bytes,3,opt,name=grpc_timeout_header_offset,json=grpcTimeoutHeaderOffset,proto3" json:"grpc_timeout_header_offset,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *RouteOptions_MaxStreamDuration) Reset() {
	*x = RouteOptions_MaxStreamDuration{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteOptions_MaxStreamDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteOptions_MaxStreamDuration) ProtoMessage() {}

func (x *RouteOptions_MaxStreamDuration) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteOptions_MaxStreamDuration.ProtoReflect.Descriptor instead.
func (*RouteOptions_MaxStreamDuration) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescGZIP(), []int{6, 1}
}

func (x *RouteOptions_MaxStreamDuration) GetMaxStreamDuration() *duration.Duration {
	if x != nil {
		return x.MaxStreamDuration
	}
	return nil
}

func (x *RouteOptions_MaxStreamDuration) GetGrpcTimeoutHeaderMax() *duration.Duration {
	if x != nil {
		return x.GrpcTimeoutHeaderMax
	}
	return nil
}

func (x *RouteOptions_MaxStreamDuration) GetGrpcTimeoutHeaderOffset() *duration.Duration {
	if x != nil {
		return x.GrpcTimeoutHeaderOffset
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDesc = "" +
	"\n" +
	":github.com/solo-io/gloo/projects/gloo/api/v1/options.proto\x12\fgloo.solo.io\x1a\x1cgoogle/protobuf/struct.proto\x1a\x12extproto/ext.proto\x1a=github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto\x1aDgithub.com/solo-io/gloo/projects/gloo/api/v1/options/cors/cors.proto\x1aDgithub.com/solo-io/gloo/projects/gloo/api/v1/options/rest/rest.proto\x1aDgithub.com/solo-io/gloo/projects/gloo/api/v1/options/grpc/grpc.proto\x1aBgithub.com/solo-io/gloo/projects/gloo/api/v1/options/als/als.proto\x1aXgithub.com/solo-io/gloo/projects/gloo/api/v1/options/proxy_protocol/proxy_protocol.proto\x1aLgithub.com/solo-io/gloo/projects/gloo/api/v1/options/grpc_web/grpc_web.proto\x1aNgithub.com/solo-io/gloo/projects/gloo/api/v1/options/grpc_json/grpc_json.proto\x1aBgithub.com/solo-io/gloo/projects/gloo/api/v1/options/hcm/hcm.proto\x1aHgithub.com/solo-io/gloo/projects/gloo/api/v1/options/lbhash/lbhash.proto\x1aNgithub.com/solo-io/gloo/projects/gloo/api/v1/options/shadowing/shadowing.proto\x1aBgithub.com/solo-io/gloo/projects/gloo/api/v1/options/tcp/tcp.proto\x1aJgithub.com/solo-io/gloo/projects/gloo/api/v1/options/tracing/tracing.proto\x1aJgithub.com/solo-io/gloo/projects/gloo/api/v1/options/retries/retries.proto\x1aFgithub.com/solo-io/gloo/projects/gloo/api/v1/options/stats/stats.proto\x1aOgithub.com/solo-io/gloo/projects/gloo/api/v1/options/faultinjection/fault.proto\x1aJgithub.com/solo-io/gloo/projects/gloo/api/v1/options/headers/headers.proto\x1aBgithub.com/solo-io/gloo/projects/gloo/api/v1/options/aws/aws.proto\x1aDgithub.com/solo-io/gloo/projects/gloo/api/v1/options/wasm/wasm.proto\x1aFgithub.com/solo-io/gloo/projects/gloo/api/v1/options/azure/azure.proto\x1aRgithub.com/solo-io/gloo/projects/gloo/api/v1/options/healthcheck/healthcheck.proto\x1a\\github.com/solo-io/gloo/projects/gloo/api/v1/options/protocol_upgrade/protocol_upgrade.proto\x1aHgithub.com/solo-io/gloo/projects/gloo/api/v1/options/router/router.proto\x1a\\github.com/solo-io/gloo/projects/gloo/api/v1/options/connection_limit/connection_limit.proto\x1aZgithub.com/solo-io/gloo/projects/gloo/api/v1/options/local_ratelimit/local_ratelimit.proto\x1acgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/proxylatency/proxylatency.proto\x1aggithub.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/buffer/v3/buffer.proto\x1acgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/csrf/v3/csrf.proto\x1a^github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/filter/http/gzip/v2/gzip.proto\x1aTgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/type/matcher/v3/regex.proto\x1aXgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto\x1aUgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extproc/extproc.proto\x1aMgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/jwt/jwt.proto\x1aYgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/ratelimit/ratelimit.proto\x1aUgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/caching/caching.proto\x1aOgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/rbac/rbac.proto\x1aMgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/waf/waf.proto\x1aMgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/dlp/dlp.proto\x1aMgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/tap/tap.proto\x1aXgithub.com/solo-io/gloo/projects/gloo/api/v1/options/transformation/transformation.proto\x1afgithub.com/solo-io/gloo/projects/gloo/api/v1/options/dynamic_forward_proxy/dynamic_forward_proxy.proto\x1aEgithub.com/solo-io/solo-kit/api/external/envoy/api/v2/core/base.proto\x1aNgithub.com/solo-io/solo-kit/api/external/envoy/api/v2/core/socket_option.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\xa7\x04\n" +
	"\x0fListenerOptions\x12d\n" +
	"\x16access_logging_service\x18\x01 \x01(\v2..als.options.gloo.solo.io.AccessLoggingServiceR\x14accessLoggingService\x128\n" +
	"\n" +
	"extensions\x18\x02 \x01(\v2\x18.gloo.solo.io.ExtensionsR\n" +
	"extensions\x12f\n" +
	"!per_connection_buffer_limit_bytes\x18\x03 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x1dperConnectionBufferLimitBytes\x12N\n" +
	"\x0esocket_options\x18\x04 \x03(\v2'.solo.io.envoy.api.v2.core.SocketOptionR\rsocketOptions\x12Y\n" +
	"\x0eproxy_protocol\x18\x05 \x01(\v22.proxy_protocol.options.gloo.solo.io.ProxyProtocolR\rproxyProtocol\x12a\n" +
	"\x19connection_balance_config\x18\x06 \x01(\v2%.gloo.solo.io.ConnectionBalanceConfigR\x17connectionBalanceConfig\"\x82\x01\n" +
	"\x17ConnectionBalanceConfig\x12W\n" +
	"\rexact_balance\x18\x01 \x01(\v22.gloo.solo.io.ConnectionBalanceConfig.ExactBalanceR\fexactBalance\x1a\x0e\n" +
	"\fExactBalance\"\xf0\x01\n" +
	"\x19RouteConfigurationOptions\x12i\n" +
	"#max_direct_response_body_size_bytes\x18\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x1emaxDirectResponseBodySizeBytes\x12h\n" +
	"#most_specific_header_mutations_wins\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\x1fmostSpecificHeaderMutationsWins\"\xbc\x0f\n" +
	"\x13HttpListenerOptions\x12A\n" +
	"\bgrpc_web\x18\x01 \x01(\v2&.grpc_web.options.gloo.solo.io.GrpcWebR\agrpcWeb\x12\x80\x01\n" +
	" http_connection_manager_settings\x18\x02 \x01(\v27.hcm.options.gloo.solo.io.HttpConnectionManagerSettingsR\x1dhttpConnectionManagerSettings\x12P\n" +
	"\fhealth_check\x18\x04 \x01(\v2-.healthcheck.options.gloo.solo.io.HealthCheckR\vhealthCheck\x128\n" +
	"\n" +
	"extensions\x18\x03 \x01(\v2\x18.gloo.solo.io.ExtensionsR\n" +
	"extensions\x124\n" +
	"\x03waf\x18\x05 \x01(\v2\".waf.options.gloo.solo.io.SettingsR\x03waf\x128\n" +
	"\x03dlp\x18\x06 \x01(\v2&.dlp.options.gloo.solo.io.FilterConfigR\x03dlp\x12;\n" +
	"\x04wasm\x18\a \x01(\v2'.wasm.options.gloo.solo.io.PluginSourceR\x04wasm\x12;\n" +
	"\aextauth\x18\n" +
	" \x01(\v2!.enterprise.gloo.solo.io.SettingsR\aextauth\x12S\n" +
	"\x10ratelimit_server\x18\v \x01(\v2(.ratelimit.options.gloo.solo.io.SettingsR\x0fratelimitServer\x12@\n" +
	"\acaching\x18\x11 \x01(\v2&.caching.options.gloo.solo.io.SettingsR\acaching\x12F\n" +
	"\x10disable_ext_proc\x18\x1e \x01(\v2\x1a.google.protobuf.BoolValueH\x00R\x0edisableExtProc\x12C\n" +
	"\bext_proc\x18\x1f \x01(\v2&.extproc.options.gloo.solo.io.SettingsH\x00R\aextProc\x12B\n" +
	"\x04gzip\x18\b \x01(\v2..solo.io.envoy.config.filter.http.gzip.v2.GzipR\x04gzip\x12[\n" +
	"\rproxy_latency\x18\t \x01(\v26.envoy.config.filter.http.proxylatency.v2.ProxyLatencyR\fproxyLatency\x12O\n" +
	"\x06buffer\x18\f \x01(\v27.solo.io.envoy.extensions.filters.http.buffer.v3.BufferR\x06buffer\x12M\n" +
	"\x04csrf\x18\x0f \x01(\v29.solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicyR\x04csrf\x12d\n" +
	"\x14grpc_json_transcoder\x18\r \x01(\v22.grpc_json.options.gloo.solo.io.GrpcJsonTranscoderR\x12grpcJsonTranscoder\x12R\n" +
	"\x17sanitize_cluster_header\x18\x0e \x01(\v2\x1a.google.protobuf.BoolValueR\x15sanitizeClusterHeader\x12L\n" +
	"\x14leftmost_xff_address\x18\x10 \x01(\v2\x1a.google.protobuf.BoolValueR\x12leftmostXffAddress\x12Z\n" +
	"\x15dynamic_forward_proxy\x18\x1c \x01(\v2&.dfp.options.gloo.solo.io.FilterConfigR\x13dynamicForwardProxy\x12a\n" +
	"\x10connection_limit\x18\x1d \x01(\v26.connection_limit.options.gloo.solo.io.ConnectionLimitR\x0fconnectionLimit\x12i\n" +
	"\x17network_local_ratelimit\x18  \x01(\v21.local_ratelimit.options.gloo.solo.io.TokenBucketR\x15networkLocalRatelimit\x12`\n" +
	"\x14http_local_ratelimit\x18! \x01(\v2..local_ratelimit.options.gloo.solo.io.SettingsR\x12httpLocalRatelimit\x12,\n" +
	"\x06router\x18\x12 \x01(\v2\x14.gloo.solo.io.RouterR\x06router\x12/\n" +
	"\x03tap\x18\" \x01(\v2\x1d.tap.options.gloo.solo.io.TapR\x03tapB\x11\n" +
	"\x0fext_proc_config\"\xad\x02\n" +
	"\x12TcpListenerOptions\x12X\n" +
	"\x12tcp_proxy_settings\x18\x03 \x01(\v2*.tcp.options.gloo.solo.io.TcpProxySettingsR\x10tcpProxySettings\x12a\n" +
	"\x10connection_limit\x18\x04 \x01(\v26.connection_limit.options.gloo.solo.io.ConnectionLimitR\x0fconnectionLimit\x12Z\n" +
	"\x0flocal_ratelimit\x18\x05 \x01(\v21.local_ratelimit.options.gloo.solo.io.TokenBucketR\x0elocalRatelimit\"\xc1\x11\n" +
	"\x12VirtualHostOptions\x128\n" +
	"\n" +
	"extensions\x18\x01 \x01(\v2\x18.gloo.solo.io.ExtensionsR\n" +
	"extensions\x12C\n" +
	"\aretries\x18\x05 \x01(\v2).retries.options.gloo.solo.io.RetryPolicyR\aretries\x127\n" +
	"\x05stats\x18\n" +
	" \x01(\v2!.stats.options.gloo.solo.io.StatsR\x05stats\x12a\n" +
	"\x13header_manipulation\x18\x02 \x01(\v20.headers.options.gloo.solo.io.HeaderManipulationR\x12headerManipulation\x129\n" +
	"\x04cors\x18\x03 \x01(\v2%.cors.options.gloo.solo.io.CorsPolicyR\x04cors\x12b\n" +
	"\x0ftransformations\x18\x04 \x01(\v24.transformation.options.gloo.solo.io.TransformationsB\x02\x18\x01R\x0ftransformations\x12Y\n" +
	"\x0fratelimit_basic\x18\x06 \x01(\v20.ratelimit.options.gloo.solo.io.IngressRateLimitR\x0eratelimitBasic\x12b\n" +
	"\x0fratelimit_early\x18H \x01(\v27.ratelimit.options.gloo.solo.io.RateLimitVhostExtensionH\x00R\x0eratelimitEarly\x12n\n" +
	"\x18rate_limit_early_configs\x18I \x01(\v23.ratelimit.options.gloo.solo.io.RateLimitConfigRefsH\x00R\x15rateLimitEarlyConfigs\x12W\n" +
	"\tratelimit\x18F \x01(\v27.ratelimit.options.gloo.solo.io.RateLimitVhostExtensionH\x01R\tratelimit\x12c\n" +
	"\x12rate_limit_configs\x18G \x01(\v23.ratelimit.options.gloo.solo.io.RateLimitConfigRefsH\x01R\x10rateLimitConfigs\x12f\n" +
	"\x11ratelimit_regular\x18J \x01(\v27.ratelimit.options.gloo.solo.io.RateLimitVhostExtensionH\x02R\x10ratelimitRegular\x12r\n" +
	"\x1arate_limit_regular_configs\x18K \x01(\v23.ratelimit.options.gloo.solo.io.RateLimitConfigRefsH\x02R\x17rateLimitRegularConfigs\x124\n" +
	"\x03waf\x18\b \x01(\v2\".waf.options.gloo.solo.io.SettingsR\x03waf\x12@\n" +
	"\x03jwt\x18\t \x01(\v2(.jwt.options.gloo.solo.io.VhostExtensionB\x02\x18\x01H\x03R\x03jwt\x12R\n" +
	"\n" +
	"jwt_staged\x18\x13 \x01(\v21.jwt.options.gloo.solo.io.JwtStagedVhostExtensionH\x03R\tjwtStaged\x12@\n" +
	"\x04rbac\x18\v \x01(\v2,.rbac.options.gloo.solo.io.ExtensionSettingsR\x04rbac\x12C\n" +
	"\aextauth\x18\f \x01(\v2).enterprise.gloo.solo.io.ExtAuthExtensionR\aextauth\x122\n" +
	"\x03dlp\x18\r \x01(\v2 .dlp.options.gloo.solo.io.ConfigR\x03dlp\x12i\n" +
	"\x10buffer_per_route\x18\x0e \x01(\v2?.solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRouteR\x0ebufferPerRoute\x12M\n" +
	"\x04csrf\x18\x12 \x01(\v29.solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicyR\x04csrf\x12]\n" +
	"\x1dinclude_request_attempt_count\x18\x0f \x01(\v2\x1a.google.protobuf.BoolValueR\x1aincludeRequestAttemptCount\x12d\n" +
	"!include_attempt_count_in_response\x18\x10 \x01(\v2\x1a.google.protobuf.BoolValueR\x1dincludeAttemptCountInResponse\x12p\n" +
	"\x16staged_transformations\x18\x11 \x01(\v29.transformation.options.gloo.solo.io.TransformationStagesR\x15stagedTransformations\x12F\n" +
	"\bext_proc\x18\x1e \x01(\v2+.extproc.options.gloo.solo.io.RouteSettingsR\aextProcB\x1e\n" +
	"\x1crate_limit_early_config_typeB\x18\n" +
	"\x16rate_limit_config_typeB \n" +
	"\x1erate_limit_regular_config_typeB\f\n" +
	"\n" +
	"jwt_config\"\x90\x1c\n" +
	"\fRouteOptions\x12b\n" +
	"\x0ftransformations\x18\x01 \x01(\v24.transformation.options.gloo.solo.io.TransformationsB\x02\x18\x01R\x0ftransformations\x12?\n" +
	"\x06faults\x18\x02 \x01(\v2'.fault.options.gloo.solo.io.RouteFaultsR\x06faults\x12C\n" +
	"\x0eprefix_rewrite\x18\x03 \x01(\v2\x1c.google.protobuf.StringValueR\rprefixRewrite\x123\n" +
	"\atimeout\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12C\n" +
	"\aretries\x18\x05 \x01(\v2).retries.options.gloo.solo.io.RetryPolicyR\aretries\x128\n" +
	"\n" +
	"extensions\x18\x06 \x01(\v2\x18.gloo.solo.io.ExtensionsR\n" +
	"extensions\x12L\n" +
	"\atracing\x18\a \x01(\v22.tracing.options.gloo.solo.io.RouteTracingSettingsR\atracing\x12L\n" +
	"\tshadowing\x18\b \x01(\v2..shadowing.options.gloo.solo.io.RouteShadowingR\tshadowing\x12a\n" +
	"\x13header_manipulation\x18\t \x01(\v20.headers.options.gloo.solo.io.HeaderManipulationR\x12headerManipulation\x12#\n" +
	"\fhost_rewrite\x18\n" +
	" \x01(\tH\x00R\vhostRewrite\x12H\n" +
	"\x11auto_host_rewrite\x18\x13 \x01(\v2\x1a.google.protobuf.BoolValueH\x00R\x0fautoHostRewrite\x12o\n" +
	"\x17host_rewrite_path_regex\x18e \x01(\v26.solo.io.envoy.type.matcher.v3.RegexMatchAndSubstituteH\x00R\x14hostRewritePathRegex\x12O\n" +
	"\x13host_rewrite_header\x18\x93\x01 \x01(\v2\x1c.google.protobuf.StringValueH\x00R\x11hostRewriteHeader\x12R\n" +
	"\x17append_x_forwarded_host\x18\x92\x01 \x01(\v2\x1a.google.protobuf.BoolValueR\x14appendXForwardedHost\x129\n" +
	"\x04cors\x18\v \x01(\v2%.cors.options.gloo.solo.io.CorsPolicyR\x04cors\x12K\n" +
	"\alb_hash\x18\f \x01(\v22.lbhash.options.gloo.solo.io.RouteActionHashConfigR\x06lbHash\x12X\n" +
	"\bupgrades\x18\x15 \x03(\v2<.protocol_upgrade.options.gloo.solo.io.ProtocolUpgradeConfigR\bupgrades\x12Y\n" +
	"\x0fratelimit_basic\x18\r \x01(\v20.ratelimit.options.gloo.solo.io.IngressRateLimitR\x0eratelimitBasic\x12c\n" +
	"\x0fratelimit_early\x18\x8e\x01 \x01(\v27.ratelimit.options.gloo.solo.io.RateLimitRouteExtensionH\x01R\x0eratelimitEarly\x12o\n" +
	"\x18rate_limit_early_configs\x18\x8f\x01 \x01(\v23.ratelimit.options.gloo.solo.io.RateLimitConfigRefsH\x01R\x15rateLimitEarlyConfigs\x12X\n" +
	"\tratelimit\x18\x8c\x01 \x01(\v27.ratelimit.options.gloo.solo.io.RateLimitRouteExtensionH\x02R\tratelimit\x12d\n" +
	"\x12rate_limit_configs\x18\x8d\x01 \x01(\v23.ratelimit.options.gloo.solo.io.RateLimitConfigRefsH\x02R\x10rateLimitConfigs\x12g\n" +
	"\x11ratelimit_regular\x18\x90\x01 \x01(\v27.ratelimit.options.gloo.solo.io.RateLimitRouteExtensionH\x03R\x10ratelimitRegular\x12s\n" +
	"\x1arate_limit_regular_configs\x18\x91\x01 \x01(\v23.ratelimit.options.gloo.solo.io.RateLimitConfigRefsH\x03R\x17rateLimitRegularConfigs\x124\n" +
	"\x03waf\x18\x0f \x01(\v2\".waf.options.gloo.solo.io.SettingsR\x03waf\x12@\n" +
	"\x03jwt\x18\x10 \x01(\v2(.jwt.options.gloo.solo.io.RouteExtensionB\x02\x18\x01H\x04R\x03jwt\x12R\n" +
	"\n" +
	"jwt_staged\x18\x19 \x01(\v21.jwt.options.gloo.solo.io.JwtStagedRouteExtensionH\x04R\tjwtStaged\x12@\n" +
	"\x04rbac\x18\x11 \x01(\v2,.rbac.options.gloo.solo.io.ExtensionSettingsR\x04rbac\x12C\n" +
	"\aextauth\x18\x12 \x01(\v2).enterprise.gloo.solo.io.ExtAuthExtensionR\aextauth\x122\n" +
	"\x03dlp\x18\x14 \x01(\v2 .dlp.options.gloo.solo.io.ConfigR\x03dlp\x12i\n" +
	"\x10buffer_per_route\x18\x16 \x01(\v2?.solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRouteR\x0ebufferPerRoute\x12M\n" +
	"\x04csrf\x18\x18 \x01(\v29.solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicyR\x04csrf\x12p\n" +
	"\x16staged_transformations\x18\x17 \x01(\v29.transformation.options.gloo.solo.io.TransformationStagesR\x15stagedTransformations\x12T\n" +
	"\x0eenvoy_metadata\x18\x1a \x03(\v2-.gloo.solo.io.RouteOptions.EnvoyMetadataEntryR\renvoyMetadata\x12[\n" +
	"\rregex_rewrite\x18\x1b \x01(\v26.solo.io.envoy.type.matcher.v3.RegexMatchAndSubstituteR\fregexRewrite\x12\\\n" +
	"\x13max_stream_duration\x18\x1c \x01(\v2,.gloo.solo.io.RouteOptions.MaxStreamDurationR\x11maxStreamDuration\x12<\n" +
	"\fidle_timeout\x18\x1d \x01(\v2\x19.google.protobuf.DurationR\vidleTimeout\x12F\n" +
	"\bext_proc\x18\x1e \x01(\v2+.extproc.options.gloo.solo.io.RouteSettingsR\aextProc\x1aY\n" +
	"\x12EnvoyMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.google.protobuf.StructR\x05value:\x028\x01\x1a\x88\x02\n" +
	"\x11MaxStreamDuration\x12I\n" +
	"\x13max_stream_duration\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x11maxStreamDuration\x12P\n" +
	"\x17grpc_timeout_header_max\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x14grpcTimeoutHeaderMax\x12V\n" +
	"\x1agrpc_timeout_header_offset\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x17grpcTimeoutHeaderOffsetB\x13\n" +
	"\x11host_rewrite_typeB\x1e\n" +
	"\x1crate_limit_early_config_typeB\x18\n" +
	"\x16rate_limit_config_typeB \n" +
	"\x1erate_limit_regular_config_typeB\f\n" +
	"\n" +
	"jwt_config\"\xad\x02\n" +
	"\x0fDestinationSpec\x12=\n" +
	"\x03aws\x18\x01 \x01(\v2).aws.options.gloo.solo.io.DestinationSpecH\x00R\x03aws\x12C\n" +
	"\x05azure\x18\x02 \x01(\v2+.azure.options.gloo.solo.io.DestinationSpecH\x00R\x05azure\x12@\n" +
	"\x04rest\x18\x03 \x01(\v2*.rest.options.gloo.solo.io.DestinationSpecH\x00R\x04rest\x12@\n" +
	"\x04grpc\x18\x04 \x01(\v2*.grpc.options.gloo.solo.io.DestinationSpecH\x00R\x04grpcB\x12\n" +
	"\x10destination_type\"\x8e\x05\n" +
	"\x1aWeightedDestinationOptions\x12a\n" +
	"\x13header_manipulation\x18\x01 \x01(\v20.headers.options.gloo.solo.io.HeaderManipulationR\x12headerManipulation\x12b\n" +
	"\x0ftransformations\x18\x02 \x01(\v24.transformation.options.gloo.solo.io.TransformationsB\x02\x18\x01R\x0ftransformations\x128\n" +
	"\n" +
	"extensions\x18\x03 \x01(\v2\x18.gloo.solo.io.ExtensionsR\n" +
	"extensions\x12C\n" +
	"\aextauth\x18\x04 \x01(\v2).enterprise.gloo.solo.io.ExtAuthExtensionR\aextauth\x12i\n" +
	"\x10buffer_per_route\x18\x05 \x01(\v2?.solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRouteR\x0ebufferPerRoute\x12M\n" +
	"\x04csrf\x18\a \x01(\v29.solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicyR\x04csrf\x12p\n" +
	"\x16staged_transformations\x18\x06 \x01(\v29.transformation.options.gloo.solo.io.TransformationStagesR\x15stagedTransformationsB>\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z0github.com/solo-io/gloo/projects/gloo/pkg/api/v1b\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_goTypes = []any{
	(*ListenerOptions)(nil),                      // 0: gloo.solo.io.ListenerOptions
	(*ConnectionBalanceConfig)(nil),              // 1: gloo.solo.io.ConnectionBalanceConfig
	(*RouteConfigurationOptions)(nil),            // 2: gloo.solo.io.RouteConfigurationOptions
	(*HttpListenerOptions)(nil),                  // 3: gloo.solo.io.HttpListenerOptions
	(*TcpListenerOptions)(nil),                   // 4: gloo.solo.io.TcpListenerOptions
	(*VirtualHostOptions)(nil),                   // 5: gloo.solo.io.VirtualHostOptions
	(*RouteOptions)(nil),                         // 6: gloo.solo.io.RouteOptions
	(*DestinationSpec)(nil),                      // 7: gloo.solo.io.DestinationSpec
	(*WeightedDestinationOptions)(nil),           // 8: gloo.solo.io.WeightedDestinationOptions
	(*ConnectionBalanceConfig_ExactBalance)(nil), // 9: gloo.solo.io.ConnectionBalanceConfig.ExactBalance
	nil,                                            // 10: gloo.solo.io.RouteOptions.EnvoyMetadataEntry
	(*RouteOptions_MaxStreamDuration)(nil),         // 11: gloo.solo.io.RouteOptions.MaxStreamDuration
	(*als.AccessLoggingService)(nil),               // 12: als.options.gloo.solo.io.AccessLoggingService
	(*Extensions)(nil),                             // 13: gloo.solo.io.Extensions
	(*wrappers.UInt32Value)(nil),                   // 14: google.protobuf.UInt32Value
	(*core.SocketOption)(nil),                      // 15: solo.io.envoy.api.v2.core.SocketOption
	(*proxy_protocol.ProxyProtocol)(nil),           // 16: proxy_protocol.options.gloo.solo.io.ProxyProtocol
	(*wrappers.BoolValue)(nil),                     // 17: google.protobuf.BoolValue
	(*grpc_web.GrpcWeb)(nil),                       // 18: grpc_web.options.gloo.solo.io.GrpcWeb
	(*hcm.HttpConnectionManagerSettings)(nil),      // 19: hcm.options.gloo.solo.io.HttpConnectionManagerSettings
	(*healthcheck.HealthCheck)(nil),                // 20: healthcheck.options.gloo.solo.io.HealthCheck
	(*waf.Settings)(nil),                           // 21: waf.options.gloo.solo.io.Settings
	(*dlp.FilterConfig)(nil),                       // 22: dlp.options.gloo.solo.io.FilterConfig
	(*wasm.PluginSource)(nil),                      // 23: wasm.options.gloo.solo.io.PluginSource
	(*v1.Settings)(nil),                            // 24: enterprise.gloo.solo.io.Settings
	(*ratelimit.Settings)(nil),                     // 25: ratelimit.options.gloo.solo.io.Settings
	(*caching.Settings)(nil),                       // 26: caching.options.gloo.solo.io.Settings
	(*extproc.Settings)(nil),                       // 27: extproc.options.gloo.solo.io.Settings
	(*v2.Gzip)(nil),                                // 28: solo.io.envoy.config.filter.http.gzip.v2.Gzip
	(*proxylatency.ProxyLatency)(nil),              // 29: envoy.config.filter.http.proxylatency.v2.ProxyLatency
	(*v3.Buffer)(nil),                              // 30: solo.io.envoy.extensions.filters.http.buffer.v3.Buffer
	(*v31.CsrfPolicy)(nil),                         // 31: solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicy
	(*grpc_json.GrpcJsonTranscoder)(nil),           // 32: grpc_json.options.gloo.solo.io.GrpcJsonTranscoder
	(*dynamic_forward_proxy.FilterConfig)(nil),     // 33: dfp.options.gloo.solo.io.FilterConfig
	(*connection_limit.ConnectionLimit)(nil),       // 34: connection_limit.options.gloo.solo.io.ConnectionLimit
	(*local_ratelimit.TokenBucket)(nil),            // 35: local_ratelimit.options.gloo.solo.io.TokenBucket
	(*local_ratelimit.Settings)(nil),               // 36: local_ratelimit.options.gloo.solo.io.Settings
	(*router.Router)(nil),                          // 37: gloo.solo.io.Router
	(*tap.Tap)(nil),                                // 38: tap.options.gloo.solo.io.Tap
	(*tcp.TcpProxySettings)(nil),                   // 39: tcp.options.gloo.solo.io.TcpProxySettings
	(*retries.RetryPolicy)(nil),                    // 40: retries.options.gloo.solo.io.RetryPolicy
	(*stats.Stats)(nil),                            // 41: stats.options.gloo.solo.io.Stats
	(*headers.HeaderManipulation)(nil),             // 42: headers.options.gloo.solo.io.HeaderManipulation
	(*cors.CorsPolicy)(nil),                        // 43: cors.options.gloo.solo.io.CorsPolicy
	(*transformation.Transformations)(nil),         // 44: transformation.options.gloo.solo.io.Transformations
	(*ratelimit.IngressRateLimit)(nil),             // 45: ratelimit.options.gloo.solo.io.IngressRateLimit
	(*ratelimit.RateLimitVhostExtension)(nil),      // 46: ratelimit.options.gloo.solo.io.RateLimitVhostExtension
	(*ratelimit.RateLimitConfigRefs)(nil),          // 47: ratelimit.options.gloo.solo.io.RateLimitConfigRefs
	(*jwt.VhostExtension)(nil),                     // 48: jwt.options.gloo.solo.io.VhostExtension
	(*jwt.JwtStagedVhostExtension)(nil),            // 49: jwt.options.gloo.solo.io.JwtStagedVhostExtension
	(*rbac.ExtensionSettings)(nil),                 // 50: rbac.options.gloo.solo.io.ExtensionSettings
	(*v1.ExtAuthExtension)(nil),                    // 51: enterprise.gloo.solo.io.ExtAuthExtension
	(*dlp.Config)(nil),                             // 52: dlp.options.gloo.solo.io.Config
	(*v3.BufferPerRoute)(nil),                      // 53: solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRoute
	(*transformation.TransformationStages)(nil),    // 54: transformation.options.gloo.solo.io.TransformationStages
	(*extproc.RouteSettings)(nil),                  // 55: extproc.options.gloo.solo.io.RouteSettings
	(*faultinjection.RouteFaults)(nil),             // 56: fault.options.gloo.solo.io.RouteFaults
	(*wrappers.StringValue)(nil),                   // 57: google.protobuf.StringValue
	(*duration.Duration)(nil),                      // 58: google.protobuf.Duration
	(*tracing.RouteTracingSettings)(nil),           // 59: tracing.options.gloo.solo.io.RouteTracingSettings
	(*shadowing.RouteShadowing)(nil),               // 60: shadowing.options.gloo.solo.io.RouteShadowing
	(*v32.RegexMatchAndSubstitute)(nil),            // 61: solo.io.envoy.type.matcher.v3.RegexMatchAndSubstitute
	(*lbhash.RouteActionHashConfig)(nil),           // 62: lbhash.options.gloo.solo.io.RouteActionHashConfig
	(*protocol_upgrade.ProtocolUpgradeConfig)(nil), // 63: protocol_upgrade.options.gloo.solo.io.ProtocolUpgradeConfig
	(*ratelimit.RateLimitRouteExtension)(nil),      // 64: ratelimit.options.gloo.solo.io.RateLimitRouteExtension
	(*jwt.RouteExtension)(nil),                     // 65: jwt.options.gloo.solo.io.RouteExtension
	(*jwt.JwtStagedRouteExtension)(nil),            // 66: jwt.options.gloo.solo.io.JwtStagedRouteExtension
	(*aws.DestinationSpec)(nil),                    // 67: aws.options.gloo.solo.io.DestinationSpec
	(*azure.DestinationSpec)(nil),                  // 68: azure.options.gloo.solo.io.DestinationSpec
	(*rest.DestinationSpec)(nil),                   // 69: rest.options.gloo.solo.io.DestinationSpec
	(*grpc.DestinationSpec)(nil),                   // 70: grpc.options.gloo.solo.io.DestinationSpec
	(*_struct.Struct)(nil),                         // 71: google.protobuf.Struct
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_depIdxs = []int32{
	12,  // 0: gloo.solo.io.ListenerOptions.access_logging_service:type_name -> als.options.gloo.solo.io.AccessLoggingService
	13,  // 1: gloo.solo.io.ListenerOptions.extensions:type_name -> gloo.solo.io.Extensions
	14,  // 2: gloo.solo.io.ListenerOptions.per_connection_buffer_limit_bytes:type_name -> google.protobuf.UInt32Value
	15,  // 3: gloo.solo.io.ListenerOptions.socket_options:type_name -> solo.io.envoy.api.v2.core.SocketOption
	16,  // 4: gloo.solo.io.ListenerOptions.proxy_protocol:type_name -> proxy_protocol.options.gloo.solo.io.ProxyProtocol
	1,   // 5: gloo.solo.io.ListenerOptions.connection_balance_config:type_name -> gloo.solo.io.ConnectionBalanceConfig
	9,   // 6: gloo.solo.io.ConnectionBalanceConfig.exact_balance:type_name -> gloo.solo.io.ConnectionBalanceConfig.ExactBalance
	14,  // 7: gloo.solo.io.RouteConfigurationOptions.max_direct_response_body_size_bytes:type_name -> google.protobuf.UInt32Value
	17,  // 8: gloo.solo.io.RouteConfigurationOptions.most_specific_header_mutations_wins:type_name -> google.protobuf.BoolValue
	18,  // 9: gloo.solo.io.HttpListenerOptions.grpc_web:type_name -> grpc_web.options.gloo.solo.io.GrpcWeb
	19,  // 10: gloo.solo.io.HttpListenerOptions.http_connection_manager_settings:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings
	20,  // 11: gloo.solo.io.HttpListenerOptions.health_check:type_name -> healthcheck.options.gloo.solo.io.HealthCheck
	13,  // 12: gloo.solo.io.HttpListenerOptions.extensions:type_name -> gloo.solo.io.Extensions
	21,  // 13: gloo.solo.io.HttpListenerOptions.waf:type_name -> waf.options.gloo.solo.io.Settings
	22,  // 14: gloo.solo.io.HttpListenerOptions.dlp:type_name -> dlp.options.gloo.solo.io.FilterConfig
	23,  // 15: gloo.solo.io.HttpListenerOptions.wasm:type_name -> wasm.options.gloo.solo.io.PluginSource
	24,  // 16: gloo.solo.io.HttpListenerOptions.extauth:type_name -> enterprise.gloo.solo.io.Settings
	25,  // 17: gloo.solo.io.HttpListenerOptions.ratelimit_server:type_name -> ratelimit.options.gloo.solo.io.Settings
	26,  // 18: gloo.solo.io.HttpListenerOptions.caching:type_name -> caching.options.gloo.solo.io.Settings
	17,  // 19: gloo.solo.io.HttpListenerOptions.disable_ext_proc:type_name -> google.protobuf.BoolValue
	27,  // 20: gloo.solo.io.HttpListenerOptions.ext_proc:type_name -> extproc.options.gloo.solo.io.Settings
	28,  // 21: gloo.solo.io.HttpListenerOptions.gzip:type_name -> solo.io.envoy.config.filter.http.gzip.v2.Gzip
	29,  // 22: gloo.solo.io.HttpListenerOptions.proxy_latency:type_name -> envoy.config.filter.http.proxylatency.v2.ProxyLatency
	30,  // 23: gloo.solo.io.HttpListenerOptions.buffer:type_name -> solo.io.envoy.extensions.filters.http.buffer.v3.Buffer
	31,  // 24: gloo.solo.io.HttpListenerOptions.csrf:type_name -> solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicy
	32,  // 25: gloo.solo.io.HttpListenerOptions.grpc_json_transcoder:type_name -> grpc_json.options.gloo.solo.io.GrpcJsonTranscoder
	17,  // 26: gloo.solo.io.HttpListenerOptions.sanitize_cluster_header:type_name -> google.protobuf.BoolValue
	17,  // 27: gloo.solo.io.HttpListenerOptions.leftmost_xff_address:type_name -> google.protobuf.BoolValue
	33,  // 28: gloo.solo.io.HttpListenerOptions.dynamic_forward_proxy:type_name -> dfp.options.gloo.solo.io.FilterConfig
	34,  // 29: gloo.solo.io.HttpListenerOptions.connection_limit:type_name -> connection_limit.options.gloo.solo.io.ConnectionLimit
	35,  // 30: gloo.solo.io.HttpListenerOptions.network_local_ratelimit:type_name -> local_ratelimit.options.gloo.solo.io.TokenBucket
	36,  // 31: gloo.solo.io.HttpListenerOptions.http_local_ratelimit:type_name -> local_ratelimit.options.gloo.solo.io.Settings
	37,  // 32: gloo.solo.io.HttpListenerOptions.router:type_name -> gloo.solo.io.Router
	38,  // 33: gloo.solo.io.HttpListenerOptions.tap:type_name -> tap.options.gloo.solo.io.Tap
	39,  // 34: gloo.solo.io.TcpListenerOptions.tcp_proxy_settings:type_name -> tcp.options.gloo.solo.io.TcpProxySettings
	34,  // 35: gloo.solo.io.TcpListenerOptions.connection_limit:type_name -> connection_limit.options.gloo.solo.io.ConnectionLimit
	35,  // 36: gloo.solo.io.TcpListenerOptions.local_ratelimit:type_name -> local_ratelimit.options.gloo.solo.io.TokenBucket
	13,  // 37: gloo.solo.io.VirtualHostOptions.extensions:type_name -> gloo.solo.io.Extensions
	40,  // 38: gloo.solo.io.VirtualHostOptions.retries:type_name -> retries.options.gloo.solo.io.RetryPolicy
	41,  // 39: gloo.solo.io.VirtualHostOptions.stats:type_name -> stats.options.gloo.solo.io.Stats
	42,  // 40: gloo.solo.io.VirtualHostOptions.header_manipulation:type_name -> headers.options.gloo.solo.io.HeaderManipulation
	43,  // 41: gloo.solo.io.VirtualHostOptions.cors:type_name -> cors.options.gloo.solo.io.CorsPolicy
	44,  // 42: gloo.solo.io.VirtualHostOptions.transformations:type_name -> transformation.options.gloo.solo.io.Transformations
	45,  // 43: gloo.solo.io.VirtualHostOptions.ratelimit_basic:type_name -> ratelimit.options.gloo.solo.io.IngressRateLimit
	46,  // 44: gloo.solo.io.VirtualHostOptions.ratelimit_early:type_name -> ratelimit.options.gloo.solo.io.RateLimitVhostExtension
	47,  // 45: gloo.solo.io.VirtualHostOptions.rate_limit_early_configs:type_name -> ratelimit.options.gloo.solo.io.RateLimitConfigRefs
	46,  // 46: gloo.solo.io.VirtualHostOptions.ratelimit:type_name -> ratelimit.options.gloo.solo.io.RateLimitVhostExtension
	47,  // 47: gloo.solo.io.VirtualHostOptions.rate_limit_configs:type_name -> ratelimit.options.gloo.solo.io.RateLimitConfigRefs
	46,  // 48: gloo.solo.io.VirtualHostOptions.ratelimit_regular:type_name -> ratelimit.options.gloo.solo.io.RateLimitVhostExtension
	47,  // 49: gloo.solo.io.VirtualHostOptions.rate_limit_regular_configs:type_name -> ratelimit.options.gloo.solo.io.RateLimitConfigRefs
	21,  // 50: gloo.solo.io.VirtualHostOptions.waf:type_name -> waf.options.gloo.solo.io.Settings
	48,  // 51: gloo.solo.io.VirtualHostOptions.jwt:type_name -> jwt.options.gloo.solo.io.VhostExtension
	49,  // 52: gloo.solo.io.VirtualHostOptions.jwt_staged:type_name -> jwt.options.gloo.solo.io.JwtStagedVhostExtension
	50,  // 53: gloo.solo.io.VirtualHostOptions.rbac:type_name -> rbac.options.gloo.solo.io.ExtensionSettings
	51,  // 54: gloo.solo.io.VirtualHostOptions.extauth:type_name -> enterprise.gloo.solo.io.ExtAuthExtension
	52,  // 55: gloo.solo.io.VirtualHostOptions.dlp:type_name -> dlp.options.gloo.solo.io.Config
	53,  // 56: gloo.solo.io.VirtualHostOptions.buffer_per_route:type_name -> solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRoute
	31,  // 57: gloo.solo.io.VirtualHostOptions.csrf:type_name -> solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicy
	17,  // 58: gloo.solo.io.VirtualHostOptions.include_request_attempt_count:type_name -> google.protobuf.BoolValue
	17,  // 59: gloo.solo.io.VirtualHostOptions.include_attempt_count_in_response:type_name -> google.protobuf.BoolValue
	54,  // 60: gloo.solo.io.VirtualHostOptions.staged_transformations:type_name -> transformation.options.gloo.solo.io.TransformationStages
	55,  // 61: gloo.solo.io.VirtualHostOptions.ext_proc:type_name -> extproc.options.gloo.solo.io.RouteSettings
	44,  // 62: gloo.solo.io.RouteOptions.transformations:type_name -> transformation.options.gloo.solo.io.Transformations
	56,  // 63: gloo.solo.io.RouteOptions.faults:type_name -> fault.options.gloo.solo.io.RouteFaults
	57,  // 64: gloo.solo.io.RouteOptions.prefix_rewrite:type_name -> google.protobuf.StringValue
	58,  // 65: gloo.solo.io.RouteOptions.timeout:type_name -> google.protobuf.Duration
	40,  // 66: gloo.solo.io.RouteOptions.retries:type_name -> retries.options.gloo.solo.io.RetryPolicy
	13,  // 67: gloo.solo.io.RouteOptions.extensions:type_name -> gloo.solo.io.Extensions
	59,  // 68: gloo.solo.io.RouteOptions.tracing:type_name -> tracing.options.gloo.solo.io.RouteTracingSettings
	60,  // 69: gloo.solo.io.RouteOptions.shadowing:type_name -> shadowing.options.gloo.solo.io.RouteShadowing
	42,  // 70: gloo.solo.io.RouteOptions.header_manipulation:type_name -> headers.options.gloo.solo.io.HeaderManipulation
	17,  // 71: gloo.solo.io.RouteOptions.auto_host_rewrite:type_name -> google.protobuf.BoolValue
	61,  // 72: gloo.solo.io.RouteOptions.host_rewrite_path_regex:type_name -> solo.io.envoy.type.matcher.v3.RegexMatchAndSubstitute
	57,  // 73: gloo.solo.io.RouteOptions.host_rewrite_header:type_name -> google.protobuf.StringValue
	17,  // 74: gloo.solo.io.RouteOptions.append_x_forwarded_host:type_name -> google.protobuf.BoolValue
	43,  // 75: gloo.solo.io.RouteOptions.cors:type_name -> cors.options.gloo.solo.io.CorsPolicy
	62,  // 76: gloo.solo.io.RouteOptions.lb_hash:type_name -> lbhash.options.gloo.solo.io.RouteActionHashConfig
	63,  // 77: gloo.solo.io.RouteOptions.upgrades:type_name -> protocol_upgrade.options.gloo.solo.io.ProtocolUpgradeConfig
	45,  // 78: gloo.solo.io.RouteOptions.ratelimit_basic:type_name -> ratelimit.options.gloo.solo.io.IngressRateLimit
	64,  // 79: gloo.solo.io.RouteOptions.ratelimit_early:type_name -> ratelimit.options.gloo.solo.io.RateLimitRouteExtension
	47,  // 80: gloo.solo.io.RouteOptions.rate_limit_early_configs:type_name -> ratelimit.options.gloo.solo.io.RateLimitConfigRefs
	64,  // 81: gloo.solo.io.RouteOptions.ratelimit:type_name -> ratelimit.options.gloo.solo.io.RateLimitRouteExtension
	47,  // 82: gloo.solo.io.RouteOptions.rate_limit_configs:type_name -> ratelimit.options.gloo.solo.io.RateLimitConfigRefs
	64,  // 83: gloo.solo.io.RouteOptions.ratelimit_regular:type_name -> ratelimit.options.gloo.solo.io.RateLimitRouteExtension
	47,  // 84: gloo.solo.io.RouteOptions.rate_limit_regular_configs:type_name -> ratelimit.options.gloo.solo.io.RateLimitConfigRefs
	21,  // 85: gloo.solo.io.RouteOptions.waf:type_name -> waf.options.gloo.solo.io.Settings
	65,  // 86: gloo.solo.io.RouteOptions.jwt:type_name -> jwt.options.gloo.solo.io.RouteExtension
	66,  // 87: gloo.solo.io.RouteOptions.jwt_staged:type_name -> jwt.options.gloo.solo.io.JwtStagedRouteExtension
	50,  // 88: gloo.solo.io.RouteOptions.rbac:type_name -> rbac.options.gloo.solo.io.ExtensionSettings
	51,  // 89: gloo.solo.io.RouteOptions.extauth:type_name -> enterprise.gloo.solo.io.ExtAuthExtension
	52,  // 90: gloo.solo.io.RouteOptions.dlp:type_name -> dlp.options.gloo.solo.io.Config
	53,  // 91: gloo.solo.io.RouteOptions.buffer_per_route:type_name -> solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRoute
	31,  // 92: gloo.solo.io.RouteOptions.csrf:type_name -> solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicy
	54,  // 93: gloo.solo.io.RouteOptions.staged_transformations:type_name -> transformation.options.gloo.solo.io.TransformationStages
	10,  // 94: gloo.solo.io.RouteOptions.envoy_metadata:type_name -> gloo.solo.io.RouteOptions.EnvoyMetadataEntry
	61,  // 95: gloo.solo.io.RouteOptions.regex_rewrite:type_name -> solo.io.envoy.type.matcher.v3.RegexMatchAndSubstitute
	11,  // 96: gloo.solo.io.RouteOptions.max_stream_duration:type_name -> gloo.solo.io.RouteOptions.MaxStreamDuration
	58,  // 97: gloo.solo.io.RouteOptions.idle_timeout:type_name -> google.protobuf.Duration
	55,  // 98: gloo.solo.io.RouteOptions.ext_proc:type_name -> extproc.options.gloo.solo.io.RouteSettings
	67,  // 99: gloo.solo.io.DestinationSpec.aws:type_name -> aws.options.gloo.solo.io.DestinationSpec
	68,  // 100: gloo.solo.io.DestinationSpec.azure:type_name -> azure.options.gloo.solo.io.DestinationSpec
	69,  // 101: gloo.solo.io.DestinationSpec.rest:type_name -> rest.options.gloo.solo.io.DestinationSpec
	70,  // 102: gloo.solo.io.DestinationSpec.grpc:type_name -> grpc.options.gloo.solo.io.DestinationSpec
	42,  // 103: gloo.solo.io.WeightedDestinationOptions.header_manipulation:type_name -> headers.options.gloo.solo.io.HeaderManipulation
	44,  // 104: gloo.solo.io.WeightedDestinationOptions.transformations:type_name -> transformation.options.gloo.solo.io.Transformations
	13,  // 105: gloo.solo.io.WeightedDestinationOptions.extensions:type_name -> gloo.solo.io.Extensions
	51,  // 106: gloo.solo.io.WeightedDestinationOptions.extauth:type_name -> enterprise.gloo.solo.io.ExtAuthExtension
	53,  // 107: gloo.solo.io.WeightedDestinationOptions.buffer_per_route:type_name -> solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRoute
	31,  // 108: gloo.solo.io.WeightedDestinationOptions.csrf:type_name -> solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicy
	54,  // 109: gloo.solo.io.WeightedDestinationOptions.staged_transformations:type_name -> transformation.options.gloo.solo.io.TransformationStages
	71,  // 110: gloo.solo.io.RouteOptions.EnvoyMetadataEntry.value:type_name -> google.protobuf.Struct
	58,  // 111: gloo.solo.io.RouteOptions.MaxStreamDuration.max_stream_duration:type_name -> google.protobuf.Duration
	58,  // 112: gloo.solo.io.RouteOptions.MaxStreamDuration.grpc_timeout_header_max:type_name -> google.protobuf.Duration
	58,  // 113: gloo.solo.io.RouteOptions.MaxStreamDuration.grpc_timeout_header_offset:type_name -> google.protobuf.Duration
	114, // [114:114] is the sub-list for method output_type
	114, // [114:114] is the sub-list for method input_type
	114, // [114:114] is the sub-list for extension type_name
	114, // [114:114] is the sub-list for extension extendee
	0,   // [0:114] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_init() }
func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_extensions_proto_init()
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[3].OneofWrappers = []any{
		(*HttpListenerOptions_DisableExtProc)(nil),
		(*HttpListenerOptions_ExtProc)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[5].OneofWrappers = []any{
		(*VirtualHostOptions_RatelimitEarly)(nil),
		(*VirtualHostOptions_RateLimitEarlyConfigs)(nil),
		(*VirtualHostOptions_Ratelimit)(nil),
		(*VirtualHostOptions_RateLimitConfigs)(nil),
		(*VirtualHostOptions_RatelimitRegular)(nil),
		(*VirtualHostOptions_RateLimitRegularConfigs)(nil),
		(*VirtualHostOptions_Jwt)(nil),
		(*VirtualHostOptions_JwtStaged)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[6].OneofWrappers = []any{
		(*RouteOptions_HostRewrite)(nil),
		(*RouteOptions_AutoHostRewrite)(nil),
		(*RouteOptions_HostRewritePathRegex)(nil),
		(*RouteOptions_HostRewriteHeader)(nil),
		(*RouteOptions_RatelimitEarly)(nil),
		(*RouteOptions_RateLimitEarlyConfigs)(nil),
		(*RouteOptions_Ratelimit)(nil),
		(*RouteOptions_RateLimitConfigs)(nil),
		(*RouteOptions_RatelimitRegular)(nil),
		(*RouteOptions_RateLimitRegularConfigs)(nil),
		(*RouteOptions_Jwt)(nil),
		(*RouteOptions_JwtStaged)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes[7].OneofWrappers = []any{
		(*DestinationSpec_Aws)(nil),
		(*DestinationSpec_Azure)(nil),
		(*DestinationSpec_Rest)(nil),
		(*DestinationSpec_Grpc)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_proto_depIdxs = nil
}
