// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/tcp_listener_options.proto

package v1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	connection_limit "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/connection_limit"
	local_ratelimit "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/local_ratelimit"
	tcp "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/tcp"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Optional, feature-specific configuration that lives on tcp listeners
type TcpListenerOptions struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TcpProxySettings *tcp.TcpProxySettings  `protobuf:"bytes,3,opt,name=tcp_proxy_settings,json=tcpProxySettings,proto3" json:"tcp_proxy_settings,omitempty"`
	// ConnectionLimit can be used to limit the number of active connections per gateway. Useful for resource protection as well as DoS prevention.
	ConnectionLimit *connection_limit.ConnectionLimit `protobuf:"bytes,4,opt,name=connection_limit,json=connectionLimit,proto3" json:"connection_limit,omitempty"`
	// LocalRatelimit can be used to rate limit the connections per gateway at the L4 layer.
	// It uses envoy's own local rate limit filter to do so, without the need for an external rate limit server to be set up.
	LocalRatelimit *local_ratelimit.TokenBucket `protobuf:"bytes,5,opt,name=local_ratelimit,json=localRatelimit,proto3" json:"local_ratelimit,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TcpListenerOptions) Reset() {
	*x = TcpListenerOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpListenerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpListenerOptions) ProtoMessage() {}

func (x *TcpListenerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpListenerOptions.ProtoReflect.Descriptor instead.
func (*TcpListenerOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_rawDescGZIP(), []int{0}
}

func (x *TcpListenerOptions) GetTcpProxySettings() *tcp.TcpProxySettings {
	if x != nil {
		return x.TcpProxySettings
	}
	return nil
}

func (x *TcpListenerOptions) GetConnectionLimit() *connection_limit.ConnectionLimit {
	if x != nil {
		return x.ConnectionLimit
	}
	return nil
}

func (x *TcpListenerOptions) GetLocalRatelimit() *local_ratelimit.TokenBucket {
	if x != nil {
		return x.LocalRatelimit
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_rawDesc = "" +
	"\n" +
	"Ggithub.com/solo-io/gloo/projects/gloo/api/v1/tcp_listener_options.proto\x12\fgloo.solo.io\x1a\x12extproto/ext.proto\x1aBgithub.com/solo-io/gloo/projects/gloo/api/v1/options/tcp/tcp.proto\x1a\\github.com/solo-io/gloo/projects/gloo/api/v1/options/connection_limit/connection_limit.proto\x1aZgithub.com/solo-io/gloo/projects/gloo/api/v1/options/local_ratelimit/local_ratelimit.proto\"\xad\x02\n" +
	"\x12TcpListenerOptions\x12X\n" +
	"\x12tcp_proxy_settings\x18\x03 \x01(\v2*.tcp.options.gloo.solo.io.TcpProxySettingsR\x10tcpProxySettings\x12a\n" +
	"\x10connection_limit\x18\x04 \x01(\v26.connection_limit.options.gloo.solo.io.ConnectionLimitR\x0fconnectionLimit\x12Z\n" +
	"\x0flocal_ratelimit\x18\x05 \x01(\v21.local_ratelimit.options.gloo.solo.io.TokenBucketR\x0elocalRatelimitB>\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z0github.com/solo-io/gloo/projects/gloo/pkg/api/v1b\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_goTypes = []any{
	(*TcpListenerOptions)(nil),               // 0: gloo.solo.io.TcpListenerOptions
	(*tcp.TcpProxySettings)(nil),             // 1: tcp.options.gloo.solo.io.TcpProxySettings
	(*connection_limit.ConnectionLimit)(nil), // 2: connection_limit.options.gloo.solo.io.ConnectionLimit
	(*local_ratelimit.TokenBucket)(nil),      // 3: local_ratelimit.options.gloo.solo.io.TokenBucket
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_depIdxs = []int32{
	1, // 0: gloo.solo.io.TcpListenerOptions.tcp_proxy_settings:type_name -> tcp.options.gloo.solo.io.TcpProxySettings
	2, // 1: gloo.solo.io.TcpListenerOptions.connection_limit:type_name -> connection_limit.options.gloo.solo.io.ConnectionLimit
	3, // 2: gloo.solo.io.TcpListenerOptions.local_ratelimit:type_name -> local_ratelimit.options.gloo.solo.io.TokenBucket
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_init() }
func file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_tcp_listener_options_proto_depIdxs = nil
}
