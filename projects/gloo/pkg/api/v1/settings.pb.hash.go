// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto

package v1

import (
	"encoding/binary"
	"errors"
	"fmt"
	"hash"
	"hash/fnv"

	safe_hasher "github.com/solo-io/protoc-gen-ext/pkg/hasher"
	"github.com/solo-io/protoc-gen-ext/pkg/hasher/hashstructure"

	consul "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/consul"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = new(hash.Hash64)
	_ = fnv.New64
	_ = hashstructure.Hash
	_ = new(safe_hasher.SafeHasher)

	_ = consul.ConsulConsistencyModes(0)
)

// Hash function
func (m *Settings) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings")); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetDiscoveryNamespace())); err != nil {
		return 0, err
	}

	for _, v := range m.GetWatchNamespaces() {

		if _, err = hasher.Write([]byte(v)); err != nil {
			return 0, err
		}

	}

	if h, ok := interface{}(m.GetSecretOptions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("SecretOptions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetSecretOptions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("SecretOptions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetRefreshRate()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("RefreshRate")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRefreshRate(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("RefreshRate")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetDevMode())
	if err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetLinkerd())
	if err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetKnative()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Knative")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetKnative(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Knative")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetDiscovery()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Discovery")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetDiscovery(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Discovery")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetGloo()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Gloo")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetGloo(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Gloo")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetGateway()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Gateway")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetGateway(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Gateway")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetConsul()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Consul")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetConsul(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Consul")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetConsulDiscovery()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("ConsulDiscovery")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetConsulDiscovery(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("ConsulDiscovery")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetKubernetes()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Kubernetes")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetKubernetes(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Kubernetes")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetExtensions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Extensions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetExtensions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Extensions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetRatelimit()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Ratelimit")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRatelimit(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Ratelimit")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetRatelimitServer()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("RatelimitServer")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRatelimitServer(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("RatelimitServer")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetRbac()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Rbac")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRbac(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Rbac")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetExtauth()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Extauth")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetExtauth(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Extauth")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	{
		var result uint64
		innerHash := fnv.New64()
		for k, v := range m.GetNamedExtauth() {
			innerHash.Reset()

			if h, ok := interface{}(v).(safe_hasher.SafeHasher); ok {
				if _, err = innerHash.Write([]byte("")); err != nil {
					return 0, err
				}
				if _, err = h.Hash(innerHash); err != nil {
					return 0, err
				}
			} else {
				if fieldValue, err := hashstructure.Hash(v, nil); err != nil {
					return 0, err
				} else {
					if _, err = innerHash.Write([]byte("")); err != nil {
						return 0, err
					}
					if err := binary.Write(innerHash, binary.LittleEndian, fieldValue); err != nil {
						return 0, err
					}
				}
			}

			if _, err = innerHash.Write([]byte(k)); err != nil {
				return 0, err
			}

			result = result ^ innerHash.Sum64()
		}
		err = binary.Write(hasher, binary.LittleEndian, result)
		if err != nil {
			return 0, err
		}

	}

	if h, ok := interface{}(m.GetCachingServer()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("CachingServer")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetCachingServer(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("CachingServer")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetMetadata()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Metadata")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetMetadata(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Metadata")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetObservabilityOptions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("ObservabilityOptions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetObservabilityOptions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("ObservabilityOptions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetUpstreamOptions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("UpstreamOptions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetUpstreamOptions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("UpstreamOptions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetConsoleOptions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("ConsoleOptions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetConsoleOptions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("ConsoleOptions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetGraphqlOptions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("GraphqlOptions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetGraphqlOptions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("GraphqlOptions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetExtProc()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("ExtProc")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetExtProc(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("ExtProc")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	switch m.ConfigSource.(type) {

	case *Settings_KubernetesConfigSource:

		if h, ok := interface{}(m.GetKubernetesConfigSource()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("KubernetesConfigSource")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetKubernetesConfigSource(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("KubernetesConfigSource")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *Settings_DirectoryConfigSource:

		if h, ok := interface{}(m.GetDirectoryConfigSource()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("DirectoryConfigSource")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetDirectoryConfigSource(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("DirectoryConfigSource")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *Settings_ConsulKvSource:

		if h, ok := interface{}(m.GetConsulKvSource()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("ConsulKvSource")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetConsulKvSource(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("ConsulKvSource")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	switch m.SecretSource.(type) {

	case *Settings_KubernetesSecretSource:

		if h, ok := interface{}(m.GetKubernetesSecretSource()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("KubernetesSecretSource")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetKubernetesSecretSource(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("KubernetesSecretSource")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *Settings_VaultSecretSource:

		if h, ok := interface{}(m.GetVaultSecretSource()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("VaultSecretSource")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetVaultSecretSource(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("VaultSecretSource")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *Settings_DirectorySecretSource:

		if h, ok := interface{}(m.GetDirectorySecretSource()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("DirectorySecretSource")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetDirectorySecretSource(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("DirectorySecretSource")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	switch m.ArtifactSource.(type) {

	case *Settings_KubernetesArtifactSource:

		if h, ok := interface{}(m.GetKubernetesArtifactSource()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("KubernetesArtifactSource")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetKubernetesArtifactSource(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("KubernetesArtifactSource")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *Settings_DirectoryArtifactSource:

		if h, ok := interface{}(m.GetDirectoryArtifactSource()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("DirectoryArtifactSource")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetDirectoryArtifactSource(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("DirectoryArtifactSource")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *Settings_ConsulKvArtifactSource:

		if h, ok := interface{}(m.GetConsulKvArtifactSource()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("ConsulKvArtifactSource")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetConsulKvArtifactSource(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("ConsulKvArtifactSource")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *UpstreamOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.UpstreamOptions")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetSslParameters()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("SslParameters")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetSslParameters(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("SslParameters")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	{
		var result uint64
		innerHash := fnv.New64()
		for k, v := range m.GetGlobalAnnotations() {
			innerHash.Reset()

			if _, err = innerHash.Write([]byte(v)); err != nil {
				return 0, err
			}

			if _, err = innerHash.Write([]byte(k)); err != nil {
				return 0, err
			}

			result = result ^ innerHash.Sum64()
		}
		err = binary.Write(hasher, binary.LittleEndian, result)
		if err != nil {
			return 0, err
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *GlooOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.GlooOptions")); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetXdsBindAddr())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetValidationBindAddr())); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetCircuitBreakers()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("CircuitBreakers")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetCircuitBreakers(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("CircuitBreakers")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetEndpointsWarmingTimeout()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("EndpointsWarmingTimeout")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetEndpointsWarmingTimeout(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("EndpointsWarmingTimeout")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetAwsOptions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("AwsOptions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetAwsOptions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("AwsOptions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetInvalidConfigPolicy()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("InvalidConfigPolicy")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetInvalidConfigPolicy(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("InvalidConfigPolicy")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetDisableKubernetesDestinations())
	if err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetDisableGrpcWeb()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("DisableGrpcWeb")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetDisableGrpcWeb(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("DisableGrpcWeb")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetDisableProxyGarbageCollection()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("DisableProxyGarbageCollection")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetDisableProxyGarbageCollection(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("DisableProxyGarbageCollection")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetRegexMaxProgramSize()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("RegexMaxProgramSize")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRegexMaxProgramSize(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("RegexMaxProgramSize")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if _, err = hasher.Write([]byte(m.GetRestXdsBindAddr())); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetEnableRestEds()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("EnableRestEds")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetEnableRestEds(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("EnableRestEds")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetFailoverUpstreamDnsPollingInterval()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("FailoverUpstreamDnsPollingInterval")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetFailoverUpstreamDnsPollingInterval(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("FailoverUpstreamDnsPollingInterval")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetRemoveUnusedFilters()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("RemoveUnusedFilters")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRemoveUnusedFilters(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("RemoveUnusedFilters")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if _, err = hasher.Write([]byte(m.GetProxyDebugBindAddr())); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetLogTransformationRequestResponseInfo()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("LogTransformationRequestResponseInfo")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetLogTransformationRequestResponseInfo(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("LogTransformationRequestResponseInfo")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetTransformationEscapeCharacters()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("TransformationEscapeCharacters")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetTransformationEscapeCharacters(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("TransformationEscapeCharacters")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetIstioOptions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("IstioOptions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetIstioOptions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("IstioOptions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *VirtualServiceOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.VirtualServiceOptions")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetOneWayTls()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("OneWayTls")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetOneWayTls(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("OneWayTls")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *GatewayOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.GatewayOptions")); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetValidationServerAddr())); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetValidation()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Validation")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetValidation(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Validation")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetReadGatewaysFromAllNamespaces())
	if err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetAlwaysSortRouteTableRoutes())
	if err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetCompressedProxySpec())
	if err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetVirtualServiceOptions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("VirtualServiceOptions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetVirtualServiceOptions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("VirtualServiceOptions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetPersistProxySpec()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("PersistProxySpec")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetPersistProxySpec(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("PersistProxySpec")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetEnableGatewayController()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("EnableGatewayController")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetEnableGatewayController(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("EnableGatewayController")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetIsolateVirtualHostsBySslConfig()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("IsolateVirtualHostsBySslConfig")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetIsolateVirtualHostsBySslConfig(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("IsolateVirtualHostsBySslConfig")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetTranslateEmptyGateways()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("TranslateEmptyGateways")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetTranslateEmptyGateways(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("TranslateEmptyGateways")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *ConsoleOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.ConsoleOptions")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetReadOnly()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("ReadOnly")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetReadOnly(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("ReadOnly")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetApiExplorerEnabled()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("ApiExplorerEnabled")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetApiExplorerEnabled(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("ApiExplorerEnabled")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *GraphqlOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.GraphqlOptions")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetSchemaChangeValidationOptions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("SchemaChangeValidationOptions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetSchemaChangeValidationOptions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("SchemaChangeValidationOptions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_SecretOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_SecretOptions")); err != nil {
		return 0, err
	}

	for _, v := range m.GetSources() {

		if h, ok := interface{}(v).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(v, nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_KubernetesCrds) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_KubernetesCrds")); err != nil {
		return 0, err
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_KubernetesSecrets) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_KubernetesSecrets")); err != nil {
		return 0, err
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_VaultSecrets) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_VaultSecrets")); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetToken())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetAddress())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetCaCert())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetCaPath())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetClientCert())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetClientKey())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetTlsServerName())); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetInsecure()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Insecure")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetInsecure(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Insecure")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if _, err = hasher.Write([]byte(m.GetRootKey())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetPathPrefix())); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetTlsConfig()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("TlsConfig")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetTlsConfig(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("TlsConfig")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	switch m.AuthMethod.(type) {

	case *Settings_VaultSecrets_AccessToken:

		if _, err = hasher.Write([]byte(m.GetAccessToken())); err != nil {
			return 0, err
		}

	case *Settings_VaultSecrets_Aws:

		if h, ok := interface{}(m.GetAws()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("Aws")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetAws(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("Aws")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_VaultAwsAuth) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_VaultAwsAuth")); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetVaultRole())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetRegion())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetIamServerIdHeader())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetMountPath())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetAccessKeyId())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetSecretAccessKey())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetSessionToken())); err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetLeaseIncrement())
	if err != nil {
		return 0, err
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_VaultTlsConfig) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_VaultTlsConfig")); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetCaCert())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetCaPath())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetClientCert())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetClientKey())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetTlsServerName())); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetInsecure()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Insecure")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetInsecure(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Insecure")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_ConsulKv) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_ConsulKv")); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetRootKey())); err != nil {
		return 0, err
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_KubernetesConfigmaps) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_KubernetesConfigmaps")); err != nil {
		return 0, err
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_Directory) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_Directory")); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetDirectory())); err != nil {
		return 0, err
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_KnativeOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_KnativeOptions")); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetClusterIngressProxyAddress())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetKnativeExternalProxyAddress())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetKnativeInternalProxyAddress())); err != nil {
		return 0, err
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_DiscoveryOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_DiscoveryOptions")); err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetFdsMode())
	if err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetUdsOptions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("UdsOptions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetUdsOptions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("UdsOptions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetFdsOptions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("FdsOptions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetFdsOptions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("FdsOptions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_ConsulConfiguration) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_ConsulConfiguration")); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetAddress())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetDatacenter())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetUsername())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetPassword())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetToken())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetCaFile())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetCaPath())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetCertFile())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetKeyFile())); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetInsecureSkipVerify()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("InsecureSkipVerify")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetInsecureSkipVerify(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("InsecureSkipVerify")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetWaitTime()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("WaitTime")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetWaitTime(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("WaitTime")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetServiceDiscovery()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("ServiceDiscovery")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetServiceDiscovery(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("ServiceDiscovery")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if _, err = hasher.Write([]byte(m.GetHttpAddress())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetDnsAddress())); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetDnsPollingInterval()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("DnsPollingInterval")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetDnsPollingInterval(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("DnsPollingInterval")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_ConsulUpstreamDiscoveryConfiguration) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_ConsulUpstreamDiscoveryConfiguration")); err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetUseTlsTagging())
	if err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetTlsTagName())); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetRootCa()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("RootCa")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRootCa(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("RootCa")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetSplitTlsServices())
	if err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetConsistencyMode())
	if err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetQueryOptions()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("QueryOptions")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetQueryOptions(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("QueryOptions")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	for _, v := range m.GetServiceTagsAllowlist() {

		if _, err = hasher.Write([]byte(v)); err != nil {
			return 0, err
		}

	}

	if h, ok := interface{}(m.GetEdsBlockingQueries()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("EdsBlockingQueries")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetEdsBlockingQueries(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("EdsBlockingQueries")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_KubernetesConfiguration) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_KubernetesConfiguration")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetRateLimits()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("RateLimits")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRateLimits(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("RateLimits")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_ObservabilityOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_ObservabilityOptions")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetGrafanaIntegration()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("GrafanaIntegration")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetGrafanaIntegration(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("GrafanaIntegration")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	{
		var result uint64
		innerHash := fnv.New64()
		for k, v := range m.GetConfigStatusMetricLabels() {
			innerHash.Reset()

			if h, ok := interface{}(v).(safe_hasher.SafeHasher); ok {
				if _, err = innerHash.Write([]byte("")); err != nil {
					return 0, err
				}
				if _, err = h.Hash(innerHash); err != nil {
					return 0, err
				}
			} else {
				if fieldValue, err := hashstructure.Hash(v, nil); err != nil {
					return 0, err
				} else {
					if _, err = innerHash.Write([]byte("")); err != nil {
						return 0, err
					}
					if err := binary.Write(innerHash, binary.LittleEndian, fieldValue); err != nil {
						return 0, err
					}
				}
			}

			if _, err = innerHash.Write([]byte(k)); err != nil {
				return 0, err
			}

			result = result ^ innerHash.Sum64()
		}
		err = binary.Write(hasher, binary.LittleEndian, result)
		if err != nil {
			return 0, err
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_SecretOptions_Source) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_SecretOptions_Source")); err != nil {
		return 0, err
	}

	switch m.Source.(type) {

	case *Settings_SecretOptions_Source_Kubernetes:

		if h, ok := interface{}(m.GetKubernetes()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("Kubernetes")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetKubernetes(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("Kubernetes")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *Settings_SecretOptions_Source_Vault:

		if h, ok := interface{}(m.GetVault()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("Vault")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetVault(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("Vault")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	case *Settings_SecretOptions_Source_Directory:

		if h, ok := interface{}(m.GetDirectory()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("Directory")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetDirectory(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("Directory")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_DiscoveryOptions_UdsOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_DiscoveryOptions_UdsOptions")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetEnabled()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("Enabled")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetEnabled(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("Enabled")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	{
		var result uint64
		innerHash := fnv.New64()
		for k, v := range m.GetWatchLabels() {
			innerHash.Reset()

			if _, err = innerHash.Write([]byte(v)); err != nil {
				return 0, err
			}

			if _, err = innerHash.Write([]byte(k)); err != nil {
				return 0, err
			}

			result = result ^ innerHash.Sum64()
		}
		err = binary.Write(hasher, binary.LittleEndian, result)
		if err != nil {
			return 0, err
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_DiscoveryOptions_FdsOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_DiscoveryOptions_FdsOptions")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetGraphqlEnabled()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("GraphqlEnabled")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetGraphqlEnabled(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("GraphqlEnabled")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_ConsulConfiguration_ServiceDiscoveryOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_ConsulConfiguration_ServiceDiscoveryOptions")); err != nil {
		return 0, err
	}

	for _, v := range m.GetDataCenters() {

		if _, err = hasher.Write([]byte(v)); err != nil {
			return 0, err
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_KubernetesConfiguration_RateLimits) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_KubernetesConfiguration_RateLimits")); err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetQPS())
	if err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetBurst())
	if err != nil {
		return 0, err
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_ObservabilityOptions_GrafanaIntegration) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_ObservabilityOptions_GrafanaIntegration")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetDefaultDashboardFolderId()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("DefaultDashboardFolderId")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetDefaultDashboardFolderId(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("DefaultDashboardFolderId")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if _, err = hasher.Write([]byte(m.GetDashboardPrefix())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetExtraMetricQueryParameters())); err != nil {
		return 0, err
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *Settings_ObservabilityOptions_MetricLabels) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.Settings_ObservabilityOptions_MetricLabels")); err != nil {
		return 0, err
	}

	{
		var result uint64
		innerHash := fnv.New64()
		for k, v := range m.GetLabelToPath() {
			innerHash.Reset()

			if _, err = innerHash.Write([]byte(v)); err != nil {
				return 0, err
			}

			if _, err = innerHash.Write([]byte(k)); err != nil {
				return 0, err
			}

			result = result ^ innerHash.Sum64()
		}
		err = binary.Write(hasher, binary.LittleEndian, result)
		if err != nil {
			return 0, err
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *GlooOptions_AWSOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.GlooOptions_AWSOptions")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetPropagateOriginalRouting()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("PropagateOriginalRouting")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetPropagateOriginalRouting(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("PropagateOriginalRouting")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetCredentialRefreshDelay()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("CredentialRefreshDelay")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetCredentialRefreshDelay(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("CredentialRefreshDelay")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetFallbackToFirstFunction()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("FallbackToFirstFunction")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetFallbackToFirstFunction(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("FallbackToFirstFunction")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	switch m.CredentialsFetcher.(type) {

	case *GlooOptions_AWSOptions_EnableCredentialsDiscovey:

		err = binary.Write(hasher, binary.LittleEndian, m.GetEnableCredentialsDiscovey())
		if err != nil {
			return 0, err
		}

	case *GlooOptions_AWSOptions_ServiceAccountCredentials:

		if h, ok := interface{}(m.GetServiceAccountCredentials()).(safe_hasher.SafeHasher); ok {
			if _, err = hasher.Write([]byte("ServiceAccountCredentials")); err != nil {
				return 0, err
			}
			if _, err = h.Hash(hasher); err != nil {
				return 0, err
			}
		} else {
			if fieldValue, err := hashstructure.Hash(m.GetServiceAccountCredentials(), nil); err != nil {
				return 0, err
			} else {
				if _, err = hasher.Write([]byte("ServiceAccountCredentials")); err != nil {
					return 0, err
				}
				if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
					return 0, err
				}
			}
		}

	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *GlooOptions_InvalidConfigPolicy) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.GlooOptions_InvalidConfigPolicy")); err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetReplaceInvalidRoutes())
	if err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetInvalidRouteResponseCode())
	if err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetInvalidRouteResponseBody())); err != nil {
		return 0, err
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *GlooOptions_IstioOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.GlooOptions_IstioOptions")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetAppendXForwardedHost()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("AppendXForwardedHost")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetAppendXForwardedHost(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("AppendXForwardedHost")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *GatewayOptions_ValidationOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.GatewayOptions_ValidationOptions")); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetProxyValidationServerAddr())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetValidationWebhookTlsCert())); err != nil {
		return 0, err
	}

	if _, err = hasher.Write([]byte(m.GetValidationWebhookTlsKey())); err != nil {
		return 0, err
	}

	err = binary.Write(hasher, binary.LittleEndian, m.GetIgnoreGlooValidationFailure())
	if err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetAlwaysAccept()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("AlwaysAccept")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetAlwaysAccept(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("AlwaysAccept")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetAllowWarnings()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("AllowWarnings")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetAllowWarnings(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("AllowWarnings")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetWarnRouteShortCircuiting()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("WarnRouteShortCircuiting")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetWarnRouteShortCircuiting(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("WarnRouteShortCircuiting")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetDisableTransformationValidation()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("DisableTransformationValidation")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetDisableTransformationValidation(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("DisableTransformationValidation")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetValidationServerGrpcMaxSizeBytes()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("ValidationServerGrpcMaxSizeBytes")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetValidationServerGrpcMaxSizeBytes(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("ValidationServerGrpcMaxSizeBytes")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetServerEnabled()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("ServerEnabled")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetServerEnabled(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("ServerEnabled")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	if h, ok := interface{}(m.GetWarnMissingTlsSecret()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("WarnMissingTlsSecret")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetWarnMissingTlsSecret(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("WarnMissingTlsSecret")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	return hasher.Sum64(), nil
}

// Hash function
func (m *GraphqlOptions_SchemaChangeValidationOptions) Hash(hasher hash.Hash64) (uint64, error) {
	if m == nil {
		return 0, nil
	}
	if hasher == nil {
		hasher = fnv.New64()
	}
	var err error
	if _, err = hasher.Write([]byte("gloo.solo.io.github.com/solo-io/gloo/projects/gloo/pkg/api/v1.GraphqlOptions_SchemaChangeValidationOptions")); err != nil {
		return 0, err
	}

	if h, ok := interface{}(m.GetRejectBreakingChanges()).(safe_hasher.SafeHasher); ok {
		if _, err = hasher.Write([]byte("RejectBreakingChanges")); err != nil {
			return 0, err
		}
		if _, err = h.Hash(hasher); err != nil {
			return 0, err
		}
	} else {
		if fieldValue, err := hashstructure.Hash(m.GetRejectBreakingChanges(), nil); err != nil {
			return 0, err
		} else {
			if _, err = hasher.Write([]byte("RejectBreakingChanges")); err != nil {
				return 0, err
			}
			if err := binary.Write(hasher, binary.LittleEndian, fieldValue); err != nil {
				return 0, err
			}
		}
	}

	for _, v := range m.GetProcessingRules() {

		err = binary.Write(hasher, binary.LittleEndian, v)
		if err != nil {
			return 0, err
		}

	}

	return hasher.Sum64(), nil
}
