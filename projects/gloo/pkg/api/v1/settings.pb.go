// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	aws "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/aws"
	caching "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/caching"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/extauth/v1"
	extproc "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/extproc"
	ratelimit "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/ratelimit"
	rbac "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/rbac"
	consul "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/consul"
	ssl "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/ssl"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible modes for running the function discovery service (FDS). FDS polls services in-cluster for Swagger
// and gRPC endpoints. This behavior can be controlled with the use of annotations.
// FdsMode specifies what policy FDS will use when determining which services to poll.
type Settings_DiscoveryOptions_FdsMode int32

const (
	// In BLACKLIST mode (default), FDS will poll all services in cluster except those services labeled with
	// `discovery.solo.io/function_discovery=disabled`. This label can also be used on namespaces to apply to
	// all services within a namespace **which are not explicitly whitelisted**.
	// Note that `kube-system` and `kube-public` namespaces must be explicitly whitelisted even in blacklist mode.
	Settings_DiscoveryOptions_BLACKLIST Settings_DiscoveryOptions_FdsMode = 0
	// In WHITELIST mode, FDS will poll only services in cluster labeled with
	// `discovery.solo.io/function_discovery=enabled`. This label can also be used on namespaces to apply to all
	// services **which are not explicitly blacklisted** within a namespace.
	Settings_DiscoveryOptions_WHITELIST Settings_DiscoveryOptions_FdsMode = 1
	// In DISABLED mode, FDS will not run.
	Settings_DiscoveryOptions_DISABLED Settings_DiscoveryOptions_FdsMode = 2
)

// Enum value maps for Settings_DiscoveryOptions_FdsMode.
var (
	Settings_DiscoveryOptions_FdsMode_name = map[int32]string{
		0: "BLACKLIST",
		1: "WHITELIST",
		2: "DISABLED",
	}
	Settings_DiscoveryOptions_FdsMode_value = map[string]int32{
		"BLACKLIST": 0,
		"WHITELIST": 1,
		"DISABLED":  2,
	}
)

func (x Settings_DiscoveryOptions_FdsMode) Enum() *Settings_DiscoveryOptions_FdsMode {
	p := new(Settings_DiscoveryOptions_FdsMode)
	*p = x
	return p
}

func (x Settings_DiscoveryOptions_FdsMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Settings_DiscoveryOptions_FdsMode) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_enumTypes[0].Descriptor()
}

func (Settings_DiscoveryOptions_FdsMode) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_enumTypes[0]
}

func (x Settings_DiscoveryOptions_FdsMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Settings_DiscoveryOptions_FdsMode.Descriptor instead.
func (Settings_DiscoveryOptions_FdsMode) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 10, 0}
}

type GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule int32

const (
	GraphqlOptions_SchemaChangeValidationOptions_RULE_UNSPECIFIED GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule = 0
	// Turn every dangerous change into a breaking change.
	GraphqlOptions_SchemaChangeValidationOptions_RULE_DANGEROUS_TO_BREAKING GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule = 1
	// Treat the removal of a deprecated field as a dangerous change, instead of a breaking change.
	GraphqlOptions_SchemaChangeValidationOptions_RULE_DEPRECATED_FIELD_REMOVAL_DANGEROUS GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule = 2
	// Ignore description changes.
	GraphqlOptions_SchemaChangeValidationOptions_RULE_IGNORE_DESCRIPTION_CHANGES GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule = 3
	// Ignore breaking changes on parts of the schema that are not reachable starting from the root types.
	GraphqlOptions_SchemaChangeValidationOptions_RULE_IGNORE_UNREACHABLE GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule = 4
)

// Enum value maps for GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule.
var (
	GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule_name = map[int32]string{
		0: "RULE_UNSPECIFIED",
		1: "RULE_DANGEROUS_TO_BREAKING",
		2: "RULE_DEPRECATED_FIELD_REMOVAL_DANGEROUS",
		3: "RULE_IGNORE_DESCRIPTION_CHANGES",
		4: "RULE_IGNORE_UNREACHABLE",
	}
	GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule_value = map[string]int32{
		"RULE_UNSPECIFIED":                        0,
		"RULE_DANGEROUS_TO_BREAKING":              1,
		"RULE_DEPRECATED_FIELD_REMOVAL_DANGEROUS": 2,
		"RULE_IGNORE_DESCRIPTION_CHANGES":         3,
		"RULE_IGNORE_UNREACHABLE":                 4,
	}
)

func (x GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule) Enum() *GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule {
	p := new(GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule)
	*p = x
	return p
}

func (x GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_enumTypes[1].Descriptor()
}

func (GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_enumTypes[1]
}

func (x GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule.Descriptor instead.
func (GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{8, 0, 0}
}

// Represents global settings for all the Gloo components.
type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the namespace to which Gloo controllers will write their own resources, e.g. discovered Upstreams or default Gateways.
	// If empty, this will default to "gloo-system".
	DiscoveryNamespace string `protobuf:"bytes,1,opt,name=discovery_namespace,json=discoveryNamespace,proto3" json:"discovery_namespace,omitempty"`
	// Use this setting to restrict the namespaces that Gloo controllers take into consideration when watching for resources.In a
	// usual production scenario, RBAC policies will limit the namespaces that Gloo has access to. If `watch_namespaces`
	// contains namespaces outside of this whitelist, Gloo will fail to start.
	//
	// If not set, this defaults to all available namespaces. Please note that, the `discovery_namespace` will always
	// be included in this list.
	// If this is specified, it overwrites the `watch_namespace_selectors` specified
	WatchNamespaces []string `protobuf:"bytes,2,rep,name=watch_namespaces,json=watchNamespaces,proto3" json:"watch_namespaces,omitempty"`
	// This setting determines where Gloo controllers will store its resources
	//
	// Types that are assignable to ConfigSource:
	//
	//	*Settings_KubernetesConfigSource
	//	*Settings_DirectoryConfigSource
	//	*Settings_ConsulKvSource
	ConfigSource isSettings_ConfigSource `protobuf_oneof:"config_source"`
	// Determines where Gloo will read/write secrets from/to.
	//
	// Types that are assignable to SecretSource:
	//
	//	*Settings_KubernetesSecretSource
	//	*Settings_VaultSecretSource
	//	*Settings_DirectorySecretSource
	SecretSource isSettings_SecretSource `protobuf_oneof:"secret_source"`
	// Settings for secrets storage.
	// This API is beta and should be tested thoroughly before production use
	SecretOptions *Settings_SecretOptions `protobuf:"bytes,38,opt,name=secret_options,json=secretOptions,proto3" json:"secret_options,omitempty"`
	// Where to read artifacts from.
	//
	// Types that are assignable to ArtifactSource:
	//
	//	*Settings_KubernetesArtifactSource
	//	*Settings_DirectoryArtifactSource
	//	*Settings_ConsulKvArtifactSource
	ArtifactSource isSettings_ArtifactSource `protobuf_oneof:"artifact_source"`
	// How frequently to resync watches, etc
	RefreshRate *durationpb.Duration `protobuf:"bytes,12,opt,name=refresh_rate,json=refreshRate,proto3" json:"refresh_rate,omitempty"`
	// DEPRECATED: In the past DevMode was used to expose endpoints that behave as an Admin API
	// https://github.com/solo-io/gloo/issues/6494
	// We now support an Admin API on port 9091. See the following guide for more details
	// https://docs.solo.io/gloo-edge/latest/operations/debugging_gloo/#debugging-the-control-plane
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
	DevMode bool `protobuf:"varint,13,opt,name=dev_mode,json=devMode,proto3" json:"dev_mode,omitempty"`
	// Enable automatic linkerd upstream header addition for easier routing to linkerd services
	Linkerd bool `protobuf:"varint,17,opt,name=linkerd,proto3" json:"linkerd,omitempty"`
	// Configuration options for the Clusteringress Controller (for Knative).
	// Deprecated: Will not be available in Gloo Edge 1.11
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
	Knative *Settings_KnativeOptions `protobuf:"bytes,18,opt,name=knative,proto3" json:"knative,omitempty"`
	// Options for configuring Gloo's Discovery service
	Discovery *Settings_DiscoveryOptions `protobuf:"bytes,19,opt,name=discovery,proto3" json:"discovery,omitempty"`
	// Options for configuring `gloo`, the core Gloo controller,
	// which serves dynamic configuration to Envoy
	Gloo *GlooOptions `protobuf:"bytes,24,opt,name=gloo,proto3" json:"gloo,omitempty"`
	// Options for configuring `gateway`, the Gateway Gloo controller,
	// which enables the VirtualService/Gateway API in Gloo
	Gateway *GatewayOptions `protobuf:"bytes,25,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// Options to configure Gloo's integration with [HashiCorp Consul](https://www.consul.io/).
	Consul          *Settings_ConsulConfiguration                  `protobuf:"bytes,20,opt,name=consul,proto3" json:"consul,omitempty"`
	ConsulDiscovery *Settings_ConsulUpstreamDiscoveryConfiguration `protobuf:"bytes,30,opt,name=consulDiscovery,proto3" json:"consulDiscovery,omitempty"`
	// Options to configure Gloo's integration with [Kubernetes](https://www.kubernetes.io/).
	Kubernetes *Settings_KubernetesConfiguration `protobuf:"bytes,22,opt,name=kubernetes,proto3" json:"kubernetes,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,16,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Enterprise-only: Partial config for GlooE's rate-limiting service, based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *descriptors* here, which define the limits for requests based on their descriptors.
	// Configure rate-limits (composed of *actions*, which define how request characteristics get translated into
	// descriptors) on the VirtualHost or its routes
	Ratelimit *ratelimit.ServiceSettings `protobuf:"bytes,26,opt,name=ratelimit,proto3" json:"ratelimit,omitempty"`
	// Enterprise-only: Settings for the rate limiting server itself
	RatelimitServer *ratelimit.Settings `protobuf:"bytes,27,opt,name=ratelimit_server,json=ratelimitServer,proto3" json:"ratelimit_server,omitempty"`
	// Enterprise-only: Settings for RBAC across all Gloo resources (VirtualServices, Routes, etc.)
	Rbac *rbac.Settings `protobuf:"bytes,28,opt,name=rbac,proto3" json:"rbac,omitempty"`
	// Enterprise-only: External auth related settings
	Extauth *v1.Settings `protobuf:"bytes,29,opt,name=extauth,proto3" json:"extauth,omitempty"`
	// Enterprise-only: External auth related settings for additional auth servers
	// This should only be used in the case where separate servers are needed to authorize separate routes.
	// With multiple auth servers configured in Settings, multiple filters will be configured
	// on the filter chain, but only 1 will be executed on a route.
	// The name of the auth server (ie the key in the map) will be used to apply the configuration on the route.
	// If an auth server name is not supplied on a route, the default auth server will be applied.
	NamedExtauth map[string]*v1.Settings `protobuf:"bytes,33,rep,name=named_extauth,json=namedExtauth,proto3" json:"named_extauth,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Enterprise-only: Settings for the caching server itself
	// This may eventually be able to be set at a per listener level.
	// At this time is used for plugin translation via the init.Params.
	CachingServer *caching.Settings `protobuf:"bytes,36,opt,name=caching_server,json=cachingServer,proto3" json:"caching_server,omitempty"`
	// Metadata contains the object metadata for this resource
	Metadata *core.Metadata `protobuf:"bytes,14,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// NamespacedStatuses indicates the validation status of this resource.
	// NamespacedStatuses is read-only by clients, and set by gloo during validation
	NamespacedStatuses *core.NamespacedStatuses `protobuf:"bytes,34,opt,name=namespaced_statuses,json=namespacedStatuses,proto3" json:"namespaced_statuses,omitempty"`
	// Provides settings related to the observability deployment (enterprise only)
	ObservabilityOptions *Settings_ObservabilityOptions `protobuf:"bytes,31,opt,name=observabilityOptions,proto3" json:"observabilityOptions,omitempty"`
	// Default configuration to use for upstreams, when not provided by specific upstream
	// When these properties are defined on an upstream, this configuration will be ignored
	UpstreamOptions *UpstreamOptions `protobuf:"bytes,32,opt,name=upstreamOptions,proto3" json:"upstreamOptions,omitempty"`
	// Enterprise-only: Settings for the Gloo Edge Enterprise Console (UI)
	ConsoleOptions *ConsoleOptions `protobuf:"bytes,35,opt,name=console_options,json=consoleOptions,proto3" json:"console_options,omitempty"`
	// Deprecated: The GraphQL feature will be removed in a future release.
	// Enterprise-only: GraphQL settings
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
	GraphqlOptions *GraphqlOptions `protobuf:"bytes,37,opt,name=graphql_options,json=graphqlOptions,proto3" json:"graphql_options,omitempty"`
	// Enterprise-only: External Processing filter settings. These settings are used as
	// defaults globally, and can be overridden by HttpListenerOptions, VirtualHostOptions,
	// or RouteOptions.
	ExtProc *extproc.Settings `protobuf:"bytes,39,opt,name=ext_proc,json=extProc,proto3" json:"ext_proc,omitempty"`
	// A list of Kubernetes selectors that specify the set of namespaces to restrict the namespaces that Gloo controllers
	// take into consideration when watching for resources.
	// Elements in the list are disjunctive (OR semantics), i.e. a namespace will be included if it matches any selector.
	// The following example selects any namespace that matches either below:
	// 1. The namespace has both of these labels: `env: prod` and `region: us-east1`
	// 2. The namespace has label `app` equal to `cassandra` or `spark`.
	// ```yaml
	// watchNamespaceSelectors:
	//   - matchLabels:
	//     env: prod
	//     region: us-east1
	//   - matchExpressions:
	//   - key: app
	//     operator: In
	//     values:
	//   - cassandra
	//   - spark
	//
	// ```
	// However, if the match conditions are part of the same same list item, the namespace must match all conditions.
	// ```yaml
	// watchNamespaceSelectors:
	//   - matchLabels:
	//     env: prod
	//     region: us-east1
	//     matchExpressions:
	//   - key: app
	//     operator: In
	//     values:
	//   - cassandra
	//   - spark
	//
	// ```
	// Refer to the [Kubernetes selector docs](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors)
	// for additional detail on selector semantics.
	WatchNamespaceSelectors []*LabelSelector `protobuf:"bytes,40,rep,name=watch_namespace_selectors,json=watchNamespaceSelectors,proto3" json:"watch_namespace_selectors,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0}
}

func (x *Settings) GetDiscoveryNamespace() string {
	if x != nil {
		return x.DiscoveryNamespace
	}
	return ""
}

func (x *Settings) GetWatchNamespaces() []string {
	if x != nil {
		return x.WatchNamespaces
	}
	return nil
}

func (m *Settings) GetConfigSource() isSettings_ConfigSource {
	if m != nil {
		return m.ConfigSource
	}
	return nil
}

func (x *Settings) GetKubernetesConfigSource() *Settings_KubernetesCrds {
	if x, ok := x.GetConfigSource().(*Settings_KubernetesConfigSource); ok {
		return x.KubernetesConfigSource
	}
	return nil
}

func (x *Settings) GetDirectoryConfigSource() *Settings_Directory {
	if x, ok := x.GetConfigSource().(*Settings_DirectoryConfigSource); ok {
		return x.DirectoryConfigSource
	}
	return nil
}

func (x *Settings) GetConsulKvSource() *Settings_ConsulKv {
	if x, ok := x.GetConfigSource().(*Settings_ConsulKvSource); ok {
		return x.ConsulKvSource
	}
	return nil
}

func (m *Settings) GetSecretSource() isSettings_SecretSource {
	if m != nil {
		return m.SecretSource
	}
	return nil
}

func (x *Settings) GetKubernetesSecretSource() *Settings_KubernetesSecrets {
	if x, ok := x.GetSecretSource().(*Settings_KubernetesSecretSource); ok {
		return x.KubernetesSecretSource
	}
	return nil
}

func (x *Settings) GetVaultSecretSource() *Settings_VaultSecrets {
	if x, ok := x.GetSecretSource().(*Settings_VaultSecretSource); ok {
		return x.VaultSecretSource
	}
	return nil
}

func (x *Settings) GetDirectorySecretSource() *Settings_Directory {
	if x, ok := x.GetSecretSource().(*Settings_DirectorySecretSource); ok {
		return x.DirectorySecretSource
	}
	return nil
}

func (x *Settings) GetSecretOptions() *Settings_SecretOptions {
	if x != nil {
		return x.SecretOptions
	}
	return nil
}

func (m *Settings) GetArtifactSource() isSettings_ArtifactSource {
	if m != nil {
		return m.ArtifactSource
	}
	return nil
}

func (x *Settings) GetKubernetesArtifactSource() *Settings_KubernetesConfigmaps {
	if x, ok := x.GetArtifactSource().(*Settings_KubernetesArtifactSource); ok {
		return x.KubernetesArtifactSource
	}
	return nil
}

func (x *Settings) GetDirectoryArtifactSource() *Settings_Directory {
	if x, ok := x.GetArtifactSource().(*Settings_DirectoryArtifactSource); ok {
		return x.DirectoryArtifactSource
	}
	return nil
}

func (x *Settings) GetConsulKvArtifactSource() *Settings_ConsulKv {
	if x, ok := x.GetArtifactSource().(*Settings_ConsulKvArtifactSource); ok {
		return x.ConsulKvArtifactSource
	}
	return nil
}

func (x *Settings) GetRefreshRate() *durationpb.Duration {
	if x != nil {
		return x.RefreshRate
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
func (x *Settings) GetDevMode() bool {
	if x != nil {
		return x.DevMode
	}
	return false
}

func (x *Settings) GetLinkerd() bool {
	if x != nil {
		return x.Linkerd
	}
	return false
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
func (x *Settings) GetKnative() *Settings_KnativeOptions {
	if x != nil {
		return x.Knative
	}
	return nil
}

func (x *Settings) GetDiscovery() *Settings_DiscoveryOptions {
	if x != nil {
		return x.Discovery
	}
	return nil
}

func (x *Settings) GetGloo() *GlooOptions {
	if x != nil {
		return x.Gloo
	}
	return nil
}

func (x *Settings) GetGateway() *GatewayOptions {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *Settings) GetConsul() *Settings_ConsulConfiguration {
	if x != nil {
		return x.Consul
	}
	return nil
}

func (x *Settings) GetConsulDiscovery() *Settings_ConsulUpstreamDiscoveryConfiguration {
	if x != nil {
		return x.ConsulDiscovery
	}
	return nil
}

func (x *Settings) GetKubernetes() *Settings_KubernetesConfiguration {
	if x != nil {
		return x.Kubernetes
	}
	return nil
}

func (x *Settings) GetExtensions() *Extensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *Settings) GetRatelimit() *ratelimit.ServiceSettings {
	if x != nil {
		return x.Ratelimit
	}
	return nil
}

func (x *Settings) GetRatelimitServer() *ratelimit.Settings {
	if x != nil {
		return x.RatelimitServer
	}
	return nil
}

func (x *Settings) GetRbac() *rbac.Settings {
	if x != nil {
		return x.Rbac
	}
	return nil
}

func (x *Settings) GetExtauth() *v1.Settings {
	if x != nil {
		return x.Extauth
	}
	return nil
}

func (x *Settings) GetNamedExtauth() map[string]*v1.Settings {
	if x != nil {
		return x.NamedExtauth
	}
	return nil
}

func (x *Settings) GetCachingServer() *caching.Settings {
	if x != nil {
		return x.CachingServer
	}
	return nil
}

func (x *Settings) GetMetadata() *core.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Settings) GetNamespacedStatuses() *core.NamespacedStatuses {
	if x != nil {
		return x.NamespacedStatuses
	}
	return nil
}

func (x *Settings) GetObservabilityOptions() *Settings_ObservabilityOptions {
	if x != nil {
		return x.ObservabilityOptions
	}
	return nil
}

func (x *Settings) GetUpstreamOptions() *UpstreamOptions {
	if x != nil {
		return x.UpstreamOptions
	}
	return nil
}

func (x *Settings) GetConsoleOptions() *ConsoleOptions {
	if x != nil {
		return x.ConsoleOptions
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
func (x *Settings) GetGraphqlOptions() *GraphqlOptions {
	if x != nil {
		return x.GraphqlOptions
	}
	return nil
}

func (x *Settings) GetExtProc() *extproc.Settings {
	if x != nil {
		return x.ExtProc
	}
	return nil
}

func (x *Settings) GetWatchNamespaceSelectors() []*LabelSelector {
	if x != nil {
		return x.WatchNamespaceSelectors
	}
	return nil
}

type isSettings_ConfigSource interface {
	isSettings_ConfigSource()
}

type Settings_KubernetesConfigSource struct {
	KubernetesConfigSource *Settings_KubernetesCrds `protobuf:"bytes,4,opt,name=kubernetes_config_source,json=kubernetesConfigSource,proto3,oneof"`
}

type Settings_DirectoryConfigSource struct {
	DirectoryConfigSource *Settings_Directory `protobuf:"bytes,5,opt,name=directory_config_source,json=directoryConfigSource,proto3,oneof"`
}

type Settings_ConsulKvSource struct {
	ConsulKvSource *Settings_ConsulKv `protobuf:"bytes,21,opt,name=consul_kv_source,json=consulKvSource,proto3,oneof"`
}

func (*Settings_KubernetesConfigSource) isSettings_ConfigSource() {}

func (*Settings_DirectoryConfigSource) isSettings_ConfigSource() {}

func (*Settings_ConsulKvSource) isSettings_ConfigSource() {}

type isSettings_SecretSource interface {
	isSettings_SecretSource()
}

type Settings_KubernetesSecretSource struct {
	KubernetesSecretSource *Settings_KubernetesSecrets `protobuf:"bytes,6,opt,name=kubernetes_secret_source,json=kubernetesSecretSource,proto3,oneof"`
}

type Settings_VaultSecretSource struct {
	VaultSecretSource *Settings_VaultSecrets `protobuf:"bytes,7,opt,name=vault_secret_source,json=vaultSecretSource,proto3,oneof"`
}

type Settings_DirectorySecretSource struct {
	DirectorySecretSource *Settings_Directory `protobuf:"bytes,8,opt,name=directory_secret_source,json=directorySecretSource,proto3,oneof"`
}

func (*Settings_KubernetesSecretSource) isSettings_SecretSource() {}

func (*Settings_VaultSecretSource) isSettings_SecretSource() {}

func (*Settings_DirectorySecretSource) isSettings_SecretSource() {}

type isSettings_ArtifactSource interface {
	isSettings_ArtifactSource()
}

type Settings_KubernetesArtifactSource struct {
	KubernetesArtifactSource *Settings_KubernetesConfigmaps `protobuf:"bytes,9,opt,name=kubernetes_artifact_source,json=kubernetesArtifactSource,proto3,oneof"`
}

type Settings_DirectoryArtifactSource struct {
	DirectoryArtifactSource *Settings_Directory `protobuf:"bytes,10,opt,name=directory_artifact_source,json=directoryArtifactSource,proto3,oneof"`
}

type Settings_ConsulKvArtifactSource struct {
	ConsulKvArtifactSource *Settings_ConsulKv `protobuf:"bytes,23,opt,name=consul_kv_artifact_source,json=consulKvArtifactSource,proto3,oneof"`
}

func (*Settings_KubernetesArtifactSource) isSettings_ArtifactSource() {}

func (*Settings_DirectoryArtifactSource) isSettings_ArtifactSource() {}

func (*Settings_ConsulKvArtifactSource) isSettings_ArtifactSource() {}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
// Copied from Kubernetes to avoid expensive dependency on Kubernetes libraries.
// Ref: https://github.com/kubernetes/apimachinery/blob/f7615f37d717297aca51101478406af712553c5b/pkg/apis/meta/v1/generated.proto#L442-L453
type LabelSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	// +optional
	MatchLabels map[string]string `protobuf:"bytes,1,rep,name=match_labels,json=matchLabels,proto3" json:"match_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	// +optional
	MatchExpressions []*LabelSelectorRequirement `protobuf:"bytes,2,rep,name=match_expressions,json=matchExpressions,proto3" json:"match_expressions,omitempty"`
}

func (x *LabelSelector) Reset() {
	*x = LabelSelector{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelector) ProtoMessage() {}

func (x *LabelSelector) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelector.ProtoReflect.Descriptor instead.
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{1}
}

func (x *LabelSelector) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

func (x *LabelSelector) GetMatchExpressions() []*LabelSelectorRequirement {
	if x != nil {
		return x.MatchExpressions
	}
	return nil
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
// Copied from Kubernetes to avoid expensive dependency on Kubernetes libraries.
// Ref: https://github.com/kubernetes/apimachinery/blob/f7615f37d717297aca51101478406af712553c5b/pkg/apis/meta/v1/generated.proto#L455-L472
type LabelSelectorRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is the label key that the selector applies to.
	// +patchMergeKey=key
	// +patchStrategy=merge
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	// +optional
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *LabelSelectorRequirement) Reset() {
	*x = LabelSelectorRequirement{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LabelSelectorRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelectorRequirement) ProtoMessage() {}

func (x *LabelSelectorRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelectorRequirement.ProtoReflect.Descriptor instead.
func (*LabelSelectorRequirement) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{2}
}

func (x *LabelSelectorRequirement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LabelSelectorRequirement) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *LabelSelectorRequirement) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// Default configuration to use for upstreams, when not provided by a specific upstream
// When these properties are defined on a specific upstream, this configuration will be ignored
type UpstreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default ssl parameter configuration to use for upstreams
	SslParameters *ssl.SslParameters `protobuf:"bytes,1,opt,name=ssl_parameters,json=sslParameters,proto3" json:"ssl_parameters,omitempty"`
	// Annotations to apply to all upstreams
	GlobalAnnotations map[string]string `protobuf:"bytes,2,rep,name=global_annotations,json=globalAnnotations,proto3" json:"global_annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpstreamOptions) Reset() {
	*x = UpstreamOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpstreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamOptions) ProtoMessage() {}

func (x *UpstreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamOptions.ProtoReflect.Descriptor instead.
func (*UpstreamOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{3}
}

func (x *UpstreamOptions) GetSslParameters() *ssl.SslParameters {
	if x != nil {
		return x.SslParameters
	}
	return nil
}

func (x *UpstreamOptions) GetGlobalAnnotations() map[string]string {
	if x != nil {
		return x.GlobalAnnotations
	}
	return nil
}

// Settings specific to the gloo (Envoy xDS server) controller
type GlooOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Where the `gloo` xDS server should bind. Defaults to `0.0.0.0:9977`
	XdsBindAddr string `protobuf:"bytes,1,opt,name=xds_bind_addr,json=xdsBindAddr,proto3" json:"xds_bind_addr,omitempty"`
	// Where the `gloo` validation server should bind. Defaults to `0.0.0.0:9988`
	ValidationBindAddr string `protobuf:"bytes,2,opt,name=validation_bind_addr,json=validationBindAddr,proto3" json:"validation_bind_addr,omitempty"`
	// Default circuit breaker configuration to use for upstream requests,
	// when not provided by specific upstream.
	CircuitBreakers *CircuitBreakerConfig `protobuf:"bytes,3,opt,name=circuit_breakers,json=circuitBreakers,proto3" json:"circuit_breakers,omitempty"`
	// Timeout to get initial snapshot of resources. If set to zero, Gloo will not wait for initial
	// snapshot - if nonzero and gloo could not fetch it's initial snapshot before the timeout
	// reached, gloo will panic. If unset, Gloo defaults to 5 minutes.
	EndpointsWarmingTimeout *durationpb.Duration    `protobuf:"bytes,4,opt,name=endpoints_warming_timeout,json=endpointsWarmingTimeout,proto3" json:"endpoints_warming_timeout,omitempty"`
	AwsOptions              *GlooOptions_AWSOptions `protobuf:"bytes,5,opt,name=aws_options,json=awsOptions,proto3" json:"aws_options,omitempty"`
	// set these options to fine-tune the way Gloo handles invalid user configuration
	InvalidConfigPolicy *GlooOptions_InvalidConfigPolicy `protobuf:"bytes,6,opt,name=invalid_config_policy,json=invalidConfigPolicy,proto3" json:"invalid_config_policy,omitempty"`
	// Enable or disable Gloo Edge to scan Kubernetes services in the cluster and create in-memory Upstream resources
	// to represent them. These resources enable Gloo Edge to route requests to a Kubernetes service. Note that if
	// you have a large number of services in your cluster and you do not restrict the namespaces that Gloo Edge watches,
	// the API snapshot increases which can have a negative impact on the Gloo Edge translation time. In addition, load
	// balancing is done in `kube-proxy` which can have further performance impacts. Using Gloo Upstreams as a routing
	// destination bypasses `kube-proxy` as the request is routed to the pod directly. Alternatively, you can use
	// [`Kubernetes`](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/options/kubernetes/kubernetes.proto.sk/)
	// Upstream resources as a routing destination to forward requests to the pod directly.
	//
	// For more information, see the [docs](https://docs.solo.io/gloo-edge/latest/guides/traffic_management/destination_types/kubernetes_services/).
	DisableKubernetesDestinations bool `protobuf:"varint,7,opt,name=disable_kubernetes_destinations,json=disableKubernetesDestinations,proto3" json:"disable_kubernetes_destinations,omitempty"`
	// Default policy for grpc-web.
	// set to true if you do not wish grpc-web to be automatically enabled.
	// set to false if you wish grpc-web enabled unless disabled on the listener level.
	// If not specified, defaults to `false`.
	DisableGrpcWeb *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=disable_grpc_web,json=disableGrpcWeb,proto3" json:"disable_grpc_web,omitempty"`
	// Set this option to determine the state of the envoy configuration when a virtual service is deleted, resulting in a
	// proxy with no configured routes.
	// set to true if you wish to keep envoy serving the routes from the latest valid configuration.
	// set to false if you wish to reset the envoy configuration to a clean slate with no routes.
	// If not specified, defaults to `false`.
	DisableProxyGarbageCollection *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=disable_proxy_garbage_collection,json=disableProxyGarbageCollection,proto3" json:"disable_proxy_garbage_collection,omitempty"`
	// Set this option to specify the default max program size for regexes. If not specified,
	// defaults to 100.
	RegexMaxProgramSize *wrapperspb.UInt32Value `protobuf:"bytes,10,opt,name=regex_max_program_size,json=regexMaxProgramSize,proto3" json:"regex_max_program_size,omitempty"`
	// Where the `gloo` REST xDS server should bind.
	// Defaults to `0.0.0.0:9976`
	RestXdsBindAddr string `protobuf:"bytes,11,opt,name=rest_xds_bind_addr,json=restXdsBindAddr,proto3" json:"rest_xds_bind_addr,omitempty"`
	// Whether or not to use rest xds for all EDS by default.
	// Rest XDS, as opposed to grpc, uses http polling rather than streaming
	// It is strongly recommended that this field be set to false, due to the superior performance of GRPC XDS
	EnableRestEds *wrapperspb.BoolValue `protobuf:"bytes,12,opt,name=enable_rest_eds,json=enableRestEds,proto3" json:"enable_rest_eds,omitempty"`
	// The polling interval for the DNS server if upstream failover is configured.
	// If there is a failover upstream address with a hostname instead of an IP, Gloo will resolve the
	// hostname with the configured frequency to update endpoints with any changes to DNS resolution.
	// Defaults to 10s.
	FailoverUpstreamDnsPollingInterval *durationpb.Duration `protobuf:"bytes,13,opt,name=failover_upstream_dns_polling_interval,json=failoverUpstreamDnsPollingInterval,proto3" json:"failover_upstream_dns_polling_interval,omitempty"`
	// By default gloo adds a series of filters to envoy to ensure that new routes are picked up
	// Even if the listener previously did not have a filter on the chain previously.
	// When set to true unused filters are not added to the chain by default.
	// Defaults to false
	RemoveUnusedFilters *wrapperspb.BoolValue `protobuf:"bytes,14,opt,name=remove_unused_filters,json=removeUnusedFilters,proto3" json:"remove_unused_filters,omitempty"`
	// Where the `gloo` proxy debug server should bind. Defaults to `gloo:9966`
	ProxyDebugBindAddr string `protobuf:"bytes,15,opt,name=proxy_debug_bind_addr,json=proxyDebugBindAddr,proto3" json:"proxy_debug_bind_addr,omitempty"`
	// When enabled, log the request/response body and headers before and after
	// any transformations are applied. May be useful in the case where many
	// transformations are applied and it is difficult to determine which are
	// causing issues. Defaults to false.
	LogTransformationRequestResponseInfo *wrapperspb.BoolValue `protobuf:"bytes,16,opt,name=log_transformation_request_response_info,json=logTransformationRequestResponseInfo,proto3" json:"log_transformation_request_response_info,omitempty"`
	// Set escapeCharacters for all TransformationTemplates on all vhosts and routes.
	// This setting can be overridden in individual TransformationTemplates
	TransformationEscapeCharacters *wrapperspb.BoolValue     `protobuf:"bytes,17,opt,name=transformation_escape_characters,json=transformationEscapeCharacters,proto3" json:"transformation_escape_characters,omitempty"`
	IstioOptions                   *GlooOptions_IstioOptions `protobuf:"bytes,18,opt,name=istio_options,json=istioOptions,proto3" json:"istio_options,omitempty"`
}

func (x *GlooOptions) Reset() {
	*x = GlooOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlooOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlooOptions) ProtoMessage() {}

func (x *GlooOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlooOptions.ProtoReflect.Descriptor instead.
func (*GlooOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{4}
}

func (x *GlooOptions) GetXdsBindAddr() string {
	if x != nil {
		return x.XdsBindAddr
	}
	return ""
}

func (x *GlooOptions) GetValidationBindAddr() string {
	if x != nil {
		return x.ValidationBindAddr
	}
	return ""
}

func (x *GlooOptions) GetCircuitBreakers() *CircuitBreakerConfig {
	if x != nil {
		return x.CircuitBreakers
	}
	return nil
}

func (x *GlooOptions) GetEndpointsWarmingTimeout() *durationpb.Duration {
	if x != nil {
		return x.EndpointsWarmingTimeout
	}
	return nil
}

func (x *GlooOptions) GetAwsOptions() *GlooOptions_AWSOptions {
	if x != nil {
		return x.AwsOptions
	}
	return nil
}

func (x *GlooOptions) GetInvalidConfigPolicy() *GlooOptions_InvalidConfigPolicy {
	if x != nil {
		return x.InvalidConfigPolicy
	}
	return nil
}

func (x *GlooOptions) GetDisableKubernetesDestinations() bool {
	if x != nil {
		return x.DisableKubernetesDestinations
	}
	return false
}

func (x *GlooOptions) GetDisableGrpcWeb() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableGrpcWeb
	}
	return nil
}

func (x *GlooOptions) GetDisableProxyGarbageCollection() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableProxyGarbageCollection
	}
	return nil
}

func (x *GlooOptions) GetRegexMaxProgramSize() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RegexMaxProgramSize
	}
	return nil
}

func (x *GlooOptions) GetRestXdsBindAddr() string {
	if x != nil {
		return x.RestXdsBindAddr
	}
	return ""
}

func (x *GlooOptions) GetEnableRestEds() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableRestEds
	}
	return nil
}

func (x *GlooOptions) GetFailoverUpstreamDnsPollingInterval() *durationpb.Duration {
	if x != nil {
		return x.FailoverUpstreamDnsPollingInterval
	}
	return nil
}

func (x *GlooOptions) GetRemoveUnusedFilters() *wrapperspb.BoolValue {
	if x != nil {
		return x.RemoveUnusedFilters
	}
	return nil
}

func (x *GlooOptions) GetProxyDebugBindAddr() string {
	if x != nil {
		return x.ProxyDebugBindAddr
	}
	return ""
}

func (x *GlooOptions) GetLogTransformationRequestResponseInfo() *wrapperspb.BoolValue {
	if x != nil {
		return x.LogTransformationRequestResponseInfo
	}
	return nil
}

func (x *GlooOptions) GetTransformationEscapeCharacters() *wrapperspb.BoolValue {
	if x != nil {
		return x.TransformationEscapeCharacters
	}
	return nil
}

func (x *GlooOptions) GetIstioOptions() *GlooOptions_IstioOptions {
	if x != nil {
		return x.IstioOptions
	}
	return nil
}

// Default configuration to use for VirtualServices, when not provided by a specific virtual service
// When these properties are defined on a specific VirtualService, this configuration will be ignored
type VirtualServiceOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default one_way_tls value to use for all virtual services where one_way_tls config has not been specified.
	// If the SSL config has the ca.crt (root CA) provided, Gloo uses it to perform mTLS by default.
	// Set oneWayTls to true to disable mTLS in favor of server-only TLS (one-way TLS), even if Gloo has the root CA.
	OneWayTls *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=one_way_tls,json=oneWayTls,proto3" json:"one_way_tls,omitempty"`
}

func (x *VirtualServiceOptions) Reset() {
	*x = VirtualServiceOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualServiceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualServiceOptions) ProtoMessage() {}

func (x *VirtualServiceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualServiceOptions.ProtoReflect.Descriptor instead.
func (*VirtualServiceOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{5}
}

func (x *VirtualServiceOptions) GetOneWayTls() *wrapperspb.BoolValue {
	if x != nil {
		return x.OneWayTls
	}
	return nil
}

// Settings specific to the Gateway controller
type GatewayOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the `gloo` config validation server. Defaults to `gloo:9988`.
	ValidationServerAddr string `protobuf:"bytes,1,opt,name=validation_server_addr,json=validationServerAddr,proto3" json:"validation_server_addr,omitempty"`
	// If provided, the Gateway will perform [Dynamic Admission Control](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/)
	// of Gateways, Virtual Services, and Route Tables when running in Kubernetes.
	Validation *GatewayOptions_ValidationOptions `protobuf:"bytes,3,opt,name=validation,proto3" json:"validation,omitempty"`
	// When true, the Gateway controller will consume Gateway custom resources from all watch namespaces, rather
	// than just the Gateway CRDs in its own namespace.
	ReadGatewaysFromAllNamespaces bool `protobuf:"varint,4,opt,name=read_gateways_from_all_namespaces,json=readGatewaysFromAllNamespaces,proto3" json:"read_gateways_from_all_namespaces,omitempty"`
	// Deprecated.
	// This setting is ignored. Maintained for backwards compatibility with settings exposed on 1.2.x branch of Gloo.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
	AlwaysSortRouteTableRoutes bool `protobuf:"varint,5,opt,name=always_sort_route_table_routes,json=alwaysSortRouteTableRoutes,proto3" json:"always_sort_route_table_routes,omitempty"`
	// If set, compresses proxy space. This can help make the Proxy CRD smaller to fit in etcd.
	// This is an advanced option. Use with care.
	CompressedProxySpec bool `protobuf:"varint,6,opt,name=compressed_proxy_spec,json=compressedProxySpec,proto3" json:"compressed_proxy_spec,omitempty"`
	// Default configuration to use for VirtualServices, when not provided by a specific virtual service
	// When these properties are defined on a specific VirtualService, this configuration will be ignored
	VirtualServiceOptions *VirtualServiceOptions `protobuf:"bytes,7,opt,name=virtual_service_options,json=virtualServiceOptions,proto3" json:"virtual_service_options,omitempty"`
	// Set this to persist the Proxy CRD to etcd By default, proxies are kept in memory to improve performance.
	// Proxies can be persisted to etcd to allow external tools and other pods to read the contents the Proxy CRD.
	PersistProxySpec *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=persist_proxy_spec,json=persistProxySpec,proto3" json:"persist_proxy_spec,omitempty"`
	// This is set based on the install mode. It indicates to gloo whether or not it should run the gateway
	// translations and validation.
	EnableGatewayController *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=enable_gateway_controller,json=enableGatewayController,proto3" json:"enable_gateway_controller,omitempty"`
	// If set, group virtual hosts by matching ssl config, and isolate them on separate filter chains
	// The default behavior is to aggregate all virtual hosts, and expose them on identical filter chains,
	// each with a FilterChainMatch that corresponds to the ssl config.
	// Individual Gateways can override this behavior by configuring the "gateway.solo.io/isolate_vhost" annotation
	// to be a truthy ("true", "false") value
	IsolateVirtualHostsBySslConfig *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=isolate_virtual_hosts_by_ssl_config,json=isolateVirtualHostsBySslConfig,proto3" json:"isolate_virtual_hosts_by_ssl_config,omitempty"`
	// If set, gateways will be translated into Envoy listeners even if no VirtualServices exist or match a gateway.
	// When there are no VirtualServices that implies there are no routes to serve, so all requests will return a 404.
	// Defaults to false.
	// The default behavior when no VirtualServices are defined or no Gateways match a VirtualService is that
	// the gateway is not converted into an Envoy listener.
	TranslateEmptyGateways *wrapperspb.BoolValue `protobuf:"bytes,11,opt,name=translate_empty_gateways,json=translateEmptyGateways,proto3" json:"translate_empty_gateways,omitempty"`
}

func (x *GatewayOptions) Reset() {
	*x = GatewayOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayOptions) ProtoMessage() {}

func (x *GatewayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayOptions.ProtoReflect.Descriptor instead.
func (*GatewayOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{6}
}

func (x *GatewayOptions) GetValidationServerAddr() string {
	if x != nil {
		return x.ValidationServerAddr
	}
	return ""
}

func (x *GatewayOptions) GetValidation() *GatewayOptions_ValidationOptions {
	if x != nil {
		return x.Validation
	}
	return nil
}

func (x *GatewayOptions) GetReadGatewaysFromAllNamespaces() bool {
	if x != nil {
		return x.ReadGatewaysFromAllNamespaces
	}
	return false
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
func (x *GatewayOptions) GetAlwaysSortRouteTableRoutes() bool {
	if x != nil {
		return x.AlwaysSortRouteTableRoutes
	}
	return false
}

func (x *GatewayOptions) GetCompressedProxySpec() bool {
	if x != nil {
		return x.CompressedProxySpec
	}
	return false
}

func (x *GatewayOptions) GetVirtualServiceOptions() *VirtualServiceOptions {
	if x != nil {
		return x.VirtualServiceOptions
	}
	return nil
}

func (x *GatewayOptions) GetPersistProxySpec() *wrapperspb.BoolValue {
	if x != nil {
		return x.PersistProxySpec
	}
	return nil
}

func (x *GatewayOptions) GetEnableGatewayController() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableGatewayController
	}
	return nil
}

func (x *GatewayOptions) GetIsolateVirtualHostsBySslConfig() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsolateVirtualHostsBySslConfig
	}
	return nil
}

func (x *GatewayOptions) GetTranslateEmptyGateways() *wrapperspb.BoolValue {
	if x != nil {
		return x.TranslateEmptyGateways
	}
	return nil
}

// Deprecated: The GraphQL feature will be removed in a future release.
// Settings used by the Enterprise Console (UI)
type ConsoleOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, then custom resources can only be viewed in read-only mode in the UI.
	// If false, then resources can be created, updated, and deleted via the UI.
	// Currently, create/update/delete operations are only supported for GraphQL resources.
	// This feature requires a Gloo Edge Enterprise license with GraphQL enabled.
	// Defaults to true.
	ReadOnly *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	// Whether to enable the GraphQL API Explorer. This feature requires a Gloo Edge Enterprise license with GraphQL enabled.
	// Defaults to true.
	ApiExplorerEnabled *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=api_explorer_enabled,json=apiExplorerEnabled,proto3" json:"api_explorer_enabled,omitempty"`
}

func (x *ConsoleOptions) Reset() {
	*x = ConsoleOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsoleOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsoleOptions) ProtoMessage() {}

func (x *ConsoleOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsoleOptions.ProtoReflect.Descriptor instead.
func (*ConsoleOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{7}
}

func (x *ConsoleOptions) GetReadOnly() *wrapperspb.BoolValue {
	if x != nil {
		return x.ReadOnly
	}
	return nil
}

func (x *ConsoleOptions) GetApiExplorerEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ApiExplorerEnabled
	}
	return nil
}

// Deprecated: The GraphQL feature will be removed in a future release.
// GraphQL settings used by the control plane and UI.
type GraphqlOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Options for how to validate changes to schema definitions.
	SchemaChangeValidationOptions *GraphqlOptions_SchemaChangeValidationOptions `protobuf:"bytes,1,opt,name=schema_change_validation_options,json=schemaChangeValidationOptions,proto3" json:"schema_change_validation_options,omitempty"`
}

func (x *GraphqlOptions) Reset() {
	*x = GraphqlOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphqlOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphqlOptions) ProtoMessage() {}

func (x *GraphqlOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphqlOptions.ProtoReflect.Descriptor instead.
func (*GraphqlOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{8}
}

func (x *GraphqlOptions) GetSchemaChangeValidationOptions() *GraphqlOptions_SchemaChangeValidationOptions {
	if x != nil {
		return x.SchemaChangeValidationOptions
	}
	return nil
}

type Settings_SecretOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. List of configured secret sources. These clients will be sorted and
	// initialized in a stable order kubernetes > directory > vault.
	Sources []*Settings_SecretOptions_Source `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *Settings_SecretOptions) Reset() {
	*x = Settings_SecretOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_SecretOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_SecretOptions) ProtoMessage() {}

func (x *Settings_SecretOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_SecretOptions.ProtoReflect.Descriptor instead.
func (*Settings_SecretOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Settings_SecretOptions) GetSources() []*Settings_SecretOptions_Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

// Use Kubernetes CRDs as storage.
type Settings_KubernetesCrds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Settings_KubernetesCrds) Reset() {
	*x = Settings_KubernetesCrds{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_KubernetesCrds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_KubernetesCrds) ProtoMessage() {}

func (x *Settings_KubernetesCrds) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_KubernetesCrds.ProtoReflect.Descriptor instead.
func (*Settings_KubernetesCrds) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 1}
}

// Use Kubernetes as storage for secret data.
type Settings_KubernetesSecrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Settings_KubernetesSecrets) Reset() {
	*x = Settings_KubernetesSecrets{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_KubernetesSecrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_KubernetesSecrets) ProtoMessage() {}

func (x *Settings_KubernetesSecrets) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_KubernetesSecrets.ProtoReflect.Descriptor instead.
func (*Settings_KubernetesSecrets) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 2}
}

// Use [HashiCorp Vault](https://www.vaultproject.io/) as storage for secret data.
type Settings_VaultSecrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DEPRECATED: use field accessToken
	// the Token used to authenticate to Vault
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// address is the address of the Vault server. This should be a complete
	// URL such as http://solo.io and include port if necessary (vault's default port is 8200)
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// DEPRECATED: use field tls_config to configure TLS connection to Vault
	// caCert is the path to a PEM-encoded CA cert file to use to verify the
	// Vault server SSL certificate.
	CaCert string `protobuf:"bytes,3,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	// DEPRECATED: use field tls_config to configure TLS connection to Vault
	// caPath is the path to a directory of PEM-encoded CA cert files to verify
	// the Vault server SSL certificate.
	CaPath string `protobuf:"bytes,4,opt,name=ca_path,json=caPath,proto3" json:"ca_path,omitempty"`
	// DEPRECATED: use field tls_config to configure TLS connection to Vault
	// clientCert is the path to the certificate for Vault communication
	ClientCert string `protobuf:"bytes,5,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	// DEPRECATED: use field tls_config to configure TLS connection to Vault
	// clientKey is the path to the private key for Vault communication
	ClientKey string `protobuf:"bytes,6,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	// DEPRECATED: use field tls_config to configure TLS connection to Vault
	// tlsServerName, if set, is used to set the SNI host when connecting via
	// TLS.
	TlsServerName string `protobuf:"bytes,7,opt,name=tls_server_name,json=tlsServerName,proto3" json:"tls_server_name,omitempty"`
	// DEPRECATED: use field tls_config to configure TLS connection to Vault
	// When set to true, disables TLS verification
	Insecure *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// all keys stored in Vault will begin with this Vault
	// this can be used to run multiple instances of Gloo against the same Vault cluster
	// defaults to `gloo`
	RootKey string `protobuf:"bytes,9,opt,name=root_key,json=rootKey,proto3" json:"root_key,omitempty"`
	// Optional: The name of a Vault Secrets Engine to which Vault should route traffic.
	// For more info see https://learn.hashicorp.com/tutorials/vault/getting-started-secrets-engines.
	// Defaults to 'secret'
	PathPrefix string `protobuf:"bytes,10,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	// Configure TLS options for client connection to Vault. This is only available when running
	// Gloo Edge outside of an container orchestration tool such as Kubernetes or Nomad.
	TlsConfig *Settings_VaultTlsConfig `protobuf:"bytes,11,opt,name=tls_config,json=tlsConfig,proto3" json:"tls_config,omitempty"`
	// Support for multiple authentication methods
	//
	// Types that are assignable to AuthMethod:
	//
	//	*Settings_VaultSecrets_AccessToken
	//	*Settings_VaultSecrets_Aws
	AuthMethod isSettings_VaultSecrets_AuthMethod `protobuf_oneof:"auth_method"`
}

func (x *Settings_VaultSecrets) Reset() {
	*x = Settings_VaultSecrets{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_VaultSecrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_VaultSecrets) ProtoMessage() {}

func (x *Settings_VaultSecrets) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_VaultSecrets.ProtoReflect.Descriptor instead.
func (*Settings_VaultSecrets) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Settings_VaultSecrets) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Settings_VaultSecrets) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Settings_VaultSecrets) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *Settings_VaultSecrets) GetCaPath() string {
	if x != nil {
		return x.CaPath
	}
	return ""
}

func (x *Settings_VaultSecrets) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *Settings_VaultSecrets) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *Settings_VaultSecrets) GetTlsServerName() string {
	if x != nil {
		return x.TlsServerName
	}
	return ""
}

func (x *Settings_VaultSecrets) GetInsecure() *wrapperspb.BoolValue {
	if x != nil {
		return x.Insecure
	}
	return nil
}

func (x *Settings_VaultSecrets) GetRootKey() string {
	if x != nil {
		return x.RootKey
	}
	return ""
}

func (x *Settings_VaultSecrets) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

func (x *Settings_VaultSecrets) GetTlsConfig() *Settings_VaultTlsConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

func (m *Settings_VaultSecrets) GetAuthMethod() isSettings_VaultSecrets_AuthMethod {
	if m != nil {
		return m.AuthMethod
	}
	return nil
}

func (x *Settings_VaultSecrets) GetAccessToken() string {
	if x, ok := x.GetAuthMethod().(*Settings_VaultSecrets_AccessToken); ok {
		return x.AccessToken
	}
	return ""
}

func (x *Settings_VaultSecrets) GetAws() *Settings_VaultAwsAuth {
	if x, ok := x.GetAuthMethod().(*Settings_VaultSecrets_Aws); ok {
		return x.Aws
	}
	return nil
}

type isSettings_VaultSecrets_AuthMethod interface {
	isSettings_VaultSecrets_AuthMethod()
}

type Settings_VaultSecrets_AccessToken struct {
	AccessToken string `protobuf:"bytes,12,opt,name=access_token,json=accessToken,proto3,oneof"`
}

type Settings_VaultSecrets_Aws struct {
	Aws *Settings_VaultAwsAuth `protobuf:"bytes,13,opt,name=aws,proto3,oneof"`
}

func (*Settings_VaultSecrets_AccessToken) isSettings_VaultSecrets_AuthMethod() {}

func (*Settings_VaultSecrets_Aws) isSettings_VaultSecrets_AuthMethod() {}

// Configure Vault client to authenticate to server via AWS auth (IAM only).
// For more info see https://developer.hashicorp.com/vault/docs/auth/aws
type Settings_VaultAwsAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Vault role we are trying to authenticate to.
	// This is not necessarily the same as the AWS role to which the Vault role is configured.
	VaultRole string `protobuf:"bytes,1,opt,name=vault_role,json=vaultRole,proto3" json:"vault_role,omitempty"`
	// The AWS region to use for the login attempt
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// The IAM Server ID Header required to be included in the request
	IamServerIdHeader string `protobuf:"bytes,3,opt,name=iam_server_id_header,json=iamServerIdHeader,proto3" json:"iam_server_id_header,omitempty"`
	// The Vault path on which the AWS auth is mounted
	MountPath string `protobuf:"bytes,4,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
	// The Access Key ID as provided by the security credentials on the AWS IAM resource.
	// Optional: In cases such as receiving temporary credentials through assumed roles with AWS Security Token Service (STS) or IAM Roles for Service Accounts (IRSA), this field can be omitted.
	// https://developer.hashicorp.com/vault/docs/auth/aws#iam-authentication-inferences
	AccessKeyId string `protobuf:"bytes,5,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// The Secret Access Key as provided by the security credentials on the AWS IAM resource.
	// Optional: In cases such as receiving temporary credentials through assumed roles with AWS Security Token Service (STS) or IAM Roles for Service Accounts (IRSA), this field can be omitted.
	// https://developer.hashicorp.com/vault/docs/auth/aws#iam-authentication-inferences
	SecretAccessKey string `protobuf:"bytes,6,opt,name=secret_access_key,json=secretAccessKey,proto3" json:"secret_access_key,omitempty"`
	// The Session Token as provided by the security credentials on the AWS IAM resource
	SessionToken string `protobuf:"bytes,7,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	// The time increment, in seconds, used in renewing the lease of the Vault token. See: https://developer.hashicorp.com/vault/docs/concepts/lease#lease-durations-and-renewal. Defaults to 0, which causes the default TTL to be used.
	LeaseIncrement int32 `protobuf:"varint,8,opt,name=lease_increment,json=leaseIncrement,proto3" json:"lease_increment,omitempty"`
}

func (x *Settings_VaultAwsAuth) Reset() {
	*x = Settings_VaultAwsAuth{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_VaultAwsAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_VaultAwsAuth) ProtoMessage() {}

func (x *Settings_VaultAwsAuth) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_VaultAwsAuth.ProtoReflect.Descriptor instead.
func (*Settings_VaultAwsAuth) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Settings_VaultAwsAuth) GetVaultRole() string {
	if x != nil {
		return x.VaultRole
	}
	return ""
}

func (x *Settings_VaultAwsAuth) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Settings_VaultAwsAuth) GetIamServerIdHeader() string {
	if x != nil {
		return x.IamServerIdHeader
	}
	return ""
}

func (x *Settings_VaultAwsAuth) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *Settings_VaultAwsAuth) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *Settings_VaultAwsAuth) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

func (x *Settings_VaultAwsAuth) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *Settings_VaultAwsAuth) GetLeaseIncrement() int32 {
	if x != nil {
		return x.LeaseIncrement
	}
	return 0
}

// Settings to configure TLS-enabled Vault as a secret store
type Settings_VaultTlsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// caCert is the path to a PEM-encoded CA cert file to use to verify the
	// Vault server SSL certificate.
	CaCert string `protobuf:"bytes,1,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	// caPath is the path to a directory of PEM-encoded CA cert files to verify
	// the Vault server SSL certificate.
	CaPath string `protobuf:"bytes,2,opt,name=ca_path,json=caPath,proto3" json:"ca_path,omitempty"`
	// clientCert is the path to the certificate for Vault communication
	ClientCert string `protobuf:"bytes,3,opt,name=client_cert,json=clientCert,proto3" json:"client_cert,omitempty"`
	// clientKey is the path to the private key for Vault communication
	ClientKey string `protobuf:"bytes,4,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	// tlsServerName, if set, is used to set the SNI host when connecting via
	// TLS.
	TlsServerName string `protobuf:"bytes,5,opt,name=tls_server_name,json=tlsServerName,proto3" json:"tls_server_name,omitempty"`
	// When set to true, disables TLS verification
	Insecure *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=insecure,proto3" json:"insecure,omitempty"`
}

func (x *Settings_VaultTlsConfig) Reset() {
	*x = Settings_VaultTlsConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_VaultTlsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_VaultTlsConfig) ProtoMessage() {}

func (x *Settings_VaultTlsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_VaultTlsConfig.ProtoReflect.Descriptor instead.
func (*Settings_VaultTlsConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Settings_VaultTlsConfig) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *Settings_VaultTlsConfig) GetCaPath() string {
	if x != nil {
		return x.CaPath
	}
	return ""
}

func (x *Settings_VaultTlsConfig) GetClientCert() string {
	if x != nil {
		return x.ClientCert
	}
	return ""
}

func (x *Settings_VaultTlsConfig) GetClientKey() string {
	if x != nil {
		return x.ClientKey
	}
	return ""
}

func (x *Settings_VaultTlsConfig) GetTlsServerName() string {
	if x != nil {
		return x.TlsServerName
	}
	return ""
}

func (x *Settings_VaultTlsConfig) GetInsecure() *wrapperspb.BoolValue {
	if x != nil {
		return x.Insecure
	}
	return nil
}

// Use [HashiCorp Consul Key-Value](https://www.consul.io/api/kv.html/) as storage for config data.
// Configuration options for connecting to Consul can be configured in the Settings' root
// `consul` field
type Settings_ConsulKv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// all keys stored in Consul will begin with this prefix
	// this can be used to run multiple instances of Gloo against the same Consul cluster
	// defaults to `gloo`
	RootKey string `protobuf:"bytes,1,opt,name=root_key,json=rootKey,proto3" json:"root_key,omitempty"`
}

func (x *Settings_ConsulKv) Reset() {
	*x = Settings_ConsulKv{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_ConsulKv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_ConsulKv) ProtoMessage() {}

func (x *Settings_ConsulKv) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_ConsulKv.ProtoReflect.Descriptor instead.
func (*Settings_ConsulKv) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Settings_ConsulKv) GetRootKey() string {
	if x != nil {
		return x.RootKey
	}
	return ""
}

// Use Kubernetes ConfigMaps as storage.
type Settings_KubernetesConfigmaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Settings_KubernetesConfigmaps) Reset() {
	*x = Settings_KubernetesConfigmaps{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_KubernetesConfigmaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_KubernetesConfigmaps) ProtoMessage() {}

func (x *Settings_KubernetesConfigmaps) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_KubernetesConfigmaps.ProtoReflect.Descriptor instead.
func (*Settings_KubernetesConfigmaps) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 7}
}

// As an alternative to Kubernetes CRDs, Gloo is able to store resources in a local file system.
// This option determines the root of the directory tree used to this end.
type Settings_Directory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Directory string `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *Settings_Directory) Reset() {
	*x = Settings_Directory{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_Directory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_Directory) ProtoMessage() {}

func (x *Settings_Directory) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_Directory.ProtoReflect.Descriptor instead.
func (*Settings_Directory) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Settings_Directory) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

type Settings_KnativeOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the clusteringress proxy.
	// If empty, it will default to clusteringress-proxy.$POD_NAMESPACE.svc.cluster.local.
	// Use if running Knative Version 0.7.X or less
	ClusterIngressProxyAddress string `protobuf:"bytes,1,opt,name=cluster_ingress_proxy_address,json=clusterIngressProxyAddress,proto3" json:"cluster_ingress_proxy_address,omitempty"`
	// Address of the externally-facing knative proxy.
	// If empty, it will default to knative-external-proxy.$POD_NAMESPACE.svc.cluster.local.
	// Use if running Knative Version 0.8.X or higher
	KnativeExternalProxyAddress string `protobuf:"bytes,2,opt,name=knative_external_proxy_address,json=knativeExternalProxyAddress,proto3" json:"knative_external_proxy_address,omitempty"`
	// Address of the internally-facing knative proxy.
	// If empty, it will default to knative-internal-proxy.$POD_NAMESPACE.svc.cluster.local.
	// Use if running Knative Version 0.8.X or higher
	KnativeInternalProxyAddress string `protobuf:"bytes,3,opt,name=knative_internal_proxy_address,json=knativeInternalProxyAddress,proto3" json:"knative_internal_proxy_address,omitempty"`
}

func (x *Settings_KnativeOptions) Reset() {
	*x = Settings_KnativeOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_KnativeOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_KnativeOptions) ProtoMessage() {}

func (x *Settings_KnativeOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_KnativeOptions.ProtoReflect.Descriptor instead.
func (*Settings_KnativeOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Settings_KnativeOptions) GetClusterIngressProxyAddress() string {
	if x != nil {
		return x.ClusterIngressProxyAddress
	}
	return ""
}

func (x *Settings_KnativeOptions) GetKnativeExternalProxyAddress() string {
	if x != nil {
		return x.KnativeExternalProxyAddress
	}
	return ""
}

func (x *Settings_KnativeOptions) GetKnativeInternalProxyAddress() string {
	if x != nil {
		return x.KnativeInternalProxyAddress
	}
	return ""
}

type Settings_DiscoveryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FdsMode    Settings_DiscoveryOptions_FdsMode     `protobuf:"varint,1,opt,name=fds_mode,json=fdsMode,proto3,enum=gloo.solo.io.Settings_DiscoveryOptions_FdsMode" json:"fds_mode,omitempty"`
	UdsOptions *Settings_DiscoveryOptions_UdsOptions `protobuf:"bytes,2,opt,name=uds_options,json=udsOptions,proto3" json:"uds_options,omitempty"`
	FdsOptions *Settings_DiscoveryOptions_FdsOptions `protobuf:"bytes,3,opt,name=fds_options,json=fdsOptions,proto3" json:"fds_options,omitempty"`
}

func (x *Settings_DiscoveryOptions) Reset() {
	*x = Settings_DiscoveryOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_DiscoveryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_DiscoveryOptions) ProtoMessage() {}

func (x *Settings_DiscoveryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_DiscoveryOptions.ProtoReflect.Descriptor instead.
func (*Settings_DiscoveryOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 10}
}

func (x *Settings_DiscoveryOptions) GetFdsMode() Settings_DiscoveryOptions_FdsMode {
	if x != nil {
		return x.FdsMode
	}
	return Settings_DiscoveryOptions_BLACKLIST
}

func (x *Settings_DiscoveryOptions) GetUdsOptions() *Settings_DiscoveryOptions_UdsOptions {
	if x != nil {
		return x.UdsOptions
	}
	return nil
}

func (x *Settings_DiscoveryOptions) GetFdsOptions() *Settings_DiscoveryOptions_FdsOptions {
	if x != nil {
		return x.FdsOptions
	}
	return nil
}

// Provides overrides for the default configuration parameters used to connect to Consul.
//
// Note: It is also possible to configure the Consul client Gloo uses via the environment variables
// described [here](https://www.consul.io/docs/commands/index.html#environment-variables). These
// need to be set on the Gloo container.
type Settings_ConsulConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: prefer http_address.
	// The address of the Consul HTTP server.
	// Used by service discovery and key-value storage (if-enabled).
	// Defaults to the value of the standard CONSUL_HTTP_ADDR env if set, otherwise to 127.0.0.1:8500.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Datacenter to use. If not provided, the default agent datacenter is used.
	Datacenter string `protobuf:"bytes,2,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	// Username to use for HTTP Basic Authentication
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// Password to use for HTTP Basic Authentication
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// Token is used to provide a per-request ACL token
	// which overrides the agent's default token.
	Token string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	// caFile is the optional path to the CA certificate used for Consul
	// communication, defaults to the system bundle if not specified.
	CaFile string `protobuf:"bytes,6,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty"`
	// caPath is the optional path to a directory of CA certificates to use for
	// Consul communication, defaults to the system bundle if not specified.
	CaPath string `protobuf:"bytes,7,opt,name=ca_path,json=caPath,proto3" json:"ca_path,omitempty"`
	// CertFile is the optional path to the certificate for Consul
	// communication. If this is set then you need to also set KeyFile.
	CertFile string `protobuf:"bytes,8,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	// KeyFile is the optional path to the private key for Consul communication.
	// If this is set then you need to also set CertFile.
	KeyFile string `protobuf:"bytes,9,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	// InsecureSkipVerify if set to true will disable TLS host verification.
	InsecureSkipVerify *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	// WaitTime limits how long a watches for Consul resources will block.
	// If not provided, the agent default values will be used.
	WaitTime *durationpb.Duration `protobuf:"bytes,11,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"`
	// Enable Service Discovery via Consul with this field
	// set to empty struct `{}` to enable with defaults
	ServiceDiscovery *Settings_ConsulConfiguration_ServiceDiscoveryOptions `protobuf:"bytes,12,opt,name=service_discovery,json=serviceDiscovery,proto3" json:"service_discovery,omitempty"`
	// The address of the Consul HTTP server.
	// Used by service discovery and key-value storage (if-enabled).
	// Defaults to the value of the standard CONSUL_HTTP_ADDR env if set, otherwise to 127.0.0.1:8500.
	HttpAddress string `protobuf:"bytes,13,opt,name=http_address,json=httpAddress,proto3" json:"http_address,omitempty"`
	// The address of the DNS server used to resolve hostnames in the Consul service address.
	// Used by service discovery (required when Consul service instances are stored as DNS names).
	// Defaults to 127.0.0.1:8600. (the default Consul DNS server)
	DnsAddress string `protobuf:"bytes,14,opt,name=dns_address,json=dnsAddress,proto3" json:"dns_address,omitempty"`
	// The polling interval for the DNS server.
	// If there is a Consul service address with a hostname instead of an IP, Gloo will resolve the
	// hostname with the configured frequency to update endpoints with any changes to DNS resolution.
	// Defaults to 5s.
	DnsPollingInterval *durationpb.Duration `protobuf:"bytes,15,opt,name=dns_polling_interval,json=dnsPollingInterval,proto3" json:"dns_polling_interval,omitempty"`
}

func (x *Settings_ConsulConfiguration) Reset() {
	*x = Settings_ConsulConfiguration{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_ConsulConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_ConsulConfiguration) ProtoMessage() {}

func (x *Settings_ConsulConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_ConsulConfiguration.ProtoReflect.Descriptor instead.
func (*Settings_ConsulConfiguration) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 11}
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
func (x *Settings_ConsulConfiguration) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Settings_ConsulConfiguration) GetDatacenter() string {
	if x != nil {
		return x.Datacenter
	}
	return ""
}

func (x *Settings_ConsulConfiguration) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Settings_ConsulConfiguration) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Settings_ConsulConfiguration) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Settings_ConsulConfiguration) GetCaFile() string {
	if x != nil {
		return x.CaFile
	}
	return ""
}

func (x *Settings_ConsulConfiguration) GetCaPath() string {
	if x != nil {
		return x.CaPath
	}
	return ""
}

func (x *Settings_ConsulConfiguration) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *Settings_ConsulConfiguration) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *Settings_ConsulConfiguration) GetInsecureSkipVerify() *wrapperspb.BoolValue {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return nil
}

func (x *Settings_ConsulConfiguration) GetWaitTime() *durationpb.Duration {
	if x != nil {
		return x.WaitTime
	}
	return nil
}

func (x *Settings_ConsulConfiguration) GetServiceDiscovery() *Settings_ConsulConfiguration_ServiceDiscoveryOptions {
	if x != nil {
		return x.ServiceDiscovery
	}
	return nil
}

func (x *Settings_ConsulConfiguration) GetHttpAddress() string {
	if x != nil {
		return x.HttpAddress
	}
	return ""
}

func (x *Settings_ConsulConfiguration) GetDnsAddress() string {
	if x != nil {
		return x.DnsAddress
	}
	return ""
}

func (x *Settings_ConsulConfiguration) GetDnsPollingInterval() *durationpb.Duration {
	if x != nil {
		return x.DnsPollingInterval
	}
	return nil
}

// Settings related to gloo's behavior when discovering consul services and creating
// upstreams to connect to those services and their instances.
type Settings_ConsulUpstreamDiscoveryConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, then gloo will add TLS to upstreams created for any consul service that has the tag specified by
	// tlsTagName. If splitTlsServices is true, then this tag is also used to identify serviceInstances that
	// should be tied to the TLS upstream. Requires rootCa to be set if true.
	UseTlsTagging bool `protobuf:"varint,16,opt,name=useTlsTagging,proto3" json:"useTlsTagging,omitempty"`
	// The tag that gloo should use to make TLS upstreams from consul services, and to partition consul
	// serviceInstances between TLS/non-TLS upstreams. Defaults to 'glooUseTls'
	TlsTagName string `protobuf:"bytes,17,opt,name=tlsTagName,proto3" json:"tlsTagName,omitempty"`
	// The reference for the root CA resource to be used by discovered consul TLS upstreams.
	RootCa *core.ResourceRef `protobuf:"bytes,18,opt,name=rootCa,proto3" json:"rootCa,omitempty"`
	// If true, then create two upstreams when the tlsTagName is found on a consul service,
	// one with tls and one without. This requires a consul service's serviceInstances
	// be individually tagged; servicesInstances with the tlsTagName tag are directed to the TLS upstream, while those
	// without the tlsTagName tag are sorted into the non-TLS upstream.
	SplitTlsServices bool `protobuf:"varint,19,opt,name=splitTlsServices,proto3" json:"splitTlsServices,omitempty"`
	// Sets the consistency mode. The default is DefaultMode.
	//
	// Note: Gloo handles staleness well (as it runs update loops ~ once/second) but makes many requests
	// to get consul endpoints so users may want to opt into stale reads once the implications are understood.
	ConsistencyMode consul.ConsulConsistencyModes `protobuf:"varint,20,opt,name=consistencyMode,proto3,enum=consul.options.gloo.solo.io.ConsulConsistencyModes" json:"consistencyMode,omitempty"`
	// QueryOptions are the query options to use for all Consul queries.
	QueryOptions *consul.QueryOptions `protobuf:"bytes,21,opt,name=query_options,json=queryOptions,proto3" json:"query_options,omitempty"`
	// All Services with tags in the allowlisted values will have endpoints and upstreams discovered.
	// Default is all services - if values specified this will limit discovery to only services with specified tags
	ServiceTagsAllowlist []string `protobuf:"bytes,22,rep,name=service_tags_allowlist,json=serviceTagsAllowlist,proto3" json:"service_tags_allowlist,omitempty"`
	// Enables blocking queries for Gloo's requests to the Consul Catalog API for each service
	// (`/catalog/service/:servicename`) to get endpoints for EDS. For more on blocking queries, see
	// https://www.consul.io/api-docs/features/blocking
	//
	// Enabling this feature will likely result in fewer network calls to Consul, but may also result in
	// fewer local consul agent cache hits for Gloo's requests to the Consul Catalog API. (see
	// `query_options` above to configure caching; caching is enabled by default).
	//
	// Defaults to false.
	EdsBlockingQueries *wrapperspb.BoolValue `protobuf:"bytes,23,opt,name=eds_blocking_queries,json=edsBlockingQueries,proto3" json:"eds_blocking_queries,omitempty"`
}

func (x *Settings_ConsulUpstreamDiscoveryConfiguration) Reset() {
	*x = Settings_ConsulUpstreamDiscoveryConfiguration{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_ConsulUpstreamDiscoveryConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_ConsulUpstreamDiscoveryConfiguration) ProtoMessage() {}

func (x *Settings_ConsulUpstreamDiscoveryConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_ConsulUpstreamDiscoveryConfiguration.ProtoReflect.Descriptor instead.
func (*Settings_ConsulUpstreamDiscoveryConfiguration) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 12}
}

func (x *Settings_ConsulUpstreamDiscoveryConfiguration) GetUseTlsTagging() bool {
	if x != nil {
		return x.UseTlsTagging
	}
	return false
}

func (x *Settings_ConsulUpstreamDiscoveryConfiguration) GetTlsTagName() string {
	if x != nil {
		return x.TlsTagName
	}
	return ""
}

func (x *Settings_ConsulUpstreamDiscoveryConfiguration) GetRootCa() *core.ResourceRef {
	if x != nil {
		return x.RootCa
	}
	return nil
}

func (x *Settings_ConsulUpstreamDiscoveryConfiguration) GetSplitTlsServices() bool {
	if x != nil {
		return x.SplitTlsServices
	}
	return false
}

func (x *Settings_ConsulUpstreamDiscoveryConfiguration) GetConsistencyMode() consul.ConsulConsistencyModes {
	if x != nil {
		return x.ConsistencyMode
	}
	return consul.ConsulConsistencyModes(0)
}

func (x *Settings_ConsulUpstreamDiscoveryConfiguration) GetQueryOptions() *consul.QueryOptions {
	if x != nil {
		return x.QueryOptions
	}
	return nil
}

func (x *Settings_ConsulUpstreamDiscoveryConfiguration) GetServiceTagsAllowlist() []string {
	if x != nil {
		return x.ServiceTagsAllowlist
	}
	return nil
}

func (x *Settings_ConsulUpstreamDiscoveryConfiguration) GetEdsBlockingQueries() *wrapperspb.BoolValue {
	if x != nil {
		return x.EdsBlockingQueries
	}
	return nil
}

// Provides overrides for the default configuration parameters used to interact with Kubernetes.
type Settings_KubernetesConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rate limits for the kubernetes clients
	RateLimits *Settings_KubernetesConfiguration_RateLimits `protobuf:"bytes,1,opt,name=rate_limits,json=rateLimits,proto3" json:"rate_limits,omitempty"`
}

func (x *Settings_KubernetesConfiguration) Reset() {
	*x = Settings_KubernetesConfiguration{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_KubernetesConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_KubernetesConfiguration) ProtoMessage() {}

func (x *Settings_KubernetesConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_KubernetesConfiguration.ProtoReflect.Descriptor instead.
func (*Settings_KubernetesConfiguration) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 13}
}

func (x *Settings_KubernetesConfiguration) GetRateLimits() *Settings_KubernetesConfiguration_RateLimits {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

type Settings_ObservabilityOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Options to configure Gloo's integration with [Kubernetes](https://www.kubernetes.io/).
	GrafanaIntegration *Settings_ObservabilityOptions_GrafanaIntegration `protobuf:"bytes,1,opt,name=grafanaIntegration,proto3" json:"grafanaIntegration,omitempty"`
	// Enable metrics that track the configuration status of various resource types.
	// Each (key, value) pair in the map defines a metric for a particular resource type. Configuration status
	// metrics are not recorded by default; metrics are recorded only for the resources specified in this map.
	// Keys specify the resource type (GroupVersionKind) to track for status changes
	// (e.g. "VirtualService.v1.gateway.solo.io"). Values specify the labels to set on the metric.
	ConfigStatusMetricLabels map[string]*Settings_ObservabilityOptions_MetricLabels `protobuf:"bytes,2,rep,name=configStatusMetricLabels,proto3" json:"configStatusMetricLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Settings_ObservabilityOptions) Reset() {
	*x = Settings_ObservabilityOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_ObservabilityOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_ObservabilityOptions) ProtoMessage() {}

func (x *Settings_ObservabilityOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_ObservabilityOptions.ProtoReflect.Descriptor instead.
func (*Settings_ObservabilityOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 15}
}

func (x *Settings_ObservabilityOptions) GetGrafanaIntegration() *Settings_ObservabilityOptions_GrafanaIntegration {
	if x != nil {
		return x.GrafanaIntegration
	}
	return nil
}

func (x *Settings_ObservabilityOptions) GetConfigStatusMetricLabels() map[string]*Settings_ObservabilityOptions_MetricLabels {
	if x != nil {
		return x.ConfigStatusMetricLabels
	}
	return nil
}

type Settings_SecretOptions_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Determines where Gloo will read/write secrets from/to.
	//
	// Types that are assignable to Source:
	//
	//	*Settings_SecretOptions_Source_Kubernetes
	//	*Settings_SecretOptions_Source_Vault
	//	*Settings_SecretOptions_Source_Directory
	Source isSettings_SecretOptions_Source_Source `protobuf_oneof:"source"`
}

func (x *Settings_SecretOptions_Source) Reset() {
	*x = Settings_SecretOptions_Source{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_SecretOptions_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_SecretOptions_Source) ProtoMessage() {}

func (x *Settings_SecretOptions_Source) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_SecretOptions_Source.ProtoReflect.Descriptor instead.
func (*Settings_SecretOptions_Source) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (m *Settings_SecretOptions_Source) GetSource() isSettings_SecretOptions_Source_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *Settings_SecretOptions_Source) GetKubernetes() *Settings_KubernetesSecrets {
	if x, ok := x.GetSource().(*Settings_SecretOptions_Source_Kubernetes); ok {
		return x.Kubernetes
	}
	return nil
}

func (x *Settings_SecretOptions_Source) GetVault() *Settings_VaultSecrets {
	if x, ok := x.GetSource().(*Settings_SecretOptions_Source_Vault); ok {
		return x.Vault
	}
	return nil
}

func (x *Settings_SecretOptions_Source) GetDirectory() *Settings_Directory {
	if x, ok := x.GetSource().(*Settings_SecretOptions_Source_Directory); ok {
		return x.Directory
	}
	return nil
}

type isSettings_SecretOptions_Source_Source interface {
	isSettings_SecretOptions_Source_Source()
}

type Settings_SecretOptions_Source_Kubernetes struct {
	Kubernetes *Settings_KubernetesSecrets `protobuf:"bytes,1,opt,name=kubernetes,proto3,oneof"`
}

type Settings_SecretOptions_Source_Vault struct {
	Vault *Settings_VaultSecrets `protobuf:"bytes,2,opt,name=vault,proto3,oneof"`
}

type Settings_SecretOptions_Source_Directory struct {
	Directory *Settings_Directory `protobuf:"bytes,3,opt,name=directory,proto3,oneof"`
}

func (*Settings_SecretOptions_Source_Kubernetes) isSettings_SecretOptions_Source_Source() {}

func (*Settings_SecretOptions_Source_Vault) isSettings_SecretOptions_Source_Source() {}

func (*Settings_SecretOptions_Source_Directory) isSettings_SecretOptions_Source_Source() {}

type Settings_DiscoveryOptions_UdsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable upstream discovery service. Defaults to true.
	Enabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Map of labels to watch. Only services which match all of the selectors specified here will be discovered by UDS.
	WatchLabels map[string]string `protobuf:"bytes,2,rep,name=watch_labels,json=watchLabels,proto3" json:"watch_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Settings_DiscoveryOptions_UdsOptions) Reset() {
	*x = Settings_DiscoveryOptions_UdsOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_DiscoveryOptions_UdsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_DiscoveryOptions_UdsOptions) ProtoMessage() {}

func (x *Settings_DiscoveryOptions_UdsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_DiscoveryOptions_UdsOptions.ProtoReflect.Descriptor instead.
func (*Settings_DiscoveryOptions_UdsOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 10, 0}
}

func (x *Settings_DiscoveryOptions_UdsOptions) GetEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Settings_DiscoveryOptions_UdsOptions) GetWatchLabels() map[string]string {
	if x != nil {
		return x.WatchLabels
	}
	return nil
}

type Settings_DiscoveryOptions_FdsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: The GraphQL feature will be removed in a future release.
	// Enable function discovery service on GraphQL gRPC and OpenApi upstreams. Defaults to true.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
	GraphqlEnabled *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=graphql_enabled,json=graphqlEnabled,proto3" json:"graphql_enabled,omitempty"`
}

func (x *Settings_DiscoveryOptions_FdsOptions) Reset() {
	*x = Settings_DiscoveryOptions_FdsOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_DiscoveryOptions_FdsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_DiscoveryOptions_FdsOptions) ProtoMessage() {}

func (x *Settings_DiscoveryOptions_FdsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_DiscoveryOptions_FdsOptions.ProtoReflect.Descriptor instead.
func (*Settings_DiscoveryOptions_FdsOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 10, 1}
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
func (x *Settings_DiscoveryOptions_FdsOptions) GetGraphqlEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.GraphqlEnabled
	}
	return nil
}

// service discovery options for Consul
type Settings_ConsulConfiguration_ServiceDiscoveryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use this parameter to restrict the data centers that will be considered when discovering and routing to
	// services. If not provided, Gloo will use all available data centers.
	DataCenters []string `protobuf:"bytes,1,rep,name=data_centers,json=dataCenters,proto3" json:"data_centers,omitempty"`
}

func (x *Settings_ConsulConfiguration_ServiceDiscoveryOptions) Reset() {
	*x = Settings_ConsulConfiguration_ServiceDiscoveryOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_ConsulConfiguration_ServiceDiscoveryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_ConsulConfiguration_ServiceDiscoveryOptions) ProtoMessage() {}

func (x *Settings_ConsulConfiguration_ServiceDiscoveryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_ConsulConfiguration_ServiceDiscoveryOptions.ProtoReflect.Descriptor instead.
func (*Settings_ConsulConfiguration_ServiceDiscoveryOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 11, 0}
}

func (x *Settings_ConsulConfiguration_ServiceDiscoveryOptions) GetDataCenters() []string {
	if x != nil {
		return x.DataCenters
	}
	return nil
}

type Settings_KubernetesConfiguration_RateLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum queries-per-second Gloo can make to the Kubernetes API Server. Defaults to 50.
	QPS float32 `protobuf:"fixed32,1,opt,name=QPS,proto3" json:"QPS,omitempty"`
	// Maximum burst for throttle. When a steady state of QPS requests per second,
	// this is an additional number of allowed, to allow for short bursts. Defaults to 100.
	Burst uint32 `protobuf:"varint,2,opt,name=burst,proto3" json:"burst,omitempty"`
}

func (x *Settings_KubernetesConfiguration_RateLimits) Reset() {
	*x = Settings_KubernetesConfiguration_RateLimits{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_KubernetesConfiguration_RateLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_KubernetesConfiguration_RateLimits) ProtoMessage() {}

func (x *Settings_KubernetesConfiguration_RateLimits) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_KubernetesConfiguration_RateLimits.ProtoReflect.Descriptor instead.
func (*Settings_KubernetesConfiguration_RateLimits) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 13, 0}
}

func (x *Settings_KubernetesConfiguration_RateLimits) GetQPS() float32 {
	if x != nil {
		return x.QPS
	}
	return 0
}

func (x *Settings_KubernetesConfiguration_RateLimits) GetBurst() uint32 {
	if x != nil {
		return x.Burst
	}
	return 0
}

// Provides settings related to the observability pod's interactions with grafana
type Settings_ObservabilityOptions_GrafanaIntegration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (UInt32Value) Grafana allows dashboards to be added to specific folders by specifying that folder's ID
	// If unset, automatic upstream dashboards are generated in the general folder (folderId: 0).
	// If set, the observability deployment will try to create/move all upstreams without their own folderId
	// to the folder specified here, after verifying that a folder with such an ID exists.
	// Be aware that grafana requires a folders ID, which
	// should not be confused with the similarly-named and more easily accessible folder UID value.
	// If individual upstream dashboards need to be placed specific granafa folders, they can be given their own
	// folder IDs by annotating the upstreams. The annotation key must be
	// 'observability.solo.io/dashboard_folder_id' and the value must be the folder ID.
	// Folder IDs can be retrieved from grafana with a pair of terminal commands:
	// 1. Port forward the grafana deployment to surface its API:
	// kubectl -n gloo-system port-forward deployment/glooe-grafana 3000
	// 2. Request all folder data (after admin:admin is replaced with the correct credentials):
	// curl http://admin:admin@localhost:3000/api/folders
	DefaultDashboardFolderId *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=default_dashboard_folder_id,json=defaultDashboardFolderId,proto3" json:"default_dashboard_folder_id,omitempty"`
	// The prefix of the UIDs and Titles for all dashboards created on grafana.
	// This is restricted to 20 characters.
	DashboardPrefix string `protobuf:"bytes,2,opt,name=dashboard_prefix,json=dashboardPrefix,proto3" json:"dashboard_prefix,omitempty"`
	// Extra parameters when querying metrics from Grafana dashboards.
	// This string will be appended to every query for metrics in the definition of all gloo managed dashboards.
	// It can consist of multiple query parameters separated by a comma.
	// For example `cluster="some-cluster",gateway_proxy_id="proxy-2"`
	ExtraMetricQueryParameters string `protobuf:"bytes,3,opt,name=extra_metric_query_parameters,json=extraMetricQueryParameters,proto3" json:"extra_metric_query_parameters,omitempty"`
}

func (x *Settings_ObservabilityOptions_GrafanaIntegration) Reset() {
	*x = Settings_ObservabilityOptions_GrafanaIntegration{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_ObservabilityOptions_GrafanaIntegration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_ObservabilityOptions_GrafanaIntegration) ProtoMessage() {}

func (x *Settings_ObservabilityOptions_GrafanaIntegration) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_ObservabilityOptions_GrafanaIntegration.ProtoReflect.Descriptor instead.
func (*Settings_ObservabilityOptions_GrafanaIntegration) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 15, 0}
}

func (x *Settings_ObservabilityOptions_GrafanaIntegration) GetDefaultDashboardFolderId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.DefaultDashboardFolderId
	}
	return nil
}

func (x *Settings_ObservabilityOptions_GrafanaIntegration) GetDashboardPrefix() string {
	if x != nil {
		return x.DashboardPrefix
	}
	return ""
}

func (x *Settings_ObservabilityOptions_GrafanaIntegration) GetExtraMetricQueryParameters() string {
	if x != nil {
		return x.ExtraMetricQueryParameters
	}
	return ""
}

type Settings_ObservabilityOptions_MetricLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each (key, value) pair in the map defines a label to be applied. Keys specify the name of the label
	// (e.g. "namespace"). Values specify the jsonpath (https://kubernetes.io/docs/reference/kubectl/jsonpath/)
	// string corresponding to the field of a resource to use as the label value (e.g. "{.metadata.namespace}").
	// For example, if labelToPath = {name: '{.metadata.name}', namespace: '{.metadata.namespace}'} for
	// Upstream.v1.gateway.solo.io, the following metric would be produced:
	// validation_gateway_solo_io_upstream_config_status{name="default-petstore-8080",namespace="gloo-system"} 0
	LabelToPath map[string]string `protobuf:"bytes,1,rep,name=labelToPath,proto3" json:"labelToPath,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Settings_ObservabilityOptions_MetricLabels) Reset() {
	*x = Settings_ObservabilityOptions_MetricLabels{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings_ObservabilityOptions_MetricLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings_ObservabilityOptions_MetricLabels) ProtoMessage() {}

func (x *Settings_ObservabilityOptions_MetricLabels) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings_ObservabilityOptions_MetricLabels.ProtoReflect.Descriptor instead.
func (*Settings_ObservabilityOptions_MetricLabels) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{0, 15, 1}
}

func (x *Settings_ObservabilityOptions_MetricLabels) GetLabelToPath() map[string]string {
	if x != nil {
		return x.LabelToPath
	}
	return nil
}

type GlooOptions_AWSOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CredentialsFetcher:
	//
	//	*GlooOptions_AWSOptions_EnableCredentialsDiscovey
	//	*GlooOptions_AWSOptions_ServiceAccountCredentials
	CredentialsFetcher isGlooOptions_AWSOptions_CredentialsFetcher `protobuf_oneof:"credentials_fetcher"`
	// Send downstream path and method as `x-envoy-original-path` and
	// `x-envoy-original-method` headers on the request to AWS lambda.
	// Defaults to false.
	PropagateOriginalRouting *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=propagate_original_routing,json=propagateOriginalRouting,proto3" json:"propagate_original_routing,omitempty"`
	// Sets cadence for refreshing credentials for Service Account.
	// Does nothing if Service account is not set.
	// Does not affect the default filewatch for service account only augments it.
	// Defaults to not refreshing on time period. Suggested is 15 minutes.
	CredentialRefreshDelay *durationpb.Duration `protobuf:"bytes,4,opt,name=credential_refresh_delay,json=credentialRefreshDelay,proto3" json:"credential_refresh_delay,omitempty"`
	// Sets the unsafe behavior where a route can specify a lambda upstream
	// but not set the function to target. It will use the first function which
	// if discovery is enabled the first function is the first function name alphabetically
	// from the last discovery run. This means that the lambda being pointed to could change.
	// Defaults to false.
	FallbackToFirstFunction *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=fallback_to_first_function,json=fallbackToFirstFunction,proto3" json:"fallback_to_first_function,omitempty"`
}

func (x *GlooOptions_AWSOptions) Reset() {
	*x = GlooOptions_AWSOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlooOptions_AWSOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlooOptions_AWSOptions) ProtoMessage() {}

func (x *GlooOptions_AWSOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlooOptions_AWSOptions.ProtoReflect.Descriptor instead.
func (*GlooOptions_AWSOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{4, 0}
}

func (m *GlooOptions_AWSOptions) GetCredentialsFetcher() isGlooOptions_AWSOptions_CredentialsFetcher {
	if m != nil {
		return m.CredentialsFetcher
	}
	return nil
}

func (x *GlooOptions_AWSOptions) GetEnableCredentialsDiscovey() bool {
	if x, ok := x.GetCredentialsFetcher().(*GlooOptions_AWSOptions_EnableCredentialsDiscovey); ok {
		return x.EnableCredentialsDiscovey
	}
	return false
}

func (x *GlooOptions_AWSOptions) GetServiceAccountCredentials() *aws.AWSLambdaConfig_ServiceAccountCredentials {
	if x, ok := x.GetCredentialsFetcher().(*GlooOptions_AWSOptions_ServiceAccountCredentials); ok {
		return x.ServiceAccountCredentials
	}
	return nil
}

func (x *GlooOptions_AWSOptions) GetPropagateOriginalRouting() *wrapperspb.BoolValue {
	if x != nil {
		return x.PropagateOriginalRouting
	}
	return nil
}

func (x *GlooOptions_AWSOptions) GetCredentialRefreshDelay() *durationpb.Duration {
	if x != nil {
		return x.CredentialRefreshDelay
	}
	return nil
}

func (x *GlooOptions_AWSOptions) GetFallbackToFirstFunction() *wrapperspb.BoolValue {
	if x != nil {
		return x.FallbackToFirstFunction
	}
	return nil
}

type isGlooOptions_AWSOptions_CredentialsFetcher interface {
	isGlooOptions_AWSOptions_CredentialsFetcher()
}

type GlooOptions_AWSOptions_EnableCredentialsDiscovey struct {
	// Enable credential discovery via IAM; when this is set, there's no need provide a secret
	// on the upstream when running on AWS environment.
	//
	// Note: This should **ONLY** be enabled when running in an AWS environment, as the AWS
	// code blocks the envoy main thread. This should be negligible when running inside AWS.
	EnableCredentialsDiscovey bool `protobuf:"varint,1,opt,name=enable_credentials_discovey,json=enableCredentialsDiscovey,proto3,oneof"`
}

type GlooOptions_AWSOptions_ServiceAccountCredentials struct {
	// Use projected service account token, and role arn to create temporary
	// credentials with which to authenticate lambda requests.
	// This functionality is meant to work along side EKS service account to IAM
	// binding functionality as outlined here:
	// https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
	//
	// If the following environment values are not present in the gateway-proxy, this option cannot be used.
	//  1. AWS_WEB_IDENTITY_TOKEN_FILE
	//  2. AWS_ROLE_ARN
	//
	// The role which will be assumed by the credentials will be the one specified by AWS_ROLE_ARN, however, this
	// can also be overwritten in the AWS Upstream spec via the role_arn field
	//
	// If they are not specified envoy will NACK the config update, which will show up in the logs when running OS Gloo.
	// When running Gloo enterprise it will be reflected in the prometheus stat: "glooe.solo.io/xds/nack"
	//
	// In order to specify the aws sts endpoint, both the cluster and uri must be set.
	// This is due to an envoy limitation which cannot infer the host or path from the cluster,
	// and therefore must be explicitly specified via the uri
	ServiceAccountCredentials *aws.AWSLambdaConfig_ServiceAccountCredentials `protobuf:"bytes,2,opt,name=service_account_credentials,json=serviceAccountCredentials,proto3,oneof"`
}

func (*GlooOptions_AWSOptions_EnableCredentialsDiscovey) isGlooOptions_AWSOptions_CredentialsFetcher() {
}

func (*GlooOptions_AWSOptions_ServiceAccountCredentials) isGlooOptions_AWSOptions_CredentialsFetcher() {
}

// Policy for how Gloo should handle invalid config
// [#next-free-field: 15]
type GlooOptions_InvalidConfigPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if set to `true`, Gloo removes any routes from the provided configuration
	// which point to a missing destination. Routes that are removed in this way
	// will instead return a configurable direct response to clients. When routes are replaced,
	// Gloo will configure Envoy with a special listener which serves direct responses.
	//
	// Note: enabling this option allows Gloo to accept partially valid proxy configurations.
	ReplaceInvalidRoutes bool `protobuf:"varint,1,opt,name=replace_invalid_routes,json=replaceInvalidRoutes,proto3" json:"replace_invalid_routes,omitempty"`
	// replaced routes reply to clients with this response code.
	// default is 404.
	InvalidRouteResponseCode uint32 `protobuf:"varint,2,opt,name=invalid_route_response_code,json=invalidRouteResponseCode,proto3" json:"invalid_route_response_code,omitempty"`
	// replaced routes reply to clients with this response body.
	// default is 'Gloo Edge has invalid configuration. Administrators should run `glooctl check` to find and fix config errors.'
	InvalidRouteResponseBody string `protobuf:"bytes,3,opt,name=invalid_route_response_body,json=invalidRouteResponseBody,proto3" json:"invalid_route_response_body,omitempty"`
}

func (x *GlooOptions_InvalidConfigPolicy) Reset() {
	*x = GlooOptions_InvalidConfigPolicy{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlooOptions_InvalidConfigPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlooOptions_InvalidConfigPolicy) ProtoMessage() {}

func (x *GlooOptions_InvalidConfigPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlooOptions_InvalidConfigPolicy.ProtoReflect.Descriptor instead.
func (*GlooOptions_InvalidConfigPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{4, 1}
}

func (x *GlooOptions_InvalidConfigPolicy) GetReplaceInvalidRoutes() bool {
	if x != nil {
		return x.ReplaceInvalidRoutes
	}
	return false
}

func (x *GlooOptions_InvalidConfigPolicy) GetInvalidRouteResponseCode() uint32 {
	if x != nil {
		return x.InvalidRouteResponseCode
	}
	return 0
}

func (x *GlooOptions_InvalidConfigPolicy) GetInvalidRouteResponseBody() string {
	if x != nil {
		return x.InvalidRouteResponseBody
	}
	return ""
}

type GlooOptions_IstioOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set to false to disable adding X-Forwarded-Host header in Istio integration
	// Defaults to true
	// Warning: This value is deprecated and will be removed in a future release. Also, you cannot use this value with a Kubernetes Gateway API proxy.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
	AppendXForwardedHost *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=append_x_forwarded_host,json=appendXForwardedHost,proto3" json:"append_x_forwarded_host,omitempty"`
	// Set to true to enable automatic mTLS for all upstreams. Istio integration must be enabled for this to take effect.
	// Defaults to false
	EnableAutoMtls *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=enable_auto_mtls,json=enableAutoMtls,proto3" json:"enable_auto_mtls,omitempty"`
	// Istio integration is enabled via global.istioIntegration.enabled on the helm chart.
	// If enabled, an istio-proxy container and sds container are assumed to exist alongside the
	// gateway proxy. These containers are created by enabling the istioIntegration.enabled option in the helm chart.
	// Defaults to false
	EnableIntegration *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=enable_integration,json=enableIntegration,proto3" json:"enable_integration,omitempty"`
}

func (x *GlooOptions_IstioOptions) Reset() {
	*x = GlooOptions_IstioOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlooOptions_IstioOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlooOptions_IstioOptions) ProtoMessage() {}

func (x *GlooOptions_IstioOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlooOptions_IstioOptions.ProtoReflect.Descriptor instead.
func (*GlooOptions_IstioOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{4, 2}
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
func (x *GlooOptions_IstioOptions) GetAppendXForwardedHost() *wrapperspb.BoolValue {
	if x != nil {
		return x.AppendXForwardedHost
	}
	return nil
}

func (x *GlooOptions_IstioOptions) GetEnableAutoMtls() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableAutoMtls
	}
	return nil
}

func (x *GlooOptions_IstioOptions) GetEnableIntegration() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableIntegration
	}
	return nil
}

// options for configuring admission control / validation
type GatewayOptions_ValidationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the `gloo` proxy validation grpc server. Defaults to `gloo:9988`.
	// This field is required in order to enable fine-grained admission control.
	ProxyValidationServerAddr string `protobuf:"bytes,2,opt,name=proxy_validation_server_addr,json=proxyValidationServerAddr,proto3" json:"proxy_validation_server_addr,omitempty"`
	// Path to TLS Certificate for Kubernetes Validating webhook. Defaults to `/etc/gateway/validation-certs/tls.crt`.
	ValidationWebhookTlsCert string `protobuf:"bytes,3,opt,name=validation_webhook_tls_cert,json=validationWebhookTlsCert,proto3" json:"validation_webhook_tls_cert,omitempty"`
	// Path to TLS Private Key for Kubernetes Validating webhook. Defaults to `/etc/gateway/validation-certs/tls.key`.
	ValidationWebhookTlsKey string `protobuf:"bytes,4,opt,name=validation_webhook_tls_key,json=validationWebhookTlsKey,proto3" json:"validation_webhook_tls_key,omitempty"`
	// Deprecated: the Gateway and the Gloo pods are now merged together, there are no longer
	// requests made to a Gloo Validation server.
	// When Gateway cannot communicate with Gloo (e.g. Gloo is offline)
	// resources will be rejected by default.
	// Enable the `ignoreGlooValidationFailure` to prevent the Validation server from rejecting
	// resources due to network errors.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
	IgnoreGlooValidationFailure bool `protobuf:"varint,5,opt,name=ignore_gloo_validation_failure,json=ignoreGlooValidationFailure,proto3" json:"ignore_gloo_validation_failure,omitempty"`
	// Always accept resources even if validation produced an error.
	// Validation will still log the error and increment the validation.gateway.solo.io/resources_rejected stat.
	// Currently defaults to true - must be set to `false` to prevent writing invalid resources to storage.
	AlwaysAccept *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=always_accept,json=alwaysAccept,proto3" json:"always_accept,omitempty"`
	// Accept resources if validation produced a warning (defaults to true).
	// By setting to false, this means that validation will start rejecting resources that would result
	// in warnings, rather than just those that would result in errors. Note that this setting has no impact on
	// Kubernetes Gateway API validation, as warnings will always be allowed in that context.
	AllowWarnings *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=allow_warnings,json=allowWarnings,proto3" json:"allow_warnings,omitempty"`
	// Deprecated: See `server_enabled` and consider configuring it to `false` instead.
	// Write a warning to route resources if validation produced a route ordering warning (defaults to false).
	// By setting to true, this means that Gloo will start assigning warnings to resources that would result
	// in route short-circuiting within a virtual host, for example:
	//   - prefix routes that make later routes unreachable
	//   - regex routes that make later routes unreachable
	//   - duplicate matchers
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
	WarnRouteShortCircuiting *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=warn_route_short_circuiting,json=warnRouteShortCircuiting,proto3" json:"warn_route_short_circuiting,omitempty"`
	// By default gloo will attempt to validate transformations by calling out to a local envoy binary in `validate` mode.
	// Calling this local envoy binary can become slow when done many times during a single validation.
	// Setting this to true will stop gloo from calling out to envoy to validate the transformations, which may speed up the
	// validation time considerably, but may also cause the transformation config to fail after being sent to envoy.
	// When disabling this, ensure that your transformations are valid prior to applying them.
	DisableTransformationValidation *wrapperspb.BoolValue `protobuf:"bytes,9,opt,name=disable_transformation_validation,json=disableTransformationValidation,proto3" json:"disable_transformation_validation,omitempty"`
	// By default, gRPC validation messages between gateway and gloo pods have a max message size of 100 MB.
	// Setting this value sets the gRPC max message size in bytes for the gloo validation server. This should
	// only be changed if necessary.
	// If not included, the gRPC max message size will be the default of 100 MB.
	ValidationServerGrpcMaxSizeBytes *wrapperspb.Int32Value `protobuf:"bytes,11,opt,name=validation_server_grpc_max_size_bytes,json=validationServerGrpcMaxSizeBytes,proto3" json:"validation_server_grpc_max_size_bytes,omitempty"`
	// By providing the validation field (parent of this object) the user is implicitly opting into validation.
	// This field allows the user to opt out of the validation server, while still configuring pre-existing fields
	// such as `warn_route_short_circuiting` and `disable_transformation_validation`.
	//
	// If not included, the validation server will be enabled.
	ServerEnabled *wrapperspb.BoolValue `protobuf:"bytes,12,opt,name=server_enabled,json=serverEnabled,proto3" json:"server_enabled,omitempty"`
	// Allows configuring validation to report a missing TLS secret referenced by a SslConfig or UpstreamSslConfig
	// as a warning instead of an error. This will allow for eventually consistent workloads, but will also permit
	// the accidental deletion of secrets being referenced, which would cause disruption in traffic.
	WarnMissingTlsSecret *wrapperspb.BoolValue `protobuf:"bytes,13,opt,name=warn_missing_tls_secret,json=warnMissingTlsSecret,proto3" json:"warn_missing_tls_secret,omitempty"`
	// Configures the Gloo translation loop to send the final product of translation through Envoy
	// validation mode. This has an negative impact on the total translation throughput, but it
	// helps ensure the configuration will not be nacked when served to Envoy.
	//
	// This feature is disabled by default and is not recommended for production deployments unless
	// the performance implications are well understood and acceptable.
	FullEnvoyValidation *wrapperspb.BoolValue `protobuf:"bytes,14,opt,name=full_envoy_validation,json=fullEnvoyValidation,proto3" json:"full_envoy_validation,omitempty"`
}

func (x *GatewayOptions_ValidationOptions) Reset() {
	*x = GatewayOptions_ValidationOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayOptions_ValidationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayOptions_ValidationOptions) ProtoMessage() {}

func (x *GatewayOptions_ValidationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayOptions_ValidationOptions.ProtoReflect.Descriptor instead.
func (*GatewayOptions_ValidationOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GatewayOptions_ValidationOptions) GetProxyValidationServerAddr() string {
	if x != nil {
		return x.ProxyValidationServerAddr
	}
	return ""
}

func (x *GatewayOptions_ValidationOptions) GetValidationWebhookTlsCert() string {
	if x != nil {
		return x.ValidationWebhookTlsCert
	}
	return ""
}

func (x *GatewayOptions_ValidationOptions) GetValidationWebhookTlsKey() string {
	if x != nil {
		return x.ValidationWebhookTlsKey
	}
	return ""
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
func (x *GatewayOptions_ValidationOptions) GetIgnoreGlooValidationFailure() bool {
	if x != nil {
		return x.IgnoreGlooValidationFailure
	}
	return false
}

func (x *GatewayOptions_ValidationOptions) GetAlwaysAccept() *wrapperspb.BoolValue {
	if x != nil {
		return x.AlwaysAccept
	}
	return nil
}

func (x *GatewayOptions_ValidationOptions) GetAllowWarnings() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowWarnings
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/settings.proto.
func (x *GatewayOptions_ValidationOptions) GetWarnRouteShortCircuiting() *wrapperspb.BoolValue {
	if x != nil {
		return x.WarnRouteShortCircuiting
	}
	return nil
}

func (x *GatewayOptions_ValidationOptions) GetDisableTransformationValidation() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableTransformationValidation
	}
	return nil
}

func (x *GatewayOptions_ValidationOptions) GetValidationServerGrpcMaxSizeBytes() *wrapperspb.Int32Value {
	if x != nil {
		return x.ValidationServerGrpcMaxSizeBytes
	}
	return nil
}

func (x *GatewayOptions_ValidationOptions) GetServerEnabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.ServerEnabled
	}
	return nil
}

func (x *GatewayOptions_ValidationOptions) GetWarnMissingTlsSecret() *wrapperspb.BoolValue {
	if x != nil {
		return x.WarnMissingTlsSecret
	}
	return nil
}

func (x *GatewayOptions_ValidationOptions) GetFullEnvoyValidation() *wrapperspb.BoolValue {
	if x != nil {
		return x.FullEnvoyValidation
	}
	return nil
}

type GraphqlOptions_SchemaChangeValidationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Schema definition updates can be considered safe, dangerous, or breaking.
	// If this field is set to true, then breaking schema updates will be rejected.
	// Defaults to false.
	RejectBreakingChanges *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=reject_breaking_changes,json=rejectBreakingChanges,proto3" json:"reject_breaking_changes,omitempty"`
	// We use [GraphQL Inspector](https://www.graphql-inspector.com/docs/essentials/diff) to detect breaking changes
	// to GraphQL schemas. This field allows for passing [processing rules](https://www.graphql-inspector.com/docs/essentials/diff#rules)
	// to GraphQL Inspector to customize how various change types are handled.
	ProcessingRules []GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule `protobuf:"varint,2,rep,packed,name=processing_rules,json=processingRules,proto3,enum=gloo.solo.io.GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule" json:"processing_rules,omitempty"`
}

func (x *GraphqlOptions_SchemaChangeValidationOptions) Reset() {
	*x = GraphqlOptions_SchemaChangeValidationOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GraphqlOptions_SchemaChangeValidationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphqlOptions_SchemaChangeValidationOptions) ProtoMessage() {}

func (x *GraphqlOptions_SchemaChangeValidationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphqlOptions_SchemaChangeValidationOptions.ProtoReflect.Descriptor instead.
func (*GraphqlOptions_SchemaChangeValidationOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GraphqlOptions_SchemaChangeValidationOptions) GetRejectBreakingChanges() *wrapperspb.BoolValue {
	if x != nil {
		return x.RejectBreakingChanges
	}
	return nil
}

func (x *GraphqlOptions_SchemaChangeValidationOptions) GetProcessingRules() []GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule {
	if x != nil {
		return x.ProcessingRules
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x12, 0x65, 0x78, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f,
	0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x6b, 0x69, 0x74, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x6b, 0x69, 0x74,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x6b, 0x69, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d,
	0x6b, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x59, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2f, 0x72,
	0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x55,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d,
	0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f,
	0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x63, 0x2f, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2f, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f,
	0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x6c,
	0x6f, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x73, 0x6c, 0x2f, 0x73, 0x73,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x77, 0x73,
	0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69,
	0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb,
	0x3a, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x18, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x72, 0x64, 0x73,
	0x48, 0x00, 0x52, 0x16, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x17, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x15, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x5f, 0x6b, 0x76, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x4b,
	0x76, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x4b, 0x76, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x18, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x48,
	0x01, 0x52, 0x16, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x48, 0x01, 0x52, 0x11, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x5a, 0x0a, 0x17, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x48, 0x01, 0x52, 0x15, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0e,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6b, 0x0a, 0x1a, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x73, 0x48, 0x02, 0x52, 0x18, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x19, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x02, 0x52, 0x17, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x5f, 0x6b, 0x76, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x4b, 0x76, 0x48, 0x02, 0x52, 0x16, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x4b, 0x76, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x64, 0x65, 0x76, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x6b,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x6b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x45, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x09, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x67, 0x6c, 0x6f, 0x6f, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x04, 0x67, 0x6c, 0x6f, 0x6f, 0x12, 0x36, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x42,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x12, 0x65, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x4e, 0x0a, 0x0a, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72,
	0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x04, 0x72, 0x62, 0x61, 0x63, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x04, 0x72, 0x62, 0x61, 0x63,
	0x12, 0x3b, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x12, 0x4d, 0x0a,
	0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x18, 0x21,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x45, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x45, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x12, 0x4d, 0x0a, 0x0e,
	0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x63, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x57, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x42, 0x04,
	0xb8, 0xf5, 0x04, 0x01, 0x52, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x14, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x14, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x75, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x71, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x63,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07,
	0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x57, 0x0a, 0x19, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x17, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x1a, 0xb6, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0xdd, 0x01, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x42,
	0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x10, 0x0a, 0x0e, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x72, 0x64, 0x73, 0x1a, 0x13, 0x0a, 0x11, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x1a, 0xff, 0x03, 0x0a, 0x0c, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6c,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x44, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x74, 0x6c, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x03, 0x61, 0x77,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x77, 0x73, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x77, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x1a, 0xb3, 0x02, 0x0a, 0x0c, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x77, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x61,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x61, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xe2, 0x01, 0x0a, 0x0e, 0x56, 0x61, 0x75,
	0x6c, 0x74, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x0f, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x1a, 0x25, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x4b, 0x76, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x6f,
	0x74, 0x4b, 0x65, 0x79, 0x1a, 0x16, 0x0a, 0x14, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x6d, 0x61, 0x70, 0x73, 0x1a, 0x29, 0x0a, 0x09,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0xdd, 0x01, 0x0a, 0x0e, 0x4b, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x43, 0x0a,
	0x1e, 0x6b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x6b, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x83, 0x05, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x08,
	0x66, 0x64, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x66, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x75, 0x64, 0x73, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0a, 0x75, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a,
	0x0b, 0x66, 0x64, 0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x64, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x66, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0xea, 0x01, 0x0a, 0x0a, 0x55, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a,
	0x3e, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x55, 0x0a, 0x0a, 0x46, 0x64, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a,
	0x0f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x35, 0x0a, 0x07, 0x46, 0x64, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x57, 0x48, 0x49, 0x54, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x1a, 0xd1, 0x05,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53,
	0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x36, 0x0a, 0x09, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x77, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x6f, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x64, 0x6e, 0x73, 0x5f, 0x70, 0x6f,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x64, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x1a, 0x3c, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x1a, 0xfe, 0x03, 0x0a, 0x24, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73,
	0x65, 0x54, 0x6c, 0x73, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x54, 0x6c, 0x73, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x52, 0x06, 0x72, 0x6f, 0x6f,
	0x74, 0x43, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x6c, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x54, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4e,
	0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x14, 0x65, 0x64, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x65, 0x64, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x1a, 0xab, 0x01, 0x0a, 0x17, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a,
	0x0a, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x0a,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0x34, 0x0a, 0x0a, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x51, 0x50, 0x53, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x51, 0x50, 0x53, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75,
	0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74,
	0x1a, 0x62, 0x0a, 0x11, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x45, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb6, 0x06, 0x0a, 0x14, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6e, 0x0a,
	0x12, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x67, 0x72, 0x61, 0x66, 0x61,
	0x6e, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01,
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0xdf, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x61, 0x66, 0x61, 0x6e,
	0x61, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x1b,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x41, 0x0a, 0x1d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xbb, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x6b, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x54, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x6f, 0x50,
	0x61, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54,
	0x6f, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x3e, 0x0a, 0x10, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x6f,
	0x50, 0x61, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x85, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x12, 0x82,
	0xf1, 0x04, 0x0e, 0x0a, 0x02, 0x73, 0x74, 0x12, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x22, 0xf5, 0x01, 0x0a,
	0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4f,
	0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x53, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x18, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x80, 0x02, 0x0a, 0x0f, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x73,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x53, 0x73, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x0d, 0x73, 0x73, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x63,
	0x0a, 0x12, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x12, 0x0a, 0x0b, 0x47, 0x6c,
	0x6f, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x78, 0x64, 0x73,
	0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x78, 0x64, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x30, 0x0a,
	0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x64,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x4d, 0x0a, 0x10, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x55,
	0x0a, 0x19, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x77, 0x61, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x57, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x61, 0x77, 0x73, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x6f, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0a, 0x61, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x15,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6c,
	0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x6f, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x13, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x46, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x77, 0x65, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x70, 0x63, 0x57, 0x65, 0x62, 0x12, 0x63, 0x0a,
	0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x67,
	0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x72, 0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x78, 0x64,
	0x73, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x58, 0x64, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x5f, 0x65, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x74, 0x45, 0x64, 0x73, 0x12, 0x6d, 0x0a, 0x26, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x6e, 0x73, 0x5f,
	0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x22, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x6e, 0x73, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x15, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x44, 0x65, 0x62, 0x75, 0x67,
	0x42, 0x69, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x72, 0x0a, 0x28, 0x6c, 0x6f, 0x67, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x24, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x64, 0x0a, 0x20,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x73, 0x63, 0x61, 0x70, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x6f, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0c, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x83, 0x04, 0x0a, 0x0a, 0x41, 0x57, 0x53, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40,
	0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x79,
	0x12, 0x93, 0x01, 0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x61, 0x77, 0x73, 0x5f, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x2e,
	0x41, 0x57, 0x53, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x19, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x53, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x57, 0x0a, 0x1a, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54,
	0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15,
	0x0a, 0x13, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x1a, 0xc9, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x34, 0x0a,
	0x16, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x1a, 0xf6, 0x01, 0x0a, 0x0c, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x55, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x78, 0x5f, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x14, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x58, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x74, 0x6c, 0x73, 0x12,
	0x49, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x15, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x5f, 0x77, 0x61, 0x79, 0x5f, 0x74,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x57, 0x61, 0x79, 0x54, 0x6c, 0x73, 0x22,
	0xdb, 0x0d, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x4e, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x21, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1d, 0x72, 0x65, 0x61, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1a,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5b,
	0x0a, 0x17, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x56, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x67, 0x0a,
	0x23, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x42, 0x79, 0x53, 0x73, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x1a, 0xbe, 0x07, 0x0a,
	0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6c, 0x73, 0x43, 0x65,
	0x72, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x12,
	0x47, 0x0a, 0x1e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x6f, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1b, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x47, 0x6c, 0x6f, 0x6f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x61, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5d, 0x0a, 0x1b,
	0x77, 0x61, 0x72, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x18, 0x77, 0x61, 0x72, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x66, 0x0a, 0x21, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x25, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x47, 0x72, 0x70, 0x63, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x17, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x14, 0x77, 0x61, 0x72, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x6c,
	0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x13, 0x66, 0x75, 0x6c, 0x6c, 0x45, 0x6e, 0x76, 0x6f, 0x79, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22, 0x97, 0x01,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x14, 0x61, 0x70, 0x69,
	0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x61, 0x70, 0x69, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xba, 0x04, 0x0a, 0x0e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x20, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x1d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0xa1, 0x03, 0x0a, 0x1d, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x52, 0x0a, 0x17, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x15, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x49, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xb5, 0x01, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x44, 0x41,
	0x4e, 0x47, 0x45, 0x52, 0x4f, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x42, 0x52, 0x45, 0x41, 0x4b,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x4f, 0x55, 0x53,
	0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52,
	0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x53, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x55, 0x4c, 0x45, 0x5f,
	0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x04, 0x42, 0x3e, 0xb8, 0xf5, 0x04, 0x01, 0xc0, 0xf5, 0x04, 0x01, 0xd0, 0xf5,
	0x04, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescData = file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDesc
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_goTypes = []any{
	(Settings_DiscoveryOptions_FdsMode)(0),                           // 0: gloo.solo.io.Settings.DiscoveryOptions.FdsMode
	(GraphqlOptions_SchemaChangeValidationOptions_ProcessingRule)(0), // 1: gloo.solo.io.GraphqlOptions.SchemaChangeValidationOptions.ProcessingRule
	(*Settings)(nil),                                      // 2: gloo.solo.io.Settings
	(*LabelSelector)(nil),                                 // 3: gloo.solo.io.LabelSelector
	(*LabelSelectorRequirement)(nil),                      // 4: gloo.solo.io.LabelSelectorRequirement
	(*UpstreamOptions)(nil),                               // 5: gloo.solo.io.UpstreamOptions
	(*GlooOptions)(nil),                                   // 6: gloo.solo.io.GlooOptions
	(*VirtualServiceOptions)(nil),                         // 7: gloo.solo.io.VirtualServiceOptions
	(*GatewayOptions)(nil),                                // 8: gloo.solo.io.GatewayOptions
	(*ConsoleOptions)(nil),                                // 9: gloo.solo.io.ConsoleOptions
	(*GraphqlOptions)(nil),                                // 10: gloo.solo.io.GraphqlOptions
	(*Settings_SecretOptions)(nil),                        // 11: gloo.solo.io.Settings.SecretOptions
	(*Settings_KubernetesCrds)(nil),                       // 12: gloo.solo.io.Settings.KubernetesCrds
	(*Settings_KubernetesSecrets)(nil),                    // 13: gloo.solo.io.Settings.KubernetesSecrets
	(*Settings_VaultSecrets)(nil),                         // 14: gloo.solo.io.Settings.VaultSecrets
	(*Settings_VaultAwsAuth)(nil),                         // 15: gloo.solo.io.Settings.VaultAwsAuth
	(*Settings_VaultTlsConfig)(nil),                       // 16: gloo.solo.io.Settings.VaultTlsConfig
	(*Settings_ConsulKv)(nil),                             // 17: gloo.solo.io.Settings.ConsulKv
	(*Settings_KubernetesConfigmaps)(nil),                 // 18: gloo.solo.io.Settings.KubernetesConfigmaps
	(*Settings_Directory)(nil),                            // 19: gloo.solo.io.Settings.Directory
	(*Settings_KnativeOptions)(nil),                       // 20: gloo.solo.io.Settings.KnativeOptions
	(*Settings_DiscoveryOptions)(nil),                     // 21: gloo.solo.io.Settings.DiscoveryOptions
	(*Settings_ConsulConfiguration)(nil),                  // 22: gloo.solo.io.Settings.ConsulConfiguration
	(*Settings_ConsulUpstreamDiscoveryConfiguration)(nil), // 23: gloo.solo.io.Settings.ConsulUpstreamDiscoveryConfiguration
	(*Settings_KubernetesConfiguration)(nil),              // 24: gloo.solo.io.Settings.KubernetesConfiguration
	nil,                                                   // 25: gloo.solo.io.Settings.NamedExtauthEntry
	(*Settings_ObservabilityOptions)(nil),                 // 26: gloo.solo.io.Settings.ObservabilityOptions
	(*Settings_SecretOptions_Source)(nil),                 // 27: gloo.solo.io.Settings.SecretOptions.Source
	(*Settings_DiscoveryOptions_UdsOptions)(nil),          // 28: gloo.solo.io.Settings.DiscoveryOptions.UdsOptions
	(*Settings_DiscoveryOptions_FdsOptions)(nil),          // 29: gloo.solo.io.Settings.DiscoveryOptions.FdsOptions
	nil, // 30: gloo.solo.io.Settings.DiscoveryOptions.UdsOptions.WatchLabelsEntry
	(*Settings_ConsulConfiguration_ServiceDiscoveryOptions)(nil), // 31: gloo.solo.io.Settings.ConsulConfiguration.ServiceDiscoveryOptions
	(*Settings_KubernetesConfiguration_RateLimits)(nil),          // 32: gloo.solo.io.Settings.KubernetesConfiguration.RateLimits
	(*Settings_ObservabilityOptions_GrafanaIntegration)(nil),     // 33: gloo.solo.io.Settings.ObservabilityOptions.GrafanaIntegration
	(*Settings_ObservabilityOptions_MetricLabels)(nil),           // 34: gloo.solo.io.Settings.ObservabilityOptions.MetricLabels
	nil,                                      // 35: gloo.solo.io.Settings.ObservabilityOptions.ConfigStatusMetricLabelsEntry
	nil,                                      // 36: gloo.solo.io.Settings.ObservabilityOptions.MetricLabels.LabelToPathEntry
	nil,                                      // 37: gloo.solo.io.LabelSelector.MatchLabelsEntry
	nil,                                      // 38: gloo.solo.io.UpstreamOptions.GlobalAnnotationsEntry
	(*GlooOptions_AWSOptions)(nil),           // 39: gloo.solo.io.GlooOptions.AWSOptions
	(*GlooOptions_InvalidConfigPolicy)(nil),  // 40: gloo.solo.io.GlooOptions.InvalidConfigPolicy
	(*GlooOptions_IstioOptions)(nil),         // 41: gloo.solo.io.GlooOptions.IstioOptions
	(*GatewayOptions_ValidationOptions)(nil), // 42: gloo.solo.io.GatewayOptions.ValidationOptions
	(*GraphqlOptions_SchemaChangeValidationOptions)(nil),  // 43: gloo.solo.io.GraphqlOptions.SchemaChangeValidationOptions
	(*durationpb.Duration)(nil),                           // 44: google.protobuf.Duration
	(*Extensions)(nil),                                    // 45: gloo.solo.io.Extensions
	(*ratelimit.ServiceSettings)(nil),                     // 46: ratelimit.options.gloo.solo.io.ServiceSettings
	(*ratelimit.Settings)(nil),                            // 47: ratelimit.options.gloo.solo.io.Settings
	(*rbac.Settings)(nil),                                 // 48: rbac.options.gloo.solo.io.Settings
	(*v1.Settings)(nil),                                   // 49: enterprise.gloo.solo.io.Settings
	(*caching.Settings)(nil),                              // 50: caching.options.gloo.solo.io.Settings
	(*core.Metadata)(nil),                                 // 51: core.solo.io.Metadata
	(*core.NamespacedStatuses)(nil),                       // 52: core.solo.io.NamespacedStatuses
	(*extproc.Settings)(nil),                              // 53: extproc.options.gloo.solo.io.Settings
	(*ssl.SslParameters)(nil),                             // 54: gloo.solo.io.SslParameters
	(*CircuitBreakerConfig)(nil),                          // 55: gloo.solo.io.CircuitBreakerConfig
	(*wrapperspb.BoolValue)(nil),                          // 56: google.protobuf.BoolValue
	(*wrapperspb.UInt32Value)(nil),                        // 57: google.protobuf.UInt32Value
	(*core.ResourceRef)(nil),                              // 58: core.solo.io.ResourceRef
	(consul.ConsulConsistencyModes)(0),                    // 59: consul.options.gloo.solo.io.ConsulConsistencyModes
	(*consul.QueryOptions)(nil),                           // 60: consul.options.gloo.solo.io.QueryOptions
	(*aws.AWSLambdaConfig_ServiceAccountCredentials)(nil), // 61: envoy.config.filter.http.aws_lambda.v2.AWSLambdaConfig.ServiceAccountCredentials
	(*wrapperspb.Int32Value)(nil),                         // 62: google.protobuf.Int32Value
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_depIdxs = []int32{
	12,  // 0: gloo.solo.io.Settings.kubernetes_config_source:type_name -> gloo.solo.io.Settings.KubernetesCrds
	19,  // 1: gloo.solo.io.Settings.directory_config_source:type_name -> gloo.solo.io.Settings.Directory
	17,  // 2: gloo.solo.io.Settings.consul_kv_source:type_name -> gloo.solo.io.Settings.ConsulKv
	13,  // 3: gloo.solo.io.Settings.kubernetes_secret_source:type_name -> gloo.solo.io.Settings.KubernetesSecrets
	14,  // 4: gloo.solo.io.Settings.vault_secret_source:type_name -> gloo.solo.io.Settings.VaultSecrets
	19,  // 5: gloo.solo.io.Settings.directory_secret_source:type_name -> gloo.solo.io.Settings.Directory
	11,  // 6: gloo.solo.io.Settings.secret_options:type_name -> gloo.solo.io.Settings.SecretOptions
	18,  // 7: gloo.solo.io.Settings.kubernetes_artifact_source:type_name -> gloo.solo.io.Settings.KubernetesConfigmaps
	19,  // 8: gloo.solo.io.Settings.directory_artifact_source:type_name -> gloo.solo.io.Settings.Directory
	17,  // 9: gloo.solo.io.Settings.consul_kv_artifact_source:type_name -> gloo.solo.io.Settings.ConsulKv
	44,  // 10: gloo.solo.io.Settings.refresh_rate:type_name -> google.protobuf.Duration
	20,  // 11: gloo.solo.io.Settings.knative:type_name -> gloo.solo.io.Settings.KnativeOptions
	21,  // 12: gloo.solo.io.Settings.discovery:type_name -> gloo.solo.io.Settings.DiscoveryOptions
	6,   // 13: gloo.solo.io.Settings.gloo:type_name -> gloo.solo.io.GlooOptions
	8,   // 14: gloo.solo.io.Settings.gateway:type_name -> gloo.solo.io.GatewayOptions
	22,  // 15: gloo.solo.io.Settings.consul:type_name -> gloo.solo.io.Settings.ConsulConfiguration
	23,  // 16: gloo.solo.io.Settings.consulDiscovery:type_name -> gloo.solo.io.Settings.ConsulUpstreamDiscoveryConfiguration
	24,  // 17: gloo.solo.io.Settings.kubernetes:type_name -> gloo.solo.io.Settings.KubernetesConfiguration
	45,  // 18: gloo.solo.io.Settings.extensions:type_name -> gloo.solo.io.Extensions
	46,  // 19: gloo.solo.io.Settings.ratelimit:type_name -> ratelimit.options.gloo.solo.io.ServiceSettings
	47,  // 20: gloo.solo.io.Settings.ratelimit_server:type_name -> ratelimit.options.gloo.solo.io.Settings
	48,  // 21: gloo.solo.io.Settings.rbac:type_name -> rbac.options.gloo.solo.io.Settings
	49,  // 22: gloo.solo.io.Settings.extauth:type_name -> enterprise.gloo.solo.io.Settings
	25,  // 23: gloo.solo.io.Settings.named_extauth:type_name -> gloo.solo.io.Settings.NamedExtauthEntry
	50,  // 24: gloo.solo.io.Settings.caching_server:type_name -> caching.options.gloo.solo.io.Settings
	51,  // 25: gloo.solo.io.Settings.metadata:type_name -> core.solo.io.Metadata
	52,  // 26: gloo.solo.io.Settings.namespaced_statuses:type_name -> core.solo.io.NamespacedStatuses
	26,  // 27: gloo.solo.io.Settings.observabilityOptions:type_name -> gloo.solo.io.Settings.ObservabilityOptions
	5,   // 28: gloo.solo.io.Settings.upstreamOptions:type_name -> gloo.solo.io.UpstreamOptions
	9,   // 29: gloo.solo.io.Settings.console_options:type_name -> gloo.solo.io.ConsoleOptions
	10,  // 30: gloo.solo.io.Settings.graphql_options:type_name -> gloo.solo.io.GraphqlOptions
	53,  // 31: gloo.solo.io.Settings.ext_proc:type_name -> extproc.options.gloo.solo.io.Settings
	3,   // 32: gloo.solo.io.Settings.watch_namespace_selectors:type_name -> gloo.solo.io.LabelSelector
	37,  // 33: gloo.solo.io.LabelSelector.match_labels:type_name -> gloo.solo.io.LabelSelector.MatchLabelsEntry
	4,   // 34: gloo.solo.io.LabelSelector.match_expressions:type_name -> gloo.solo.io.LabelSelectorRequirement
	54,  // 35: gloo.solo.io.UpstreamOptions.ssl_parameters:type_name -> gloo.solo.io.SslParameters
	38,  // 36: gloo.solo.io.UpstreamOptions.global_annotations:type_name -> gloo.solo.io.UpstreamOptions.GlobalAnnotationsEntry
	55,  // 37: gloo.solo.io.GlooOptions.circuit_breakers:type_name -> gloo.solo.io.CircuitBreakerConfig
	44,  // 38: gloo.solo.io.GlooOptions.endpoints_warming_timeout:type_name -> google.protobuf.Duration
	39,  // 39: gloo.solo.io.GlooOptions.aws_options:type_name -> gloo.solo.io.GlooOptions.AWSOptions
	40,  // 40: gloo.solo.io.GlooOptions.invalid_config_policy:type_name -> gloo.solo.io.GlooOptions.InvalidConfigPolicy
	56,  // 41: gloo.solo.io.GlooOptions.disable_grpc_web:type_name -> google.protobuf.BoolValue
	56,  // 42: gloo.solo.io.GlooOptions.disable_proxy_garbage_collection:type_name -> google.protobuf.BoolValue
	57,  // 43: gloo.solo.io.GlooOptions.regex_max_program_size:type_name -> google.protobuf.UInt32Value
	56,  // 44: gloo.solo.io.GlooOptions.enable_rest_eds:type_name -> google.protobuf.BoolValue
	44,  // 45: gloo.solo.io.GlooOptions.failover_upstream_dns_polling_interval:type_name -> google.protobuf.Duration
	56,  // 46: gloo.solo.io.GlooOptions.remove_unused_filters:type_name -> google.protobuf.BoolValue
	56,  // 47: gloo.solo.io.GlooOptions.log_transformation_request_response_info:type_name -> google.protobuf.BoolValue
	56,  // 48: gloo.solo.io.GlooOptions.transformation_escape_characters:type_name -> google.protobuf.BoolValue
	41,  // 49: gloo.solo.io.GlooOptions.istio_options:type_name -> gloo.solo.io.GlooOptions.IstioOptions
	56,  // 50: gloo.solo.io.VirtualServiceOptions.one_way_tls:type_name -> google.protobuf.BoolValue
	42,  // 51: gloo.solo.io.GatewayOptions.validation:type_name -> gloo.solo.io.GatewayOptions.ValidationOptions
	7,   // 52: gloo.solo.io.GatewayOptions.virtual_service_options:type_name -> gloo.solo.io.VirtualServiceOptions
	56,  // 53: gloo.solo.io.GatewayOptions.persist_proxy_spec:type_name -> google.protobuf.BoolValue
	56,  // 54: gloo.solo.io.GatewayOptions.enable_gateway_controller:type_name -> google.protobuf.BoolValue
	56,  // 55: gloo.solo.io.GatewayOptions.isolate_virtual_hosts_by_ssl_config:type_name -> google.protobuf.BoolValue
	56,  // 56: gloo.solo.io.GatewayOptions.translate_empty_gateways:type_name -> google.protobuf.BoolValue
	56,  // 57: gloo.solo.io.ConsoleOptions.read_only:type_name -> google.protobuf.BoolValue
	56,  // 58: gloo.solo.io.ConsoleOptions.api_explorer_enabled:type_name -> google.protobuf.BoolValue
	43,  // 59: gloo.solo.io.GraphqlOptions.schema_change_validation_options:type_name -> gloo.solo.io.GraphqlOptions.SchemaChangeValidationOptions
	27,  // 60: gloo.solo.io.Settings.SecretOptions.sources:type_name -> gloo.solo.io.Settings.SecretOptions.Source
	56,  // 61: gloo.solo.io.Settings.VaultSecrets.insecure:type_name -> google.protobuf.BoolValue
	16,  // 62: gloo.solo.io.Settings.VaultSecrets.tls_config:type_name -> gloo.solo.io.Settings.VaultTlsConfig
	15,  // 63: gloo.solo.io.Settings.VaultSecrets.aws:type_name -> gloo.solo.io.Settings.VaultAwsAuth
	56,  // 64: gloo.solo.io.Settings.VaultTlsConfig.insecure:type_name -> google.protobuf.BoolValue
	0,   // 65: gloo.solo.io.Settings.DiscoveryOptions.fds_mode:type_name -> gloo.solo.io.Settings.DiscoveryOptions.FdsMode
	28,  // 66: gloo.solo.io.Settings.DiscoveryOptions.uds_options:type_name -> gloo.solo.io.Settings.DiscoveryOptions.UdsOptions
	29,  // 67: gloo.solo.io.Settings.DiscoveryOptions.fds_options:type_name -> gloo.solo.io.Settings.DiscoveryOptions.FdsOptions
	56,  // 68: gloo.solo.io.Settings.ConsulConfiguration.insecure_skip_verify:type_name -> google.protobuf.BoolValue
	44,  // 69: gloo.solo.io.Settings.ConsulConfiguration.wait_time:type_name -> google.protobuf.Duration
	31,  // 70: gloo.solo.io.Settings.ConsulConfiguration.service_discovery:type_name -> gloo.solo.io.Settings.ConsulConfiguration.ServiceDiscoveryOptions
	44,  // 71: gloo.solo.io.Settings.ConsulConfiguration.dns_polling_interval:type_name -> google.protobuf.Duration
	58,  // 72: gloo.solo.io.Settings.ConsulUpstreamDiscoveryConfiguration.rootCa:type_name -> core.solo.io.ResourceRef
	59,  // 73: gloo.solo.io.Settings.ConsulUpstreamDiscoveryConfiguration.consistencyMode:type_name -> consul.options.gloo.solo.io.ConsulConsistencyModes
	60,  // 74: gloo.solo.io.Settings.ConsulUpstreamDiscoveryConfiguration.query_options:type_name -> consul.options.gloo.solo.io.QueryOptions
	56,  // 75: gloo.solo.io.Settings.ConsulUpstreamDiscoveryConfiguration.eds_blocking_queries:type_name -> google.protobuf.BoolValue
	32,  // 76: gloo.solo.io.Settings.KubernetesConfiguration.rate_limits:type_name -> gloo.solo.io.Settings.KubernetesConfiguration.RateLimits
	49,  // 77: gloo.solo.io.Settings.NamedExtauthEntry.value:type_name -> enterprise.gloo.solo.io.Settings
	33,  // 78: gloo.solo.io.Settings.ObservabilityOptions.grafanaIntegration:type_name -> gloo.solo.io.Settings.ObservabilityOptions.GrafanaIntegration
	35,  // 79: gloo.solo.io.Settings.ObservabilityOptions.configStatusMetricLabels:type_name -> gloo.solo.io.Settings.ObservabilityOptions.ConfigStatusMetricLabelsEntry
	13,  // 80: gloo.solo.io.Settings.SecretOptions.Source.kubernetes:type_name -> gloo.solo.io.Settings.KubernetesSecrets
	14,  // 81: gloo.solo.io.Settings.SecretOptions.Source.vault:type_name -> gloo.solo.io.Settings.VaultSecrets
	19,  // 82: gloo.solo.io.Settings.SecretOptions.Source.directory:type_name -> gloo.solo.io.Settings.Directory
	56,  // 83: gloo.solo.io.Settings.DiscoveryOptions.UdsOptions.enabled:type_name -> google.protobuf.BoolValue
	30,  // 84: gloo.solo.io.Settings.DiscoveryOptions.UdsOptions.watch_labels:type_name -> gloo.solo.io.Settings.DiscoveryOptions.UdsOptions.WatchLabelsEntry
	56,  // 85: gloo.solo.io.Settings.DiscoveryOptions.FdsOptions.graphql_enabled:type_name -> google.protobuf.BoolValue
	57,  // 86: gloo.solo.io.Settings.ObservabilityOptions.GrafanaIntegration.default_dashboard_folder_id:type_name -> google.protobuf.UInt32Value
	36,  // 87: gloo.solo.io.Settings.ObservabilityOptions.MetricLabels.labelToPath:type_name -> gloo.solo.io.Settings.ObservabilityOptions.MetricLabels.LabelToPathEntry
	34,  // 88: gloo.solo.io.Settings.ObservabilityOptions.ConfigStatusMetricLabelsEntry.value:type_name -> gloo.solo.io.Settings.ObservabilityOptions.MetricLabels
	61,  // 89: gloo.solo.io.GlooOptions.AWSOptions.service_account_credentials:type_name -> envoy.config.filter.http.aws_lambda.v2.AWSLambdaConfig.ServiceAccountCredentials
	56,  // 90: gloo.solo.io.GlooOptions.AWSOptions.propagate_original_routing:type_name -> google.protobuf.BoolValue
	44,  // 91: gloo.solo.io.GlooOptions.AWSOptions.credential_refresh_delay:type_name -> google.protobuf.Duration
	56,  // 92: gloo.solo.io.GlooOptions.AWSOptions.fallback_to_first_function:type_name -> google.protobuf.BoolValue
	56,  // 93: gloo.solo.io.GlooOptions.IstioOptions.append_x_forwarded_host:type_name -> google.protobuf.BoolValue
	56,  // 94: gloo.solo.io.GlooOptions.IstioOptions.enable_auto_mtls:type_name -> google.protobuf.BoolValue
	56,  // 95: gloo.solo.io.GlooOptions.IstioOptions.enable_integration:type_name -> google.protobuf.BoolValue
	56,  // 96: gloo.solo.io.GatewayOptions.ValidationOptions.always_accept:type_name -> google.protobuf.BoolValue
	56,  // 97: gloo.solo.io.GatewayOptions.ValidationOptions.allow_warnings:type_name -> google.protobuf.BoolValue
	56,  // 98: gloo.solo.io.GatewayOptions.ValidationOptions.warn_route_short_circuiting:type_name -> google.protobuf.BoolValue
	56,  // 99: gloo.solo.io.GatewayOptions.ValidationOptions.disable_transformation_validation:type_name -> google.protobuf.BoolValue
	62,  // 100: gloo.solo.io.GatewayOptions.ValidationOptions.validation_server_grpc_max_size_bytes:type_name -> google.protobuf.Int32Value
	56,  // 101: gloo.solo.io.GatewayOptions.ValidationOptions.server_enabled:type_name -> google.protobuf.BoolValue
	56,  // 102: gloo.solo.io.GatewayOptions.ValidationOptions.warn_missing_tls_secret:type_name -> google.protobuf.BoolValue
	56,  // 103: gloo.solo.io.GatewayOptions.ValidationOptions.full_envoy_validation:type_name -> google.protobuf.BoolValue
	56,  // 104: gloo.solo.io.GraphqlOptions.SchemaChangeValidationOptions.reject_breaking_changes:type_name -> google.protobuf.BoolValue
	1,   // 105: gloo.solo.io.GraphqlOptions.SchemaChangeValidationOptions.processing_rules:type_name -> gloo.solo.io.GraphqlOptions.SchemaChangeValidationOptions.ProcessingRule
	106, // [106:106] is the sub-list for method output_type
	106, // [106:106] is the sub-list for method input_type
	106, // [106:106] is the sub-list for extension type_name
	106, // [106:106] is the sub-list for extension extendee
	0,   // [0:106] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_init() }
func file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_extensions_proto_init()
	file_github_com_solo_io_gloo_projects_gloo_api_v1_circuit_breaker_proto_init()
	file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[0].OneofWrappers = []any{
		(*Settings_KubernetesConfigSource)(nil),
		(*Settings_DirectoryConfigSource)(nil),
		(*Settings_ConsulKvSource)(nil),
		(*Settings_KubernetesSecretSource)(nil),
		(*Settings_VaultSecretSource)(nil),
		(*Settings_DirectorySecretSource)(nil),
		(*Settings_KubernetesArtifactSource)(nil),
		(*Settings_DirectoryArtifactSource)(nil),
		(*Settings_ConsulKvArtifactSource)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[12].OneofWrappers = []any{
		(*Settings_VaultSecrets_AccessToken)(nil),
		(*Settings_VaultSecrets_Aws)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[25].OneofWrappers = []any{
		(*Settings_SecretOptions_Source_Kubernetes)(nil),
		(*Settings_SecretOptions_Source_Vault)(nil),
		(*Settings_SecretOptions_Source_Directory)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes[37].OneofWrappers = []any{
		(*GlooOptions_AWSOptions_EnableCredentialsDiscovey)(nil),
		(*GlooOptions_AWSOptions_ServiceAccountCredentials)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_rawDesc = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_settings_proto_depIdxs = nil
}
