// Mostly taken from https://github.com/envoyproxy/envoy/blob/317efa53c6add02fa9533fc8f93f10f590077dca/api/envoy/config/accesslog/v3/accesslog.proto
// because we are passing through the filter settings and therefore using the same message definitions

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/als/als.proto

package als

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v3 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/config/core/v3"
	v32 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/config/route/v3"
	v31 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/type/v3"
	ssl "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/ssl"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	_ "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	v1 "go.opentelemetry.io/proto/otlp/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ComparisonFilter_Op int32

const (
	// =
	ComparisonFilter_EQ ComparisonFilter_Op = 0
	// >=
	ComparisonFilter_GE ComparisonFilter_Op = 1
	// <=
	ComparisonFilter_LE ComparisonFilter_Op = 2
)

// Enum value maps for ComparisonFilter_Op.
var (
	ComparisonFilter_Op_name = map[int32]string{
		0: "EQ",
		1: "GE",
		2: "LE",
	}
	ComparisonFilter_Op_value = map[string]int32{
		"EQ": 0,
		"GE": 1,
		"LE": 2,
	}
)

func (x ComparisonFilter_Op) Enum() *ComparisonFilter_Op {
	p := new(ComparisonFilter_Op)
	*p = x
	return p
}

func (x ComparisonFilter_Op) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonFilter_Op) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_enumTypes[0].Descriptor()
}

func (ComparisonFilter_Op) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_enumTypes[0]
}

func (x ComparisonFilter_Op) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComparisonFilter_Op.Descriptor instead.
func (ComparisonFilter_Op) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{7, 0}
}

type GrpcStatusFilter_Status int32

const (
	GrpcStatusFilter_OK                  GrpcStatusFilter_Status = 0
	GrpcStatusFilter_CANCELED            GrpcStatusFilter_Status = 1
	GrpcStatusFilter_UNKNOWN             GrpcStatusFilter_Status = 2
	GrpcStatusFilter_INVALID_ARGUMENT    GrpcStatusFilter_Status = 3
	GrpcStatusFilter_DEADLINE_EXCEEDED   GrpcStatusFilter_Status = 4
	GrpcStatusFilter_NOT_FOUND           GrpcStatusFilter_Status = 5
	GrpcStatusFilter_ALREADY_EXISTS      GrpcStatusFilter_Status = 6
	GrpcStatusFilter_PERMISSION_DENIED   GrpcStatusFilter_Status = 7
	GrpcStatusFilter_RESOURCE_EXHAUSTED  GrpcStatusFilter_Status = 8
	GrpcStatusFilter_FAILED_PRECONDITION GrpcStatusFilter_Status = 9
	GrpcStatusFilter_ABORTED             GrpcStatusFilter_Status = 10
	GrpcStatusFilter_OUT_OF_RANGE        GrpcStatusFilter_Status = 11
	GrpcStatusFilter_UNIMPLEMENTED       GrpcStatusFilter_Status = 12
	GrpcStatusFilter_INTERNAL            GrpcStatusFilter_Status = 13
	GrpcStatusFilter_UNAVAILABLE         GrpcStatusFilter_Status = 14
	GrpcStatusFilter_DATA_LOSS           GrpcStatusFilter_Status = 15
	GrpcStatusFilter_UNAUTHENTICATED     GrpcStatusFilter_Status = 16
)

// Enum value maps for GrpcStatusFilter_Status.
var (
	GrpcStatusFilter_Status_name = map[int32]string{
		0:  "OK",
		1:  "CANCELED",
		2:  "UNKNOWN",
		3:  "INVALID_ARGUMENT",
		4:  "DEADLINE_EXCEEDED",
		5:  "NOT_FOUND",
		6:  "ALREADY_EXISTS",
		7:  "PERMISSION_DENIED",
		8:  "RESOURCE_EXHAUSTED",
		9:  "FAILED_PRECONDITION",
		10: "ABORTED",
		11: "OUT_OF_RANGE",
		12: "UNIMPLEMENTED",
		13: "INTERNAL",
		14: "UNAVAILABLE",
		15: "DATA_LOSS",
		16: "UNAUTHENTICATED",
	}
	GrpcStatusFilter_Status_value = map[string]int32{
		"OK":                  0,
		"CANCELED":            1,
		"UNKNOWN":             2,
		"INVALID_ARGUMENT":    3,
		"DEADLINE_EXCEEDED":   4,
		"NOT_FOUND":           5,
		"ALREADY_EXISTS":      6,
		"PERMISSION_DENIED":   7,
		"RESOURCE_EXHAUSTED":  8,
		"FAILED_PRECONDITION": 9,
		"ABORTED":             10,
		"OUT_OF_RANGE":        11,
		"UNIMPLEMENTED":       12,
		"INTERNAL":            13,
		"UNAVAILABLE":         14,
		"DATA_LOSS":           15,
		"UNAUTHENTICATED":     16,
	}
)

func (x GrpcStatusFilter_Status) Enum() *GrpcStatusFilter_Status {
	p := new(GrpcStatusFilter_Status)
	*p = x
	return p
}

func (x GrpcStatusFilter_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrpcStatusFilter_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_enumTypes[1].Descriptor()
}

func (GrpcStatusFilter_Status) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_enumTypes[1]
}

func (x GrpcStatusFilter_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrpcStatusFilter_Status.Descriptor instead.
func (GrpcStatusFilter_Status) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{17, 0}
}

// Contains various settings for Envoy's access logging service.
// See here for more information: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/accesslog/v3/accesslog.proto
type AccessLoggingService struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessLog     []*AccessLog           `protobuf:"bytes,1,rep,name=access_log,json=accessLog,proto3" json:"access_log,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLoggingService) Reset() {
	*x = AccessLoggingService{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLoggingService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLoggingService) ProtoMessage() {}

func (x *AccessLoggingService) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLoggingService.ProtoReflect.Descriptor instead.
func (*AccessLoggingService) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{0}
}

func (x *AccessLoggingService) GetAccessLog() []*AccessLog {
	if x != nil {
		return x.AccessLog
	}
	return nil
}

type AccessLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// type of Access Logging service to implement
	//
	// Types that are valid to be assigned to OutputDestination:
	//
	//	*AccessLog_FileSink
	//	*AccessLog_GrpcService
	//	*AccessLog_OpenTelemetryService
	OutputDestination isAccessLog_OutputDestination `protobuf_oneof:"OutputDestination"`
	Filter            *AccessLogFilter              `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AccessLog) Reset() {
	*x = AccessLog{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog) ProtoMessage() {}

func (x *AccessLog) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog.ProtoReflect.Descriptor instead.
func (*AccessLog) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{1}
}

func (x *AccessLog) GetOutputDestination() isAccessLog_OutputDestination {
	if x != nil {
		return x.OutputDestination
	}
	return nil
}

func (x *AccessLog) GetFileSink() *FileSink {
	if x != nil {
		if x, ok := x.OutputDestination.(*AccessLog_FileSink); ok {
			return x.FileSink
		}
	}
	return nil
}

func (x *AccessLog) GetGrpcService() *GrpcService {
	if x != nil {
		if x, ok := x.OutputDestination.(*AccessLog_GrpcService); ok {
			return x.GrpcService
		}
	}
	return nil
}

func (x *AccessLog) GetOpenTelemetryService() *OpenTelemetryService {
	if x != nil {
		if x, ok := x.OutputDestination.(*AccessLog_OpenTelemetryService); ok {
			return x.OpenTelemetryService
		}
	}
	return nil
}

func (x *AccessLog) GetFilter() *AccessLogFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type isAccessLog_OutputDestination interface {
	isAccessLog_OutputDestination()
}

type AccessLog_FileSink struct {
	// Output access logs to local file
	FileSink *FileSink `protobuf:"bytes,2,opt,name=file_sink,json=fileSink,proto3,oneof"`
}

type AccessLog_GrpcService struct {
	// Send access logs to gRPC service
	GrpcService *GrpcService `protobuf:"bytes,3,opt,name=grpc_service,json=grpcService,proto3,oneof"`
}

type AccessLog_OpenTelemetryService struct {
	// Send access logs to OpenTelemetry service
	OpenTelemetryService *OpenTelemetryService `protobuf:"bytes,5,opt,name=open_telemetry_service,json=openTelemetryService,proto3,oneof"`
}

func (*AccessLog_FileSink) isAccessLog_OutputDestination() {}

func (*AccessLog_GrpcService) isAccessLog_OutputDestination() {}

func (*AccessLog_OpenTelemetryService) isAccessLog_OutputDestination() {}

type FileSink struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the file path to which the file access logging service will sink
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// the format which the logs should be outputted by
	//
	// Types that are valid to be assigned to OutputFormat:
	//
	//	*FileSink_StringFormat
	//	*FileSink_JsonFormat
	OutputFormat  isFileSink_OutputFormat `protobuf_oneof:"output_format"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileSink) Reset() {
	*x = FileSink{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileSink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSink) ProtoMessage() {}

func (x *FileSink) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSink.ProtoReflect.Descriptor instead.
func (*FileSink) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{2}
}

func (x *FileSink) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileSink) GetOutputFormat() isFileSink_OutputFormat {
	if x != nil {
		return x.OutputFormat
	}
	return nil
}

func (x *FileSink) GetStringFormat() string {
	if x != nil {
		if x, ok := x.OutputFormat.(*FileSink_StringFormat); ok {
			return x.StringFormat
		}
	}
	return ""
}

func (x *FileSink) GetJsonFormat() *structpb.Struct {
	if x != nil {
		if x, ok := x.OutputFormat.(*FileSink_JsonFormat); ok {
			return x.JsonFormat
		}
	}
	return nil
}

type isFileSink_OutputFormat interface {
	isFileSink_OutputFormat()
}

type FileSink_StringFormat struct {
	// the format string by which envoy will format the log lines
	// https://www.envoyproxy.io/docs/envoy/v1.14.1/configuration/observability/access_log#config-access-log-format-strings
	StringFormat string `protobuf:"bytes,2,opt,name=string_format,json=stringFormat,proto3,oneof"`
}

type FileSink_JsonFormat struct {
	// the format object by which to envoy will emit the logs in a structured way.
	// https://www.envoyproxy.io/docs/envoy/v1.14.1/configuration/observability/access_log#format-dictionaries
	JsonFormat *structpb.Struct `protobuf:"bytes,3,opt,name=json_format,json=jsonFormat,proto3,oneof"`
}

func (*FileSink_StringFormat) isFileSink_OutputFormat() {}

func (*FileSink_JsonFormat) isFileSink_OutputFormat() {}

type GrpcService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name of log stream
	LogName string `protobuf:"bytes,1,opt,name=log_name,json=logName,proto3" json:"log_name,omitempty"`
	// The static cluster defined in bootstrap config to route to
	//
	// Types that are valid to be assigned to ServiceRef:
	//
	//	*GrpcService_StaticClusterName
	ServiceRef                      isGrpcService_ServiceRef `protobuf_oneof:"service_ref"`
	AdditionalRequestHeadersToLog   []string                 `protobuf:"bytes,4,rep,name=additional_request_headers_to_log,json=additionalRequestHeadersToLog,proto3" json:"additional_request_headers_to_log,omitempty"`
	AdditionalResponseHeadersToLog  []string                 `protobuf:"bytes,5,rep,name=additional_response_headers_to_log,json=additionalResponseHeadersToLog,proto3" json:"additional_response_headers_to_log,omitempty"`
	AdditionalResponseTrailersToLog []string                 `protobuf:"bytes,6,rep,name=additional_response_trailers_to_log,json=additionalResponseTrailersToLog,proto3" json:"additional_response_trailers_to_log,omitempty"`
	// Additional filter state objects to log in filter_state_objects. Logger will call FilterState::Object::serializeAsProto to serialize the filter state object.
	// See https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/access_loggers/grpc/v3/als.proto#extensions-access-loggers-grpc-v3-commongrpcaccesslogconfig
	FilterStateObjectsToLog []string `protobuf:"bytes,7,rep,name=filter_state_objects_to_log,json=filterStateObjectsToLog,proto3" json:"filter_state_objects_to_log,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GrpcService) Reset() {
	*x = GrpcService{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcService) ProtoMessage() {}

func (x *GrpcService) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcService.ProtoReflect.Descriptor instead.
func (*GrpcService) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{3}
}

func (x *GrpcService) GetLogName() string {
	if x != nil {
		return x.LogName
	}
	return ""
}

func (x *GrpcService) GetServiceRef() isGrpcService_ServiceRef {
	if x != nil {
		return x.ServiceRef
	}
	return nil
}

func (x *GrpcService) GetStaticClusterName() string {
	if x != nil {
		if x, ok := x.ServiceRef.(*GrpcService_StaticClusterName); ok {
			return x.StaticClusterName
		}
	}
	return ""
}

func (x *GrpcService) GetAdditionalRequestHeadersToLog() []string {
	if x != nil {
		return x.AdditionalRequestHeadersToLog
	}
	return nil
}

func (x *GrpcService) GetAdditionalResponseHeadersToLog() []string {
	if x != nil {
		return x.AdditionalResponseHeadersToLog
	}
	return nil
}

func (x *GrpcService) GetAdditionalResponseTrailersToLog() []string {
	if x != nil {
		return x.AdditionalResponseTrailersToLog
	}
	return nil
}

func (x *GrpcService) GetFilterStateObjectsToLog() []string {
	if x != nil {
		return x.FilterStateObjectsToLog
	}
	return nil
}

type isGrpcService_ServiceRef interface {
	isGrpcService_ServiceRef()
}

type GrpcService_StaticClusterName struct {
	StaticClusterName string `protobuf:"bytes,2,opt,name=static_cluster_name,json=staticClusterName,proto3,oneof"`
}

func (*GrpcService_StaticClusterName) isGrpcService_ServiceRef() {}

type OpenTelemetryGrpcCollector struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// host and port of the OpenTelemetry collector
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// authority to use when connecting to the OpenTelemetry collector
	Authority string `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	// headers to use when connecting to the OpenTelemetry collector
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// if true, the connection to the OpenTelemetry collector will be insecure
	// (i.e. no TLS).
	Insecure bool `protobuf:"varint,4,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// ssl config to use when connecting to the OpenTelemetry collector,
	// if insecure is true, this will be ignored
	SslConfig *ssl.UpstreamSslConfig `protobuf:"bytes,5,opt,name=ssl_config,json=sslConfig,proto3" json:"ssl_config,omitempty"`
	// timeout to use when connecting to the OpenTelemetry collector
	Timeout       *durationpb.Duration `protobuf:"bytes,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenTelemetryGrpcCollector) Reset() {
	*x = OpenTelemetryGrpcCollector{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenTelemetryGrpcCollector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenTelemetryGrpcCollector) ProtoMessage() {}

func (x *OpenTelemetryGrpcCollector) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenTelemetryGrpcCollector.ProtoReflect.Descriptor instead.
func (*OpenTelemetryGrpcCollector) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{4}
}

func (x *OpenTelemetryGrpcCollector) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *OpenTelemetryGrpcCollector) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *OpenTelemetryGrpcCollector) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *OpenTelemetryGrpcCollector) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *OpenTelemetryGrpcCollector) GetSslConfig() *ssl.UpstreamSslConfig {
	if x != nil {
		return x.SslConfig
	}
	return nil
}

func (x *OpenTelemetryGrpcCollector) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type OpenTelemetryService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name of log stream
	LogName string `protobuf:"bytes,1,opt,name=log_name,json=logName,proto3" json:"log_name,omitempty"`
	// The destination to ship logs to
	// This is a oneof field, so we can easily add other destinations in the future
	// without breaking the API.
	//
	// Types that are valid to be assigned to Destination:
	//
	//	*OpenTelemetryService_Collector
	Destination isOpenTelemetryService_Destination `protobuf_oneof:"destination"`
	// Additional filter state objects to log in filter_state_objects. Logger will call FilterState::Object::serializeAsProto to serialize the filter state object.
	// See https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/access_loggers/grpc/v3/als.proto#extensions-access-loggers-grpc-v3-commongrpcaccesslogconfig
	FilterStateObjectsToLog []string `protobuf:"bytes,3,rep,name=filter_state_objects_to_log,json=filterStateObjectsToLog,proto3" json:"filter_state_objects_to_log,omitempty"`
	// If true, Envoy logger will not generate built-in resource labels like log_name,
	// zone_name, cluster_name, node_name
	DisableBuiltinLabels bool `protobuf:"varint,4,opt,name=disable_builtin_labels,json=disableBuiltinLabels,proto3" json:"disable_builtin_labels,omitempty"`
	// A value containing the body of the log record. Can be for example a human-readable
	// string message (including multi-line) describing the event in a free form or it can
	// be a structured data composed of arrays and maps of other values.
	//
	// Example: {"int_value": 1}
	// Example: {"string_value": "hello world"}
	// Example: {"kvlist_value": {"values": [{"key": "k1", "value": {"int_value": 1}}, {"key": "k2", "value": {"string_value": "v2"}}]}}
	// Example: {"array_value": {"values": [{"int_value": 1}, {"string_value": "hello world"}]}}
	Body *v1.AnyValue `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	// Additional attributes that describe the specific event occurrence. [Optional].
	// Attribute keys MUST be unique (it is not allowed to have more than one
	// attribute with the same key).
	//
	// Example: {"values": [{"key": "k1", "value": {"int_value": 1}}, {"key": "k2", "value": {"string_value": "v2"}}]}
	// Example: {"values": [{"key": "k1", "values": {kvlist_value: {values: [{"key": "k2", "value": {"int_value": 1}}, {"key": "k3", "value": {"string_value": "v2"}}]}}}]}
	// Example: {"values": [{"key": "k1", "value": {"int_value": 1}}, {"key": "k2", "value": {"string_value": "v2"}}]}
	Attributes    *v1.KeyValueList `protobuf:"bytes,6,opt,name=attributes,proto3" json:"attributes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenTelemetryService) Reset() {
	*x = OpenTelemetryService{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenTelemetryService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenTelemetryService) ProtoMessage() {}

func (x *OpenTelemetryService) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenTelemetryService.ProtoReflect.Descriptor instead.
func (*OpenTelemetryService) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{5}
}

func (x *OpenTelemetryService) GetLogName() string {
	if x != nil {
		return x.LogName
	}
	return ""
}

func (x *OpenTelemetryService) GetDestination() isOpenTelemetryService_Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *OpenTelemetryService) GetCollector() *OpenTelemetryGrpcCollector {
	if x != nil {
		if x, ok := x.Destination.(*OpenTelemetryService_Collector); ok {
			return x.Collector
		}
	}
	return nil
}

func (x *OpenTelemetryService) GetFilterStateObjectsToLog() []string {
	if x != nil {
		return x.FilterStateObjectsToLog
	}
	return nil
}

func (x *OpenTelemetryService) GetDisableBuiltinLabels() bool {
	if x != nil {
		return x.DisableBuiltinLabels
	}
	return false
}

func (x *OpenTelemetryService) GetBody() *v1.AnyValue {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *OpenTelemetryService) GetAttributes() *v1.KeyValueList {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type isOpenTelemetryService_Destination interface {
	isOpenTelemetryService_Destination()
}

type OpenTelemetryService_Collector struct {
	Collector *OpenTelemetryGrpcCollector `protobuf:"bytes,2,opt,name=collector,proto3,oneof"`
}

func (*OpenTelemetryService_Collector) isOpenTelemetryService_Destination() {}

type AccessLogFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to FilterSpecifier:
	//
	//	*AccessLogFilter_StatusCodeFilter
	//	*AccessLogFilter_DurationFilter
	//	*AccessLogFilter_NotHealthCheckFilter
	//	*AccessLogFilter_TraceableFilter
	//	*AccessLogFilter_RuntimeFilter
	//	*AccessLogFilter_AndFilter
	//	*AccessLogFilter_OrFilter
	//	*AccessLogFilter_HeaderFilter
	//	*AccessLogFilter_ResponseFlagFilter
	//	*AccessLogFilter_GrpcStatusFilter
	FilterSpecifier isAccessLogFilter_FilterSpecifier `protobuf_oneof:"filter_specifier"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AccessLogFilter) Reset() {
	*x = AccessLogFilter{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLogFilter) ProtoMessage() {}

func (x *AccessLogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLogFilter.ProtoReflect.Descriptor instead.
func (*AccessLogFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{6}
}

func (x *AccessLogFilter) GetFilterSpecifier() isAccessLogFilter_FilterSpecifier {
	if x != nil {
		return x.FilterSpecifier
	}
	return nil
}

func (x *AccessLogFilter) GetStatusCodeFilter() *StatusCodeFilter {
	if x != nil {
		if x, ok := x.FilterSpecifier.(*AccessLogFilter_StatusCodeFilter); ok {
			return x.StatusCodeFilter
		}
	}
	return nil
}

func (x *AccessLogFilter) GetDurationFilter() *DurationFilter {
	if x != nil {
		if x, ok := x.FilterSpecifier.(*AccessLogFilter_DurationFilter); ok {
			return x.DurationFilter
		}
	}
	return nil
}

func (x *AccessLogFilter) GetNotHealthCheckFilter() *NotHealthCheckFilter {
	if x != nil {
		if x, ok := x.FilterSpecifier.(*AccessLogFilter_NotHealthCheckFilter); ok {
			return x.NotHealthCheckFilter
		}
	}
	return nil
}

func (x *AccessLogFilter) GetTraceableFilter() *TraceableFilter {
	if x != nil {
		if x, ok := x.FilterSpecifier.(*AccessLogFilter_TraceableFilter); ok {
			return x.TraceableFilter
		}
	}
	return nil
}

func (x *AccessLogFilter) GetRuntimeFilter() *RuntimeFilter {
	if x != nil {
		if x, ok := x.FilterSpecifier.(*AccessLogFilter_RuntimeFilter); ok {
			return x.RuntimeFilter
		}
	}
	return nil
}

func (x *AccessLogFilter) GetAndFilter() *AndFilter {
	if x != nil {
		if x, ok := x.FilterSpecifier.(*AccessLogFilter_AndFilter); ok {
			return x.AndFilter
		}
	}
	return nil
}

func (x *AccessLogFilter) GetOrFilter() *OrFilter {
	if x != nil {
		if x, ok := x.FilterSpecifier.(*AccessLogFilter_OrFilter); ok {
			return x.OrFilter
		}
	}
	return nil
}

func (x *AccessLogFilter) GetHeaderFilter() *HeaderFilter {
	if x != nil {
		if x, ok := x.FilterSpecifier.(*AccessLogFilter_HeaderFilter); ok {
			return x.HeaderFilter
		}
	}
	return nil
}

func (x *AccessLogFilter) GetResponseFlagFilter() *ResponseFlagFilter {
	if x != nil {
		if x, ok := x.FilterSpecifier.(*AccessLogFilter_ResponseFlagFilter); ok {
			return x.ResponseFlagFilter
		}
	}
	return nil
}

func (x *AccessLogFilter) GetGrpcStatusFilter() *GrpcStatusFilter {
	if x != nil {
		if x, ok := x.FilterSpecifier.(*AccessLogFilter_GrpcStatusFilter); ok {
			return x.GrpcStatusFilter
		}
	}
	return nil
}

type isAccessLogFilter_FilterSpecifier interface {
	isAccessLogFilter_FilterSpecifier()
}

type AccessLogFilter_StatusCodeFilter struct {
	// Status code filter.
	StatusCodeFilter *StatusCodeFilter `protobuf:"bytes,1,opt,name=status_code_filter,json=statusCodeFilter,proto3,oneof"`
}

type AccessLogFilter_DurationFilter struct {
	// Duration filter.
	DurationFilter *DurationFilter `protobuf:"bytes,2,opt,name=duration_filter,json=durationFilter,proto3,oneof"`
}

type AccessLogFilter_NotHealthCheckFilter struct {
	// Not health check filter.
	NotHealthCheckFilter *NotHealthCheckFilter `protobuf:"bytes,3,opt,name=not_health_check_filter,json=notHealthCheckFilter,proto3,oneof"`
}

type AccessLogFilter_TraceableFilter struct {
	// Traceable filter.
	TraceableFilter *TraceableFilter `protobuf:"bytes,4,opt,name=traceable_filter,json=traceableFilter,proto3,oneof"`
}

type AccessLogFilter_RuntimeFilter struct {
	// Runtime filter.
	RuntimeFilter *RuntimeFilter `protobuf:"bytes,5,opt,name=runtime_filter,json=runtimeFilter,proto3,oneof"`
}

type AccessLogFilter_AndFilter struct {
	// And filter.
	AndFilter *AndFilter `protobuf:"bytes,6,opt,name=and_filter,json=andFilter,proto3,oneof"`
}

type AccessLogFilter_OrFilter struct {
	// Or filter.
	OrFilter *OrFilter `protobuf:"bytes,7,opt,name=or_filter,json=orFilter,proto3,oneof"`
}

type AccessLogFilter_HeaderFilter struct {
	// Header filter.
	HeaderFilter *HeaderFilter `protobuf:"bytes,8,opt,name=header_filter,json=headerFilter,proto3,oneof"`
}

type AccessLogFilter_ResponseFlagFilter struct {
	// Response flag filter.
	ResponseFlagFilter *ResponseFlagFilter `protobuf:"bytes,9,opt,name=response_flag_filter,json=responseFlagFilter,proto3,oneof"`
}

type AccessLogFilter_GrpcStatusFilter struct {
	// gRPC status filter.
	GrpcStatusFilter *GrpcStatusFilter `protobuf:"bytes,10,opt,name=grpc_status_filter,json=grpcStatusFilter,proto3,oneof"`
}

func (*AccessLogFilter_StatusCodeFilter) isAccessLogFilter_FilterSpecifier() {}

func (*AccessLogFilter_DurationFilter) isAccessLogFilter_FilterSpecifier() {}

func (*AccessLogFilter_NotHealthCheckFilter) isAccessLogFilter_FilterSpecifier() {}

func (*AccessLogFilter_TraceableFilter) isAccessLogFilter_FilterSpecifier() {}

func (*AccessLogFilter_RuntimeFilter) isAccessLogFilter_FilterSpecifier() {}

func (*AccessLogFilter_AndFilter) isAccessLogFilter_FilterSpecifier() {}

func (*AccessLogFilter_OrFilter) isAccessLogFilter_FilterSpecifier() {}

func (*AccessLogFilter_HeaderFilter) isAccessLogFilter_FilterSpecifier() {}

func (*AccessLogFilter_ResponseFlagFilter) isAccessLogFilter_FilterSpecifier() {}

func (*AccessLogFilter_GrpcStatusFilter) isAccessLogFilter_FilterSpecifier() {}

// Filter on an integer comparison.
type ComparisonFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Comparison operator.
	Op ComparisonFilter_Op `protobuf:"varint,1,opt,name=op,proto3,enum=als.options.gloo.solo.io.ComparisonFilter_Op" json:"op,omitempty"`
	// Value to compare against. Note that the `defaultValue` field must be defined unless
	// the `runtimeKey` matches a key that is defined in Envoy's [runtime configuration layer](https://www.envoyproxy.io/docs/envoy/v1.30.0/configuration/operations/runtime#config-runtime-bootstrap).
	// Gloo Gateway does not include a key by default. To specify a key-value pair, use the
	// [gatewayProxies.NAME.customStaticLayer]({{< versioned_link_path fromRoot="/reference/helm_chart_values/" >}})
	// Helm value or set the key at runtime by using the gateway proxy admin interface.
	Value         *v3.RuntimeUInt32 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComparisonFilter) Reset() {
	*x = ComparisonFilter{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComparisonFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonFilter) ProtoMessage() {}

func (x *ComparisonFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonFilter.ProtoReflect.Descriptor instead.
func (*ComparisonFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{7}
}

func (x *ComparisonFilter) GetOp() ComparisonFilter_Op {
	if x != nil {
		return x.Op
	}
	return ComparisonFilter_EQ
}

func (x *ComparisonFilter) GetValue() *v3.RuntimeUInt32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Filters on HTTP response/status code.
type StatusCodeFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Comparison.
	Comparison    *ComparisonFilter `protobuf:"bytes,1,opt,name=comparison,proto3" json:"comparison,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusCodeFilter) Reset() {
	*x = StatusCodeFilter{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusCodeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCodeFilter) ProtoMessage() {}

func (x *StatusCodeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusCodeFilter.ProtoReflect.Descriptor instead.
func (*StatusCodeFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{8}
}

func (x *StatusCodeFilter) GetComparison() *ComparisonFilter {
	if x != nil {
		return x.Comparison
	}
	return nil
}

// Filters on total request duration in milliseconds.
type DurationFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Comparison.
	Comparison    *ComparisonFilter `protobuf:"bytes,1,opt,name=comparison,proto3" json:"comparison,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DurationFilter) Reset() {
	*x = DurationFilter{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DurationFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationFilter) ProtoMessage() {}

func (x *DurationFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationFilter.ProtoReflect.Descriptor instead.
func (*DurationFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{9}
}

func (x *DurationFilter) GetComparison() *ComparisonFilter {
	if x != nil {
		return x.Comparison
	}
	return nil
}

// Filters for requests that are not health check requests. A health check
// request is marked by the health check filter.
type NotHealthCheckFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotHealthCheckFilter) Reset() {
	*x = NotHealthCheckFilter{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotHealthCheckFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotHealthCheckFilter) ProtoMessage() {}

func (x *NotHealthCheckFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotHealthCheckFilter.ProtoReflect.Descriptor instead.
func (*NotHealthCheckFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{10}
}

// Filters for requests that are traceable. See the tracing overview for more
// information on how a request becomes traceable.
type TraceableFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceableFilter) Reset() {
	*x = TraceableFilter{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceableFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceableFilter) ProtoMessage() {}

func (x *TraceableFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceableFilter.ProtoReflect.Descriptor instead.
func (*TraceableFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{11}
}

// Filters for random sampling of requests.
type RuntimeFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Runtime key to get an optional overridden numerator for use in the
	// `percent_sampled` field. If found in runtime, this value will replace the
	// default numerator.
	RuntimeKey string `protobuf:"bytes,1,opt,name=runtime_key,json=runtimeKey,proto3" json:"runtime_key,omitempty"`
	// The default sampling percentage. If not specified, defaults to 0% with
	// denominator of 100.
	PercentSampled *v31.FractionalPercent `protobuf:"bytes,2,opt,name=percent_sampled,json=percentSampled,proto3" json:"percent_sampled,omitempty"`
	// By default, sampling pivots on the header
	// :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` being
	// present. If :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`
	// is present, the filter will consistently sample across multiple hosts based
	// on the runtime key value and the value extracted from
	// :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`. If it is
	// missing, or `use_independent_randomness` is set to true, the filter will
	// randomly sample based on the runtime key value alone.
	// `use_independent_randomness` can be used for logging kill switches within
	// complex nested :ref:`AndFilter
	// <envoy_v3_api_msg_config.accesslog.v3.AndFilter>` and :ref:`OrFilter
	// <envoy_v3_api_msg_config.accesslog.v3.OrFilter>` blocks that are easier to
	// reason about from a probability perspective (i.e., setting to true will
	// cause the filter to behave like an independent random variable when
	// composed within logical operator filters).
	UseIndependentRandomness bool `protobuf:"varint,3,opt,name=use_independent_randomness,json=useIndependentRandomness,proto3" json:"use_independent_randomness,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *RuntimeFilter) Reset() {
	*x = RuntimeFilter{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeFilter) ProtoMessage() {}

func (x *RuntimeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeFilter.ProtoReflect.Descriptor instead.
func (*RuntimeFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{12}
}

func (x *RuntimeFilter) GetRuntimeKey() string {
	if x != nil {
		return x.RuntimeKey
	}
	return ""
}

func (x *RuntimeFilter) GetPercentSampled() *v31.FractionalPercent {
	if x != nil {
		return x.PercentSampled
	}
	return nil
}

func (x *RuntimeFilter) GetUseIndependentRandomness() bool {
	if x != nil {
		return x.UseIndependentRandomness
	}
	return false
}

// Performs a logical “and” operation on the result of each filter in filters.
// Filters are evaluated sequentially and if one of them returns false, the
// filter returns false immediately.
type AndFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filters       []*AccessLogFilter     `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AndFilter) Reset() {
	*x = AndFilter{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AndFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndFilter) ProtoMessage() {}

func (x *AndFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndFilter.ProtoReflect.Descriptor instead.
func (*AndFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{13}
}

func (x *AndFilter) GetFilters() []*AccessLogFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Performs a logical “or” operation on the result of each individual filter.
// Filters are evaluated sequentially and if one of them returns true, the
// filter returns true immediately.
type OrFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filters       []*AccessLogFilter     `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrFilter) Reset() {
	*x = OrFilter{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrFilter) ProtoMessage() {}

func (x *OrFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrFilter.ProtoReflect.Descriptor instead.
func (*OrFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{14}
}

func (x *OrFilter) GetFilters() []*AccessLogFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Filters requests based on the presence or value of a request header.
type HeaderFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Only requests with a header which matches the specified HeaderMatcher will
	// pass the filter check.
	Header        *v32.HeaderMatcher `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeaderFilter) Reset() {
	*x = HeaderFilter{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderFilter) ProtoMessage() {}

func (x *HeaderFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderFilter.ProtoReflect.Descriptor instead.
func (*HeaderFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{15}
}

func (x *HeaderFilter) GetHeader() *v32.HeaderMatcher {
	if x != nil {
		return x.Header
	}
	return nil
}

// Filters requests that received responses with an Envoy response flag set.
// A list of the response flags can be found
// in the access log formatter
// :ref:`documentation<config_access_log_format_response_flags>`.
type ResponseFlagFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Only responses with the any of the flags listed in this field will be
	// logged. This field is optional. If it is not specified, then any response
	// flag will pass the filter check.
	Flags         []string `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseFlagFilter) Reset() {
	*x = ResponseFlagFilter{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseFlagFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFlagFilter) ProtoMessage() {}

func (x *ResponseFlagFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFlagFilter.ProtoReflect.Descriptor instead.
func (*ResponseFlagFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{16}
}

func (x *ResponseFlagFilter) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

// Filters gRPC requests based on their response status. If a gRPC status is not
// provided, the filter will infer the status from the HTTP status code.
type GrpcStatusFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Logs only responses that have any one of the gRPC statuses in this field.
	Statuses []GrpcStatusFilter_Status `protobuf:"varint,1,rep,packed,name=statuses,proto3,enum=als.options.gloo.solo.io.GrpcStatusFilter_Status" json:"statuses,omitempty"`
	// If included and set to true, the filter will instead block all responses
	// with a gRPC status or inferred gRPC status enumerated in statuses, and
	// allow all other responses.
	Exclude       bool `protobuf:"varint,2,opt,name=exclude,proto3" json:"exclude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GrpcStatusFilter) Reset() {
	*x = GrpcStatusFilter{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GrpcStatusFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcStatusFilter) ProtoMessage() {}

func (x *GrpcStatusFilter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcStatusFilter.ProtoReflect.Descriptor instead.
func (*GrpcStatusFilter) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP(), []int{17}
}

func (x *GrpcStatusFilter) GetStatuses() []GrpcStatusFilter_Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *GrpcStatusFilter) GetExclude() bool {
	if x != nil {
		return x.Exclude
	}
	return false
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDesc = "" +
	"\n" +
	"Bgithub.com/solo-io/gloo/projects/gloo/api/v1/options/als/als.proto\x12\x18als.options.gloo.solo.io\x1a\x12extproto/ext.proto\x1a,github.com/solo-io/solo-kit/api/v1/ref.proto\x1a\x17validate/validate.proto\x1a:github.com/solo-io/gloo/projects/gloo/api/v1/ssl/ssl.proto\x1aRgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/config/core/v3/base.proto\x1aNgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/type/v3/percent.proto\x1a_github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/route/v3/route_components.proto\x1aWgithub.com/solo-io/gloo/projects/gloo/api/external/opentelemetry/common/v1/common.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.proto\"Z\n" +
	"\x14AccessLoggingService\x12B\n" +
	"\n" +
	"access_log\x18\x01 \x03(\v2#.als.options.gloo.solo.io.AccessLogR\taccessLog\"\xda\x02\n" +
	"\tAccessLog\x12A\n" +
	"\tfile_sink\x18\x02 \x01(\v2\".als.options.gloo.solo.io.FileSinkH\x00R\bfileSink\x12J\n" +
	"\fgrpc_service\x18\x03 \x01(\v2%.als.options.gloo.solo.io.GrpcServiceH\x00R\vgrpcService\x12f\n" +
	"\x16open_telemetry_service\x18\x05 \x01(\v2..als.options.gloo.solo.io.OpenTelemetryServiceH\x00R\x14openTelemetryService\x12A\n" +
	"\x06filter\x18\x04 \x01(\v2).als.options.gloo.solo.io.AccessLogFilterR\x06filterB\x13\n" +
	"\x11OutputDestination\"\x92\x01\n" +
	"\bFileSink\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12%\n" +
	"\rstring_format\x18\x02 \x01(\tH\x00R\fstringFormat\x12:\n" +
	"\vjson_format\x18\x03 \x01(\v2\x17.google.protobuf.StructH\x00R\n" +
	"jsonFormatB\x0f\n" +
	"\routput_format\"\x8b\x03\n" +
	"\vGrpcService\x12\x19\n" +
	"\blog_name\x18\x01 \x01(\tR\alogName\x120\n" +
	"\x13static_cluster_name\x18\x02 \x01(\tH\x00R\x11staticClusterName\x12H\n" +
	"!additional_request_headers_to_log\x18\x04 \x03(\tR\x1dadditionalRequestHeadersToLog\x12J\n" +
	"\"additional_response_headers_to_log\x18\x05 \x03(\tR\x1eadditionalResponseHeadersToLog\x12L\n" +
	"#additional_response_trailers_to_log\x18\x06 \x03(\tR\x1fadditionalResponseTrailersToLog\x12<\n" +
	"\x1bfilter_state_objects_to_log\x18\a \x03(\tR\x17filterStateObjectsToLogB\r\n" +
	"\vservice_ref\"\x80\x03\n" +
	"\x1aOpenTelemetryGrpcCollector\x12\x1a\n" +
	"\bendpoint\x18\x01 \x01(\tR\bendpoint\x12\x1c\n" +
	"\tauthority\x18\x02 \x01(\tR\tauthority\x12[\n" +
	"\aheaders\x18\x03 \x03(\v2A.als.options.gloo.solo.io.OpenTelemetryGrpcCollector.HeadersEntryR\aheaders\x12\x1a\n" +
	"\binsecure\x18\x04 \x01(\bR\binsecure\x12>\n" +
	"\n" +
	"ssl_config\x18\x05 \x01(\v2\x1f.gloo.solo.io.UpstreamSslConfigR\tsslConfig\x123\n" +
	"\atimeout\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x94\x03\n" +
	"\x14OpenTelemetryService\x12\x19\n" +
	"\blog_name\x18\x01 \x01(\tR\alogName\x12T\n" +
	"\tcollector\x18\x02 \x01(\v24.als.options.gloo.solo.io.OpenTelemetryGrpcCollectorH\x00R\tcollector\x12<\n" +
	"\x1bfilter_state_objects_to_log\x18\x03 \x03(\tR\x17filterStateObjectsToLog\x124\n" +
	"\x16disable_builtin_labels\x18\x04 \x01(\bR\x14disableBuiltinLabels\x12;\n" +
	"\x04body\x18\x05 \x01(\v2'.opentelemetry.proto.common.v1.AnyValueR\x04body\x12K\n" +
	"\n" +
	"attributes\x18\x06 \x01(\v2+.opentelemetry.proto.common.v1.KeyValueListR\n" +
	"attributesB\r\n" +
	"\vdestination\"\x84\a\n" +
	"\x0fAccessLogFilter\x12Z\n" +
	"\x12status_code_filter\x18\x01 \x01(\v2*.als.options.gloo.solo.io.StatusCodeFilterH\x00R\x10statusCodeFilter\x12S\n" +
	"\x0fduration_filter\x18\x02 \x01(\v2(.als.options.gloo.solo.io.DurationFilterH\x00R\x0edurationFilter\x12g\n" +
	"\x17not_health_check_filter\x18\x03 \x01(\v2..als.options.gloo.solo.io.NotHealthCheckFilterH\x00R\x14notHealthCheckFilter\x12V\n" +
	"\x10traceable_filter\x18\x04 \x01(\v2).als.options.gloo.solo.io.TraceableFilterH\x00R\x0ftraceableFilter\x12P\n" +
	"\x0eruntime_filter\x18\x05 \x01(\v2'.als.options.gloo.solo.io.RuntimeFilterH\x00R\rruntimeFilter\x12D\n" +
	"\n" +
	"and_filter\x18\x06 \x01(\v2#.als.options.gloo.solo.io.AndFilterH\x00R\tandFilter\x12A\n" +
	"\tor_filter\x18\a \x01(\v2\".als.options.gloo.solo.io.OrFilterH\x00R\borFilter\x12M\n" +
	"\rheader_filter\x18\b \x01(\v2&.als.options.gloo.solo.io.HeaderFilterH\x00R\fheaderFilter\x12`\n" +
	"\x14response_flag_filter\x18\t \x01(\v2,.als.options.gloo.solo.io.ResponseFlagFilterH\x00R\x12responseFlagFilter\x12Z\n" +
	"\x12grpc_status_filter\x18\n" +
	" \x01(\v2*.als.options.gloo.solo.io.GrpcStatusFilterH\x00R\x10grpcStatusFilterB\x17\n" +
	"\x10filter_specifier\x12\x03\xf8B\x01\"\xc6\x01\n" +
	"\x10ComparisonFilter\x12G\n" +
	"\x02op\x18\x01 \x01(\x0e2-.als.options.gloo.solo.io.ComparisonFilter.OpB\b\xfaB\x05\x82\x01\x02\x10\x01R\x02op\x12K\n" +
	"\x05value\x18\x02 \x01(\v2+.solo.io.envoy.config.core.v3.RuntimeUInt32B\b\xfaB\x05\x8a\x01\x02\x10\x01R\x05value\"\x1c\n" +
	"\x02Op\x12\x06\n" +
	"\x02EQ\x10\x00\x12\x06\n" +
	"\x02GE\x10\x01\x12\x06\n" +
	"\x02LE\x10\x02\"h\n" +
	"\x10StatusCodeFilter\x12T\n" +
	"\n" +
	"comparison\x18\x01 \x01(\v2*.als.options.gloo.solo.io.ComparisonFilterB\b\xfaB\x05\x8a\x01\x02\x10\x01R\n" +
	"comparison\"f\n" +
	"\x0eDurationFilter\x12T\n" +
	"\n" +
	"comparison\x18\x01 \x01(\v2*.als.options.gloo.solo.io.ComparisonFilterB\b\xfaB\x05\x8a\x01\x02\x10\x01R\n" +
	"comparison\"\x16\n" +
	"\x14NotHealthCheckFilter\"\x11\n" +
	"\x0fTraceableFilter\"\xca\x01\n" +
	"\rRuntimeFilter\x12(\n" +
	"\vruntime_key\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\n" +
	"runtimeKey\x12Q\n" +
	"\x0fpercent_sampled\x18\x02 \x01(\v2(.solo.io.envoy.type.v3.FractionalPercentR\x0epercentSampled\x12<\n" +
	"\x1ause_independent_randomness\x18\x03 \x01(\bR\x18useIndependentRandomness\"Z\n" +
	"\tAndFilter\x12M\n" +
	"\afilters\x18\x01 \x03(\v2).als.options.gloo.solo.io.AccessLogFilterB\b\xfaB\x05\x92\x01\x02\b\x02R\afilters\"Y\n" +
	"\bOrFilter\x12M\n" +
	"\afilters\x18\x02 \x03(\v2).als.options.gloo.solo.io.AccessLogFilterB\b\xfaB\x05\x92\x01\x02\b\x02R\afilters\"^\n" +
	"\fHeaderFilter\x12N\n" +
	"\x06header\x18\x01 \x01(\v2,.solo.io.envoy.config.route.v3.HeaderMatcherB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x06header\"\xae\x01\n" +
	"\x12ResponseFlagFilter\x12\x97\x01\n" +
	"\x05flags\x18\x01 \x03(\tB\x80\x01\xfaB}\x92\x01z\"xrvR\x02LHR\x02UHR\x02UTR\x02LRR\x02URR\x02UFR\x02UCR\x02UOR\x02NRR\x02DIR\x02FIR\x02RLR\x04UAEXR\x04RLSER\x02DCR\x03URXR\x02SIR\x02IHR\x03DPER\x05UMSDRR\x04RFCFR\x04NFCFR\x02DTR\x03UPER\x02NCR\x02OMR\x05flags\"\xc5\x03\n" +
	"\x10GrpcStatusFilter\x12\\\n" +
	"\bstatuses\x18\x01 \x03(\x0e21.als.options.gloo.solo.io.GrpcStatusFilter.StatusB\r\xfaB\n" +
	"\x92\x01\a\"\x05\x82\x01\x02\x10\x01R\bstatuses\x12\x18\n" +
	"\aexclude\x18\x02 \x01(\bR\aexclude\"\xb8\x02\n" +
	"\x06Status\x12\x06\n" +
	"\x02OK\x10\x00\x12\f\n" +
	"\bCANCELED\x10\x01\x12\v\n" +
	"\aUNKNOWN\x10\x02\x12\x14\n" +
	"\x10INVALID_ARGUMENT\x10\x03\x12\x15\n" +
	"\x11DEADLINE_EXCEEDED\x10\x04\x12\r\n" +
	"\tNOT_FOUND\x10\x05\x12\x12\n" +
	"\x0eALREADY_EXISTS\x10\x06\x12\x15\n" +
	"\x11PERMISSION_DENIED\x10\a\x12\x16\n" +
	"\x12RESOURCE_EXHAUSTED\x10\b\x12\x17\n" +
	"\x13FAILED_PRECONDITION\x10\t\x12\v\n" +
	"\aABORTED\x10\n" +
	"\x12\x10\n" +
	"\fOUT_OF_RANGE\x10\v\x12\x11\n" +
	"\rUNIMPLEMENTED\x10\f\x12\f\n" +
	"\bINTERNAL\x10\r\x12\x0f\n" +
	"\vUNAVAILABLE\x10\x0e\x12\r\n" +
	"\tDATA_LOSS\x10\x0f\x12\x13\n" +
	"\x0fUNAUTHENTICATED\x10\x10BJ\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z<github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/alsb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_goTypes = []any{
	(ComparisonFilter_Op)(0),           // 0: als.options.gloo.solo.io.ComparisonFilter.Op
	(GrpcStatusFilter_Status)(0),       // 1: als.options.gloo.solo.io.GrpcStatusFilter.Status
	(*AccessLoggingService)(nil),       // 2: als.options.gloo.solo.io.AccessLoggingService
	(*AccessLog)(nil),                  // 3: als.options.gloo.solo.io.AccessLog
	(*FileSink)(nil),                   // 4: als.options.gloo.solo.io.FileSink
	(*GrpcService)(nil),                // 5: als.options.gloo.solo.io.GrpcService
	(*OpenTelemetryGrpcCollector)(nil), // 6: als.options.gloo.solo.io.OpenTelemetryGrpcCollector
	(*OpenTelemetryService)(nil),       // 7: als.options.gloo.solo.io.OpenTelemetryService
	(*AccessLogFilter)(nil),            // 8: als.options.gloo.solo.io.AccessLogFilter
	(*ComparisonFilter)(nil),           // 9: als.options.gloo.solo.io.ComparisonFilter
	(*StatusCodeFilter)(nil),           // 10: als.options.gloo.solo.io.StatusCodeFilter
	(*DurationFilter)(nil),             // 11: als.options.gloo.solo.io.DurationFilter
	(*NotHealthCheckFilter)(nil),       // 12: als.options.gloo.solo.io.NotHealthCheckFilter
	(*TraceableFilter)(nil),            // 13: als.options.gloo.solo.io.TraceableFilter
	(*RuntimeFilter)(nil),              // 14: als.options.gloo.solo.io.RuntimeFilter
	(*AndFilter)(nil),                  // 15: als.options.gloo.solo.io.AndFilter
	(*OrFilter)(nil),                   // 16: als.options.gloo.solo.io.OrFilter
	(*HeaderFilter)(nil),               // 17: als.options.gloo.solo.io.HeaderFilter
	(*ResponseFlagFilter)(nil),         // 18: als.options.gloo.solo.io.ResponseFlagFilter
	(*GrpcStatusFilter)(nil),           // 19: als.options.gloo.solo.io.GrpcStatusFilter
	nil,                                // 20: als.options.gloo.solo.io.OpenTelemetryGrpcCollector.HeadersEntry
	(*structpb.Struct)(nil),            // 21: google.protobuf.Struct
	(*ssl.UpstreamSslConfig)(nil),      // 22: gloo.solo.io.UpstreamSslConfig
	(*durationpb.Duration)(nil),        // 23: google.protobuf.Duration
	(*v1.AnyValue)(nil),                // 24: opentelemetry.proto.common.v1.AnyValue
	(*v1.KeyValueList)(nil),            // 25: opentelemetry.proto.common.v1.KeyValueList
	(*v3.RuntimeUInt32)(nil),           // 26: solo.io.envoy.config.core.v3.RuntimeUInt32
	(*v31.FractionalPercent)(nil),      // 27: solo.io.envoy.type.v3.FractionalPercent
	(*v32.HeaderMatcher)(nil),          // 28: solo.io.envoy.config.route.v3.HeaderMatcher
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_depIdxs = []int32{
	3,  // 0: als.options.gloo.solo.io.AccessLoggingService.access_log:type_name -> als.options.gloo.solo.io.AccessLog
	4,  // 1: als.options.gloo.solo.io.AccessLog.file_sink:type_name -> als.options.gloo.solo.io.FileSink
	5,  // 2: als.options.gloo.solo.io.AccessLog.grpc_service:type_name -> als.options.gloo.solo.io.GrpcService
	7,  // 3: als.options.gloo.solo.io.AccessLog.open_telemetry_service:type_name -> als.options.gloo.solo.io.OpenTelemetryService
	8,  // 4: als.options.gloo.solo.io.AccessLog.filter:type_name -> als.options.gloo.solo.io.AccessLogFilter
	21, // 5: als.options.gloo.solo.io.FileSink.json_format:type_name -> google.protobuf.Struct
	20, // 6: als.options.gloo.solo.io.OpenTelemetryGrpcCollector.headers:type_name -> als.options.gloo.solo.io.OpenTelemetryGrpcCollector.HeadersEntry
	22, // 7: als.options.gloo.solo.io.OpenTelemetryGrpcCollector.ssl_config:type_name -> gloo.solo.io.UpstreamSslConfig
	23, // 8: als.options.gloo.solo.io.OpenTelemetryGrpcCollector.timeout:type_name -> google.protobuf.Duration
	6,  // 9: als.options.gloo.solo.io.OpenTelemetryService.collector:type_name -> als.options.gloo.solo.io.OpenTelemetryGrpcCollector
	24, // 10: als.options.gloo.solo.io.OpenTelemetryService.body:type_name -> opentelemetry.proto.common.v1.AnyValue
	25, // 11: als.options.gloo.solo.io.OpenTelemetryService.attributes:type_name -> opentelemetry.proto.common.v1.KeyValueList
	10, // 12: als.options.gloo.solo.io.AccessLogFilter.status_code_filter:type_name -> als.options.gloo.solo.io.StatusCodeFilter
	11, // 13: als.options.gloo.solo.io.AccessLogFilter.duration_filter:type_name -> als.options.gloo.solo.io.DurationFilter
	12, // 14: als.options.gloo.solo.io.AccessLogFilter.not_health_check_filter:type_name -> als.options.gloo.solo.io.NotHealthCheckFilter
	13, // 15: als.options.gloo.solo.io.AccessLogFilter.traceable_filter:type_name -> als.options.gloo.solo.io.TraceableFilter
	14, // 16: als.options.gloo.solo.io.AccessLogFilter.runtime_filter:type_name -> als.options.gloo.solo.io.RuntimeFilter
	15, // 17: als.options.gloo.solo.io.AccessLogFilter.and_filter:type_name -> als.options.gloo.solo.io.AndFilter
	16, // 18: als.options.gloo.solo.io.AccessLogFilter.or_filter:type_name -> als.options.gloo.solo.io.OrFilter
	17, // 19: als.options.gloo.solo.io.AccessLogFilter.header_filter:type_name -> als.options.gloo.solo.io.HeaderFilter
	18, // 20: als.options.gloo.solo.io.AccessLogFilter.response_flag_filter:type_name -> als.options.gloo.solo.io.ResponseFlagFilter
	19, // 21: als.options.gloo.solo.io.AccessLogFilter.grpc_status_filter:type_name -> als.options.gloo.solo.io.GrpcStatusFilter
	0,  // 22: als.options.gloo.solo.io.ComparisonFilter.op:type_name -> als.options.gloo.solo.io.ComparisonFilter.Op
	26, // 23: als.options.gloo.solo.io.ComparisonFilter.value:type_name -> solo.io.envoy.config.core.v3.RuntimeUInt32
	9,  // 24: als.options.gloo.solo.io.StatusCodeFilter.comparison:type_name -> als.options.gloo.solo.io.ComparisonFilter
	9,  // 25: als.options.gloo.solo.io.DurationFilter.comparison:type_name -> als.options.gloo.solo.io.ComparisonFilter
	27, // 26: als.options.gloo.solo.io.RuntimeFilter.percent_sampled:type_name -> solo.io.envoy.type.v3.FractionalPercent
	8,  // 27: als.options.gloo.solo.io.AndFilter.filters:type_name -> als.options.gloo.solo.io.AccessLogFilter
	8,  // 28: als.options.gloo.solo.io.OrFilter.filters:type_name -> als.options.gloo.solo.io.AccessLogFilter
	28, // 29: als.options.gloo.solo.io.HeaderFilter.header:type_name -> solo.io.envoy.config.route.v3.HeaderMatcher
	1,  // 30: als.options.gloo.solo.io.GrpcStatusFilter.statuses:type_name -> als.options.gloo.solo.io.GrpcStatusFilter.Status
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_init() }
func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[1].OneofWrappers = []any{
		(*AccessLog_FileSink)(nil),
		(*AccessLog_GrpcService)(nil),
		(*AccessLog_OpenTelemetryService)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[2].OneofWrappers = []any{
		(*FileSink_StringFormat)(nil),
		(*FileSink_JsonFormat)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[3].OneofWrappers = []any{
		(*GrpcService_StaticClusterName)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[5].OneofWrappers = []any{
		(*OpenTelemetryService_Collector)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes[6].OneofWrappers = []any{
		(*AccessLogFilter_StatusCodeFilter)(nil),
		(*AccessLogFilter_DurationFilter)(nil),
		(*AccessLogFilter_NotHealthCheckFilter)(nil),
		(*AccessLogFilter_TraceableFilter)(nil),
		(*AccessLogFilter_RuntimeFilter)(nil),
		(*AccessLogFilter_AndFilter)(nil),
		(*AccessLogFilter_OrFilter)(nil),
		(*AccessLogFilter_HeaderFilter)(nil),
		(*AccessLogFilter_ResponseFlagFilter)(nil),
		(*AccessLogFilter_GrpcStatusFilter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_als_als_proto_depIdxs = nil
}
