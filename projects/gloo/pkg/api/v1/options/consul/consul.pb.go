// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/consul/consul.proto

package consul

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	options "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Upstream Spec for Consul Upstreams
// consul Upstreams represent a set of one or more addressable pods for a consul Service
// the Gloo consul Upstream maps to a single service port. Because consul Services support multiple ports,
// Gloo requires that a different upstream be created for each port
// consul Upstreams are typically generated automatically by Gloo from the consul API
type UpstreamSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Consul Service
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Deprecated: This field was renamed to subset_tags. If subset_tags is used, this field is
	// ignored. Otherwise, the behavior is the same as subset_tags field below.
	ServiceTags []string `protobuf:"bytes,2,rep,name=service_tags,json=serviceTags,proto3" json:"service_tags,omitempty"`
	// Gloo will segment instances based off of these tags. This allows you to set routes that route
	// to a subset of the instances of the service
	SubsetTags []string `protobuf:"bytes,6,rep,name=subset_tags,json=subsetTags,proto3" json:"subset_tags,omitempty"`
	// The list of service tags Gloo should search for on a service instance
	// before deciding whether or not to include the instance as part of this
	// upstream. Empty list means that all service instances with the same service name will be
	// included. When not empty, only service instances that match all of the tags (subset match) will be selected
	// for this upstream.
	InstanceTags []string `protobuf:"bytes,7,rep,name=instance_tags,json=instanceTags,proto3" json:"instance_tags,omitempty"`
	// The opposite of instanceTags, this is a list of service tags that gloo should ensure are not
	// in a service instance before including it in an upstream.
	InstanceBlacklistTags []string `protobuf:"bytes,8,rep,name=instance_blacklist_tags,json=instanceBlacklistTags,proto3" json:"instance_blacklist_tags,omitempty"`
	// An optional Service Spec describing the service listening at this address
	ServiceSpec *options.ServiceSpec `protobuf:"bytes,3,opt,name=service_spec,json=serviceSpec,proto3" json:"service_spec,omitempty"`
	// Sets the consistency mode. The default is DefaultMode.
	//
	// Note: Gloo handles staleness well (as it runs update loops ~ once/second) but makes many requests
	// to get consul endpoints so users may want to opt into stale reads once the implications are understood.
	ConsistencyMode ConsulConsistencyModes `protobuf:"varint,9,opt,name=consistencyMode,proto3,enum=consul.options.gloo.solo.io.ConsulConsistencyModes" json:"consistencyMode,omitempty"`
	// QueryOptions are the query options to use for all Consul queries.
	QueryOptions *QueryOptions `protobuf:"bytes,10,opt,name=query_options,json=queryOptions,proto3" json:"query_options,omitempty"`
	// Is this consul service connect enabled.
	ConnectEnabled bool `protobuf:"varint,4,opt,name=connect_enabled,json=connectEnabled,proto3" json:"connect_enabled,omitempty"`
	// The data centers in which the service instance represented by this upstream is registered.
	DataCenters   []string `protobuf:"bytes,5,rep,name=data_centers,json=dataCenters,proto3" json:"data_centers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpstreamSpec) Reset() {
	*x = UpstreamSpec{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpstreamSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamSpec) ProtoMessage() {}

func (x *UpstreamSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamSpec.ProtoReflect.Descriptor instead.
func (*UpstreamSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_rawDescGZIP(), []int{0}
}

func (x *UpstreamSpec) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *UpstreamSpec) GetServiceTags() []string {
	if x != nil {
		return x.ServiceTags
	}
	return nil
}

func (x *UpstreamSpec) GetSubsetTags() []string {
	if x != nil {
		return x.SubsetTags
	}
	return nil
}

func (x *UpstreamSpec) GetInstanceTags() []string {
	if x != nil {
		return x.InstanceTags
	}
	return nil
}

func (x *UpstreamSpec) GetInstanceBlacklistTags() []string {
	if x != nil {
		return x.InstanceBlacklistTags
	}
	return nil
}

func (x *UpstreamSpec) GetServiceSpec() *options.ServiceSpec {
	if x != nil {
		return x.ServiceSpec
	}
	return nil
}

func (x *UpstreamSpec) GetConsistencyMode() ConsulConsistencyModes {
	if x != nil {
		return x.ConsistencyMode
	}
	return ConsulConsistencyModes_DefaultMode
}

func (x *UpstreamSpec) GetQueryOptions() *QueryOptions {
	if x != nil {
		return x.QueryOptions
	}
	return nil
}

func (x *UpstreamSpec) GetConnectEnabled() bool {
	if x != nil {
		return x.ConnectEnabled
	}
	return false
}

func (x *UpstreamSpec) GetDataCenters() []string {
	if x != nil {
		return x.DataCenters
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_rawDesc = "" +
	"\n" +
	"Hgithub.com/solo-io/gloo/projects/gloo/api/v1/options/consul/consul.proto\x12\x1bconsul.options.gloo.solo.io\x1a\x12extproto/ext.proto\x1aGgithub.com/solo-io/gloo/projects/gloo/api/v1/options/service_spec.proto\x1aOgithub.com/solo-io/gloo/projects/gloo/api/v1/options/consul/query_options.proto\"\x93\x04\n" +
	"\fUpstreamSpec\x12!\n" +
	"\fservice_name\x18\x01 \x01(\tR\vserviceName\x12!\n" +
	"\fservice_tags\x18\x02 \x03(\tR\vserviceTags\x12\x1f\n" +
	"\vsubset_tags\x18\x06 \x03(\tR\n" +
	"subsetTags\x12#\n" +
	"\rinstance_tags\x18\a \x03(\tR\finstanceTags\x126\n" +
	"\x17instance_blacklist_tags\x18\b \x03(\tR\x15instanceBlacklistTags\x12D\n" +
	"\fservice_spec\x18\x03 \x01(\v2!.options.gloo.solo.io.ServiceSpecR\vserviceSpec\x12]\n" +
	"\x0fconsistencyMode\x18\t \x01(\x0e23.consul.options.gloo.solo.io.ConsulConsistencyModesR\x0fconsistencyMode\x12N\n" +
	"\rquery_options\x18\n" +
	" \x01(\v2).consul.options.gloo.solo.io.QueryOptionsR\fqueryOptions\x12'\n" +
	"\x0fconnect_enabled\x18\x04 \x01(\bR\x0econnectEnabled\x12!\n" +
	"\fdata_centers\x18\x05 \x03(\tR\vdataCentersBM\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z?github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/consulb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_goTypes = []any{
	(*UpstreamSpec)(nil),        // 0: consul.options.gloo.solo.io.UpstreamSpec
	(*options.ServiceSpec)(nil), // 1: options.gloo.solo.io.ServiceSpec
	(ConsulConsistencyModes)(0), // 2: consul.options.gloo.solo.io.ConsulConsistencyModes
	(*QueryOptions)(nil),        // 3: consul.options.gloo.solo.io.QueryOptions
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_depIdxs = []int32{
	1, // 0: consul.options.gloo.solo.io.UpstreamSpec.service_spec:type_name -> options.gloo.solo.io.ServiceSpec
	2, // 1: consul.options.gloo.solo.io.UpstreamSpec.consistencyMode:type_name -> consul.options.gloo.solo.io.ConsulConsistencyModes
	3, // 2: consul.options.gloo.solo.io.UpstreamSpec.query_options:type_name -> consul.options.gloo.solo.io.QueryOptions
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_init() }
func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_query_options_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_consul_consul_proto_depIdxs = nil
}
