// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/lbhash/lbhash.proto

package lbhash

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies the routeâ€™s hashing policy if the upstream cluster uses a hashing load balancer.
// https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-api-msg-route-routeaction-hashpolicy
type RouteActionHashConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of policies Envoy will use when generating a hash key for a hashing load balancer
	HashPolicies  []*HashPolicy `protobuf:"bytes,1,rep,name=hash_policies,json=hashPolicies,proto3" json:"hash_policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteActionHashConfig) Reset() {
	*x = RouteActionHashConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteActionHashConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteActionHashConfig) ProtoMessage() {}

func (x *RouteActionHashConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteActionHashConfig.ProtoReflect.Descriptor instead.
func (*RouteActionHashConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDescGZIP(), []int{0}
}

func (x *RouteActionHashConfig) GetHashPolicies() []*HashPolicy {
	if x != nil {
		return x.HashPolicies
	}
	return nil
}

// Envoy supports two types of cookie affinity:
// - Passive: Envoy reads the cookie from the headers
// - Generated: Envoy uses the cookie spec to generate a cookie
// In either case, the cookie is incorporated in the hash key.
// additional notes https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-api-msg-route-routeaction-hashpolicy-cookie
type Cookie struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// required, the name of the cookie to be used to obtain the hash key
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If specified, a cookie with the TTL will be generated if the cookie is not present. If the TTL is present and zero, the generated cookie will be a session cookie.
	Ttl *durationpb.Duration `protobuf:"bytes,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// The name of the path for the cookie. If no path is specified here, no path will be set for the cookie.
	Path          string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cookie) Reset() {
	*x = Cookie{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cookie) ProtoMessage() {}

func (x *Cookie) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cookie.ProtoReflect.Descriptor instead.
func (*Cookie) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDescGZIP(), []int{1}
}

func (x *Cookie) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cookie) GetTtl() *durationpb.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *Cookie) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Specifies an element of Envoy's hashing policy for hashing load balancers
type HashPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to KeyType:
	//
	//	*HashPolicy_Header
	//	*HashPolicy_Cookie
	//	*HashPolicy_SourceIp
	KeyType isHashPolicy_KeyType `protobuf_oneof:"KeyType"`
	// If set, and a hash key is available after evaluating this policy, Envoy will skip the subsequent policies and
	// use the key as it is.
	// This is useful for defining "fallback" policies and limiting the time Envoy spends generating hash keys.
	Terminal      bool `protobuf:"varint,4,opt,name=terminal,proto3" json:"terminal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HashPolicy) Reset() {
	*x = HashPolicy{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HashPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashPolicy) ProtoMessage() {}

func (x *HashPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashPolicy.ProtoReflect.Descriptor instead.
func (*HashPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDescGZIP(), []int{2}
}

func (x *HashPolicy) GetKeyType() isHashPolicy_KeyType {
	if x != nil {
		return x.KeyType
	}
	return nil
}

func (x *HashPolicy) GetHeader() string {
	if x != nil {
		if x, ok := x.KeyType.(*HashPolicy_Header); ok {
			return x.Header
		}
	}
	return ""
}

func (x *HashPolicy) GetCookie() *Cookie {
	if x != nil {
		if x, ok := x.KeyType.(*HashPolicy_Cookie); ok {
			return x.Cookie
		}
	}
	return nil
}

func (x *HashPolicy) GetSourceIp() bool {
	if x != nil {
		if x, ok := x.KeyType.(*HashPolicy_SourceIp); ok {
			return x.SourceIp
		}
	}
	return false
}

func (x *HashPolicy) GetTerminal() bool {
	if x != nil {
		return x.Terminal
	}
	return false
}

type isHashPolicy_KeyType interface {
	isHashPolicy_KeyType()
}

type HashPolicy_Header struct {
	// Use a given header's value as a component of the hashing load balancer's hash key
	Header string `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type HashPolicy_Cookie struct {
	// Use a given cookie as a component of the hashing load balancer's hash key
	Cookie *Cookie `protobuf:"bytes,2,opt,name=cookie,proto3,oneof"`
}

type HashPolicy_SourceIp struct {
	// Use the request's source IP address as a component of the hashing load balancer's hash key
	SourceIp bool `protobuf:"varint,3,opt,name=source_ip,json=sourceIp,proto3,oneof"`
}

func (*HashPolicy_Header) isHashPolicy_KeyType() {}

func (*HashPolicy_Cookie) isHashPolicy_KeyType() {}

func (*HashPolicy_SourceIp) isHashPolicy_KeyType() {}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDesc = "" +
	"\n" +
	"Hgithub.com/solo-io/gloo/projects/gloo/api/v1/options/lbhash/lbhash.proto\x12\x1blbhash.options.gloo.solo.io\x1a\x1egoogle/protobuf/duration.proto\x1a\x12extproto/ext.proto\"e\n" +
	"\x15RouteActionHashConfig\x12L\n" +
	"\rhash_policies\x18\x01 \x03(\v2'.lbhash.options.gloo.solo.io.HashPolicyR\fhashPolicies\"]\n" +
	"\x06Cookie\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12+\n" +
	"\x03ttl\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x03ttl\x12\x12\n" +
	"\x04path\x18\x03 \x01(\tR\x04path\"\xab\x01\n" +
	"\n" +
	"HashPolicy\x12\x18\n" +
	"\x06header\x18\x01 \x01(\tH\x00R\x06header\x12=\n" +
	"\x06cookie\x18\x02 \x01(\v2#.lbhash.options.gloo.solo.io.CookieH\x00R\x06cookie\x12\x1d\n" +
	"\tsource_ip\x18\x03 \x01(\bH\x00R\bsourceIp\x12\x1a\n" +
	"\bterminal\x18\x04 \x01(\bR\bterminalB\t\n" +
	"\aKeyTypeBM\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z?github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/lbhashb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_goTypes = []any{
	(*RouteActionHashConfig)(nil), // 0: lbhash.options.gloo.solo.io.RouteActionHashConfig
	(*Cookie)(nil),                // 1: lbhash.options.gloo.solo.io.Cookie
	(*HashPolicy)(nil),            // 2: lbhash.options.gloo.solo.io.HashPolicy
	(*durationpb.Duration)(nil),   // 3: google.protobuf.Duration
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_depIdxs = []int32{
	2, // 0: lbhash.options.gloo.solo.io.RouteActionHashConfig.hash_policies:type_name -> lbhash.options.gloo.solo.io.HashPolicy
	3, // 1: lbhash.options.gloo.solo.io.Cookie.ttl:type_name -> google.protobuf.Duration
	1, // 2: lbhash.options.gloo.solo.io.HashPolicy.cookie:type_name -> lbhash.options.gloo.solo.io.Cookie
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_init() }
func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_msgTypes[2].OneofWrappers = []any{
		(*HashPolicy_Header)(nil),
		(*HashPolicy_Cookie)(nil),
		(*HashPolicy_SourceIp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_lbhash_lbhash_proto_depIdxs = nil
}
