// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/hcm/hcm.proto

package hcm

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	headers "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/headers"
	protocol "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/protocol"
	protocol_upgrade "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/protocol_upgrade"
	tracing "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/tracing"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HttpConnectionManagerSettings_ForwardClientCertDetails int32

const (
	HttpConnectionManagerSettings_SANITIZE            HttpConnectionManagerSettings_ForwardClientCertDetails = 0
	HttpConnectionManagerSettings_FORWARD_ONLY        HttpConnectionManagerSettings_ForwardClientCertDetails = 1
	HttpConnectionManagerSettings_APPEND_FORWARD      HttpConnectionManagerSettings_ForwardClientCertDetails = 2
	HttpConnectionManagerSettings_SANITIZE_SET        HttpConnectionManagerSettings_ForwardClientCertDetails = 3
	HttpConnectionManagerSettings_ALWAYS_FORWARD_ONLY HttpConnectionManagerSettings_ForwardClientCertDetails = 4
)

// Enum value maps for HttpConnectionManagerSettings_ForwardClientCertDetails.
var (
	HttpConnectionManagerSettings_ForwardClientCertDetails_name = map[int32]string{
		0: "SANITIZE",
		1: "FORWARD_ONLY",
		2: "APPEND_FORWARD",
		3: "SANITIZE_SET",
		4: "ALWAYS_FORWARD_ONLY",
	}
	HttpConnectionManagerSettings_ForwardClientCertDetails_value = map[string]int32{
		"SANITIZE":            0,
		"FORWARD_ONLY":        1,
		"APPEND_FORWARD":      2,
		"SANITIZE_SET":        3,
		"ALWAYS_FORWARD_ONLY": 4,
	}
)

func (x HttpConnectionManagerSettings_ForwardClientCertDetails) Enum() *HttpConnectionManagerSettings_ForwardClientCertDetails {
	p := new(HttpConnectionManagerSettings_ForwardClientCertDetails)
	*p = x
	return p
}

func (x HttpConnectionManagerSettings_ForwardClientCertDetails) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpConnectionManagerSettings_ForwardClientCertDetails) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes[0].Descriptor()
}

func (HttpConnectionManagerSettings_ForwardClientCertDetails) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes[0]
}

func (x HttpConnectionManagerSettings_ForwardClientCertDetails) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpConnectionManagerSettings_ForwardClientCertDetails.Descriptor instead.
func (HttpConnectionManagerSettings_ForwardClientCertDetails) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescGZIP(), []int{0, 0}
}

type HttpConnectionManagerSettings_ServerHeaderTransformation int32

const (
	// (DEFAULT) Overwrite any Server header with the contents of server_name.
	HttpConnectionManagerSettings_OVERWRITE HttpConnectionManagerSettings_ServerHeaderTransformation = 0
	// If no Server header is present, append Server server_name If a Server header is present, pass it through.
	HttpConnectionManagerSettings_APPEND_IF_ABSENT HttpConnectionManagerSettings_ServerHeaderTransformation = 1
	// Pass through the value of the server header, and do not append a header if none is present.
	HttpConnectionManagerSettings_PASS_THROUGH HttpConnectionManagerSettings_ServerHeaderTransformation = 2
)

// Enum value maps for HttpConnectionManagerSettings_ServerHeaderTransformation.
var (
	HttpConnectionManagerSettings_ServerHeaderTransformation_name = map[int32]string{
		0: "OVERWRITE",
		1: "APPEND_IF_ABSENT",
		2: "PASS_THROUGH",
	}
	HttpConnectionManagerSettings_ServerHeaderTransformation_value = map[string]int32{
		"OVERWRITE":        0,
		"APPEND_IF_ABSENT": 1,
		"PASS_THROUGH":     2,
	}
)

func (x HttpConnectionManagerSettings_ServerHeaderTransformation) Enum() *HttpConnectionManagerSettings_ServerHeaderTransformation {
	p := new(HttpConnectionManagerSettings_ServerHeaderTransformation)
	*p = x
	return p
}

func (x HttpConnectionManagerSettings_ServerHeaderTransformation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpConnectionManagerSettings_ServerHeaderTransformation) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes[1].Descriptor()
}

func (HttpConnectionManagerSettings_ServerHeaderTransformation) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes[1]
}

func (x HttpConnectionManagerSettings_ServerHeaderTransformation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpConnectionManagerSettings_ServerHeaderTransformation.Descriptor instead.
func (HttpConnectionManagerSettings_ServerHeaderTransformation) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescGZIP(), []int{0, 1}
}

// Action to take when Envoy receives client request with header names containing underscore characters. Underscore character
// is allowed in header names by the RFC-7230 and this behavior is implemented as a security measure due to systems that treat
// ‘_’ and ‘-‘ as interchangeable. Envoy by default allows client request headers with underscore characters.
type HttpConnectionManagerSettings_HeadersWithUnderscoreAction int32

const (
	// ⁣Allow headers with underscores. This is the default behavior.
	HttpConnectionManagerSettings_ALLOW HttpConnectionManagerSettings_HeadersWithUnderscoreAction = 0
	// ⁣Reject client request. HTTP/1 requests are rejected with the 400 status. HTTP/2 requests end with the stream reset.
	// The “httpN.requests_rejected_with_underscores_in_headers” counter is incremented for each rejected request.
	HttpConnectionManagerSettings_REJECT_CLIENT_REQUEST HttpConnectionManagerSettings_HeadersWithUnderscoreAction = 1
	// ⁣Drop the client header with name containing underscores. The header is dropped before the filter chain is invoked
	// and as such filters will not see dropped headers. The “httpN.dropped_headers_with_underscores” is incremented for each dropped header.
	HttpConnectionManagerSettings_DROP_HEADER HttpConnectionManagerSettings_HeadersWithUnderscoreAction = 2
)

// Enum value maps for HttpConnectionManagerSettings_HeadersWithUnderscoreAction.
var (
	HttpConnectionManagerSettings_HeadersWithUnderscoreAction_name = map[int32]string{
		0: "ALLOW",
		1: "REJECT_CLIENT_REQUEST",
		2: "DROP_HEADER",
	}
	HttpConnectionManagerSettings_HeadersWithUnderscoreAction_value = map[string]int32{
		"ALLOW":                 0,
		"REJECT_CLIENT_REQUEST": 1,
		"DROP_HEADER":           2,
	}
)

func (x HttpConnectionManagerSettings_HeadersWithUnderscoreAction) Enum() *HttpConnectionManagerSettings_HeadersWithUnderscoreAction {
	p := new(HttpConnectionManagerSettings_HeadersWithUnderscoreAction)
	*p = x
	return p
}

func (x HttpConnectionManagerSettings_HeadersWithUnderscoreAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpConnectionManagerSettings_HeadersWithUnderscoreAction) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes[2].Descriptor()
}

func (HttpConnectionManagerSettings_HeadersWithUnderscoreAction) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes[2]
}

func (x HttpConnectionManagerSettings_HeadersWithUnderscoreAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpConnectionManagerSettings_HeadersWithUnderscoreAction.Descriptor instead.
func (HttpConnectionManagerSettings_HeadersWithUnderscoreAction) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescGZIP(), []int{0, 2}
}

// Determines the action for request that contain %2F, %2f, %5C or %5c sequences in the URI path.
// This operation occurs before URL normalization and the merge slashes transformations if they were enabled.
type HttpConnectionManagerSettings_PathWithEscapedSlashesAction int32

const (
	// Default behavior specific to implementation (i.e. Envoy) of this configuration option.
	// Envoy, by default, takes the KEEP_UNCHANGED action.
	// NOTE: the implementation may change the default behavior at-will.
	HttpConnectionManagerSettings_IMPLEMENTATION_SPECIFIC_DEFAULT HttpConnectionManagerSettings_PathWithEscapedSlashesAction = 0
	// Keep escaped slashes.
	HttpConnectionManagerSettings_KEEP_UNCHANGED HttpConnectionManagerSettings_PathWithEscapedSlashesAction = 1
	// Reject client request with the 400 status. gRPC requests will be rejected with the INTERNAL (13) error code.
	// The "httpN.downstream_rq_failed_path_normalization" counter is incremented for each rejected request.
	HttpConnectionManagerSettings_REJECT_REQUEST HttpConnectionManagerSettings_PathWithEscapedSlashesAction = 2
	// Unescape %2F and %5C sequences and redirect request to the new path if these sequences were present.
	// Redirect occurs after path normalization and merge slashes transformations if they were configured.
	// NOTE: gRPC requests will be rejected with the INTERNAL (13) error code.
	// This option minimizes possibility of path confusion exploits by forcing request with unescaped slashes to
	// traverse all parties: downstream client, intermediate proxies, Envoy and upstream server.
	// The "httpN.downstream_rq_redirected_with_normalized_path" counter is incremented for each
	// redirected request.
	HttpConnectionManagerSettings_UNESCAPE_AND_REDIRECT HttpConnectionManagerSettings_PathWithEscapedSlashesAction = 3
	// Unescape %2F and %5C sequences.
	// Note: this option should not be enabled if intermediaries perform path based access control as
	// it may lead to path confusion vulnerabilities.
	HttpConnectionManagerSettings_UNESCAPE_AND_FORWARD HttpConnectionManagerSettings_PathWithEscapedSlashesAction = 4
)

// Enum value maps for HttpConnectionManagerSettings_PathWithEscapedSlashesAction.
var (
	HttpConnectionManagerSettings_PathWithEscapedSlashesAction_name = map[int32]string{
		0: "IMPLEMENTATION_SPECIFIC_DEFAULT",
		1: "KEEP_UNCHANGED",
		2: "REJECT_REQUEST",
		3: "UNESCAPE_AND_REDIRECT",
		4: "UNESCAPE_AND_FORWARD",
	}
	HttpConnectionManagerSettings_PathWithEscapedSlashesAction_value = map[string]int32{
		"IMPLEMENTATION_SPECIFIC_DEFAULT": 0,
		"KEEP_UNCHANGED":                  1,
		"REJECT_REQUEST":                  2,
		"UNESCAPE_AND_REDIRECT":           3,
		"UNESCAPE_AND_FORWARD":            4,
	}
)

func (x HttpConnectionManagerSettings_PathWithEscapedSlashesAction) Enum() *HttpConnectionManagerSettings_PathWithEscapedSlashesAction {
	p := new(HttpConnectionManagerSettings_PathWithEscapedSlashesAction)
	*p = x
	return p
}

func (x HttpConnectionManagerSettings_PathWithEscapedSlashesAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpConnectionManagerSettings_PathWithEscapedSlashesAction) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes[3].Descriptor()
}

func (HttpConnectionManagerSettings_PathWithEscapedSlashesAction) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes[3]
}

func (x HttpConnectionManagerSettings_PathWithEscapedSlashesAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpConnectionManagerSettings_PathWithEscapedSlashesAction.Descriptor instead.
func (HttpConnectionManagerSettings_PathWithEscapedSlashesAction) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescGZIP(), []int{0, 3}
}

type HttpConnectionManagerSettings_CodecType int32

const (
	// For every new connection, the connection manager will determine which
	// codec to use. This mode supports both ALPN for TLS listeners as well as
	// protocol inference for plaintext listeners. If ALPN data is available, it
	// is preferred, otherwise protocol inference is used. In almost all cases,
	// this is the right option to choose for this setting.
	HttpConnectionManagerSettings_AUTO HttpConnectionManagerSettings_CodecType = 0
	// The connection manager will assume that the client is speaking HTTP/1.1.
	HttpConnectionManagerSettings_HTTP1 HttpConnectionManagerSettings_CodecType = 1
	// The connection manager will assume that the client is speaking HTTP/2
	// (Envoy does not require HTTP/2 to take place over TLS or to use ALPN.
	// Prior knowledge is allowed).
	HttpConnectionManagerSettings_HTTP2 HttpConnectionManagerSettings_CodecType = 2
)

// Enum value maps for HttpConnectionManagerSettings_CodecType.
var (
	HttpConnectionManagerSettings_CodecType_name = map[int32]string{
		0: "AUTO",
		1: "HTTP1",
		2: "HTTP2",
	}
	HttpConnectionManagerSettings_CodecType_value = map[string]int32{
		"AUTO":  0,
		"HTTP1": 1,
		"HTTP2": 2,
	}
)

func (x HttpConnectionManagerSettings_CodecType) Enum() *HttpConnectionManagerSettings_CodecType {
	p := new(HttpConnectionManagerSettings_CodecType)
	*p = x
	return p
}

func (x HttpConnectionManagerSettings_CodecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpConnectionManagerSettings_CodecType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes[4].Descriptor()
}

func (HttpConnectionManagerSettings_CodecType) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes[4]
}

func (x HttpConnectionManagerSettings_CodecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpConnectionManagerSettings_CodecType.Descriptor instead.
func (HttpConnectionManagerSettings_CodecType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescGZIP(), []int{0, 4}
}

// Contains various settings for Envoy's http connection manager.
// See here for more information: https://www.envoyproxy.io/docs/envoy/v1.9.0/configuration/http_conn_man/http_conn_man
// Now contains v3 fields as well
// v3 documents https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#extensions-filters-network-http-connection-manager-v3-httpconnectionmanager
type HttpConnectionManagerSettings struct {
	state               protoimpl.MessageState  `protogen:"open.v1"`
	SkipXffAppend       *wrapperspb.BoolValue   `protobuf:"bytes,1,opt,name=skip_xff_append,json=skipXffAppend,proto3" json:"skip_xff_append,omitempty"`
	Via                 *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=via,proto3" json:"via,omitempty"`
	XffNumTrustedHops   *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=xff_num_trusted_hops,json=xffNumTrustedHops,proto3" json:"xff_num_trusted_hops,omitempty"`
	UseRemoteAddress    *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=use_remote_address,json=useRemoteAddress,proto3" json:"use_remote_address,omitempty"`
	GenerateRequestId   *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=generate_request_id,json=generateRequestId,proto3" json:"generate_request_id,omitempty"`
	Proxy_100Continue   *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=proxy_100_continue,json=proxy100Continue,proto3" json:"proxy_100_continue,omitempty"`
	StreamIdleTimeout   *durationpb.Duration    `protobuf:"bytes,7,opt,name=stream_idle_timeout,json=streamIdleTimeout,proto3" json:"stream_idle_timeout,omitempty"`
	IdleTimeout         *durationpb.Duration    `protobuf:"bytes,8,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	MaxRequestHeadersKb *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=max_request_headers_kb,json=maxRequestHeadersKb,proto3" json:"max_request_headers_kb,omitempty"`
	RequestTimeout      *durationpb.Duration    `protobuf:"bytes,10,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	// The amount of time that Envoy will wait for the request headers to be received. The timer is
	// activated when the first byte of the headers is received, and is disarmed when the last byte of
	// the headers has been received. If not specified or set to 0, this timeout is disabled.
	RequestHeadersTimeout *durationpb.Duration    `protobuf:"bytes,11,opt,name=request_headers_timeout,json=requestHeadersTimeout,proto3" json:"request_headers_timeout,omitempty"`
	DrainTimeout          *durationpb.Duration    `protobuf:"bytes,12,opt,name=drain_timeout,json=drainTimeout,proto3" json:"drain_timeout,omitempty"`
	DelayedCloseTimeout   *durationpb.Duration    `protobuf:"bytes,13,opt,name=delayed_close_timeout,json=delayedCloseTimeout,proto3" json:"delayed_close_timeout,omitempty"`
	ServerName            *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	StripAnyHostPort      *wrapperspb.BoolValue   `protobuf:"bytes,36,opt,name=strip_any_host_port,json=stripAnyHostPort,proto3" json:"strip_any_host_port,omitempty"`
	// For explanation of these settings see: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#envoy-api-msg-core-http1protocoloptions
	AcceptHttp_10         *wrapperspb.BoolValue   `protobuf:"bytes,15,opt,name=accept_http_10,json=acceptHttp10,proto3" json:"accept_http_10,omitempty"`
	DefaultHostForHttp_10 *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=default_host_for_http_10,json=defaultHostForHttp10,proto3" json:"default_host_for_http_10,omitempty"`
	// For an explanation of these settings, see: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-http1protocoloptions
	AllowChunkedLength *wrapperspb.BoolValue `protobuf:"bytes,34,opt,name=allow_chunked_length,json=allowChunkedLength,proto3" json:"allow_chunked_length,omitempty"`
	EnableTrailers     *wrapperspb.BoolValue `protobuf:"bytes,35,opt,name=enable_trailers,json=enableTrailers,proto3" json:"enable_trailers,omitempty"`
	// Types that are valid to be assigned to HeaderFormat:
	//
	//	*HttpConnectionManagerSettings_ProperCaseHeaderKeyFormat
	//	*HttpConnectionManagerSettings_PreserveCaseHeaderKeyFormat
	HeaderFormat                isHttpConnectionManagerSettings_HeaderFormat               `protobuf_oneof:"header_format"`
	Tracing                     *tracing.ListenerTracingSettings                           `protobuf:"bytes,17,opt,name=tracing,proto3" json:"tracing,omitempty"`
	ForwardClientCertDetails    HttpConnectionManagerSettings_ForwardClientCertDetails     `protobuf:"varint,18,opt,name=forward_client_cert_details,json=forwardClientCertDetails,proto3,enum=hcm.options.gloo.solo.io.HttpConnectionManagerSettings_ForwardClientCertDetails" json:"forward_client_cert_details,omitempty"`
	SetCurrentClientCertDetails *HttpConnectionManagerSettings_SetCurrentClientCertDetails `protobuf:"bytes,19,opt,name=set_current_client_cert_details,json=setCurrentClientCertDetails,proto3" json:"set_current_client_cert_details,omitempty"`
	PreserveExternalRequestId   *wrapperspb.BoolValue                                      `protobuf:"bytes,20,opt,name=preserve_external_request_id,json=preserveExternalRequestId,proto3" json:"preserve_external_request_id,omitempty"`
	// HttpConnectionManager configuration for protocol upgrade requests.
	// Note: WebSocket upgrades are enabled by default on the HTTP Connection Manager and must be explicitly disabled.
	Upgrades []*protocol_upgrade.ProtocolUpgradeConfig `protobuf:"bytes,21,rep,name=upgrades,proto3" json:"upgrades,omitempty"`
	// For an explanation of these settings see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-httpprotocoloptions
	MaxConnectionDuration *durationpb.Duration `protobuf:"bytes,23,opt,name=max_connection_duration,json=maxConnectionDuration,proto3" json:"max_connection_duration,omitempty"`
	// For an explanation of these settings see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-httpprotocoloptions
	MaxStreamDuration *durationpb.Duration `protobuf:"bytes,24,opt,name=max_stream_duration,json=maxStreamDuration,proto3" json:"max_stream_duration,omitempty"`
	// For an explanation of these settings see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-httpprotocoloptions
	MaxHeadersCount *wrapperspb.UInt32Value `protobuf:"bytes,27,opt,name=max_headers_count,json=maxHeadersCount,proto3" json:"max_headers_count,omitempty"`
	// For an explanation of these settings see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-httpprotocoloptions
	HeadersWithUnderscoresAction HttpConnectionManagerSettings_HeadersWithUnderscoreAction `protobuf:"varint,32,opt,name=headers_with_underscores_action,json=headersWithUnderscoresAction,proto3,enum=hcm.options.gloo.solo.io.HttpConnectionManagerSettings_HeadersWithUnderscoreAction" json:"headers_with_underscores_action,omitempty"`
	// For an explanation of these settings see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-httpprotocoloptions
	MaxRequestsPerConnection *wrapperspb.UInt32Value `protobuf:"bytes,33,opt,name=max_requests_per_connection,json=maxRequestsPerConnection,proto3" json:"max_requests_per_connection,omitempty"`
	// For an explanation of the settings see: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto.html#envoy-v3-api-enum-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-serverheadertransformation
	ServerHeaderTransformation HttpConnectionManagerSettings_ServerHeaderTransformation `protobuf:"varint,25,opt,name=server_header_transformation,json=serverHeaderTransformation,proto3,enum=hcm.options.gloo.solo.io.HttpConnectionManagerSettings_ServerHeaderTransformation" json:"server_header_transformation,omitempty"`
	// Action to take when request URL path contains escaped slash sequences (%2F, %2f, %5C and %5c).
	// The default value can be overridden by the :ref:`http_connection_manager.path_with_escaped_slashes_action<config_http_conn_man_runtime_path_with_escaped_slashes_action>`
	// runtime variable.
	// The :ref:`http_connection_manager.path_with_escaped_slashes_action_sampling<config_http_conn_man_runtime_path_with_escaped_slashes_action_enabled>` runtime
	// variable can be used to apply the action to a portion of all requests.
	PathWithEscapedSlashesAction HttpConnectionManagerSettings_PathWithEscapedSlashesAction `protobuf:"varint,26,opt,name=path_with_escaped_slashes_action,json=pathWithEscapedSlashesAction,proto3,enum=hcm.options.gloo.solo.io.HttpConnectionManagerSettings_PathWithEscapedSlashesAction" json:"path_with_escaped_slashes_action,omitempty"`
	// Supplies the type of codec that the connection manager should use.
	// See here for more information: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#extensions-filters-network-http-connection-manager-v3-httpconnectionmanager
	CodecType HttpConnectionManagerSettings_CodecType `protobuf:"varint,28,opt,name=codec_type,json=codecType,proto3,enum=hcm.options.gloo.solo.io.HttpConnectionManagerSettings_CodecType" json:"codec_type,omitempty"`
	// Determines if adjacent slashes in the path are merged into one before any processing of requests by HTTP filters or routing.
	// See here for more information: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
	MergeSlashes *wrapperspb.BoolValue `protobuf:"bytes,29,opt,name=merge_slashes,json=mergeSlashes,proto3" json:"merge_slashes,omitempty"`
	// Should paths be normalized according to RFC 3986 before any processing of requests by HTTP filters or routing? Defaults to True.
	// See here for more information: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
	NormalizePath       *wrapperspb.BoolValue                                      `protobuf:"bytes,30,opt,name=normalize_path,json=normalizePath,proto3" json:"normalize_path,omitempty"`
	UuidRequestIdConfig *HttpConnectionManagerSettings_UuidRequestIdConfigSettings `protobuf:"bytes,37,opt,name=uuid_request_id_config,json=uuidRequestIdConfig,proto3" json:"uuid_request_id_config,omitempty"`
	// Additional HTTP/2 settings that are passed directly to the HTTP/2 codec.
	Http2ProtocolOptions *protocol.Http2ProtocolOptions `protobuf:"bytes,39,opt,name=http2_protocol_options,json=http2ProtocolOptions,proto3" json:"http2_protocol_options,omitempty"`
	// Configuration of internal addresses
	InternalAddressConfig *HttpConnectionManagerSettings_InternalAddressConfig `protobuf:"bytes,38,opt,name=internal_address_config,json=internalAddressConfig,proto3" json:"internal_address_config,omitempty"`
	// If true, configure Envoy to set the x-fowarded-port header to allow services to find Envoy's listener port.
	AppendXForwardedPort *wrapperspb.BoolValue `protobuf:"bytes,40,opt,name=append_x_forwarded_port,json=appendXForwardedPort,proto3" json:"append_x_forwarded_port,omitempty"`
	// Configuration for early header manipulation
	EarlyHeaderManipulation *headers.EarlyHeaderManipulation `protobuf:"bytes,41,opt,name=early_header_manipulation,json=earlyHeaderManipulation,proto3" json:"early_header_manipulation,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *HttpConnectionManagerSettings) Reset() {
	*x = HttpConnectionManagerSettings{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpConnectionManagerSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpConnectionManagerSettings) ProtoMessage() {}

func (x *HttpConnectionManagerSettings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpConnectionManagerSettings.ProtoReflect.Descriptor instead.
func (*HttpConnectionManagerSettings) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescGZIP(), []int{0}
}

func (x *HttpConnectionManagerSettings) GetSkipXffAppend() *wrapperspb.BoolValue {
	if x != nil {
		return x.SkipXffAppend
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetVia() *wrapperspb.StringValue {
	if x != nil {
		return x.Via
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetXffNumTrustedHops() *wrapperspb.UInt32Value {
	if x != nil {
		return x.XffNumTrustedHops
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetUseRemoteAddress() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseRemoteAddress
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetGenerateRequestId() *wrapperspb.BoolValue {
	if x != nil {
		return x.GenerateRequestId
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetProxy_100Continue() *wrapperspb.BoolValue {
	if x != nil {
		return x.Proxy_100Continue
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetStreamIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.StreamIdleTimeout
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetMaxRequestHeadersKb() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxRequestHeadersKb
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetRequestTimeout() *durationpb.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetRequestHeadersTimeout() *durationpb.Duration {
	if x != nil {
		return x.RequestHeadersTimeout
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetDrainTimeout() *durationpb.Duration {
	if x != nil {
		return x.DrainTimeout
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetDelayedCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.DelayedCloseTimeout
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetServerName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServerName
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetStripAnyHostPort() *wrapperspb.BoolValue {
	if x != nil {
		return x.StripAnyHostPort
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetAcceptHttp_10() *wrapperspb.BoolValue {
	if x != nil {
		return x.AcceptHttp_10
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetDefaultHostForHttp_10() *wrapperspb.StringValue {
	if x != nil {
		return x.DefaultHostForHttp_10
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetAllowChunkedLength() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowChunkedLength
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetEnableTrailers() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableTrailers
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetHeaderFormat() isHttpConnectionManagerSettings_HeaderFormat {
	if x != nil {
		return x.HeaderFormat
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetProperCaseHeaderKeyFormat() *wrapperspb.BoolValue {
	if x != nil {
		if x, ok := x.HeaderFormat.(*HttpConnectionManagerSettings_ProperCaseHeaderKeyFormat); ok {
			return x.ProperCaseHeaderKeyFormat
		}
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetPreserveCaseHeaderKeyFormat() *wrapperspb.BoolValue {
	if x != nil {
		if x, ok := x.HeaderFormat.(*HttpConnectionManagerSettings_PreserveCaseHeaderKeyFormat); ok {
			return x.PreserveCaseHeaderKeyFormat
		}
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetTracing() *tracing.ListenerTracingSettings {
	if x != nil {
		return x.Tracing
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetForwardClientCertDetails() HttpConnectionManagerSettings_ForwardClientCertDetails {
	if x != nil {
		return x.ForwardClientCertDetails
	}
	return HttpConnectionManagerSettings_SANITIZE
}

func (x *HttpConnectionManagerSettings) GetSetCurrentClientCertDetails() *HttpConnectionManagerSettings_SetCurrentClientCertDetails {
	if x != nil {
		return x.SetCurrentClientCertDetails
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetPreserveExternalRequestId() *wrapperspb.BoolValue {
	if x != nil {
		return x.PreserveExternalRequestId
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetUpgrades() []*protocol_upgrade.ProtocolUpgradeConfig {
	if x != nil {
		return x.Upgrades
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetMaxConnectionDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxConnectionDuration
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetMaxStreamDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxStreamDuration
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetMaxHeadersCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxHeadersCount
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetHeadersWithUnderscoresAction() HttpConnectionManagerSettings_HeadersWithUnderscoreAction {
	if x != nil {
		return x.HeadersWithUnderscoresAction
	}
	return HttpConnectionManagerSettings_ALLOW
}

func (x *HttpConnectionManagerSettings) GetMaxRequestsPerConnection() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxRequestsPerConnection
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetServerHeaderTransformation() HttpConnectionManagerSettings_ServerHeaderTransformation {
	if x != nil {
		return x.ServerHeaderTransformation
	}
	return HttpConnectionManagerSettings_OVERWRITE
}

func (x *HttpConnectionManagerSettings) GetPathWithEscapedSlashesAction() HttpConnectionManagerSettings_PathWithEscapedSlashesAction {
	if x != nil {
		return x.PathWithEscapedSlashesAction
	}
	return HttpConnectionManagerSettings_IMPLEMENTATION_SPECIFIC_DEFAULT
}

func (x *HttpConnectionManagerSettings) GetCodecType() HttpConnectionManagerSettings_CodecType {
	if x != nil {
		return x.CodecType
	}
	return HttpConnectionManagerSettings_AUTO
}

func (x *HttpConnectionManagerSettings) GetMergeSlashes() *wrapperspb.BoolValue {
	if x != nil {
		return x.MergeSlashes
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetNormalizePath() *wrapperspb.BoolValue {
	if x != nil {
		return x.NormalizePath
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetUuidRequestIdConfig() *HttpConnectionManagerSettings_UuidRequestIdConfigSettings {
	if x != nil {
		return x.UuidRequestIdConfig
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetHttp2ProtocolOptions() *protocol.Http2ProtocolOptions {
	if x != nil {
		return x.Http2ProtocolOptions
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetInternalAddressConfig() *HttpConnectionManagerSettings_InternalAddressConfig {
	if x != nil {
		return x.InternalAddressConfig
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetAppendXForwardedPort() *wrapperspb.BoolValue {
	if x != nil {
		return x.AppendXForwardedPort
	}
	return nil
}

func (x *HttpConnectionManagerSettings) GetEarlyHeaderManipulation() *headers.EarlyHeaderManipulation {
	if x != nil {
		return x.EarlyHeaderManipulation
	}
	return nil
}

type isHttpConnectionManagerSettings_HeaderFormat interface {
	isHttpConnectionManagerSettings_HeaderFormat()
}

type HttpConnectionManagerSettings_ProperCaseHeaderKeyFormat struct {
	// Formats the REQUEST HEADER by proper casing words: the first character and any character following
	// a special character will be capitalized if it's an alpha character. For example,
	// "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
	// Note that while this results in most headers following conventional casing, certain headers
	// are not covered. For example, the "TE" header will be formatted as "Te".
	ProperCaseHeaderKeyFormat *wrapperspb.BoolValue `protobuf:"bytes,22,opt,name=proper_case_header_key_format,json=properCaseHeaderKeyFormat,proto3,oneof"`
}

type HttpConnectionManagerSettings_PreserveCaseHeaderKeyFormat struct {
	// Generates configuration for a stateful formatter extension that allows using received headers to
	// affect the output of encoding headers. Specifically: preserving REQUEST HEADER case during proxying.
	PreserveCaseHeaderKeyFormat *wrapperspb.BoolValue `protobuf:"bytes,31,opt,name=preserve_case_header_key_format,json=preserveCaseHeaderKeyFormat,proto3,oneof"`
}

func (*HttpConnectionManagerSettings_ProperCaseHeaderKeyFormat) isHttpConnectionManagerSettings_HeaderFormat() {
}

func (*HttpConnectionManagerSettings_PreserveCaseHeaderKeyFormat) isHttpConnectionManagerSettings_HeaderFormat() {
}

type HttpConnectionManagerSettings_SetCurrentClientCertDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       *wrapperspb.BoolValue  `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Cert          *wrapperspb.BoolValue  `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Chain         *wrapperspb.BoolValue  `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	Dns           *wrapperspb.BoolValue  `protobuf:"bytes,4,opt,name=dns,proto3" json:"dns,omitempty"`
	Uri           *wrapperspb.BoolValue  `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpConnectionManagerSettings_SetCurrentClientCertDetails) Reset() {
	*x = HttpConnectionManagerSettings_SetCurrentClientCertDetails{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpConnectionManagerSettings_SetCurrentClientCertDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpConnectionManagerSettings_SetCurrentClientCertDetails) ProtoMessage() {}

func (x *HttpConnectionManagerSettings_SetCurrentClientCertDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpConnectionManagerSettings_SetCurrentClientCertDetails.ProtoReflect.Descriptor instead.
func (*HttpConnectionManagerSettings_SetCurrentClientCertDetails) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescGZIP(), []int{0, 0}
}

func (x *HttpConnectionManagerSettings_SetCurrentClientCertDetails) GetSubject() *wrapperspb.BoolValue {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *HttpConnectionManagerSettings_SetCurrentClientCertDetails) GetCert() *wrapperspb.BoolValue {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *HttpConnectionManagerSettings_SetCurrentClientCertDetails) GetChain() *wrapperspb.BoolValue {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *HttpConnectionManagerSettings_SetCurrentClientCertDetails) GetDns() *wrapperspb.BoolValue {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *HttpConnectionManagerSettings_SetCurrentClientCertDetails) GetUri() *wrapperspb.BoolValue {
	if x != nil {
		return x.Uri
	}
	return nil
}

// Contains setup for Envoy's UuidRequestIdConfig
type HttpConnectionManagerSettings_UuidRequestIdConfigSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the implementation alters the UUID to contain the trace sampling decision as per the
	// `UuidRequestIdConfig` message documentation. This defaults to true. If disabled no
	// modification to the UUID will be performed. It is important to note that if disabled,
	// stable sampling of traces, access logs, etc. will no longer work and only random sampling will
	// be possible.
	PackTraceReason *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=pack_trace_reason,json=packTraceReason,proto3" json:"pack_trace_reason,omitempty"`
	// Set whether to use :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` for sampling or not.
	// This defaults to true. See the :ref:`context propagation <arch_overview_tracing_context_propagation>`
	// overview for more information.
	UseRequestIdForTraceSampling *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=use_request_id_for_trace_sampling,json=useRequestIdForTraceSampling,proto3" json:"use_request_id_for_trace_sampling,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *HttpConnectionManagerSettings_UuidRequestIdConfigSettings) Reset() {
	*x = HttpConnectionManagerSettings_UuidRequestIdConfigSettings{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpConnectionManagerSettings_UuidRequestIdConfigSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpConnectionManagerSettings_UuidRequestIdConfigSettings) ProtoMessage() {}

func (x *HttpConnectionManagerSettings_UuidRequestIdConfigSettings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpConnectionManagerSettings_UuidRequestIdConfigSettings.ProtoReflect.Descriptor instead.
func (*HttpConnectionManagerSettings_UuidRequestIdConfigSettings) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescGZIP(), []int{0, 1}
}

func (x *HttpConnectionManagerSettings_UuidRequestIdConfigSettings) GetPackTraceReason() *wrapperspb.BoolValue {
	if x != nil {
		return x.PackTraceReason
	}
	return nil
}

func (x *HttpConnectionManagerSettings_UuidRequestIdConfigSettings) GetUseRequestIdForTraceSampling() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseRequestIdForTraceSampling
	}
	return nil
}

// Subnet mask for CIDR ranges
type HttpConnectionManagerSettings_CidrRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IPv4 or IPv6 address
	AddressPrefix string `protobuf:"bytes,1,opt,name=address_prefix,json=addressPrefix,proto3" json:"address_prefix,omitempty"`
	// Length of prefix in bits
	PrefixLen     *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpConnectionManagerSettings_CidrRange) Reset() {
	*x = HttpConnectionManagerSettings_CidrRange{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpConnectionManagerSettings_CidrRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpConnectionManagerSettings_CidrRange) ProtoMessage() {}

func (x *HttpConnectionManagerSettings_CidrRange) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpConnectionManagerSettings_CidrRange.ProtoReflect.Descriptor instead.
func (*HttpConnectionManagerSettings_CidrRange) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescGZIP(), []int{0, 2}
}

func (x *HttpConnectionManagerSettings_CidrRange) GetAddressPrefix() string {
	if x != nil {
		return x.AddressPrefix
	}
	return ""
}

func (x *HttpConnectionManagerSettings_CidrRange) GetPrefixLen() *wrapperspb.UInt32Value {
	if x != nil {
		return x.PrefixLen
	}
	return nil
}

// Manages Envoy's internal address configuration
type HttpConnectionManagerSettings_InternalAddressConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether unix socket addresses should be considered internal
	UnixSockets *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=unix_sockets,json=unixSockets,proto3" json:"unix_sockets,omitempty"`
	// List of CIDR ranges that are treated as internal
	CidrRanges    []*HttpConnectionManagerSettings_CidrRange `protobuf:"bytes,2,rep,name=cidr_ranges,json=cidrRanges,proto3" json:"cidr_ranges,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpConnectionManagerSettings_InternalAddressConfig) Reset() {
	*x = HttpConnectionManagerSettings_InternalAddressConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpConnectionManagerSettings_InternalAddressConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpConnectionManagerSettings_InternalAddressConfig) ProtoMessage() {}

func (x *HttpConnectionManagerSettings_InternalAddressConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpConnectionManagerSettings_InternalAddressConfig.ProtoReflect.Descriptor instead.
func (*HttpConnectionManagerSettings_InternalAddressConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescGZIP(), []int{0, 3}
}

func (x *HttpConnectionManagerSettings_InternalAddressConfig) GetUnixSockets() *wrapperspb.BoolValue {
	if x != nil {
		return x.UnixSockets
	}
	return nil
}

func (x *HttpConnectionManagerSettings_InternalAddressConfig) GetCidrRanges() []*HttpConnectionManagerSettings_CidrRange {
	if x != nil {
		return x.CidrRanges
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDesc = "" +
	"\n" +
	"Bgithub.com/solo-io/gloo/projects/gloo/api/v1/options/hcm/hcm.proto\x12\x18hcm.options.gloo.solo.io\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x19google/protobuf/any.proto\x1aJgithub.com/solo-io/gloo/projects/gloo/api/v1/options/tracing/tracing.proto\x1a\\github.com/solo-io/gloo/projects/gloo/api/v1/options/protocol_upgrade/protocol_upgrade.proto\x1aLgithub.com/solo-io/gloo/projects/gloo/api/v1/options/protocol/protocol.proto\x1aJgithub.com/solo-io/gloo/projects/gloo/api/v1/options/headers/headers.proto\x1a\x12extproto/ext.proto\"\xcb'\n" +
	"\x1dHttpConnectionManagerSettings\x12B\n" +
	"\x0fskip_xff_append\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueR\rskipXffAppend\x12.\n" +
	"\x03via\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueR\x03via\x12M\n" +
	"\x14xff_num_trusted_hops\x18\x03 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x11xffNumTrustedHops\x12H\n" +
	"\x12use_remote_address\x18\x04 \x01(\v2\x1a.google.protobuf.BoolValueR\x10useRemoteAddress\x12J\n" +
	"\x13generate_request_id\x18\x05 \x01(\v2\x1a.google.protobuf.BoolValueR\x11generateRequestId\x12H\n" +
	"\x12proxy_100_continue\x18\x06 \x01(\v2\x1a.google.protobuf.BoolValueR\x10proxy100Continue\x12I\n" +
	"\x13stream_idle_timeout\x18\a \x01(\v2\x19.google.protobuf.DurationR\x11streamIdleTimeout\x12<\n" +
	"\fidle_timeout\x18\b \x01(\v2\x19.google.protobuf.DurationR\vidleTimeout\x12Q\n" +
	"\x16max_request_headers_kb\x18\t \x01(\v2\x1c.google.protobuf.UInt32ValueR\x13maxRequestHeadersKb\x12B\n" +
	"\x0frequest_timeout\x18\n" +
	" \x01(\v2\x19.google.protobuf.DurationR\x0erequestTimeout\x12Q\n" +
	"\x17request_headers_timeout\x18\v \x01(\v2\x19.google.protobuf.DurationR\x15requestHeadersTimeout\x12>\n" +
	"\rdrain_timeout\x18\f \x01(\v2\x19.google.protobuf.DurationR\fdrainTimeout\x12M\n" +
	"\x15delayed_close_timeout\x18\r \x01(\v2\x19.google.protobuf.DurationR\x13delayedCloseTimeout\x12=\n" +
	"\vserver_name\x18\x0e \x01(\v2\x1c.google.protobuf.StringValueR\n" +
	"serverName\x12I\n" +
	"\x13strip_any_host_port\x18$ \x01(\v2\x1a.google.protobuf.BoolValueR\x10stripAnyHostPort\x12@\n" +
	"\x0eaccept_http_10\x18\x0f \x01(\v2\x1a.google.protobuf.BoolValueR\facceptHttp10\x12T\n" +
	"\x18default_host_for_http_10\x18\x10 \x01(\v2\x1c.google.protobuf.StringValueR\x14defaultHostForHttp10\x12L\n" +
	"\x14allow_chunked_length\x18\" \x01(\v2\x1a.google.protobuf.BoolValueR\x12allowChunkedLength\x12C\n" +
	"\x0fenable_trailers\x18# \x01(\v2\x1a.google.protobuf.BoolValueR\x0eenableTrailers\x12^\n" +
	"\x1dproper_case_header_key_format\x18\x16 \x01(\v2\x1a.google.protobuf.BoolValueH\x00R\x19properCaseHeaderKeyFormat\x12b\n" +
	"\x1fpreserve_case_header_key_format\x18\x1f \x01(\v2\x1a.google.protobuf.BoolValueH\x00R\x1bpreserveCaseHeaderKeyFormat\x12O\n" +
	"\atracing\x18\x11 \x01(\v25.tracing.options.gloo.solo.io.ListenerTracingSettingsR\atracing\x12\x8f\x01\n" +
	"\x1bforward_client_cert_details\x18\x12 \x01(\x0e2P.hcm.options.gloo.solo.io.HttpConnectionManagerSettings.ForwardClientCertDetailsR\x18forwardClientCertDetails\x12\x99\x01\n" +
	"\x1fset_current_client_cert_details\x18\x13 \x01(\v2S.hcm.options.gloo.solo.io.HttpConnectionManagerSettings.SetCurrentClientCertDetailsR\x1bsetCurrentClientCertDetails\x12[\n" +
	"\x1cpreserve_external_request_id\x18\x14 \x01(\v2\x1a.google.protobuf.BoolValueR\x19preserveExternalRequestId\x12X\n" +
	"\bupgrades\x18\x15 \x03(\v2<.protocol_upgrade.options.gloo.solo.io.ProtocolUpgradeConfigR\bupgrades\x12Q\n" +
	"\x17max_connection_duration\x18\x17 \x01(\v2\x19.google.protobuf.DurationR\x15maxConnectionDuration\x12I\n" +
	"\x13max_stream_duration\x18\x18 \x01(\v2\x19.google.protobuf.DurationR\x11maxStreamDuration\x12H\n" +
	"\x11max_headers_count\x18\x1b \x01(\v2\x1c.google.protobuf.UInt32ValueR\x0fmaxHeadersCount\x12\x9a\x01\n" +
	"\x1fheaders_with_underscores_action\x18  \x01(\x0e2S.hcm.options.gloo.solo.io.HttpConnectionManagerSettings.HeadersWithUnderscoreActionR\x1cheadersWithUnderscoresAction\x12[\n" +
	"\x1bmax_requests_per_connection\x18! \x01(\v2\x1c.google.protobuf.UInt32ValueR\x18maxRequestsPerConnection\x12\x94\x01\n" +
	"\x1cserver_header_transformation\x18\x19 \x01(\x0e2R.hcm.options.gloo.solo.io.HttpConnectionManagerSettings.ServerHeaderTransformationR\x1aserverHeaderTransformation\x12\x9c\x01\n" +
	" path_with_escaped_slashes_action\x18\x1a \x01(\x0e2T.hcm.options.gloo.solo.io.HttpConnectionManagerSettings.PathWithEscapedSlashesActionR\x1cpathWithEscapedSlashesAction\x12`\n" +
	"\n" +
	"codec_type\x18\x1c \x01(\x0e2A.hcm.options.gloo.solo.io.HttpConnectionManagerSettings.CodecTypeR\tcodecType\x12?\n" +
	"\rmerge_slashes\x18\x1d \x01(\v2\x1a.google.protobuf.BoolValueR\fmergeSlashes\x12A\n" +
	"\x0enormalize_path\x18\x1e \x01(\v2\x1a.google.protobuf.BoolValueR\rnormalizePath\x12\x88\x01\n" +
	"\x16uuid_request_id_config\x18% \x01(\v2S.hcm.options.gloo.solo.io.HttpConnectionManagerSettings.UuidRequestIdConfigSettingsR\x13uuidRequestIdConfig\x12i\n" +
	"\x16http2_protocol_options\x18' \x01(\v23.protocol.options.gloo.solo.io.Http2ProtocolOptionsR\x14http2ProtocolOptions\x12\x85\x01\n" +
	"\x17internal_address_config\x18& \x01(\v2M.hcm.options.gloo.solo.io.HttpConnectionManagerSettings.InternalAddressConfigR\x15internalAddressConfig\x12Q\n" +
	"\x17append_x_forwarded_port\x18( \x01(\v2\x1a.google.protobuf.BoolValueR\x14appendXForwardedPort\x12q\n" +
	"\x19early_header_manipulation\x18) \x01(\v25.headers.options.gloo.solo.io.EarlyHeaderManipulationR\x17earlyHeaderManipulation\x1a\x91\x02\n" +
	"\x1bSetCurrentClientCertDetails\x124\n" +
	"\asubject\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueR\asubject\x12.\n" +
	"\x04cert\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\x04cert\x120\n" +
	"\x05chain\x18\x03 \x01(\v2\x1a.google.protobuf.BoolValueR\x05chain\x12,\n" +
	"\x03dns\x18\x04 \x01(\v2\x1a.google.protobuf.BoolValueR\x03dns\x12,\n" +
	"\x03uri\x18\x05 \x01(\v2\x1a.google.protobuf.BoolValueR\x03uri\x1a\xca\x01\n" +
	"\x1bUuidRequestIdConfigSettings\x12F\n" +
	"\x11pack_trace_reason\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueR\x0fpackTraceReason\x12c\n" +
	"!use_request_id_for_trace_sampling\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\x1cuseRequestIdForTraceSampling\x1ao\n" +
	"\tCidrRange\x12%\n" +
	"\x0eaddress_prefix\x18\x01 \x01(\tR\raddressPrefix\x12;\n" +
	"\n" +
	"prefix_len\x18\x02 \x01(\v2\x1c.google.protobuf.UInt32ValueR\tprefixLen\x1a\xba\x01\n" +
	"\x15InternalAddressConfig\x12=\n" +
	"\funix_sockets\x18\x01 \x01(\v2\x1a.google.protobuf.BoolValueR\vunixSockets\x12b\n" +
	"\vcidr_ranges\x18\x02 \x03(\v2A.hcm.options.gloo.solo.io.HttpConnectionManagerSettings.CidrRangeR\n" +
	"cidrRanges\"y\n" +
	"\x18ForwardClientCertDetails\x12\f\n" +
	"\bSANITIZE\x10\x00\x12\x10\n" +
	"\fFORWARD_ONLY\x10\x01\x12\x12\n" +
	"\x0eAPPEND_FORWARD\x10\x02\x12\x10\n" +
	"\fSANITIZE_SET\x10\x03\x12\x17\n" +
	"\x13ALWAYS_FORWARD_ONLY\x10\x04\"S\n" +
	"\x1aServerHeaderTransformation\x12\r\n" +
	"\tOVERWRITE\x10\x00\x12\x14\n" +
	"\x10APPEND_IF_ABSENT\x10\x01\x12\x10\n" +
	"\fPASS_THROUGH\x10\x02\"T\n" +
	"\x1bHeadersWithUnderscoreAction\x12\t\n" +
	"\x05ALLOW\x10\x00\x12\x19\n" +
	"\x15REJECT_CLIENT_REQUEST\x10\x01\x12\x0f\n" +
	"\vDROP_HEADER\x10\x02\"\xa0\x01\n" +
	"\x1cPathWithEscapedSlashesAction\x12#\n" +
	"\x1fIMPLEMENTATION_SPECIFIC_DEFAULT\x10\x00\x12\x12\n" +
	"\x0eKEEP_UNCHANGED\x10\x01\x12\x12\n" +
	"\x0eREJECT_REQUEST\x10\x02\x12\x19\n" +
	"\x15UNESCAPE_AND_REDIRECT\x10\x03\x12\x18\n" +
	"\x14UNESCAPE_AND_FORWARD\x10\x04\"+\n" +
	"\tCodecType\x12\b\n" +
	"\x04AUTO\x10\x00\x12\t\n" +
	"\x05HTTP1\x10\x01\x12\t\n" +
	"\x05HTTP2\x10\x02B\x0f\n" +
	"\rheader_formatBJ\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z<github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/hcmb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_goTypes = []any{
	(HttpConnectionManagerSettings_ForwardClientCertDetails)(0),       // 0: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.ForwardClientCertDetails
	(HttpConnectionManagerSettings_ServerHeaderTransformation)(0),     // 1: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.ServerHeaderTransformation
	(HttpConnectionManagerSettings_HeadersWithUnderscoreAction)(0),    // 2: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.HeadersWithUnderscoreAction
	(HttpConnectionManagerSettings_PathWithEscapedSlashesAction)(0),   // 3: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.PathWithEscapedSlashesAction
	(HttpConnectionManagerSettings_CodecType)(0),                      // 4: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.CodecType
	(*HttpConnectionManagerSettings)(nil),                             // 5: hcm.options.gloo.solo.io.HttpConnectionManagerSettings
	(*HttpConnectionManagerSettings_SetCurrentClientCertDetails)(nil), // 6: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.SetCurrentClientCertDetails
	(*HttpConnectionManagerSettings_UuidRequestIdConfigSettings)(nil), // 7: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.UuidRequestIdConfigSettings
	(*HttpConnectionManagerSettings_CidrRange)(nil),                   // 8: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.CidrRange
	(*HttpConnectionManagerSettings_InternalAddressConfig)(nil),       // 9: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.InternalAddressConfig
	(*wrapperspb.BoolValue)(nil),                                      // 10: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),                                    // 11: google.protobuf.StringValue
	(*wrapperspb.UInt32Value)(nil),                                    // 12: google.protobuf.UInt32Value
	(*durationpb.Duration)(nil),                                       // 13: google.protobuf.Duration
	(*tracing.ListenerTracingSettings)(nil),                           // 14: tracing.options.gloo.solo.io.ListenerTracingSettings
	(*protocol_upgrade.ProtocolUpgradeConfig)(nil),                    // 15: protocol_upgrade.options.gloo.solo.io.ProtocolUpgradeConfig
	(*protocol.Http2ProtocolOptions)(nil),                             // 16: protocol.options.gloo.solo.io.Http2ProtocolOptions
	(*headers.EarlyHeaderManipulation)(nil),                           // 17: headers.options.gloo.solo.io.EarlyHeaderManipulation
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_depIdxs = []int32{
	10, // 0: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.skip_xff_append:type_name -> google.protobuf.BoolValue
	11, // 1: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.via:type_name -> google.protobuf.StringValue
	12, // 2: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.xff_num_trusted_hops:type_name -> google.protobuf.UInt32Value
	10, // 3: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.use_remote_address:type_name -> google.protobuf.BoolValue
	10, // 4: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.generate_request_id:type_name -> google.protobuf.BoolValue
	10, // 5: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.proxy_100_continue:type_name -> google.protobuf.BoolValue
	13, // 6: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.stream_idle_timeout:type_name -> google.protobuf.Duration
	13, // 7: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.idle_timeout:type_name -> google.protobuf.Duration
	12, // 8: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.max_request_headers_kb:type_name -> google.protobuf.UInt32Value
	13, // 9: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.request_timeout:type_name -> google.protobuf.Duration
	13, // 10: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.request_headers_timeout:type_name -> google.protobuf.Duration
	13, // 11: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.drain_timeout:type_name -> google.protobuf.Duration
	13, // 12: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.delayed_close_timeout:type_name -> google.protobuf.Duration
	11, // 13: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.server_name:type_name -> google.protobuf.StringValue
	10, // 14: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.strip_any_host_port:type_name -> google.protobuf.BoolValue
	10, // 15: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.accept_http_10:type_name -> google.protobuf.BoolValue
	11, // 16: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.default_host_for_http_10:type_name -> google.protobuf.StringValue
	10, // 17: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.allow_chunked_length:type_name -> google.protobuf.BoolValue
	10, // 18: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.enable_trailers:type_name -> google.protobuf.BoolValue
	10, // 19: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.proper_case_header_key_format:type_name -> google.protobuf.BoolValue
	10, // 20: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.preserve_case_header_key_format:type_name -> google.protobuf.BoolValue
	14, // 21: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.tracing:type_name -> tracing.options.gloo.solo.io.ListenerTracingSettings
	0,  // 22: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.forward_client_cert_details:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings.ForwardClientCertDetails
	6,  // 23: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.set_current_client_cert_details:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings.SetCurrentClientCertDetails
	10, // 24: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.preserve_external_request_id:type_name -> google.protobuf.BoolValue
	15, // 25: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.upgrades:type_name -> protocol_upgrade.options.gloo.solo.io.ProtocolUpgradeConfig
	13, // 26: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.max_connection_duration:type_name -> google.protobuf.Duration
	13, // 27: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.max_stream_duration:type_name -> google.protobuf.Duration
	12, // 28: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.max_headers_count:type_name -> google.protobuf.UInt32Value
	2,  // 29: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.headers_with_underscores_action:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings.HeadersWithUnderscoreAction
	12, // 30: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.max_requests_per_connection:type_name -> google.protobuf.UInt32Value
	1,  // 31: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.server_header_transformation:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings.ServerHeaderTransformation
	3,  // 32: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.path_with_escaped_slashes_action:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings.PathWithEscapedSlashesAction
	4,  // 33: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.codec_type:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings.CodecType
	10, // 34: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.merge_slashes:type_name -> google.protobuf.BoolValue
	10, // 35: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.normalize_path:type_name -> google.protobuf.BoolValue
	7,  // 36: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.uuid_request_id_config:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings.UuidRequestIdConfigSettings
	16, // 37: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.http2_protocol_options:type_name -> protocol.options.gloo.solo.io.Http2ProtocolOptions
	9,  // 38: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.internal_address_config:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings.InternalAddressConfig
	10, // 39: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.append_x_forwarded_port:type_name -> google.protobuf.BoolValue
	17, // 40: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.early_header_manipulation:type_name -> headers.options.gloo.solo.io.EarlyHeaderManipulation
	10, // 41: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.SetCurrentClientCertDetails.subject:type_name -> google.protobuf.BoolValue
	10, // 42: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.SetCurrentClientCertDetails.cert:type_name -> google.protobuf.BoolValue
	10, // 43: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.SetCurrentClientCertDetails.chain:type_name -> google.protobuf.BoolValue
	10, // 44: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.SetCurrentClientCertDetails.dns:type_name -> google.protobuf.BoolValue
	10, // 45: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.SetCurrentClientCertDetails.uri:type_name -> google.protobuf.BoolValue
	10, // 46: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.UuidRequestIdConfigSettings.pack_trace_reason:type_name -> google.protobuf.BoolValue
	10, // 47: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.UuidRequestIdConfigSettings.use_request_id_for_trace_sampling:type_name -> google.protobuf.BoolValue
	12, // 48: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.CidrRange.prefix_len:type_name -> google.protobuf.UInt32Value
	10, // 49: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.InternalAddressConfig.unix_sockets:type_name -> google.protobuf.BoolValue
	8,  // 50: hcm.options.gloo.solo.io.HttpConnectionManagerSettings.InternalAddressConfig.cidr_ranges:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings.CidrRange
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_init() }
func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes[0].OneofWrappers = []any{
		(*HttpConnectionManagerSettings_ProperCaseHeaderKeyFormat)(nil),
		(*HttpConnectionManagerSettings_PreserveCaseHeaderKeyFormat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_hcm_hcm_proto_depIdxs = nil
}
