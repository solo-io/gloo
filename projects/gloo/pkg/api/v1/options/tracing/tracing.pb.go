// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/tracing/tracing.proto

package tracing

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	v3 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/config/trace/v3"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	_ "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TracingTagMetadata_Kind int32

const (
	// The metadata is extracted from the stream metadata.
	TracingTagMetadata_REQUEST TracingTagMetadata_Kind = 0
	// The metadata is extracted from the endpoint metadata.
	TracingTagMetadata_ENDPOINT TracingTagMetadata_Kind = 1
)

// Enum value maps for TracingTagMetadata_Kind.
var (
	TracingTagMetadata_Kind_name = map[int32]string{
		0: "REQUEST",
		1: "ENDPOINT",
	}
	TracingTagMetadata_Kind_value = map[string]int32{
		"REQUEST":  0,
		"ENDPOINT": 1,
	}
)

func (x TracingTagMetadata_Kind) Enum() *TracingTagMetadata_Kind {
	p := new(TracingTagMetadata_Kind)
	*p = x
	return p
}

func (x TracingTagMetadata_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TracingTagMetadata_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_enumTypes[0].Descriptor()
}

func (TracingTagMetadata_Kind) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_enumTypes[0]
}

func (x TracingTagMetadata_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TracingTagMetadata_Kind.Descriptor instead.
func (TracingTagMetadata_Kind) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescGZIP(), []int{5, 0}
}

// Contains settings for configuring Envoy's tracing capabilities at the listener level.
// See [here](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing.html) for additional information on Envoy's tracing capabilities.
// See [here](https://docs.solo.io/gloo-edge/latest/guides/observability/tracing/) for additional information about configuring tracing with Gloo Edge.
type ListenerTracingSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. If specified, Envoy will include the headers and header values for any matching request headers.
	RequestHeadersForTags []*wrapperspb.StringValue `protobuf:"bytes,1,rep,name=request_headers_for_tags,json=requestHeadersForTags,proto3" json:"request_headers_for_tags,omitempty"`
	// Optional. If true, Envoy will include logs for streaming events. Default: false.
	Verbose *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=verbose,proto3" json:"verbose,omitempty"`
	// Requests can produce traces by random sampling or when the `x-client-trace-id` header is provided.
	// TracePercentages defines the limits for random, forced, and overall tracing percentages.
	TracePercentages *TracePercentages `protobuf:"bytes,3,opt,name=trace_percentages,json=tracePercentages,proto3" json:"trace_percentages,omitempty"`
	// Optional. If not specified, no tracing will be performed
	// ProviderConfig defines the configuration for an external tracing provider.
	//
	// Types that are valid to be assigned to ProviderConfig:
	//
	//	*ListenerTracingSettings_ZipkinConfig
	//	*ListenerTracingSettings_DatadogConfig
	//	*ListenerTracingSettings_OpenTelemetryConfig
	//	*ListenerTracingSettings_OpenCensusConfig
	ProviderConfig isListenerTracingSettings_ProviderConfig `protobuf_oneof:"provider_config"`
	// Optional. If specified, Envoy will include the environment variables with the given tag as tracing tags.
	EnvironmentVariablesForTags []*TracingTagEnvironmentVariable `protobuf:"bytes,6,rep,name=environment_variables_for_tags,json=environmentVariablesForTags,proto3" json:"environment_variables_for_tags,omitempty"`
	// Optional. If specified, Envoy will include the literals with the given tag as tracing tags.
	LiteralsForTags []*TracingTagLiteral `protobuf:"bytes,7,rep,name=literals_for_tags,json=literalsForTags,proto3" json:"literals_for_tags,omitempty"`
	// Optional. If specified, Envoy will include tags from the dynamic metadata.
	MetadataForTags []*TracingTagMetadata `protobuf:"bytes,11,rep,name=metadata_for_tags,json=metadataForTags,proto3" json:"metadata_for_tags,omitempty"`
	// Optional
	// Create separate tracing span for each upstream request if true. And if this flag is set to true, the tracing provider will assume that Envoy
	// will be independent hop in the trace chain and may set span type to client or server based on this flag.
	SpawnUpstreamSpan bool `protobuf:"varint,10,opt,name=spawn_upstream_span,json=spawnUpstreamSpan,proto3" json:"spawn_upstream_span,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListenerTracingSettings) Reset() {
	*x = ListenerTracingSettings{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListenerTracingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerTracingSettings) ProtoMessage() {}

func (x *ListenerTracingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerTracingSettings.ProtoReflect.Descriptor instead.
func (*ListenerTracingSettings) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescGZIP(), []int{0}
}

func (x *ListenerTracingSettings) GetRequestHeadersForTags() []*wrapperspb.StringValue {
	if x != nil {
		return x.RequestHeadersForTags
	}
	return nil
}

func (x *ListenerTracingSettings) GetVerbose() *wrapperspb.BoolValue {
	if x != nil {
		return x.Verbose
	}
	return nil
}

func (x *ListenerTracingSettings) GetTracePercentages() *TracePercentages {
	if x != nil {
		return x.TracePercentages
	}
	return nil
}

func (x *ListenerTracingSettings) GetProviderConfig() isListenerTracingSettings_ProviderConfig {
	if x != nil {
		return x.ProviderConfig
	}
	return nil
}

func (x *ListenerTracingSettings) GetZipkinConfig() *v3.ZipkinConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*ListenerTracingSettings_ZipkinConfig); ok {
			return x.ZipkinConfig
		}
	}
	return nil
}

func (x *ListenerTracingSettings) GetDatadogConfig() *v3.DatadogConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*ListenerTracingSettings_DatadogConfig); ok {
			return x.DatadogConfig
		}
	}
	return nil
}

func (x *ListenerTracingSettings) GetOpenTelemetryConfig() *v3.OpenTelemetryConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*ListenerTracingSettings_OpenTelemetryConfig); ok {
			return x.OpenTelemetryConfig
		}
	}
	return nil
}

func (x *ListenerTracingSettings) GetOpenCensusConfig() *v3.OpenCensusConfig {
	if x != nil {
		if x, ok := x.ProviderConfig.(*ListenerTracingSettings_OpenCensusConfig); ok {
			return x.OpenCensusConfig
		}
	}
	return nil
}

func (x *ListenerTracingSettings) GetEnvironmentVariablesForTags() []*TracingTagEnvironmentVariable {
	if x != nil {
		return x.EnvironmentVariablesForTags
	}
	return nil
}

func (x *ListenerTracingSettings) GetLiteralsForTags() []*TracingTagLiteral {
	if x != nil {
		return x.LiteralsForTags
	}
	return nil
}

func (x *ListenerTracingSettings) GetMetadataForTags() []*TracingTagMetadata {
	if x != nil {
		return x.MetadataForTags
	}
	return nil
}

func (x *ListenerTracingSettings) GetSpawnUpstreamSpan() bool {
	if x != nil {
		return x.SpawnUpstreamSpan
	}
	return false
}

type isListenerTracingSettings_ProviderConfig interface {
	isListenerTracingSettings_ProviderConfig()
}

type ListenerTracingSettings_ZipkinConfig struct {
	ZipkinConfig *v3.ZipkinConfig `protobuf:"bytes,4,opt,name=zipkin_config,json=zipkinConfig,proto3,oneof"`
}

type ListenerTracingSettings_DatadogConfig struct {
	DatadogConfig *v3.DatadogConfig `protobuf:"bytes,5,opt,name=datadog_config,json=datadogConfig,proto3,oneof"`
}

type ListenerTracingSettings_OpenTelemetryConfig struct {
	OpenTelemetryConfig *v3.OpenTelemetryConfig `protobuf:"bytes,8,opt,name=open_telemetry_config,json=openTelemetryConfig,proto3,oneof"`
}

type ListenerTracingSettings_OpenCensusConfig struct {
	OpenCensusConfig *v3.OpenCensusConfig `protobuf:"bytes,9,opt,name=open_census_config,json=openCensusConfig,proto3,oneof"`
}

func (*ListenerTracingSettings_ZipkinConfig) isListenerTracingSettings_ProviderConfig() {}

func (*ListenerTracingSettings_DatadogConfig) isListenerTracingSettings_ProviderConfig() {}

func (*ListenerTracingSettings_OpenTelemetryConfig) isListenerTracingSettings_ProviderConfig() {}

func (*ListenerTracingSettings_OpenCensusConfig) isListenerTracingSettings_ProviderConfig() {}

// Contains settings for configuring Envoy's tracing capabilities at the route level.
// Note: must also specify ListenerTracingSettings for the associated listener.
// See [here](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing.html) for additional information on Envoy's tracing capabilities.
// See [here](https://docs.solo.io/gloo-edge/latest/guides/observability/tracing/) for additional information about configuring tracing with Gloo Edge.
type RouteTracingSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional. If set, will be used to identify the route that produced the trace.
	// Note that this value will be overridden if the "x-envoy-decorator-operation" header is passed.
	RouteDescriptor string `protobuf:"bytes,1,opt,name=route_descriptor,json=routeDescriptor,proto3" json:"route_descriptor,omitempty"`
	// Requests can produce traces by random sampling or when the `x-client-trace-id` header is provided.
	// TracePercentages defines the limits for random, forced, and overall tracing percentages.
	TracePercentages *TracePercentages `protobuf:"bytes,2,opt,name=trace_percentages,json=tracePercentages,proto3" json:"trace_percentages,omitempty"`
	// Optional. Default is true, If set to false, the tracing headers will not propagate to the upstream.
	Propagate     *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=propagate,proto3" json:"propagate,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteTracingSettings) Reset() {
	*x = RouteTracingSettings{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteTracingSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTracingSettings) ProtoMessage() {}

func (x *RouteTracingSettings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTracingSettings.ProtoReflect.Descriptor instead.
func (*RouteTracingSettings) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescGZIP(), []int{1}
}

func (x *RouteTracingSettings) GetRouteDescriptor() string {
	if x != nil {
		return x.RouteDescriptor
	}
	return ""
}

func (x *RouteTracingSettings) GetTracePercentages() *TracePercentages {
	if x != nil {
		return x.TracePercentages
	}
	return nil
}

func (x *RouteTracingSettings) GetPropagate() *wrapperspb.BoolValue {
	if x != nil {
		return x.Propagate
	}
	return nil
}

// Requests can produce traces by random sampling or when the `x-client-trace-id` header is provided.
// TracePercentages defines the limits for random, forced, and overall tracing percentages.
type TracePercentages struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Percentage of requests that should produce traces when the `x-client-trace-id` header is provided.
	// optional, defaults to 100.0
	// This should be a value between 0.0 and 100.0, with up to 6 significant digits.
	ClientSamplePercentage *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=client_sample_percentage,json=clientSamplePercentage,proto3" json:"client_sample_percentage,omitempty"`
	// Percentage of requests that should produce traces by random sampling.
	// optional, defaults to 100.0
	// This should be a value between 0.0 and 100.0, with up to 6 significant digits.
	RandomSamplePercentage *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=random_sample_percentage,json=randomSamplePercentage,proto3" json:"random_sample_percentage,omitempty"`
	// Overall percentage of requests that should produce traces.
	// optional, defaults to 100.0
	// This should be a value between 0.0 and 100.0, with up to 6 significant digits.
	OverallSamplePercentage *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=overall_sample_percentage,json=overallSamplePercentage,proto3" json:"overall_sample_percentage,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TracePercentages) Reset() {
	*x = TracePercentages{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracePercentages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracePercentages) ProtoMessage() {}

func (x *TracePercentages) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracePercentages.ProtoReflect.Descriptor instead.
func (*TracePercentages) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescGZIP(), []int{2}
}

func (x *TracePercentages) GetClientSamplePercentage() *wrapperspb.FloatValue {
	if x != nil {
		return x.ClientSamplePercentage
	}
	return nil
}

func (x *TracePercentages) GetRandomSamplePercentage() *wrapperspb.FloatValue {
	if x != nil {
		return x.RandomSamplePercentage
	}
	return nil
}

func (x *TracePercentages) GetOverallSamplePercentage() *wrapperspb.FloatValue {
	if x != nil {
		return x.OverallSamplePercentage
	}
	return nil
}

// Requests can produce traces with custom tags.
// TracingTagEnvironmentVariable defines an environment variable which gets added as custom tag.
type TracingTagEnvironmentVariable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Used to populate the tag name.
	Tag *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// Environment variable name to obtain the value to populate the tag value.
	Name *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// When the environment variable is not found, the tag value will be populated with this default value if specified,
	// otherwise no tag will be populated.
	DefaultValue  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracingTagEnvironmentVariable) Reset() {
	*x = TracingTagEnvironmentVariable{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracingTagEnvironmentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingTagEnvironmentVariable) ProtoMessage() {}

func (x *TracingTagEnvironmentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingTagEnvironmentVariable.ProtoReflect.Descriptor instead.
func (*TracingTagEnvironmentVariable) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescGZIP(), []int{3}
}

func (x *TracingTagEnvironmentVariable) GetTag() *wrapperspb.StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *TracingTagEnvironmentVariable) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TracingTagEnvironmentVariable) GetDefaultValue() *wrapperspb.StringValue {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

// Requests can produce traces with custom tags.
// TracingTagLiteral defines a literal which gets added as custom tag.
type TracingTagLiteral struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Used to populate the tag name.
	Tag *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// Static literal value to populate the tag value.
	Value         *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracingTagLiteral) Reset() {
	*x = TracingTagLiteral{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracingTagLiteral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingTagLiteral) ProtoMessage() {}

func (x *TracingTagLiteral) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingTagLiteral.ProtoReflect.Descriptor instead.
func (*TracingTagLiteral) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescGZIP(), []int{4}
}

func (x *TracingTagLiteral) GetTag() *wrapperspb.StringValue {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *TracingTagLiteral) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// Requests can produce traces with custom tags.
// TracingTagMetadata defines a dynamic metadata tag which gets added as custom tag.
type TracingTagMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Used to populate the tag name.
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	// The kind of metadata to extract the value from
	Kind TracingTagMetadata_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=tracing.options.gloo.solo.io.TracingTagMetadata_Kind" json:"kind,omitempty"`
	// The metadata value to extract the tag value from.
	Value *TracingTagMetadata_MetadataValue `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// When no valid metadata is found, the tag value would be populated with this default value if specified, otherwise no tag would be populated.
	DefaultValue  string `protobuf:"bytes,4,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TracingTagMetadata) Reset() {
	*x = TracingTagMetadata{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracingTagMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingTagMetadata) ProtoMessage() {}

func (x *TracingTagMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingTagMetadata.ProtoReflect.Descriptor instead.
func (*TracingTagMetadata) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescGZIP(), []int{5}
}

func (x *TracingTagMetadata) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TracingTagMetadata) GetKind() TracingTagMetadata_Kind {
	if x != nil {
		return x.Kind
	}
	return TracingTagMetadata_REQUEST
}

func (x *TracingTagMetadata) GetValue() *TracingTagMetadata_MetadataValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TracingTagMetadata) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

type TracingTagMetadata_MetadataValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The namespace to extract the value from the metadata.
	// If empty will default to JWT principal namespace.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The key to extract the value from the metadata.
	// For example, `principal.iss` or `principal.sub` to extract those claims from the JWT ns
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The delimiter to use when specifying nested fields.
	// Default is `.`.
	// This is commonly set to `.`, allowing for nested fields names of the form
	// `parent.child.grandchild`
	NestedFieldDelimiter string `protobuf:"bytes,3,opt,name=nested_field_delimiter,json=nestedFieldDelimiter,proto3" json:"nested_field_delimiter,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TracingTagMetadata_MetadataValue) Reset() {
	*x = TracingTagMetadata_MetadataValue{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TracingTagMetadata_MetadataValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingTagMetadata_MetadataValue) ProtoMessage() {}

func (x *TracingTagMetadata_MetadataValue) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingTagMetadata_MetadataValue.ProtoReflect.Descriptor instead.
func (*TracingTagMetadata_MetadataValue) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescGZIP(), []int{5, 0}
}

func (x *TracingTagMetadata_MetadataValue) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TracingTagMetadata_MetadataValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TracingTagMetadata_MetadataValue) GetNestedFieldDelimiter() string {
	if x != nil {
		return x.NestedFieldDelimiter
	}
	return ""
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDesc = "" +
	"\n" +
	"Jgithub.com/solo-io/gloo/projects/gloo/api/v1/options/tracing/tracing.proto\x12\x1ctracing.options.gloo.solo.io\x1aUgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/config/trace/v3/zipkin.proto\x1aVgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/config/trace/v3/datadog.proto\x1a\\github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/trace/v3/opentelemetry.proto\x1aYgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/config/trace/v3/opencensus.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x19google/protobuf/any.proto\x1a\x12extproto/ext.proto\x1a,github.com/solo-io/solo-kit/api/v1/ref.proto\"\xfa\a\n" +
	"\x17ListenerTracingSettings\x12U\n" +
	"\x18request_headers_for_tags\x18\x01 \x03(\v2\x1c.google.protobuf.StringValueR\x15requestHeadersForTags\x124\n" +
	"\averbose\x18\x02 \x01(\v2\x1a.google.protobuf.BoolValueR\averbose\x12[\n" +
	"\x11trace_percentages\x18\x03 \x01(\v2..tracing.options.gloo.solo.io.TracePercentagesR\x10tracePercentages\x12R\n" +
	"\rzipkin_config\x18\x04 \x01(\v2+.solo.io.envoy.config.trace.v3.ZipkinConfigH\x00R\fzipkinConfig\x12U\n" +
	"\x0edatadog_config\x18\x05 \x01(\v2,.solo.io.envoy.config.trace.v3.DatadogConfigH\x00R\rdatadogConfig\x12h\n" +
	"\x15open_telemetry_config\x18\b \x01(\v22.solo.io.envoy.config.trace.v3.OpenTelemetryConfigH\x00R\x13openTelemetryConfig\x12_\n" +
	"\x12open_census_config\x18\t \x01(\v2/.solo.io.envoy.config.trace.v3.OpenCensusConfigH\x00R\x10openCensusConfig\x12\x80\x01\n" +
	"\x1eenvironment_variables_for_tags\x18\x06 \x03(\v2;.tracing.options.gloo.solo.io.TracingTagEnvironmentVariableR\x1benvironmentVariablesForTags\x12[\n" +
	"\x11literals_for_tags\x18\a \x03(\v2/.tracing.options.gloo.solo.io.TracingTagLiteralR\x0fliteralsForTags\x12\\\n" +
	"\x11metadata_for_tags\x18\v \x03(\v20.tracing.options.gloo.solo.io.TracingTagMetadataR\x0fmetadataForTags\x12.\n" +
	"\x13spawn_upstream_span\x18\n" +
	" \x01(\bR\x11spawnUpstreamSpanB\x11\n" +
	"\x0fprovider_config\"\xd8\x01\n" +
	"\x14RouteTracingSettings\x12)\n" +
	"\x10route_descriptor\x18\x01 \x01(\tR\x0frouteDescriptor\x12[\n" +
	"\x11trace_percentages\x18\x02 \x01(\v2..tracing.options.gloo.solo.io.TracePercentagesR\x10tracePercentages\x128\n" +
	"\tpropagate\x18\x03 \x01(\v2\x1a.google.protobuf.BoolValueR\tpropagate\"\x99\x02\n" +
	"\x10TracePercentages\x12U\n" +
	"\x18client_sample_percentage\x18\x01 \x01(\v2\x1b.google.protobuf.FloatValueR\x16clientSamplePercentage\x12U\n" +
	"\x18random_sample_percentage\x18\x02 \x01(\v2\x1b.google.protobuf.FloatValueR\x16randomSamplePercentage\x12W\n" +
	"\x19overall_sample_percentage\x18\x03 \x01(\v2\x1b.google.protobuf.FloatValueR\x17overallSamplePercentage\"\xc4\x01\n" +
	"\x1dTracingTagEnvironmentVariable\x12.\n" +
	"\x03tag\x18\x01 \x01(\v2\x1c.google.protobuf.StringValueR\x03tag\x120\n" +
	"\x04name\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueR\x04name\x12A\n" +
	"\rdefault_value\x18\x03 \x01(\v2\x1c.google.protobuf.StringValueR\fdefaultValue\"w\n" +
	"\x11TracingTagLiteral\x12.\n" +
	"\x03tag\x18\x01 \x01(\v2\x1c.google.protobuf.StringValueR\x03tag\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueR\x05value\"\x86\x03\n" +
	"\x12TracingTagMetadata\x12\x10\n" +
	"\x03tag\x18\x01 \x01(\tR\x03tag\x12I\n" +
	"\x04kind\x18\x02 \x01(\x0e25.tracing.options.gloo.solo.io.TracingTagMetadata.KindR\x04kind\x12T\n" +
	"\x05value\x18\x03 \x01(\v2>.tracing.options.gloo.solo.io.TracingTagMetadata.MetadataValueR\x05value\x12#\n" +
	"\rdefault_value\x18\x04 \x01(\tR\fdefaultValue\x1au\n" +
	"\rMetadataValue\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x124\n" +
	"\x16nested_field_delimiter\x18\x03 \x01(\tR\x14nestedFieldDelimiter\"!\n" +
	"\x04Kind\x12\v\n" +
	"\aREQUEST\x10\x00\x12\f\n" +
	"\bENDPOINT\x10\x01BN\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z@github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/tracingb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_goTypes = []any{
	(TracingTagMetadata_Kind)(0),             // 0: tracing.options.gloo.solo.io.TracingTagMetadata.Kind
	(*ListenerTracingSettings)(nil),          // 1: tracing.options.gloo.solo.io.ListenerTracingSettings
	(*RouteTracingSettings)(nil),             // 2: tracing.options.gloo.solo.io.RouteTracingSettings
	(*TracePercentages)(nil),                 // 3: tracing.options.gloo.solo.io.TracePercentages
	(*TracingTagEnvironmentVariable)(nil),    // 4: tracing.options.gloo.solo.io.TracingTagEnvironmentVariable
	(*TracingTagLiteral)(nil),                // 5: tracing.options.gloo.solo.io.TracingTagLiteral
	(*TracingTagMetadata)(nil),               // 6: tracing.options.gloo.solo.io.TracingTagMetadata
	(*TracingTagMetadata_MetadataValue)(nil), // 7: tracing.options.gloo.solo.io.TracingTagMetadata.MetadataValue
	(*wrapperspb.StringValue)(nil),           // 8: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),             // 9: google.protobuf.BoolValue
	(*v3.ZipkinConfig)(nil),                  // 10: solo.io.envoy.config.trace.v3.ZipkinConfig
	(*v3.DatadogConfig)(nil),                 // 11: solo.io.envoy.config.trace.v3.DatadogConfig
	(*v3.OpenTelemetryConfig)(nil),           // 12: solo.io.envoy.config.trace.v3.OpenTelemetryConfig
	(*v3.OpenCensusConfig)(nil),              // 13: solo.io.envoy.config.trace.v3.OpenCensusConfig
	(*wrapperspb.FloatValue)(nil),            // 14: google.protobuf.FloatValue
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_depIdxs = []int32{
	8,  // 0: tracing.options.gloo.solo.io.ListenerTracingSettings.request_headers_for_tags:type_name -> google.protobuf.StringValue
	9,  // 1: tracing.options.gloo.solo.io.ListenerTracingSettings.verbose:type_name -> google.protobuf.BoolValue
	3,  // 2: tracing.options.gloo.solo.io.ListenerTracingSettings.trace_percentages:type_name -> tracing.options.gloo.solo.io.TracePercentages
	10, // 3: tracing.options.gloo.solo.io.ListenerTracingSettings.zipkin_config:type_name -> solo.io.envoy.config.trace.v3.ZipkinConfig
	11, // 4: tracing.options.gloo.solo.io.ListenerTracingSettings.datadog_config:type_name -> solo.io.envoy.config.trace.v3.DatadogConfig
	12, // 5: tracing.options.gloo.solo.io.ListenerTracingSettings.open_telemetry_config:type_name -> solo.io.envoy.config.trace.v3.OpenTelemetryConfig
	13, // 6: tracing.options.gloo.solo.io.ListenerTracingSettings.open_census_config:type_name -> solo.io.envoy.config.trace.v3.OpenCensusConfig
	4,  // 7: tracing.options.gloo.solo.io.ListenerTracingSettings.environment_variables_for_tags:type_name -> tracing.options.gloo.solo.io.TracingTagEnvironmentVariable
	5,  // 8: tracing.options.gloo.solo.io.ListenerTracingSettings.literals_for_tags:type_name -> tracing.options.gloo.solo.io.TracingTagLiteral
	6,  // 9: tracing.options.gloo.solo.io.ListenerTracingSettings.metadata_for_tags:type_name -> tracing.options.gloo.solo.io.TracingTagMetadata
	3,  // 10: tracing.options.gloo.solo.io.RouteTracingSettings.trace_percentages:type_name -> tracing.options.gloo.solo.io.TracePercentages
	9,  // 11: tracing.options.gloo.solo.io.RouteTracingSettings.propagate:type_name -> google.protobuf.BoolValue
	14, // 12: tracing.options.gloo.solo.io.TracePercentages.client_sample_percentage:type_name -> google.protobuf.FloatValue
	14, // 13: tracing.options.gloo.solo.io.TracePercentages.random_sample_percentage:type_name -> google.protobuf.FloatValue
	14, // 14: tracing.options.gloo.solo.io.TracePercentages.overall_sample_percentage:type_name -> google.protobuf.FloatValue
	8,  // 15: tracing.options.gloo.solo.io.TracingTagEnvironmentVariable.tag:type_name -> google.protobuf.StringValue
	8,  // 16: tracing.options.gloo.solo.io.TracingTagEnvironmentVariable.name:type_name -> google.protobuf.StringValue
	8,  // 17: tracing.options.gloo.solo.io.TracingTagEnvironmentVariable.default_value:type_name -> google.protobuf.StringValue
	8,  // 18: tracing.options.gloo.solo.io.TracingTagLiteral.tag:type_name -> google.protobuf.StringValue
	8,  // 19: tracing.options.gloo.solo.io.TracingTagLiteral.value:type_name -> google.protobuf.StringValue
	0,  // 20: tracing.options.gloo.solo.io.TracingTagMetadata.kind:type_name -> tracing.options.gloo.solo.io.TracingTagMetadata.Kind
	7,  // 21: tracing.options.gloo.solo.io.TracingTagMetadata.value:type_name -> tracing.options.gloo.solo.io.TracingTagMetadata.MetadataValue
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_init() }
func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes[0].OneofWrappers = []any{
		(*ListenerTracingSettings_ZipkinConfig)(nil),
		(*ListenerTracingSettings_DatadogConfig)(nil),
		(*ListenerTracingSettings_OpenTelemetryConfig)(nil),
		(*ListenerTracingSettings_OpenCensusConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_tracing_tracing_proto_depIdxs = nil
}
