// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/dynamic_forward_proxy/dynamic_forward_proxy.proto

package dynamic_forward_proxy

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *FilterConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*FilterConfig)
	if !ok {
		that2, ok := that.(FilterConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetDnsCacheConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDnsCacheConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDnsCacheConfig(), target.GetDnsCacheConfig()) {
			return false
		}
	}

	if m.GetSaveUpstreamAddress() != target.GetSaveUpstreamAddress() {
		return false
	}

	if h, ok := interface{}(m.GetSslConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSslConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSslConfig(), target.GetSslConfig()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCircuitBreakers()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCircuitBreakers()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCircuitBreakers(), target.GetCircuitBreakers()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DnsCacheCircuitBreakers) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DnsCacheCircuitBreakers)
	if !ok {
		that2, ok := that.(DnsCacheCircuitBreakers)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetMaxPendingRequests()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxPendingRequests()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxPendingRequests(), target.GetMaxPendingRequests()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *DnsCacheConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DnsCacheConfig)
	if !ok {
		that2, ok := that.(DnsCacheConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetDnsLookupFamily() != target.GetDnsLookupFamily() {
		return false
	}

	if h, ok := interface{}(m.GetDnsRefreshRate()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDnsRefreshRate()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDnsRefreshRate(), target.GetDnsRefreshRate()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetHostTtl()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHostTtl()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHostTtl(), target.GetHostTtl()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxHosts()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxHosts()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxHosts(), target.GetMaxHosts()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDnsFailureRefreshRate()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDnsFailureRefreshRate()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDnsFailureRefreshRate(), target.GetDnsFailureRefreshRate()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDnsCacheCircuitBreaker()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDnsCacheCircuitBreaker()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDnsCacheCircuitBreaker(), target.GetDnsCacheCircuitBreaker()) {
			return false
		}
	}

	if len(m.GetPreresolveHostnames()) != len(target.GetPreresolveHostnames()) {
		return false
	}
	for idx, v := range m.GetPreresolveHostnames() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetPreresolveHostnames()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetPreresolveHostnames()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetDnsQueryTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDnsQueryTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDnsQueryTimeout(), target.GetDnsQueryTimeout()) {
			return false
		}
	}

	switch m.DnsCacheType.(type) {

	case *DnsCacheConfig_CaresDns:
		if _, ok := target.DnsCacheType.(*DnsCacheConfig_CaresDns); !ok {
			return false
		}

		if h, ok := interface{}(m.GetCaresDns()).(equality.Equalizer); ok {
			if !h.Equal(target.GetCaresDns()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetCaresDns(), target.GetCaresDns()) {
				return false
			}
		}

	case *DnsCacheConfig_AppleDns:
		if _, ok := target.DnsCacheType.(*DnsCacheConfig_AppleDns); !ok {
			return false
		}

		if h, ok := interface{}(m.GetAppleDns()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAppleDns()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAppleDns(), target.GetAppleDns()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.DnsCacheType != target.DnsCacheType {
			return false
		}
	}

	return true
}

// Equal function
func (m *RefreshRate) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RefreshRate)
	if !ok {
		that2, ok := that.(RefreshRate)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetBaseInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBaseInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBaseInterval(), target.GetBaseInterval()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxInterval(), target.GetMaxInterval()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *PerRouteConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*PerRouteConfig)
	if !ok {
		that2, ok := that.(PerRouteConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.HostRewriteSpecifier.(type) {

	case *PerRouteConfig_HostRewrite:
		if _, ok := target.HostRewriteSpecifier.(*PerRouteConfig_HostRewrite); !ok {
			return false
		}

		if strings.Compare(m.GetHostRewrite(), target.GetHostRewrite()) != 0 {
			return false
		}

	case *PerRouteConfig_AutoHostRewriteHeader:
		if _, ok := target.HostRewriteSpecifier.(*PerRouteConfig_AutoHostRewriteHeader); !ok {
			return false
		}

		if strings.Compare(m.GetAutoHostRewriteHeader(), target.GetAutoHostRewriteHeader()) != 0 {
			return false
		}

	default:
		// m is nil but target is not nil
		if m.HostRewriteSpecifier != target.HostRewriteSpecifier {
			return false
		}
	}

	return true
}

// Equal function
func (m *DnsResolverOptions) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*DnsResolverOptions)
	if !ok {
		that2, ok := that.(DnsResolverOptions)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetUseTcpForDnsLookups() != target.GetUseTcpForDnsLookups() {
		return false
	}

	if m.GetNoDefaultSearchDomain() != target.GetNoDefaultSearchDomain() {
		return false
	}

	return true
}

// Equal function
func (m *CaresDnsResolverConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*CaresDnsResolverConfig)
	if !ok {
		that2, ok := that.(CaresDnsResolverConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetResolvers()) != len(target.GetResolvers()) {
		return false
	}
	for idx, v := range m.GetResolvers() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetResolvers()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetResolvers()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetDnsResolverOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDnsResolverOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDnsResolverOptions(), target.GetDnsResolverOptions()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *AppleDnsResolverConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*AppleDnsResolverConfig)
	if !ok {
		that2, ok := that.(AppleDnsResolverConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}
