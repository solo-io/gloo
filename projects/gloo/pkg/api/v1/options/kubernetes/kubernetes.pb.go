// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/kubernetes/kubernetes.proto

package kubernetes

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	options "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Kubernetes Upstreams represent a set of one or more addressable pods for a Kubernetes Service
// the Gloo Kubernetes Upstream maps to a single service port. Because Kubernetes Services support multiple ports,
// Gloo requires that a different upstream be created for each port
// Kubernetes Upstreams are typically generated automatically by Gloo from the Kubernetes API
type UpstreamSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the Kubernetes Service
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The namespace where the Service lives
	ServiceNamespace string `protobuf:"bytes,2,opt,name=service_namespace,json=serviceNamespace,proto3" json:"service_namespace,omitempty"`
	// The access port of the kubernetes service is listening. This port is used by Gloo to look up the corresponding
	// port on the pod for routing.
	ServicePort uint32 `protobuf:"varint,3,opt,name=service_port,json=servicePort,proto3" json:"service_port,omitempty"`
	// Allows finer-grained filtering of pods for the Upstream. Gloo will select pods based on their labels if
	// any are provided here.
	// (see [Kubernetes labels and selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
	Selector map[string]string `protobuf:"bytes,4,rep,name=selector,proto3" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// An optional Service Spec describing the service listening at this address
	ServiceSpec *options.ServiceSpec `protobuf:"bytes,5,opt,name=service_spec,json=serviceSpec,proto3" json:"service_spec,omitempty"`
	// Subset configuration. For discovery sources that has labels (like kubernetes). this
	// configuration allows you to partition the upstream to a set of subsets.
	// for each unique set of keys and values, a subset will be created.
	SubsetSpec    *options.SubsetSpec `protobuf:"bytes,6,opt,name=subset_spec,json=subsetSpec,proto3" json:"subset_spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpstreamSpec) Reset() {
	*x = UpstreamSpec{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpstreamSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamSpec) ProtoMessage() {}

func (x *UpstreamSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamSpec.ProtoReflect.Descriptor instead.
func (*UpstreamSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_rawDescGZIP(), []int{0}
}

func (x *UpstreamSpec) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *UpstreamSpec) GetServiceNamespace() string {
	if x != nil {
		return x.ServiceNamespace
	}
	return ""
}

func (x *UpstreamSpec) GetServicePort() uint32 {
	if x != nil {
		return x.ServicePort
	}
	return 0
}

func (x *UpstreamSpec) GetSelector() map[string]string {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *UpstreamSpec) GetServiceSpec() *options.ServiceSpec {
	if x != nil {
		return x.ServiceSpec
	}
	return nil
}

func (x *UpstreamSpec) GetSubsetSpec() *options.SubsetSpec {
	if x != nil {
		return x.SubsetSpec
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_rawDesc = "" +
	"\n" +
	"Pgithub.com/solo-io/gloo/projects/gloo/api/v1/options/kubernetes/kubernetes.proto\x12\x1fkubernetes.options.gloo.solo.io\x1a\x12extproto/ext.proto\x1aGgithub.com/solo-io/gloo/projects/gloo/api/v1/options/service_spec.proto\x1aFgithub.com/solo-io/gloo/projects/gloo/api/v1/options/subset_spec.proto\"\xa0\x03\n" +
	"\fUpstreamSpec\x12!\n" +
	"\fservice_name\x18\x01 \x01(\tR\vserviceName\x12+\n" +
	"\x11service_namespace\x18\x02 \x01(\tR\x10serviceNamespace\x12!\n" +
	"\fservice_port\x18\x03 \x01(\rR\vservicePort\x12W\n" +
	"\bselector\x18\x04 \x03(\v2;.kubernetes.options.gloo.solo.io.UpstreamSpec.SelectorEntryR\bselector\x12D\n" +
	"\fservice_spec\x18\x05 \x01(\v2!.options.gloo.solo.io.ServiceSpecR\vserviceSpec\x12A\n" +
	"\vsubset_spec\x18\x06 \x01(\v2 .options.gloo.solo.io.SubsetSpecR\n" +
	"subsetSpec\x1a;\n" +
	"\rSelectorEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01BQ\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01ZCgithub.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/kubernetesb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_goTypes = []any{
	(*UpstreamSpec)(nil),        // 0: kubernetes.options.gloo.solo.io.UpstreamSpec
	nil,                         // 1: kubernetes.options.gloo.solo.io.UpstreamSpec.SelectorEntry
	(*options.ServiceSpec)(nil), // 2: options.gloo.solo.io.ServiceSpec
	(*options.SubsetSpec)(nil),  // 3: options.gloo.solo.io.SubsetSpec
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_depIdxs = []int32{
	1, // 0: kubernetes.options.gloo.solo.io.UpstreamSpec.selector:type_name -> kubernetes.options.gloo.solo.io.UpstreamSpec.SelectorEntry
	2, // 1: kubernetes.options.gloo.solo.io.UpstreamSpec.service_spec:type_name -> options.gloo.solo.io.ServiceSpec
	3, // 2: kubernetes.options.gloo.solo.io.UpstreamSpec.subset_spec:type_name -> options.gloo.solo.io.SubsetSpec
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_init()
}
func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_kubernetes_kubernetes_proto_depIdxs = nil
}
