// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/adaptive_concurrency/adaptive_concurrency.proto

package adaptive_concurrency

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	google_golang_org_protobuf_types_known_wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *FilterConfig) Clone() proto.Message {
	var target *FilterConfig
	if m == nil {
		return target
	}
	target = &FilterConfig{}

	if h, ok := interface{}(m.GetSampleAggregatePercentile()).(clone.Cloner); ok {
		target.SampleAggregatePercentile = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.DoubleValue)
	} else {
		target.SampleAggregatePercentile = proto.Clone(m.GetSampleAggregatePercentile()).(*google_golang_org_protobuf_types_known_wrapperspb.DoubleValue)
	}

	if h, ok := interface{}(m.GetMaxConcurrencyLimit()).(clone.Cloner); ok {
		target.MaxConcurrencyLimit = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	} else {
		target.MaxConcurrencyLimit = proto.Clone(m.GetMaxConcurrencyLimit()).(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	}

	target.ConcurrencyUpdateIntervalMillis = m.GetConcurrencyUpdateIntervalMillis()

	if h, ok := interface{}(m.GetMinRttCalcParams()).(clone.Cloner); ok {
		target.MinRttCalcParams = h.Clone().(*FilterConfig_MinRoundtripTimeCalculationParams)
	} else {
		target.MinRttCalcParams = proto.Clone(m.GetMinRttCalcParams()).(*FilterConfig_MinRoundtripTimeCalculationParams)
	}

	target.ConcurrencyLimitExceededStatus = m.GetConcurrencyLimitExceededStatus()

	return target
}

// Clone function
func (m *FilterConfig_MinRoundtripTimeCalculationParams) Clone() proto.Message {
	var target *FilterConfig_MinRoundtripTimeCalculationParams
	if m == nil {
		return target
	}
	target = &FilterConfig_MinRoundtripTimeCalculationParams{}

	target.IntervalMillis = m.GetIntervalMillis()

	target.FixedValueMillis = m.GetFixedValueMillis()

	if h, ok := interface{}(m.GetRequestCount()).(clone.Cloner); ok {
		target.RequestCount = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	} else {
		target.RequestCount = proto.Clone(m.GetRequestCount()).(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	}

	if h, ok := interface{}(m.GetMinConcurrency()).(clone.Cloner); ok {
		target.MinConcurrency = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	} else {
		target.MinConcurrency = proto.Clone(m.GetMinConcurrency()).(*google_golang_org_protobuf_types_known_wrapperspb.UInt32Value)
	}

	if h, ok := interface{}(m.GetJitterPercentile()).(clone.Cloner); ok {
		target.JitterPercentile = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.DoubleValue)
	} else {
		target.JitterPercentile = proto.Clone(m.GetJitterPercentile()).(*google_golang_org_protobuf_types_known_wrapperspb.DoubleValue)
	}

	if h, ok := interface{}(m.GetBufferPercentile()).(clone.Cloner); ok {
		target.BufferPercentile = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.DoubleValue)
	} else {
		target.BufferPercentile = proto.Clone(m.GetBufferPercentile()).(*google_golang_org_protobuf_types_known_wrapperspb.DoubleValue)
	}

	return target
}
