// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/adaptive_concurrency/adaptive_concurrency.proto

package adaptive_concurrency

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configuration for Envoy's adaptive concurrency HTTP filter. For more information about the filter, see the docs [here](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/adaptive_concurrency_filter#config-http-filters-adaptive-concurrency).
type FilterConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The percent of sampled requests to use when summarizing aggregated samples in the minRTT
	// calculation. If unset, defaults to 50%.
	SampleAggregatePercentile *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=sample_aggregate_percentile,json=sampleAggregatePercentile,proto3" json:"sample_aggregate_percentile,omitempty"`
	// Configure how the gradient controller calculates the concurrency limit for the destination.
	// For more information about the concurrency limit formula and the following fields, see the
	// [Envoy adaptive concurrency docs](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/adaptive_concurrency_filter).
	// This field is required.
	ConcurrencyLimitCalculationParams *FilterConfig_ConcurrencyLimitCalculationParams `protobuf:"bytes,3,opt,name=concurrency_limit_calculation_params,json=concurrencyLimitCalculationParams,proto3" json:"concurrency_limit_calculation_params,omitempty"`
	// Configure how the gradient controller calculates the minimum round-trip time (minRTT) for the destination.
	// For more information about the minRTT formula and the following fields, see the
	// [Envoy adaptive concurrency docs](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/adaptive_concurrency_filter).
	// This field is required.
	MinRttCalculationParams *FilterConfig_MinRoundtripTimeCalculationParams `protobuf:"bytes,4,opt,name=min_rtt_calculation_params,json=minRttCalculationParams,proto3" json:"min_rtt_calculation_params,omitempty"`
	// Return a custom HTTP response status code to the downstream client when the concurrency limit is exceeded.
	// If this field is empty, omitted, or set to a non-error response of < 400, the response code defaults to 503 (Service Unavailable).
	ConcurrencyLimitExceededStatus uint32 `protobuf:"varint,5,opt,name=concurrency_limit_exceeded_status,json=concurrencyLimitExceededStatus,proto3" json:"concurrency_limit_exceeded_status,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *FilterConfig) Reset() {
	*x = FilterConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterConfig) ProtoMessage() {}

func (x *FilterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterConfig.ProtoReflect.Descriptor instead.
func (*FilterConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDescGZIP(), []int{0}
}

func (x *FilterConfig) GetSampleAggregatePercentile() *wrapperspb.DoubleValue {
	if x != nil {
		return x.SampleAggregatePercentile
	}
	return nil
}

func (x *FilterConfig) GetConcurrencyLimitCalculationParams() *FilterConfig_ConcurrencyLimitCalculationParams {
	if x != nil {
		return x.ConcurrencyLimitCalculationParams
	}
	return nil
}

func (x *FilterConfig) GetMinRttCalculationParams() *FilterConfig_MinRoundtripTimeCalculationParams {
	if x != nil {
		return x.MinRttCalculationParams
	}
	return nil
}

func (x *FilterConfig) GetConcurrencyLimitExceededStatus() uint32 {
	if x != nil {
		return x.ConcurrencyLimitExceededStatus
	}
	return 0
}

// Configure how the gradient controller calculates the minimum round-trip time (minRTT) for the destination.
// For more information about the minRTT formula and the following fields, see the
// [Envoy adaptive concurrency docs](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/adaptive_concurrency_filter).
// This field is required.
type FilterConfig_MinRoundtripTimeCalculationParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The amount of time between each minRTT remeasurement in milliseconds.
	// This field is required.
	Interval uint32 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval,omitempty"`
	// The fixed value for the minRTT. This value is used when minRTT is not sampled dynamically.
	// If dynamic sampling of the minRTT is disabled, this field must be set.
	FixedValue uint32 `protobuf:"varint,2,opt,name=fixed_value,json=fixedValue,proto3" json:"fixed_value,omitempty"`
	// The number of requests to sample during the `concurrencyUpdateInterval` timeframe.
	// If unset, defaults to 50.
	RequestCount *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
	// Temporarily set the concurrency limit until the latest minRTT measurement is complete.
	// If unset, defaults to 3.
	MinConcurrency *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=min_concurrency,json=minConcurrency,proto3" json:"min_concurrency,omitempty"`
	// Add a random delay to the start of each minRTT measurement, represented as a percentage of the interval between each
	// remeasurement (`interval`). For example, if the interval is 1000ms and the jitter is 15%, the next minRTT measurement
	// begins in the range of 1000ms - 1150ms, because a delay between 0ms - 150ms is added to the 1000ms interval.
	// If unset, defaults to 15%.
	JitterPercentile *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=jitter_percentile,json=jitterPercentile,proto3" json:"jitter_percentile,omitempty"`
	// Add a buffer to the measured minRTT to stabilize natural variability in latency. This is represented as a percentage
	// of the measured value, and can be adjusted to allow more or less tolerance to the sampled latency values.
	// If unset, defaults to 25%.
	BufferPercentile *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=buffer_percentile,json=bufferPercentile,proto3" json:"buffer_percentile,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FilterConfig_MinRoundtripTimeCalculationParams) Reset() {
	*x = FilterConfig_MinRoundtripTimeCalculationParams{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterConfig_MinRoundtripTimeCalculationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterConfig_MinRoundtripTimeCalculationParams) ProtoMessage() {}

func (x *FilterConfig_MinRoundtripTimeCalculationParams) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterConfig_MinRoundtripTimeCalculationParams.ProtoReflect.Descriptor instead.
func (*FilterConfig_MinRoundtripTimeCalculationParams) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FilterConfig_MinRoundtripTimeCalculationParams) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *FilterConfig_MinRoundtripTimeCalculationParams) GetFixedValue() uint32 {
	if x != nil {
		return x.FixedValue
	}
	return 0
}

func (x *FilterConfig_MinRoundtripTimeCalculationParams) GetRequestCount() *wrapperspb.UInt32Value {
	if x != nil {
		return x.RequestCount
	}
	return nil
}

func (x *FilterConfig_MinRoundtripTimeCalculationParams) GetMinConcurrency() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MinConcurrency
	}
	return nil
}

func (x *FilterConfig_MinRoundtripTimeCalculationParams) GetJitterPercentile() *wrapperspb.DoubleValue {
	if x != nil {
		return x.JitterPercentile
	}
	return nil
}

func (x *FilterConfig_MinRoundtripTimeCalculationParams) GetBufferPercentile() *wrapperspb.DoubleValue {
	if x != nil {
		return x.BufferPercentile
	}
	return nil
}

type FilterConfig_ConcurrencyLimitCalculationParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The allowed upper-bound on the calculated concurrency limit. For example, you can cap the concurrency
	// limit to a maximum of 800 connections, in the case that the calculated concurrency limit exceeds this value.
	// If unset, defaults to 1000.
	MaxConcurrencyLimit *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=max_concurrency_limit,json=maxConcurrencyLimit,proto3" json:"max_concurrency_limit,omitempty"`
	// The period of time during which request latency samples are taken to recalculate the concurrency limit in milliseconds.
	// This field is required
	ConcurrencyUpdateInterval uint32 `protobuf:"varint,2,opt,name=concurrency_update_interval,json=concurrencyUpdateInterval,proto3" json:"concurrency_update_interval,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *FilterConfig_ConcurrencyLimitCalculationParams) Reset() {
	*x = FilterConfig_ConcurrencyLimitCalculationParams{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterConfig_ConcurrencyLimitCalculationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterConfig_ConcurrencyLimitCalculationParams) ProtoMessage() {}

func (x *FilterConfig_ConcurrencyLimitCalculationParams) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterConfig_ConcurrencyLimitCalculationParams.ProtoReflect.Descriptor instead.
func (*FilterConfig_ConcurrencyLimitCalculationParams) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDescGZIP(), []int{0, 1}
}

func (x *FilterConfig_ConcurrencyLimitCalculationParams) GetMaxConcurrencyLimit() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxConcurrencyLimit
	}
	return nil
}

func (x *FilterConfig_ConcurrencyLimitCalculationParams) GetConcurrencyUpdateInterval() uint32 {
	if x != nil {
		return x.ConcurrencyUpdateInterval
	}
	return 0
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDesc = "" +
	"\n" +
	"dgithub.com/solo-io/gloo/projects/gloo/api/v1/options/adaptive_concurrency/adaptive_concurrency.proto\x12)adaptive_concurrency.options.gloo.solo.io\x1a\x12extproto/ext.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\xb8\b\n" +
	"\fFilterConfig\x12\\\n" +
	"\x1bsample_aggregate_percentile\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueR\x19sampleAggregatePercentile\x12\xaa\x01\n" +
	"$concurrency_limit_calculation_params\x18\x03 \x01(\v2Y.adaptive_concurrency.options.gloo.solo.io.FilterConfig.ConcurrencyLimitCalculationParamsR!concurrencyLimitCalculationParams\x12\x96\x01\n" +
	"\x1amin_rtt_calculation_params\x18\x04 \x01(\v2Y.adaptive_concurrency.options.gloo.solo.io.FilterConfig.MinRoundtripTimeCalculationParamsR\x17minRttCalculationParams\x12I\n" +
	"!concurrency_limit_exceeded_status\x18\x05 \x01(\rR\x1econcurrencyLimitExceededStatus\x1a\x80\x03\n" +
	"!MinRoundtripTimeCalculationParams\x12\x1a\n" +
	"\binterval\x18\x01 \x01(\rR\binterval\x12\x1f\n" +
	"\vfixed_value\x18\x02 \x01(\rR\n" +
	"fixedValue\x12A\n" +
	"\rrequest_count\x18\x03 \x01(\v2\x1c.google.protobuf.UInt32ValueR\frequestCount\x12E\n" +
	"\x0fmin_concurrency\x18\x04 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x0eminConcurrency\x12I\n" +
	"\x11jitter_percentile\x18\x05 \x01(\v2\x1c.google.protobuf.DoubleValueR\x10jitterPercentile\x12I\n" +
	"\x11buffer_percentile\x18\x06 \x01(\v2\x1c.google.protobuf.DoubleValueR\x10bufferPercentile\x1a\xb5\x01\n" +
	"!ConcurrencyLimitCalculationParams\x12P\n" +
	"\x15max_concurrency_limit\x18\x01 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x13maxConcurrencyLimit\x12>\n" +
	"\x1bconcurrency_update_interval\x18\x02 \x01(\rR\x19concurrencyUpdateIntervalB[\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01ZMgithub.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/adaptive_concurrencyb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_goTypes = []any{
	(*FilterConfig)(nil), // 0: adaptive_concurrency.options.gloo.solo.io.FilterConfig
	(*FilterConfig_MinRoundtripTimeCalculationParams)(nil), // 1: adaptive_concurrency.options.gloo.solo.io.FilterConfig.MinRoundtripTimeCalculationParams
	(*FilterConfig_ConcurrencyLimitCalculationParams)(nil), // 2: adaptive_concurrency.options.gloo.solo.io.FilterConfig.ConcurrencyLimitCalculationParams
	(*wrapperspb.DoubleValue)(nil),                         // 3: google.protobuf.DoubleValue
	(*wrapperspb.UInt32Value)(nil),                         // 4: google.protobuf.UInt32Value
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_depIdxs = []int32{
	3, // 0: adaptive_concurrency.options.gloo.solo.io.FilterConfig.sample_aggregate_percentile:type_name -> google.protobuf.DoubleValue
	2, // 1: adaptive_concurrency.options.gloo.solo.io.FilterConfig.concurrency_limit_calculation_params:type_name -> adaptive_concurrency.options.gloo.solo.io.FilterConfig.ConcurrencyLimitCalculationParams
	1, // 2: adaptive_concurrency.options.gloo.solo.io.FilterConfig.min_rtt_calculation_params:type_name -> adaptive_concurrency.options.gloo.solo.io.FilterConfig.MinRoundtripTimeCalculationParams
	4, // 3: adaptive_concurrency.options.gloo.solo.io.FilterConfig.MinRoundtripTimeCalculationParams.request_count:type_name -> google.protobuf.UInt32Value
	4, // 4: adaptive_concurrency.options.gloo.solo.io.FilterConfig.MinRoundtripTimeCalculationParams.min_concurrency:type_name -> google.protobuf.UInt32Value
	3, // 5: adaptive_concurrency.options.gloo.solo.io.FilterConfig.MinRoundtripTimeCalculationParams.jitter_percentile:type_name -> google.protobuf.DoubleValue
	3, // 6: adaptive_concurrency.options.gloo.solo.io.FilterConfig.MinRoundtripTimeCalculationParams.buffer_percentile:type_name -> google.protobuf.DoubleValue
	4, // 7: adaptive_concurrency.options.gloo.solo.io.FilterConfig.ConcurrencyLimitCalculationParams.max_concurrency_limit:type_name -> google.protobuf.UInt32Value
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_init()
}
func file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_options_adaptive_concurrency_adaptive_concurrency_proto_depIdxs = nil
}
