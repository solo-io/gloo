// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/adaptive_concurrency/adaptive_concurrency.proto

package adaptive_concurrency

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *FilterConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*FilterConfig)
	if !ok {
		that2, ok := that.(FilterConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetSampleAggregatePercentile()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSampleAggregatePercentile()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSampleAggregatePercentile(), target.GetSampleAggregatePercentile()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxConcurrencyLimit()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxConcurrencyLimit()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxConcurrencyLimit(), target.GetMaxConcurrencyLimit()) {
			return false
		}
	}

	if m.GetConcurrencyUpdateIntervalMillis() != target.GetConcurrencyUpdateIntervalMillis() {
		return false
	}

	if h, ok := interface{}(m.GetMinRttCalcParams()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMinRttCalcParams()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMinRttCalcParams(), target.GetMinRttCalcParams()) {
			return false
		}
	}

	if m.GetConcurrencyLimitExceededStatus() != target.GetConcurrencyLimitExceededStatus() {
		return false
	}

	return true
}

// Equal function
func (m *FilterConfig_MinRoundtripTimeCalculationParams) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*FilterConfig_MinRoundtripTimeCalculationParams)
	if !ok {
		that2, ok := that.(FilterConfig_MinRoundtripTimeCalculationParams)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetIntervalMillis() != target.GetIntervalMillis() {
		return false
	}

	if m.GetFixedValueMillis() != target.GetFixedValueMillis() {
		return false
	}

	if h, ok := interface{}(m.GetRequestCount()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequestCount()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequestCount(), target.GetRequestCount()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMinConcurrency()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMinConcurrency()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMinConcurrency(), target.GetMinConcurrency()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetJitterPercentile()).(equality.Equalizer); ok {
		if !h.Equal(target.GetJitterPercentile()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetJitterPercentile(), target.GetJitterPercentile()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetBufferPercentile()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBufferPercentile()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBufferPercentile(), target.GetBufferPercentile()) {
			return false
		}
	}

	return true
}
