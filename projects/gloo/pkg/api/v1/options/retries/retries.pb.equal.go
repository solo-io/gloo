// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/retries/retries.proto

package retries

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *RetryBackOff) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RetryBackOff)
	if !ok {
		that2, ok := that.(RetryBackOff)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetBaseInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBaseInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBaseInterval(), target.GetBaseInterval()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxInterval(), target.GetMaxInterval()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *RateLimitedRetryBackOff) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RateLimitedRetryBackOff)
	if !ok {
		that2, ok := that.(RateLimitedRetryBackOff)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetIncludeResetHeaders()).(equality.Equalizer); ok {
		if !h.Equal(target.GetIncludeResetHeaders()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetIncludeResetHeaders(), target.GetIncludeResetHeaders()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetMaxInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetMaxInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetMaxInterval(), target.GetMaxInterval()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *RetryPolicy) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RetryPolicy)
	if !ok {
		that2, ok := that.(RetryPolicy)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetRetryOn(), target.GetRetryOn()) != 0 {
		return false
	}

	if m.GetNumRetries() != target.GetNumRetries() {
		return false
	}

	if h, ok := interface{}(m.GetPerTryTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPerTryTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPerTryTimeout(), target.GetPerTryTimeout()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRetryBackOff()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRetryBackOff()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRetryBackOff(), target.GetRetryBackOff()) {
			return false
		}
	}

	if len(m.GetRetriableStatusCodes()) != len(target.GetRetriableStatusCodes()) {
		return false
	}
	for idx, v := range m.GetRetriableStatusCodes() {

		if v != target.GetRetriableStatusCodes()[idx] {
			return false
		}

	}

	if h, ok := interface{}(m.GetRateLimitedRetryBackOff()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRateLimitedRetryBackOff()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRateLimitedRetryBackOff(), target.GetRateLimitedRetryBackOff()) {
			return false
		}
	}

	switch m.PriorityPredicate.(type) {

	case *RetryPolicy_PreviousPriorities_:
		if _, ok := target.PriorityPredicate.(*RetryPolicy_PreviousPriorities_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetPreviousPriorities()).(equality.Equalizer); ok {
			if !h.Equal(target.GetPreviousPriorities()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetPreviousPriorities(), target.GetPreviousPriorities()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.PriorityPredicate != target.PriorityPredicate {
			return false
		}
	}

	return true
}

// Equal function
func (m *RetryPolicy_PreviousPriorities) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*RetryPolicy_PreviousPriorities)
	if !ok {
		that2, ok := that.(RetryPolicy_PreviousPriorities)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetUpdateFrequency()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUpdateFrequency()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUpdateFrequency(), target.GetUpdateFrequency()) {
			return false
		}
	}

	return true
}
