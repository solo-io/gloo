// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/options/headers/headers.proto

package headers

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core "github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2/core"

	google_golang_org_protobuf_types_known_wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *HeaderManipulation) Clone() proto.Message {
	var target *HeaderManipulation
	if m == nil {
		return target
	}
	target = &HeaderManipulation{}

	if m.GetRequestHeadersToAdd() != nil {
		target.RequestHeadersToAdd = make([]*github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core.HeaderValueOption, len(m.GetRequestHeadersToAdd()))
		for idx, v := range m.GetRequestHeadersToAdd() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.RequestHeadersToAdd[idx] = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core.HeaderValueOption)
			} else {
				target.RequestHeadersToAdd[idx] = proto.Clone(v).(*github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core.HeaderValueOption)
			}

		}
	}

	if m.GetRequestHeadersToRemove() != nil {
		target.RequestHeadersToRemove = make([]string, len(m.GetRequestHeadersToRemove()))
		for idx, v := range m.GetRequestHeadersToRemove() {

			target.RequestHeadersToRemove[idx] = v

		}
	}

	if m.GetResponseHeadersToAdd() != nil {
		target.ResponseHeadersToAdd = make([]*HeaderValueOption, len(m.GetResponseHeadersToAdd()))
		for idx, v := range m.GetResponseHeadersToAdd() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ResponseHeadersToAdd[idx] = h.Clone().(*HeaderValueOption)
			} else {
				target.ResponseHeadersToAdd[idx] = proto.Clone(v).(*HeaderValueOption)
			}

		}
	}

	if m.GetResponseHeadersToRemove() != nil {
		target.ResponseHeadersToRemove = make([]string, len(m.GetResponseHeadersToRemove()))
		for idx, v := range m.GetResponseHeadersToRemove() {

			target.ResponseHeadersToRemove[idx] = v

		}
	}

	return target
}

// Clone function
func (m *EarlyHeaderManipulation) Clone() proto.Message {
	var target *EarlyHeaderManipulation
	if m == nil {
		return target
	}
	target = &EarlyHeaderManipulation{}

	if m.GetHeadersToAdd() != nil {
		target.HeadersToAdd = make([]*github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core.HeaderValueOption, len(m.GetHeadersToAdd()))
		for idx, v := range m.GetHeadersToAdd() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.HeadersToAdd[idx] = h.Clone().(*github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core.HeaderValueOption)
			} else {
				target.HeadersToAdd[idx] = proto.Clone(v).(*github_com_solo_io_solo_kit_pkg_api_external_envoy_api_v2_core.HeaderValueOption)
			}

		}
	}

	if m.GetHeadersToRemove() != nil {
		target.HeadersToRemove = make([]string, len(m.GetHeadersToRemove()))
		for idx, v := range m.GetHeadersToRemove() {

			target.HeadersToRemove[idx] = v

		}
	}

	return target
}

// Clone function
func (m *HeaderValueOption) Clone() proto.Message {
	var target *HeaderValueOption
	if m == nil {
		return target
	}
	target = &HeaderValueOption{}

	if h, ok := interface{}(m.GetHeader()).(clone.Cloner); ok {
		target.Header = h.Clone().(*HeaderValue)
	} else {
		target.Header = proto.Clone(m.GetHeader()).(*HeaderValue)
	}

	if h, ok := interface{}(m.GetAppend()).(clone.Cloner); ok {
		target.Append = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.BoolValue)
	} else {
		target.Append = proto.Clone(m.GetAppend()).(*google_golang_org_protobuf_types_known_wrapperspb.BoolValue)
	}

	return target
}

// Clone function
func (m *HeaderValue) Clone() proto.Message {
	var target *HeaderValue
	if m == nil {
		return target
	}
	target = &HeaderValue{}

	target.Key = m.GetKey()

	target.Value = m.GetValue()

	return target
}
