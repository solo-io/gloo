// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/core/matchers/matchers.proto

package matchers

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Parameters for matching routes to requests received by a Gloo-managed proxy
type Matcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to PathSpecifier:
	//
	//	*Matcher_Prefix
	//	*Matcher_Exact
	//	*Matcher_Regex
	//	*Matcher_ConnectMatcher_
	PathSpecifier isMatcher_PathSpecifier `protobuf_oneof:"path_specifier"`
	// Indicates that prefix/path matching should be case sensitive. The default is true.
	CaseSensitive *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=case_sensitive,json=caseSensitive,proto3" json:"case_sensitive,omitempty"`
	// Specifies a set of headers that the route should match on. The router will
	// check the request’s headers against all the specified headers in the route
	// config. A match will happen if all the headers in the route are present in
	// the request with the same values (or based on presence if the value field
	// is not in the config).
	Headers []*HeaderMatcher `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty"`
	// Specifies a set of URL query parameters on which the route should
	// match. The router will check the query string from the *path* header
	// against all the specified query parameters. If the number of specified
	// query parameters is nonzero, they all must match the *path* header's
	// query string for a match to occur.
	QueryParameters []*QueryParameterMatcher `protobuf:"bytes,7,rep,name=query_parameters,json=queryParameters,proto3" json:"query_parameters,omitempty"`
	// HTTP Method/Verb(s) to match on. If none specified, the matcher will ignore the HTTP Method
	Methods       []string `protobuf:"bytes,8,rep,name=methods,proto3" json:"methods,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Matcher) Reset() {
	*x = Matcher{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Matcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matcher) ProtoMessage() {}

func (x *Matcher) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matcher.ProtoReflect.Descriptor instead.
func (*Matcher) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDescGZIP(), []int{0}
}

func (x *Matcher) GetPathSpecifier() isMatcher_PathSpecifier {
	if x != nil {
		return x.PathSpecifier
	}
	return nil
}

func (x *Matcher) GetPrefix() string {
	if x != nil {
		if x, ok := x.PathSpecifier.(*Matcher_Prefix); ok {
			return x.Prefix
		}
	}
	return ""
}

func (x *Matcher) GetExact() string {
	if x != nil {
		if x, ok := x.PathSpecifier.(*Matcher_Exact); ok {
			return x.Exact
		}
	}
	return ""
}

func (x *Matcher) GetRegex() string {
	if x != nil {
		if x, ok := x.PathSpecifier.(*Matcher_Regex); ok {
			return x.Regex
		}
	}
	return ""
}

func (x *Matcher) GetConnectMatcher() *Matcher_ConnectMatcher {
	if x != nil {
		if x, ok := x.PathSpecifier.(*Matcher_ConnectMatcher_); ok {
			return x.ConnectMatcher
		}
	}
	return nil
}

func (x *Matcher) GetCaseSensitive() *wrapperspb.BoolValue {
	if x != nil {
		return x.CaseSensitive
	}
	return nil
}

func (x *Matcher) GetHeaders() []*HeaderMatcher {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *Matcher) GetQueryParameters() []*QueryParameterMatcher {
	if x != nil {
		return x.QueryParameters
	}
	return nil
}

func (x *Matcher) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

type isMatcher_PathSpecifier interface {
	isMatcher_PathSpecifier()
}

type Matcher_Prefix struct {
	// If specified, the route is a prefix rule meaning that the prefix must
	// match the beginning of the *:path* header.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3,oneof"`
}

type Matcher_Exact struct {
	// If specified, the route is an exact path rule meaning that the path must
	// exactly match the *:path* header once the query string is removed.
	Exact string `protobuf:"bytes,2,opt,name=exact,proto3,oneof"`
}

type Matcher_Regex struct {
	// If specified, the route is a regular expression rule meaning that the
	// regex must match the *:path* header once the query string is removed. The entire path
	// (without the query string) must match the regex. The rule will not match if only a
	// sub-sequence of the *:path* header matches the regex. The regex grammar is defined [here](http://en.cppreference.com/w/cpp/regex/ecmascript).
	//
	// Examples:<br/>
	//
	// * The regex */b[io]t* matches the path */bit*<br/>
	// * The regex */b[io]t* matches the path */bot*<br/>
	// * The regex */b[io]t* does not match the path */bite*<br/>
	// * The regex */b[io]t* does not match the path */bit/bot*<br/><br/>
	//
	// Note that the complexity of the regex is constrained by the regex engine's "program size" setting.
	// If your regex is too complex, you may need to adjust the `regexMaxProgramSize` field
	// in the `GlooOptions` section of your `Settings` resource (The gloo default is 1024)
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof"`
}

type Matcher_ConnectMatcher_ struct {
	// If this is used as the matcher, the matcher will only match CONNECT requests.
	// Note that this will not match HTTP/2 upgrade-style CONNECT requests
	// (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
	// upgrades.
	// This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
	// where CONNECT requests may have a path, the path matchers will work if
	// there is a path present.
	// Note that CONNECT support is currently considered alpha in Envoy.
	ConnectMatcher *Matcher_ConnectMatcher `protobuf:"bytes,9,opt,name=connect_matcher,json=connectMatcher,proto3,oneof"`
}

func (*Matcher_Prefix) isMatcher_PathSpecifier() {}

func (*Matcher_Exact) isMatcher_PathSpecifier() {}

func (*Matcher_Regex) isMatcher_PathSpecifier() {}

func (*Matcher_ConnectMatcher_) isMatcher_PathSpecifier() {}

// Internally, Gloo always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host* header.
// Thus, if attempting to match on *Host*, match on *:authority* instead.
type HeaderMatcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the name of the header in the request.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Specifies the value of the header. If the value is absent a request that
	// has the name header will match, regardless of the header’s value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Specifies whether the header value should be treated as regex or not.
	Regex bool `protobuf:"varint,3,opt,name=regex,proto3" json:"regex,omitempty"`
	// If set to true, the result of the match will be inverted. Defaults to false.
	//
	// Examples:
	// * name=foo, invert_match=true: matches if no header named `foo` is present
	// * name=foo, value=bar, invert_match=true: matches if no header named `foo` with value `bar` is present
	// * name=foo, value=`\d{3}`, regex=true, invert_match=true: matches if no header named `foo` with a value consisting of three integers is present
	InvertMatch   bool `protobuf:"varint,4,opt,name=invert_match,json=invertMatch,proto3" json:"invert_match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeaderMatcher) Reset() {
	*x = HeaderMatcher{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderMatcher) ProtoMessage() {}

func (x *HeaderMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderMatcher.ProtoReflect.Descriptor instead.
func (*HeaderMatcher) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDescGZIP(), []int{1}
}

func (x *HeaderMatcher) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HeaderMatcher) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *HeaderMatcher) GetRegex() bool {
	if x != nil {
		return x.Regex
	}
	return false
}

func (x *HeaderMatcher) GetInvertMatch() bool {
	if x != nil {
		return x.InvertMatch
	}
	return false
}

// Query parameter matching treats the query string of a request's :path header
// as an ampersand-separated list of keys and/or key=value elements.
type QueryParameterMatcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the name of a key that must be present in the requested
	// *path*'s query string.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Specifies the value of the key. If the value is absent, a request
	// that contains the key in its query string will match, whether the
	// key appears with a value (e.g., "?debug=true") or not (e.g., "?debug")
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Specifies whether the query parameter value is a regular expression.
	// Defaults to false. The entire query parameter value (i.e., the part to
	// the right of the equals sign in "key=value") must match the regex.
	// E.g., the regex "\d+$" will match "123" but not "a123" or "123a".
	Regex         bool `protobuf:"varint,3,opt,name=regex,proto3" json:"regex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryParameterMatcher) Reset() {
	*x = QueryParameterMatcher{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryParameterMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParameterMatcher) ProtoMessage() {}

func (x *QueryParameterMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParameterMatcher.ProtoReflect.Descriptor instead.
func (*QueryParameterMatcher) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDescGZIP(), []int{2}
}

func (x *QueryParameterMatcher) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryParameterMatcher) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *QueryParameterMatcher) GetRegex() bool {
	if x != nil {
		return x.Regex
	}
	return false
}

type Matcher_ConnectMatcher struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Matcher_ConnectMatcher) Reset() {
	*x = Matcher_ConnectMatcher{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Matcher_ConnectMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matcher_ConnectMatcher) ProtoMessage() {}

func (x *Matcher_ConnectMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matcher_ConnectMatcher.ProtoReflect.Descriptor instead.
func (*Matcher_ConnectMatcher) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDescGZIP(), []int{0, 0}
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDesc = "" +
	"\n" +
	"Igithub.com/solo-io/gloo/projects/gloo/api/v1/core/matchers/matchers.proto\x12\x1amatchers.core.gloo.solo.io\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x12extproto/ext.proto\"\xd6\x03\n" +
	"\aMatcher\x12\x18\n" +
	"\x06prefix\x18\x01 \x01(\tH\x00R\x06prefix\x12\x16\n" +
	"\x05exact\x18\x02 \x01(\tH\x00R\x05exact\x12\x16\n" +
	"\x05regex\x18\x03 \x01(\tH\x00R\x05regex\x12]\n" +
	"\x0fconnect_matcher\x18\t \x01(\v22.matchers.core.gloo.solo.io.Matcher.ConnectMatcherH\x00R\x0econnectMatcher\x12A\n" +
	"\x0ecase_sensitive\x18\x04 \x01(\v2\x1a.google.protobuf.BoolValueR\rcaseSensitive\x12C\n" +
	"\aheaders\x18\x06 \x03(\v2).matchers.core.gloo.solo.io.HeaderMatcherR\aheaders\x12\\\n" +
	"\x10query_parameters\x18\a \x03(\v21.matchers.core.gloo.solo.io.QueryParameterMatcherR\x0fqueryParameters\x12\x18\n" +
	"\amethods\x18\b \x03(\tR\amethods\x1a\x10\n" +
	"\x0eConnectMatcherB\x10\n" +
	"\x0epath_specifier\"r\n" +
	"\rHeaderMatcher\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x12\x14\n" +
	"\x05regex\x18\x03 \x01(\bR\x05regex\x12!\n" +
	"\finvert_match\x18\x04 \x01(\bR\vinvertMatch\"W\n" +
	"\x15QueryParameterMatcher\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\x12\x14\n" +
	"\x05regex\x18\x03 \x01(\bR\x05regexBL\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z>github.com/solo-io/gloo/projects/gloo/pkg/api/v1/core/matchersb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_goTypes = []any{
	(*Matcher)(nil),                // 0: matchers.core.gloo.solo.io.Matcher
	(*HeaderMatcher)(nil),          // 1: matchers.core.gloo.solo.io.HeaderMatcher
	(*QueryParameterMatcher)(nil),  // 2: matchers.core.gloo.solo.io.QueryParameterMatcher
	(*Matcher_ConnectMatcher)(nil), // 3: matchers.core.gloo.solo.io.Matcher.ConnectMatcher
	(*wrapperspb.BoolValue)(nil),   // 4: google.protobuf.BoolValue
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_depIdxs = []int32{
	3, // 0: matchers.core.gloo.solo.io.Matcher.connect_matcher:type_name -> matchers.core.gloo.solo.io.Matcher.ConnectMatcher
	4, // 1: matchers.core.gloo.solo.io.Matcher.case_sensitive:type_name -> google.protobuf.BoolValue
	1, // 2: matchers.core.gloo.solo.io.Matcher.headers:type_name -> matchers.core.gloo.solo.io.HeaderMatcher
	2, // 3: matchers.core.gloo.solo.io.Matcher.query_parameters:type_name -> matchers.core.gloo.solo.io.QueryParameterMatcher
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_init() }
func file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_msgTypes[0].OneofWrappers = []any{
		(*Matcher_Prefix)(nil),
		(*Matcher_Exact)(nil),
		(*Matcher_Regex)(nil),
		(*Matcher_ConnectMatcher_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_core_matchers_matchers_proto_depIdxs = nil
}
