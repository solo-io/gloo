// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/core/selectors/selectors.proto

package selectors

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Selector expression operator, while the set-based syntax differs from Kubernetes (kubernetes: `key: !mylabel`, gloo: `key: mylabel, operator: "!"` | kubernetes: `key: mylabel`, gloo: `key: mylabel, operator: exists`), the functionality remains the same.
type Selector_Expression_Operator int32

const (
	// =
	Selector_Expression_Equals Selector_Expression_Operator = 0
	// ==
	Selector_Expression_DoubleEquals Selector_Expression_Operator = 1
	// !=
	Selector_Expression_NotEquals Selector_Expression_Operator = 2
	// in
	Selector_Expression_In Selector_Expression_Operator = 3
	// notin
	Selector_Expression_NotIn Selector_Expression_Operator = 4
	// exists
	Selector_Expression_Exists Selector_Expression_Operator = 5
	// !
	Selector_Expression_DoesNotExist Selector_Expression_Operator = 6
	// gt
	Selector_Expression_GreaterThan Selector_Expression_Operator = 7
	// lt
	Selector_Expression_LessThan Selector_Expression_Operator = 8
)

// Enum value maps for Selector_Expression_Operator.
var (
	Selector_Expression_Operator_name = map[int32]string{
		0: "Equals",
		1: "DoubleEquals",
		2: "NotEquals",
		3: "In",
		4: "NotIn",
		5: "Exists",
		6: "DoesNotExist",
		7: "GreaterThan",
		8: "LessThan",
	}
	Selector_Expression_Operator_value = map[string]int32{
		"Equals":       0,
		"DoubleEquals": 1,
		"NotEquals":    2,
		"In":           3,
		"NotIn":        4,
		"Exists":       5,
		"DoesNotExist": 6,
		"GreaterThan":  7,
		"LessThan":     8,
	}
)

func (x Selector_Expression_Operator) Enum() *Selector_Expression_Operator {
	p := new(Selector_Expression_Operator)
	*p = x
	return p
}

func (x Selector_Expression_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Selector_Expression_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_enumTypes[0].Descriptor()
}

func (Selector_Expression_Operator) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_enumTypes[0]
}

func (x Selector_Expression_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Selector_Expression_Operator.Descriptor instead.
func (Selector_Expression_Operator) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDescGZIP(), []int{0, 1, 0}
}

type Selector struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Namespaces []string               `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	Labels     map[string]string      `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Expressions allow for more flexible Route Tables label matching, such as equality-based requirements, set-based requirements, or a combination of both.
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#equality-based-requirement
	Expressions   []*Selector_Expression `protobuf:"bytes,3,rep,name=expressions,proto3" json:"expressions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Selector) Reset() {
	*x = Selector{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDescGZIP(), []int{0}
}

func (x *Selector) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *Selector) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Selector) GetExpressions() []*Selector_Expression {
	if x != nil {
		return x.Expressions
	}
	return nil
}

type Selector_Expression struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Kubernetes label key, must conform to Kubernetes syntax requirements
	// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The operator can only be in, notin, =, ==, !=, exists, ! (DoesNotExist), gt (GreaterThan), lt (LessThan).
	Operator      Selector_Expression_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=selectors.core.gloo.solo.io.Selector_Expression_Operator" json:"operator,omitempty"`
	Values        []string                     `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Selector_Expression) Reset() {
	*x = Selector_Expression{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Selector_Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector_Expression) ProtoMessage() {}

func (x *Selector_Expression) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector_Expression.ProtoReflect.Descriptor instead.
func (*Selector_Expression) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Selector_Expression) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Selector_Expression) GetOperator() Selector_Expression_Operator {
	if x != nil {
		return x.Operator
	}
	return Selector_Expression_Equals
}

func (x *Selector_Expression) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDesc = "" +
	"\n" +
	"Kgithub.com/solo-io/gloo/projects/gloo/api/v1/core/selectors/selectors.proto\x12\x1bselectors.core.gloo.solo.io\x1a\x12extproto/ext.proto\"\x9e\x04\n" +
	"\bSelector\x12\x1e\n" +
	"\n" +
	"namespaces\x18\x01 \x03(\tR\n" +
	"namespaces\x12I\n" +
	"\x06labels\x18\x02 \x03(\v21.selectors.core.gloo.solo.io.Selector.LabelsEntryR\x06labels\x12R\n" +
	"\vexpressions\x18\x03 \x03(\v20.selectors.core.gloo.solo.io.Selector.ExpressionR\vexpressions\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\x97\x02\n" +
	"\n" +
	"Expression\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12U\n" +
	"\boperator\x18\x02 \x01(\x0e29.selectors.core.gloo.solo.io.Selector.Expression.OperatorR\boperator\x12\x16\n" +
	"\x06values\x18\x03 \x03(\tR\x06values\"\x87\x01\n" +
	"\bOperator\x12\n" +
	"\n" +
	"\x06Equals\x10\x00\x12\x10\n" +
	"\fDoubleEquals\x10\x01\x12\r\n" +
	"\tNotEquals\x10\x02\x12\x06\n" +
	"\x02In\x10\x03\x12\t\n" +
	"\x05NotIn\x10\x04\x12\n" +
	"\n" +
	"\x06Exists\x10\x05\x12\x10\n" +
	"\fDoesNotExist\x10\x06\x12\x0f\n" +
	"\vGreaterThan\x10\a\x12\f\n" +
	"\bLessThan\x10\bBM\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z?github.com/solo-io/gloo/projects/gloo/pkg/api/v1/core/selectorsb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_goTypes = []any{
	(Selector_Expression_Operator)(0), // 0: selectors.core.gloo.solo.io.Selector.Expression.Operator
	(*Selector)(nil),                  // 1: selectors.core.gloo.solo.io.Selector
	nil,                               // 2: selectors.core.gloo.solo.io.Selector.LabelsEntry
	(*Selector_Expression)(nil),       // 3: selectors.core.gloo.solo.io.Selector.Expression
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_depIdxs = []int32{
	2, // 0: selectors.core.gloo.solo.io.Selector.labels:type_name -> selectors.core.gloo.solo.io.Selector.LabelsEntry
	3, // 1: selectors.core.gloo.solo.io.Selector.expressions:type_name -> selectors.core.gloo.solo.io.Selector.Expression
	0, // 2: selectors.core.gloo.solo.io.Selector.Expression.operator:type_name -> selectors.core.gloo.solo.io.Selector.Expression.Operator
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_init() }
func file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_core_selectors_selectors_proto_depIdxs = nil
}
