// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/route_options.proto

package v1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	v3 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/filters/http/buffer/v3"
	v31 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/filters/http/csrf/v3"
	v32 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/type/matcher/v3"
	ai "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/ai"
	dlp "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/dlp"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/extauth/v1"
	extproc "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/extproc"
	jwt "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/jwt"
	ratelimit "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/ratelimit"
	rbac "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/rbac"
	waf "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/waf"
	cors "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/cors"
	faultinjection "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/faultinjection"
	headers "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/headers"
	lbhash "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/lbhash"
	protocol_upgrade "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/protocol_upgrade"
	retries "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/retries"
	shadowing "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/shadowing"
	tracing "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/tracing"
	transformation "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/transformation"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Optional, feature-specific configuration that lives on routes.
// Each RouteOptions object contains configuration for a specific feature.
// Note to developers: new Route plugins must be added to this struct
// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
type RouteOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Transformations to apply. Note: this field is superseded by `staged_transformations`.
	// If `staged_transformations.regular` is set, this field will be ignored.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/route_options.proto.
	Transformations *transformation.Transformations `protobuf:"bytes,1,opt,name=transformations,proto3" json:"transformations,omitempty"`
	Faults          *faultinjection.RouteFaults     `protobuf:"bytes,2,opt,name=faults,proto3" json:"faults,omitempty"`
	// For requests matched on this route, rewrite the HTTP request path to the provided value before forwarding upstream
	PrefixRewrite *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=prefix_rewrite,json=prefixRewrite,proto3" json:"prefix_rewrite,omitempty"`
	// Specifies the upstream timeout for the route. If not specified, the default is 15s. This spans between the point
	// at which the entire downstream request (i.e. end-of-stream) has been processed and when the upstream response has
	// been completely processed. A value of 0 will disable the routeâ€™s timeout.
	Timeout *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Retries *retries.RetryPolicy `protobuf:"bytes,5,opt,name=retries,proto3" json:"retries,omitempty"`
	// Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
	// underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
	//
	// Some sample use cases:
	// * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
	// * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
	// Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
	Extensions *Extensions `protobuf:"bytes,6,opt,name=extensions,proto3" json:"extensions,omitempty"`
	// Defines route-specific tracing configuration.
	// See here for additional information on Envoy's tracing capabilities: https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/observability/tracing.html
	// See [here](https://docs.solo.io/gloo-edge/latest/guides/observability/tracing/) for additional information about configuring tracing with Gloo Edge.
	Tracing *tracing.RouteTracingSettings `protobuf:"bytes,7,opt,name=tracing,proto3" json:"tracing,omitempty"`
	// Specifies traffic shadowing configuration for the route.
	// See here for additional information on Envoy's shadowing capabilities: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#envoy-api-msg-route-routeaction-requestmirrorpolicy
	Shadowing *shadowing.RouteShadowing `protobuf:"bytes,8,opt,name=shadowing,proto3" json:"shadowing,omitempty"`
	// Append/Remove headers on Requests or Responses on this Route
	HeaderManipulation *headers.HeaderManipulation `protobuf:"bytes,9,opt,name=header_manipulation,json=headerManipulation,proto3" json:"header_manipulation,omitempty"`
	// For requests matched on this route, rewrite the Host header before forwarding upstream
	//
	// Types that are valid to be assigned to HostRewriteType:
	//
	//	*RouteOptions_HostRewrite
	//	*RouteOptions_AutoHostRewrite
	//	*RouteOptions_HostRewritePathRegex
	//	*RouteOptions_HostRewriteHeader
	HostRewriteType isRouteOptions_HostRewriteType `protobuf_oneof:"host_rewrite_type"`
	// If true and there is a host rewrite, appends the x-forwarded-host header to requests.
	AppendXForwardedHost *wrapperspb.BoolValue `protobuf:"bytes,146,opt,name=append_x_forwarded_host,json=appendXForwardedHost,proto3" json:"append_x_forwarded_host,omitempty"`
	// Defines a CORS policy for the route.
	// If a CORS policy is defined on both the route and the virtual host, the merge behavior for these policies is
	// determined by the CorsPolicyMergeSettings defined on the VirtualHost.
	Cors *cors.CorsPolicy `protobuf:"bytes,11,opt,name=cors,proto3" json:"cors,omitempty"`
	// For routes served by a hashing load balancer, this defines the input to the hash key
	// Gloo configures Envoy with the first available RouteActionHashConfig among the following ordered list of providers:
	// - route, upstream, virtual service
	LbHash *lbhash.RouteActionHashConfig `protobuf:"bytes,12,opt,name=lb_hash,json=lbHash,proto3" json:"lb_hash,omitempty"`
	// Route configuration for protocol upgrade requests.
	Upgrades []*protocol_upgrade.ProtocolUpgradeConfig `protobuf:"bytes,21,rep,name=upgrades,proto3" json:"upgrades,omitempty"`
	// Enterprise-only: Config for GlooE rate-limiting using simplified (gloo-specific) API
	RatelimitBasic *ratelimit.IngressRateLimit `protobuf:"bytes,13,opt,name=ratelimit_basic,json=ratelimitBasic,proto3" json:"ratelimit_basic,omitempty"`
	// Types that are valid to be assigned to RateLimitEarlyConfigType:
	//
	//	*RouteOptions_RatelimitEarly
	//	*RouteOptions_RateLimitEarlyConfigs
	RateLimitEarlyConfigType isRouteOptions_RateLimitEarlyConfigType `protobuf_oneof:"rate_limit_early_config_type"`
	// Types that are valid to be assigned to RateLimitConfigType:
	//
	//	*RouteOptions_Ratelimit
	//	*RouteOptions_RateLimitConfigs
	RateLimitConfigType isRouteOptions_RateLimitConfigType `protobuf_oneof:"rate_limit_config_type"`
	// Types that are valid to be assigned to RateLimitRegularConfigType:
	//
	//	*RouteOptions_RatelimitRegular
	//	*RouteOptions_RateLimitRegularConfigs
	RateLimitRegularConfigType isRouteOptions_RateLimitRegularConfigType `protobuf_oneof:"rate_limit_regular_config_type"`
	// Enterprise-only: Config for Web Application Firewall (WAF), supporting
	// the popular ModSecurity 3.0 ruleset
	Waf *waf.Settings `protobuf:"bytes,15,opt,name=waf,proto3" json:"waf,omitempty"`
	// Types that are valid to be assigned to JwtConfig:
	//
	//	*RouteOptions_Jwt
	//	*RouteOptions_JwtStaged
	//	*RouteOptions_JwtProvidersStaged
	JwtConfig isRouteOptions_JwtConfig `protobuf_oneof:"jwt_config"`
	// Enterprise-only: Config for RBAC (currently only supports RBAC based on JWT claims)
	Rbac *rbac.ExtensionSettings `protobuf:"bytes,17,opt,name=rbac,proto3" json:"rbac,omitempty"`
	// Enterprise-only: Authentication configuration
	Extauth *v1.ExtAuthExtension `protobuf:"bytes,18,opt,name=extauth,proto3" json:"extauth,omitempty"`
	// Enterprise-only: Config for data loss prevention
	Dlp *dlp.Config `protobuf:"bytes,20,opt,name=dlp,proto3" json:"dlp,omitempty"`
	// BufferPerRoute can be used to set the maximum request size
	// that the filter will buffer before the connection
	// manager will stop buffering and return a 413 response.
	// Note: If you have not set a global config (at the gateway level), this
	// override will not do anything by itself.
	BufferPerRoute *v3.BufferPerRoute `protobuf:"bytes,22,opt,name=buffer_per_route,json=bufferPerRoute,proto3" json:"buffer_per_route,omitempty"`
	// Csrf can be used to set percent of requests for which the CSRF filter is enabled, enable shadow-only mode
	// where policies will be evaluated and tracked, but not enforced and add additional source origins
	// that will be allowed in addition to the destination origin.
	// For more, see https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/http/csrf/v2/csrf.proto
	Csrf *v31.CsrfPolicy `protobuf:"bytes,24,opt,name=csrf,proto3" json:"csrf,omitempty"`
	// Early transformations stage. These transformations run before most other options are processed.
	// If the `regular` field is set in here, the `transformations` field is ignored.
	StagedTransformations *transformation.TransformationStages `protobuf:"bytes,23,opt,name=staged_transformations,json=stagedTransformations,proto3" json:"staged_transformations,omitempty"`
	// This field can be used to provide additional information about the route. This metadata can be consumed
	// by the Envoy filters that process requests that match the route. For more info about metadata, see
	// [here](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/data_sharing_between_filters#metadata).
	//
	// The value of this field will be propagated to the `metadata` attribute of the corresponding Envoy route.
	// Please refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#config-route-v3-route)
	// for more details about the `metadata` attribute.
	EnvoyMetadata map[string]*structpb.Struct `protobuf:"bytes,26,rep,name=envoy_metadata,json=envoyMetadata,proto3" json:"envoy_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// For requests matched on this route, rewrite the HTTP request path according to the provided regex pattern before forwarding upstream
	// Please refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/v1.14.1/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-routeaction-regex-rewrite)
	// for more details about the `regex_rewrite` attribute
	RegexRewrite *v32.RegexMatchAndSubstitute `protobuf:"bytes,27,opt,name=regex_rewrite,json=regexRewrite,proto3" json:"regex_rewrite,omitempty"`
	// Settings for maximum durations and timeouts for streams on the route.
	// Please refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-msg-config-route-v3-routeaction-maxstreamduration)
	MaxStreamDuration *RouteOptions_MaxStreamDuration `protobuf:"bytes,28,opt,name=max_stream_duration,json=maxStreamDuration,proto3" json:"max_stream_duration,omitempty"`
	// Specifies the idle timeout for the route. If not specified, there is no per-route idle timeout,
	// although the Gateway's [httpConnectionManagerSettings](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/options/hcm/hcm.proto.sk/#httpconnectionmanagersettings)
	// wide stream_idle_timeout will still apply. A value of 0 will completely disable the routeâ€™s idle timeout, even if a connection manager stream idle timeout is configured.
	// Please refer to the [Envoy documentation](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-field-config-route-v3-routeaction-idle-timeout)
	IdleTimeout *durationpb.Duration `protobuf:"bytes,29,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// Enterprise-only: External Processing filter settings for the route. This can be used to
	// override certain HttpListenerOptions or VirtualHostOptions settings.
	ExtProc *extproc.RouteSettings `protobuf:"bytes,30,opt,name=ext_proc,json=extProc,proto3" json:"ext_proc,omitempty"`
	// Enterprise-only: Settings to configure ai settings for a route.
	// These settings will only apply if the backend is an `ai` Upstream.
	Ai            *ai.RouteSettings `protobuf:"bytes,31,opt,name=ai,proto3" json:"ai,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteOptions) Reset() {
	*x = RouteOptions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteOptions) ProtoMessage() {}

func (x *RouteOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteOptions.ProtoReflect.Descriptor instead.
func (*RouteOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_rawDescGZIP(), []int{0}
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/route_options.proto.
func (x *RouteOptions) GetTransformations() *transformation.Transformations {
	if x != nil {
		return x.Transformations
	}
	return nil
}

func (x *RouteOptions) GetFaults() *faultinjection.RouteFaults {
	if x != nil {
		return x.Faults
	}
	return nil
}

func (x *RouteOptions) GetPrefixRewrite() *wrapperspb.StringValue {
	if x != nil {
		return x.PrefixRewrite
	}
	return nil
}

func (x *RouteOptions) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *RouteOptions) GetRetries() *retries.RetryPolicy {
	if x != nil {
		return x.Retries
	}
	return nil
}

func (x *RouteOptions) GetExtensions() *Extensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *RouteOptions) GetTracing() *tracing.RouteTracingSettings {
	if x != nil {
		return x.Tracing
	}
	return nil
}

func (x *RouteOptions) GetShadowing() *shadowing.RouteShadowing {
	if x != nil {
		return x.Shadowing
	}
	return nil
}

func (x *RouteOptions) GetHeaderManipulation() *headers.HeaderManipulation {
	if x != nil {
		return x.HeaderManipulation
	}
	return nil
}

func (x *RouteOptions) GetHostRewriteType() isRouteOptions_HostRewriteType {
	if x != nil {
		return x.HostRewriteType
	}
	return nil
}

func (x *RouteOptions) GetHostRewrite() string {
	if x != nil {
		if x, ok := x.HostRewriteType.(*RouteOptions_HostRewrite); ok {
			return x.HostRewrite
		}
	}
	return ""
}

func (x *RouteOptions) GetAutoHostRewrite() *wrapperspb.BoolValue {
	if x != nil {
		if x, ok := x.HostRewriteType.(*RouteOptions_AutoHostRewrite); ok {
			return x.AutoHostRewrite
		}
	}
	return nil
}

func (x *RouteOptions) GetHostRewritePathRegex() *v32.RegexMatchAndSubstitute {
	if x != nil {
		if x, ok := x.HostRewriteType.(*RouteOptions_HostRewritePathRegex); ok {
			return x.HostRewritePathRegex
		}
	}
	return nil
}

func (x *RouteOptions) GetHostRewriteHeader() *wrapperspb.StringValue {
	if x != nil {
		if x, ok := x.HostRewriteType.(*RouteOptions_HostRewriteHeader); ok {
			return x.HostRewriteHeader
		}
	}
	return nil
}

func (x *RouteOptions) GetAppendXForwardedHost() *wrapperspb.BoolValue {
	if x != nil {
		return x.AppendXForwardedHost
	}
	return nil
}

func (x *RouteOptions) GetCors() *cors.CorsPolicy {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *RouteOptions) GetLbHash() *lbhash.RouteActionHashConfig {
	if x != nil {
		return x.LbHash
	}
	return nil
}

func (x *RouteOptions) GetUpgrades() []*protocol_upgrade.ProtocolUpgradeConfig {
	if x != nil {
		return x.Upgrades
	}
	return nil
}

func (x *RouteOptions) GetRatelimitBasic() *ratelimit.IngressRateLimit {
	if x != nil {
		return x.RatelimitBasic
	}
	return nil
}

func (x *RouteOptions) GetRateLimitEarlyConfigType() isRouteOptions_RateLimitEarlyConfigType {
	if x != nil {
		return x.RateLimitEarlyConfigType
	}
	return nil
}

func (x *RouteOptions) GetRatelimitEarly() *ratelimit.RateLimitRouteExtension {
	if x != nil {
		if x, ok := x.RateLimitEarlyConfigType.(*RouteOptions_RatelimitEarly); ok {
			return x.RatelimitEarly
		}
	}
	return nil
}

func (x *RouteOptions) GetRateLimitEarlyConfigs() *ratelimit.RateLimitConfigRefs {
	if x != nil {
		if x, ok := x.RateLimitEarlyConfigType.(*RouteOptions_RateLimitEarlyConfigs); ok {
			return x.RateLimitEarlyConfigs
		}
	}
	return nil
}

func (x *RouteOptions) GetRateLimitConfigType() isRouteOptions_RateLimitConfigType {
	if x != nil {
		return x.RateLimitConfigType
	}
	return nil
}

func (x *RouteOptions) GetRatelimit() *ratelimit.RateLimitRouteExtension {
	if x != nil {
		if x, ok := x.RateLimitConfigType.(*RouteOptions_Ratelimit); ok {
			return x.Ratelimit
		}
	}
	return nil
}

func (x *RouteOptions) GetRateLimitConfigs() *ratelimit.RateLimitConfigRefs {
	if x != nil {
		if x, ok := x.RateLimitConfigType.(*RouteOptions_RateLimitConfigs); ok {
			return x.RateLimitConfigs
		}
	}
	return nil
}

func (x *RouteOptions) GetRateLimitRegularConfigType() isRouteOptions_RateLimitRegularConfigType {
	if x != nil {
		return x.RateLimitRegularConfigType
	}
	return nil
}

func (x *RouteOptions) GetRatelimitRegular() *ratelimit.RateLimitRouteExtension {
	if x != nil {
		if x, ok := x.RateLimitRegularConfigType.(*RouteOptions_RatelimitRegular); ok {
			return x.RatelimitRegular
		}
	}
	return nil
}

func (x *RouteOptions) GetRateLimitRegularConfigs() *ratelimit.RateLimitConfigRefs {
	if x != nil {
		if x, ok := x.RateLimitRegularConfigType.(*RouteOptions_RateLimitRegularConfigs); ok {
			return x.RateLimitRegularConfigs
		}
	}
	return nil
}

func (x *RouteOptions) GetWaf() *waf.Settings {
	if x != nil {
		return x.Waf
	}
	return nil
}

func (x *RouteOptions) GetJwtConfig() isRouteOptions_JwtConfig {
	if x != nil {
		return x.JwtConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/route_options.proto.
func (x *RouteOptions) GetJwt() *jwt.RouteExtension {
	if x != nil {
		if x, ok := x.JwtConfig.(*RouteOptions_Jwt); ok {
			return x.Jwt
		}
	}
	return nil
}

func (x *RouteOptions) GetJwtStaged() *jwt.JwtStagedRouteExtension {
	if x != nil {
		if x, ok := x.JwtConfig.(*RouteOptions_JwtStaged); ok {
			return x.JwtStaged
		}
	}
	return nil
}

func (x *RouteOptions) GetJwtProvidersStaged() *jwt.JwtStagedRouteProvidersExtension {
	if x != nil {
		if x, ok := x.JwtConfig.(*RouteOptions_JwtProvidersStaged); ok {
			return x.JwtProvidersStaged
		}
	}
	return nil
}

func (x *RouteOptions) GetRbac() *rbac.ExtensionSettings {
	if x != nil {
		return x.Rbac
	}
	return nil
}

func (x *RouteOptions) GetExtauth() *v1.ExtAuthExtension {
	if x != nil {
		return x.Extauth
	}
	return nil
}

func (x *RouteOptions) GetDlp() *dlp.Config {
	if x != nil {
		return x.Dlp
	}
	return nil
}

func (x *RouteOptions) GetBufferPerRoute() *v3.BufferPerRoute {
	if x != nil {
		return x.BufferPerRoute
	}
	return nil
}

func (x *RouteOptions) GetCsrf() *v31.CsrfPolicy {
	if x != nil {
		return x.Csrf
	}
	return nil
}

func (x *RouteOptions) GetStagedTransformations() *transformation.TransformationStages {
	if x != nil {
		return x.StagedTransformations
	}
	return nil
}

func (x *RouteOptions) GetEnvoyMetadata() map[string]*structpb.Struct {
	if x != nil {
		return x.EnvoyMetadata
	}
	return nil
}

func (x *RouteOptions) GetRegexRewrite() *v32.RegexMatchAndSubstitute {
	if x != nil {
		return x.RegexRewrite
	}
	return nil
}

func (x *RouteOptions) GetMaxStreamDuration() *RouteOptions_MaxStreamDuration {
	if x != nil {
		return x.MaxStreamDuration
	}
	return nil
}

func (x *RouteOptions) GetIdleTimeout() *durationpb.Duration {
	if x != nil {
		return x.IdleTimeout
	}
	return nil
}

func (x *RouteOptions) GetExtProc() *extproc.RouteSettings {
	if x != nil {
		return x.ExtProc
	}
	return nil
}

func (x *RouteOptions) GetAi() *ai.RouteSettings {
	if x != nil {
		return x.Ai
	}
	return nil
}

type isRouteOptions_HostRewriteType interface {
	isRouteOptions_HostRewriteType()
}

type RouteOptions_HostRewrite struct {
	// Indicates that during forwarding, the host header will be swapped with this value.
	HostRewrite string `protobuf:"bytes,10,opt,name=host_rewrite,json=hostRewrite,proto3,oneof"`
}

type RouteOptions_AutoHostRewrite struct {
	// Enable/Disable auto host re-write.
	// Indicates that the host header will be swapped with the hostname of the upstream host.
	// This setting is only honored for upstreams that use DNS resolution (i.e., their generated Envoy cluster is
	// of type STRICT_DNS or LOGICAL_DNS -- think aws, azure, or static upstreams with hostnames)
	AutoHostRewrite *wrapperspb.BoolValue `protobuf:"bytes,19,opt,name=auto_host_rewrite,json=autoHostRewrite,proto3,oneof"`
}

type RouteOptions_HostRewritePathRegex struct {
	// Indicates that during forwarding, the host header will be swapped with the result of the regex
	// substitution executed on path value with query and fragment removed.
	HostRewritePathRegex *v32.RegexMatchAndSubstitute `protobuf:"bytes,101,opt,name=host_rewrite_path_regex,json=hostRewritePathRegex,proto3,oneof"`
}

type RouteOptions_HostRewriteHeader struct {
	// Indicates that during forwarding, the host header will be swapped with the content of given downstream or custom header.
	// If header value is empty, host header is left intact.
	// Using this option will append the x-forwarded-host header if append_x_forwarded_host is set.
	HostRewriteHeader *wrapperspb.StringValue `protobuf:"bytes,147,opt,name=host_rewrite_header,json=hostRewriteHeader,proto3,oneof"`
}

func (*RouteOptions_HostRewrite) isRouteOptions_HostRewriteType() {}

func (*RouteOptions_AutoHostRewrite) isRouteOptions_HostRewriteType() {}

func (*RouteOptions_HostRewritePathRegex) isRouteOptions_HostRewriteType() {}

func (*RouteOptions_HostRewriteHeader) isRouteOptions_HostRewriteType() {}

type isRouteOptions_RateLimitEarlyConfigType interface {
	isRouteOptions_RateLimitEarlyConfigType()
}

type RouteOptions_RatelimitEarly struct {
	// Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings.
	// Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
	RatelimitEarly *ratelimit.RateLimitRouteExtension `protobuf:"bytes,142,opt,name=ratelimit_early,json=ratelimitEarly,proto3,oneof"`
}

type RouteOptions_RateLimitEarlyConfigs struct {
	// References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
	// Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
	RateLimitEarlyConfigs *ratelimit.RateLimitConfigRefs `protobuf:"bytes,143,opt,name=rate_limit_early_configs,json=rateLimitEarlyConfigs,proto3,oneof"`
}

func (*RouteOptions_RatelimitEarly) isRouteOptions_RateLimitEarlyConfigType() {}

func (*RouteOptions_RateLimitEarlyConfigs) isRouteOptions_RateLimitEarlyConfigType() {}

type isRouteOptions_RateLimitConfigType interface {
	isRouteOptions_RateLimitConfigType()
}

type RouteOptions_Ratelimit struct {
	// Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings.
	// Only one of `ratelimit` or `rate_limit_configs` can be set.
	Ratelimit *ratelimit.RateLimitRouteExtension `protobuf:"bytes,140,opt,name=ratelimit,proto3,oneof"`
}

type RouteOptions_RateLimitConfigs struct {
	// References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
	// Only one of `ratelimit` or `rate_limit_configs` can be set.
	RateLimitConfigs *ratelimit.RateLimitConfigRefs `protobuf:"bytes,141,opt,name=rate_limit_configs,json=rateLimitConfigs,proto3,oneof"`
}

func (*RouteOptions_Ratelimit) isRouteOptions_RateLimitConfigType() {}

func (*RouteOptions_RateLimitConfigs) isRouteOptions_RateLimitConfigType() {}

type isRouteOptions_RateLimitRegularConfigType interface {
	isRouteOptions_RateLimitRegularConfigType()
}

type RouteOptions_RatelimitRegular struct {
	// Enterprise-only: Partial config for GlooE rate-limiting based on Envoy's rate-limit service;
	// supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
	// Configure rate-limit *actions* here, which define how request characteristics get translated into
	// descriptors used by the rate-limit service for rate-limiting. Configure rate-limit *descriptors* and
	// their associated limits on the Gloo settings.
	// Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
	RatelimitRegular *ratelimit.RateLimitRouteExtension `protobuf:"bytes,144,opt,name=ratelimit_regular,json=ratelimitRegular,proto3,oneof"`
}

type RouteOptions_RateLimitRegularConfigs struct {
	// References to RateLimitConfig resources. This is used to configure the GlooE rate limit server.
	// Only one of `ratelimit_early` or `rate_limit_early_configs` can be set.
	RateLimitRegularConfigs *ratelimit.RateLimitConfigRefs `protobuf:"bytes,145,opt,name=rate_limit_regular_configs,json=rateLimitRegularConfigs,proto3,oneof"`
}

func (*RouteOptions_RatelimitRegular) isRouteOptions_RateLimitRegularConfigType() {}

func (*RouteOptions_RateLimitRegularConfigs) isRouteOptions_RateLimitRegularConfigType() {}

type isRouteOptions_JwtConfig interface {
	isRouteOptions_JwtConfig()
}

type RouteOptions_Jwt struct {
	// Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
	// headers to make routing decisions or combine with RBAC for fine-grained access control.
	// This has been deprecated in favor of staged jwt. The same configuration can be achieved through staged jwt
	// using AfterExtAuth.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/route_options.proto.
	Jwt *jwt.RouteExtension `protobuf:"bytes,16,opt,name=jwt,proto3,oneof"`
}

type RouteOptions_JwtStaged struct {
	// Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
	// headers to make routing decisions or combine with RBAC for fine-grained access control.
	// JWT configuration has stages "BeforeExtAuth" and "AfterExtAuth". BeforeExtAuth JWT
	// validation runs before the external authentication service. This is useful when JWT
	// is used in conjunction with other auth mechanisms specified in the [boolean expression Extauth API](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto.sk/#authconfig).
	// AfterExtAuth validation runs after external authentication service, which is useful for verifying
	// JWTs obtained during extauth (e.g. oauth/oidc)
	JwtStaged *jwt.JwtStagedRouteExtension `protobuf:"bytes,25,opt,name=jwt_staged,json=jwtStaged,proto3,oneof"`
}

type RouteOptions_JwtProvidersStaged struct {
	// Enterprise-only: Config for reading and verifying JWTs. Copy verifiable information from JWTs into other
	// headers to make routing decisions or combine with RBAC for fine-grained access control.
	// JWT configuration has stages "BeforeExtAuth" and "AfterExtAuth". BeforeExtAuth JWT
	// validation runs before the external authentication service. This is useful when JWT
	// is used in conjunction with other auth mechanisms specified in the [boolean expression Extauth API](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto.sk/#authconfig).
	// AfterExtAuth validation runs after external authentication service, which is useful for verifying
	// JWTs obtained during extauth (e.g. oauth/oidc)
	JwtProvidersStaged *jwt.JwtStagedRouteProvidersExtension `protobuf:"bytes,32,opt,name=jwt_providers_staged,json=jwtProvidersStaged,proto3,oneof"`
}

func (*RouteOptions_Jwt) isRouteOptions_JwtConfig() {}

func (*RouteOptions_JwtStaged) isRouteOptions_JwtConfig() {}

func (*RouteOptions_JwtProvidersStaged) isRouteOptions_JwtConfig() {}

// This is a 1:1 translation to the [Envoy API described here](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-msg-config-route-v3-routeaction-maxstreamduration)
type RouteOptions_MaxStreamDuration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the maximum duration allowed for streams on the route. If not specified, the value
	// from the [max_stream_duration](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#envoy-v3-api-field-config-core-v3-httpprotocoloptions-max-stream-duration)
	// field in [HttpConnectionManager.common_http_protocol_options](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#envoy-v3-api-field-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-common-http-protocol-options)
	// is used. If this field is set explicitly to zero, any HttpConnectionManager max_stream_duration timeout will be disabled for this route.
	MaxStreamDuration *durationpb.Duration `protobuf:"bytes,1,opt,name=max_stream_duration,json=maxStreamDuration,proto3" json:"max_stream_duration,omitempty"`
	// If present, and the request contains a [grpc-timeout header](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md), use that value as the
	// `max_stream_duration`, but limit the applied timeout to the maximum value specified here.
	// If set to 0, the `grpc-timeout` header is used without modification.
	GrpcTimeoutHeaderMax *durationpb.Duration `protobuf:"bytes,2,opt,name=grpc_timeout_header_max,json=grpcTimeoutHeaderMax,proto3" json:"grpc_timeout_header_max,omitempty"`
	// If present, Envoy will adjust the timeout provided by the `grpc-timeout` header by
	// subtracting the provided duration from the header. This is useful for allowing Envoy to set
	// its global timeout to be less than that of the deadline imposed by the calling client, which
	// makes it more likely that Envoy will handle the timeout instead of having the call canceled
	// by the client. If, after applying the offset, the resulting timeout is zero or negative,
	// the stream will timeout immediately.
	GrpcTimeoutHeaderOffset *durationpb.Duration `protobuf:"bytes,3,opt,name=grpc_timeout_header_offset,json=grpcTimeoutHeaderOffset,proto3" json:"grpc_timeout_header_offset,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *RouteOptions_MaxStreamDuration) Reset() {
	*x = RouteOptions_MaxStreamDuration{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteOptions_MaxStreamDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteOptions_MaxStreamDuration) ProtoMessage() {}

func (x *RouteOptions_MaxStreamDuration) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteOptions_MaxStreamDuration.ProtoReflect.Descriptor instead.
func (*RouteOptions_MaxStreamDuration) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RouteOptions_MaxStreamDuration) GetMaxStreamDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxStreamDuration
	}
	return nil
}

func (x *RouteOptions_MaxStreamDuration) GetGrpcTimeoutHeaderMax() *durationpb.Duration {
	if x != nil {
		return x.GrpcTimeoutHeaderMax
	}
	return nil
}

func (x *RouteOptions_MaxStreamDuration) GetGrpcTimeoutHeaderOffset() *durationpb.Duration {
	if x != nil {
		return x.GrpcTimeoutHeaderOffset
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_rawDesc = "" +
	"\n" +
	"@github.com/solo-io/gloo/projects/gloo/api/v1/route_options.proto\x12\fgloo.solo.io\x1a\x12extproto/ext.proto\x1aXgithub.com/solo-io/gloo/projects/gloo/api/v1/options/transformation/transformation.proto\x1aOgithub.com/solo-io/gloo/projects/gloo/api/v1/options/faultinjection/fault.proto\x1aJgithub.com/solo-io/gloo/projects/gloo/api/v1/options/retries/retries.proto\x1a=github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto\x1aJgithub.com/solo-io/gloo/projects/gloo/api/v1/options/tracing/tracing.proto\x1aNgithub.com/solo-io/gloo/projects/gloo/api/v1/options/shadowing/shadowing.proto\x1aJgithub.com/solo-io/gloo/projects/gloo/api/v1/options/headers/headers.proto\x1aTgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/type/matcher/v3/regex.proto\x1aDgithub.com/solo-io/gloo/projects/gloo/api/v1/options/cors/cors.proto\x1aHgithub.com/solo-io/gloo/projects/gloo/api/v1/options/lbhash/lbhash.proto\x1a\\github.com/solo-io/gloo/projects/gloo/api/v1/options/protocol_upgrade/protocol_upgrade.proto\x1aYgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/ratelimit/ratelimit.proto\x1aMgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/waf/waf.proto\x1aMgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/jwt/jwt.proto\x1aOgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/rbac/rbac.proto\x1aXgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto\x1aMgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/dlp/dlp.proto\x1aggithub.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/buffer/v3/buffer.proto\x1acgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/csrf/v3/csrf.proto\x1aUgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extproc/extproc.proto\x1aKgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/ai/ai.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.proto\"\xb8\x1d\n" +
	"\fRouteOptions\x12b\n" +
	"\x0ftransformations\x18\x01 \x01(\v24.transformation.options.gloo.solo.io.TransformationsB\x02\x18\x01R\x0ftransformations\x12?\n" +
	"\x06faults\x18\x02 \x01(\v2'.fault.options.gloo.solo.io.RouteFaultsR\x06faults\x12C\n" +
	"\x0eprefix_rewrite\x18\x03 \x01(\v2\x1c.google.protobuf.StringValueR\rprefixRewrite\x123\n" +
	"\atimeout\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12C\n" +
	"\aretries\x18\x05 \x01(\v2).retries.options.gloo.solo.io.RetryPolicyR\aretries\x128\n" +
	"\n" +
	"extensions\x18\x06 \x01(\v2\x18.gloo.solo.io.ExtensionsR\n" +
	"extensions\x12L\n" +
	"\atracing\x18\a \x01(\v22.tracing.options.gloo.solo.io.RouteTracingSettingsR\atracing\x12L\n" +
	"\tshadowing\x18\b \x01(\v2..shadowing.options.gloo.solo.io.RouteShadowingR\tshadowing\x12a\n" +
	"\x13header_manipulation\x18\t \x01(\v20.headers.options.gloo.solo.io.HeaderManipulationR\x12headerManipulation\x12#\n" +
	"\fhost_rewrite\x18\n" +
	" \x01(\tH\x00R\vhostRewrite\x12H\n" +
	"\x11auto_host_rewrite\x18\x13 \x01(\v2\x1a.google.protobuf.BoolValueH\x00R\x0fautoHostRewrite\x12o\n" +
	"\x17host_rewrite_path_regex\x18e \x01(\v26.solo.io.envoy.type.matcher.v3.RegexMatchAndSubstituteH\x00R\x14hostRewritePathRegex\x12O\n" +
	"\x13host_rewrite_header\x18\x93\x01 \x01(\v2\x1c.google.protobuf.StringValueH\x00R\x11hostRewriteHeader\x12R\n" +
	"\x17append_x_forwarded_host\x18\x92\x01 \x01(\v2\x1a.google.protobuf.BoolValueR\x14appendXForwardedHost\x129\n" +
	"\x04cors\x18\v \x01(\v2%.cors.options.gloo.solo.io.CorsPolicyR\x04cors\x12K\n" +
	"\alb_hash\x18\f \x01(\v22.lbhash.options.gloo.solo.io.RouteActionHashConfigR\x06lbHash\x12X\n" +
	"\bupgrades\x18\x15 \x03(\v2<.protocol_upgrade.options.gloo.solo.io.ProtocolUpgradeConfigR\bupgrades\x12Y\n" +
	"\x0fratelimit_basic\x18\r \x01(\v20.ratelimit.options.gloo.solo.io.IngressRateLimitR\x0eratelimitBasic\x12c\n" +
	"\x0fratelimit_early\x18\x8e\x01 \x01(\v27.ratelimit.options.gloo.solo.io.RateLimitRouteExtensionH\x01R\x0eratelimitEarly\x12o\n" +
	"\x18rate_limit_early_configs\x18\x8f\x01 \x01(\v23.ratelimit.options.gloo.solo.io.RateLimitConfigRefsH\x01R\x15rateLimitEarlyConfigs\x12X\n" +
	"\tratelimit\x18\x8c\x01 \x01(\v27.ratelimit.options.gloo.solo.io.RateLimitRouteExtensionH\x02R\tratelimit\x12d\n" +
	"\x12rate_limit_configs\x18\x8d\x01 \x01(\v23.ratelimit.options.gloo.solo.io.RateLimitConfigRefsH\x02R\x10rateLimitConfigs\x12g\n" +
	"\x11ratelimit_regular\x18\x90\x01 \x01(\v27.ratelimit.options.gloo.solo.io.RateLimitRouteExtensionH\x03R\x10ratelimitRegular\x12s\n" +
	"\x1arate_limit_regular_configs\x18\x91\x01 \x01(\v23.ratelimit.options.gloo.solo.io.RateLimitConfigRefsH\x03R\x17rateLimitRegularConfigs\x124\n" +
	"\x03waf\x18\x0f \x01(\v2\".waf.options.gloo.solo.io.SettingsR\x03waf\x12@\n" +
	"\x03jwt\x18\x10 \x01(\v2(.jwt.options.gloo.solo.io.RouteExtensionB\x02\x18\x01H\x04R\x03jwt\x12R\n" +
	"\n" +
	"jwt_staged\x18\x19 \x01(\v21.jwt.options.gloo.solo.io.JwtStagedRouteExtensionH\x04R\tjwtStaged\x12n\n" +
	"\x14jwt_providers_staged\x18  \x01(\v2:.jwt.options.gloo.solo.io.JwtStagedRouteProvidersExtensionH\x04R\x12jwtProvidersStaged\x12@\n" +
	"\x04rbac\x18\x11 \x01(\v2,.rbac.options.gloo.solo.io.ExtensionSettingsR\x04rbac\x12C\n" +
	"\aextauth\x18\x12 \x01(\v2).enterprise.gloo.solo.io.ExtAuthExtensionR\aextauth\x122\n" +
	"\x03dlp\x18\x14 \x01(\v2 .dlp.options.gloo.solo.io.ConfigR\x03dlp\x12i\n" +
	"\x10buffer_per_route\x18\x16 \x01(\v2?.solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRouteR\x0ebufferPerRoute\x12M\n" +
	"\x04csrf\x18\x18 \x01(\v29.solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicyR\x04csrf\x12p\n" +
	"\x16staged_transformations\x18\x17 \x01(\v29.transformation.options.gloo.solo.io.TransformationStagesR\x15stagedTransformations\x12T\n" +
	"\x0eenvoy_metadata\x18\x1a \x03(\v2-.gloo.solo.io.RouteOptions.EnvoyMetadataEntryR\renvoyMetadata\x12[\n" +
	"\rregex_rewrite\x18\x1b \x01(\v26.solo.io.envoy.type.matcher.v3.RegexMatchAndSubstituteR\fregexRewrite\x12\\\n" +
	"\x13max_stream_duration\x18\x1c \x01(\v2,.gloo.solo.io.RouteOptions.MaxStreamDurationR\x11maxStreamDuration\x12<\n" +
	"\fidle_timeout\x18\x1d \x01(\v2\x19.google.protobuf.DurationR\vidleTimeout\x12F\n" +
	"\bext_proc\x18\x1e \x01(\v2+.extproc.options.gloo.solo.io.RouteSettingsR\aextProc\x126\n" +
	"\x02ai\x18\x1f \x01(\v2&.ai.options.gloo.solo.io.RouteSettingsR\x02ai\x1aY\n" +
	"\x12EnvoyMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.google.protobuf.StructR\x05value:\x028\x01\x1a\x88\x02\n" +
	"\x11MaxStreamDuration\x12I\n" +
	"\x13max_stream_duration\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\x11maxStreamDuration\x12P\n" +
	"\x17grpc_timeout_header_max\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x14grpcTimeoutHeaderMax\x12V\n" +
	"\x1agrpc_timeout_header_offset\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\x17grpcTimeoutHeaderOffsetB\x13\n" +
	"\x11host_rewrite_typeB\x1e\n" +
	"\x1crate_limit_early_config_typeB\x18\n" +
	"\x16rate_limit_config_typeB \n" +
	"\x1erate_limit_regular_config_typeB\f\n" +
	"\n" +
	"jwt_configB>\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z0github.com/solo-io/gloo/projects/gloo/pkg/api/v1b\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_goTypes = []any{
	(*RouteOptions)(nil),                           // 0: gloo.solo.io.RouteOptions
	nil,                                            // 1: gloo.solo.io.RouteOptions.EnvoyMetadataEntry
	(*RouteOptions_MaxStreamDuration)(nil),         // 2: gloo.solo.io.RouteOptions.MaxStreamDuration
	(*transformation.Transformations)(nil),         // 3: transformation.options.gloo.solo.io.Transformations
	(*faultinjection.RouteFaults)(nil),             // 4: fault.options.gloo.solo.io.RouteFaults
	(*wrapperspb.StringValue)(nil),                 // 5: google.protobuf.StringValue
	(*durationpb.Duration)(nil),                    // 6: google.protobuf.Duration
	(*retries.RetryPolicy)(nil),                    // 7: retries.options.gloo.solo.io.RetryPolicy
	(*Extensions)(nil),                             // 8: gloo.solo.io.Extensions
	(*tracing.RouteTracingSettings)(nil),           // 9: tracing.options.gloo.solo.io.RouteTracingSettings
	(*shadowing.RouteShadowing)(nil),               // 10: shadowing.options.gloo.solo.io.RouteShadowing
	(*headers.HeaderManipulation)(nil),             // 11: headers.options.gloo.solo.io.HeaderManipulation
	(*wrapperspb.BoolValue)(nil),                   // 12: google.protobuf.BoolValue
	(*v32.RegexMatchAndSubstitute)(nil),            // 13: solo.io.envoy.type.matcher.v3.RegexMatchAndSubstitute
	(*cors.CorsPolicy)(nil),                        // 14: cors.options.gloo.solo.io.CorsPolicy
	(*lbhash.RouteActionHashConfig)(nil),           // 15: lbhash.options.gloo.solo.io.RouteActionHashConfig
	(*protocol_upgrade.ProtocolUpgradeConfig)(nil), // 16: protocol_upgrade.options.gloo.solo.io.ProtocolUpgradeConfig
	(*ratelimit.IngressRateLimit)(nil),             // 17: ratelimit.options.gloo.solo.io.IngressRateLimit
	(*ratelimit.RateLimitRouteExtension)(nil),      // 18: ratelimit.options.gloo.solo.io.RateLimitRouteExtension
	(*ratelimit.RateLimitConfigRefs)(nil),          // 19: ratelimit.options.gloo.solo.io.RateLimitConfigRefs
	(*waf.Settings)(nil),                           // 20: waf.options.gloo.solo.io.Settings
	(*jwt.RouteExtension)(nil),                     // 21: jwt.options.gloo.solo.io.RouteExtension
	(*jwt.JwtStagedRouteExtension)(nil),            // 22: jwt.options.gloo.solo.io.JwtStagedRouteExtension
	(*jwt.JwtStagedRouteProvidersExtension)(nil),   // 23: jwt.options.gloo.solo.io.JwtStagedRouteProvidersExtension
	(*rbac.ExtensionSettings)(nil),                 // 24: rbac.options.gloo.solo.io.ExtensionSettings
	(*v1.ExtAuthExtension)(nil),                    // 25: enterprise.gloo.solo.io.ExtAuthExtension
	(*dlp.Config)(nil),                             // 26: dlp.options.gloo.solo.io.Config
	(*v3.BufferPerRoute)(nil),                      // 27: solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRoute
	(*v31.CsrfPolicy)(nil),                         // 28: solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicy
	(*transformation.TransformationStages)(nil),    // 29: transformation.options.gloo.solo.io.TransformationStages
	(*extproc.RouteSettings)(nil),                  // 30: extproc.options.gloo.solo.io.RouteSettings
	(*ai.RouteSettings)(nil),                       // 31: ai.options.gloo.solo.io.RouteSettings
	(*structpb.Struct)(nil),                        // 32: google.protobuf.Struct
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_depIdxs = []int32{
	3,  // 0: gloo.solo.io.RouteOptions.transformations:type_name -> transformation.options.gloo.solo.io.Transformations
	4,  // 1: gloo.solo.io.RouteOptions.faults:type_name -> fault.options.gloo.solo.io.RouteFaults
	5,  // 2: gloo.solo.io.RouteOptions.prefix_rewrite:type_name -> google.protobuf.StringValue
	6,  // 3: gloo.solo.io.RouteOptions.timeout:type_name -> google.protobuf.Duration
	7,  // 4: gloo.solo.io.RouteOptions.retries:type_name -> retries.options.gloo.solo.io.RetryPolicy
	8,  // 5: gloo.solo.io.RouteOptions.extensions:type_name -> gloo.solo.io.Extensions
	9,  // 6: gloo.solo.io.RouteOptions.tracing:type_name -> tracing.options.gloo.solo.io.RouteTracingSettings
	10, // 7: gloo.solo.io.RouteOptions.shadowing:type_name -> shadowing.options.gloo.solo.io.RouteShadowing
	11, // 8: gloo.solo.io.RouteOptions.header_manipulation:type_name -> headers.options.gloo.solo.io.HeaderManipulation
	12, // 9: gloo.solo.io.RouteOptions.auto_host_rewrite:type_name -> google.protobuf.BoolValue
	13, // 10: gloo.solo.io.RouteOptions.host_rewrite_path_regex:type_name -> solo.io.envoy.type.matcher.v3.RegexMatchAndSubstitute
	5,  // 11: gloo.solo.io.RouteOptions.host_rewrite_header:type_name -> google.protobuf.StringValue
	12, // 12: gloo.solo.io.RouteOptions.append_x_forwarded_host:type_name -> google.protobuf.BoolValue
	14, // 13: gloo.solo.io.RouteOptions.cors:type_name -> cors.options.gloo.solo.io.CorsPolicy
	15, // 14: gloo.solo.io.RouteOptions.lb_hash:type_name -> lbhash.options.gloo.solo.io.RouteActionHashConfig
	16, // 15: gloo.solo.io.RouteOptions.upgrades:type_name -> protocol_upgrade.options.gloo.solo.io.ProtocolUpgradeConfig
	17, // 16: gloo.solo.io.RouteOptions.ratelimit_basic:type_name -> ratelimit.options.gloo.solo.io.IngressRateLimit
	18, // 17: gloo.solo.io.RouteOptions.ratelimit_early:type_name -> ratelimit.options.gloo.solo.io.RateLimitRouteExtension
	19, // 18: gloo.solo.io.RouteOptions.rate_limit_early_configs:type_name -> ratelimit.options.gloo.solo.io.RateLimitConfigRefs
	18, // 19: gloo.solo.io.RouteOptions.ratelimit:type_name -> ratelimit.options.gloo.solo.io.RateLimitRouteExtension
	19, // 20: gloo.solo.io.RouteOptions.rate_limit_configs:type_name -> ratelimit.options.gloo.solo.io.RateLimitConfigRefs
	18, // 21: gloo.solo.io.RouteOptions.ratelimit_regular:type_name -> ratelimit.options.gloo.solo.io.RateLimitRouteExtension
	19, // 22: gloo.solo.io.RouteOptions.rate_limit_regular_configs:type_name -> ratelimit.options.gloo.solo.io.RateLimitConfigRefs
	20, // 23: gloo.solo.io.RouteOptions.waf:type_name -> waf.options.gloo.solo.io.Settings
	21, // 24: gloo.solo.io.RouteOptions.jwt:type_name -> jwt.options.gloo.solo.io.RouteExtension
	22, // 25: gloo.solo.io.RouteOptions.jwt_staged:type_name -> jwt.options.gloo.solo.io.JwtStagedRouteExtension
	23, // 26: gloo.solo.io.RouteOptions.jwt_providers_staged:type_name -> jwt.options.gloo.solo.io.JwtStagedRouteProvidersExtension
	24, // 27: gloo.solo.io.RouteOptions.rbac:type_name -> rbac.options.gloo.solo.io.ExtensionSettings
	25, // 28: gloo.solo.io.RouteOptions.extauth:type_name -> enterprise.gloo.solo.io.ExtAuthExtension
	26, // 29: gloo.solo.io.RouteOptions.dlp:type_name -> dlp.options.gloo.solo.io.Config
	27, // 30: gloo.solo.io.RouteOptions.buffer_per_route:type_name -> solo.io.envoy.extensions.filters.http.buffer.v3.BufferPerRoute
	28, // 31: gloo.solo.io.RouteOptions.csrf:type_name -> solo.io.envoy.extensions.filters.http.csrf.v3.CsrfPolicy
	29, // 32: gloo.solo.io.RouteOptions.staged_transformations:type_name -> transformation.options.gloo.solo.io.TransformationStages
	1,  // 33: gloo.solo.io.RouteOptions.envoy_metadata:type_name -> gloo.solo.io.RouteOptions.EnvoyMetadataEntry
	13, // 34: gloo.solo.io.RouteOptions.regex_rewrite:type_name -> solo.io.envoy.type.matcher.v3.RegexMatchAndSubstitute
	2,  // 35: gloo.solo.io.RouteOptions.max_stream_duration:type_name -> gloo.solo.io.RouteOptions.MaxStreamDuration
	6,  // 36: gloo.solo.io.RouteOptions.idle_timeout:type_name -> google.protobuf.Duration
	30, // 37: gloo.solo.io.RouteOptions.ext_proc:type_name -> extproc.options.gloo.solo.io.RouteSettings
	31, // 38: gloo.solo.io.RouteOptions.ai:type_name -> ai.options.gloo.solo.io.RouteSettings
	32, // 39: gloo.solo.io.RouteOptions.EnvoyMetadataEntry.value:type_name -> google.protobuf.Struct
	6,  // 40: gloo.solo.io.RouteOptions.MaxStreamDuration.max_stream_duration:type_name -> google.protobuf.Duration
	6,  // 41: gloo.solo.io.RouteOptions.MaxStreamDuration.grpc_timeout_header_max:type_name -> google.protobuf.Duration
	6,  // 42: gloo.solo.io.RouteOptions.MaxStreamDuration.grpc_timeout_header_offset:type_name -> google.protobuf.Duration
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_init() }
func file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_extensions_proto_init()
	file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_msgTypes[0].OneofWrappers = []any{
		(*RouteOptions_HostRewrite)(nil),
		(*RouteOptions_AutoHostRewrite)(nil),
		(*RouteOptions_HostRewritePathRegex)(nil),
		(*RouteOptions_HostRewriteHeader)(nil),
		(*RouteOptions_RatelimitEarly)(nil),
		(*RouteOptions_RateLimitEarlyConfigs)(nil),
		(*RouteOptions_Ratelimit)(nil),
		(*RouteOptions_RateLimitConfigs)(nil),
		(*RouteOptions_RatelimitRegular)(nil),
		(*RouteOptions_RateLimitRegularConfigs)(nil),
		(*RouteOptions_Jwt)(nil),
		(*RouteOptions_JwtStaged)(nil),
		(*RouteOptions_JwtProvidersStaged)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_route_options_proto_depIdxs = nil
}
