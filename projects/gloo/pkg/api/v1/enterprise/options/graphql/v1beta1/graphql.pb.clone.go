// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/graphql/v1beta1/graphql.proto

package v1beta1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *RequestTemplate) Clone() proto.Message {
	var target *RequestTemplate
	if m == nil {
		return target
	}
	target = &RequestTemplate{}

	return target
}

// Clone function
func (m *ResponseTemplate) Clone() proto.Message {
	var target *ResponseTemplate
	if m == nil {
		return target
	}
	target = &ResponseTemplate{}

	return target
}

// Clone function
func (m *GrpcRequestTemplate) Clone() proto.Message {
	var target *GrpcRequestTemplate
	if m == nil {
		return target
	}
	target = &GrpcRequestTemplate{}

	return target
}

// Clone function
func (m *RESTResolver) Clone() proto.Message {
	var target *RESTResolver
	if m == nil {
		return target
	}
	target = &RESTResolver{}

	return target
}

// Clone function
func (m *GrpcDescriptorRegistry) Clone() proto.Message {
	var target *GrpcDescriptorRegistry
	if m == nil {
		return target
	}
	target = &GrpcDescriptorRegistry{}

	return target
}

// Clone function
func (m *GrpcResolver) Clone() proto.Message {
	var target *GrpcResolver
	if m == nil {
		return target
	}
	target = &GrpcResolver{}

	return target
}

// Clone function
func (m *StitchedSchema) Clone() proto.Message {
	var target *StitchedSchema
	if m == nil {
		return target
	}
	target = &StitchedSchema{}

	return target
}

// Clone function
func (m *MockResolver) Clone() proto.Message {
	var target *MockResolver
	if m == nil {
		return target
	}
	target = &MockResolver{}

	return target
}

// Clone function
func (m *Resolution) Clone() proto.Message {
	var target *Resolution
	if m == nil {
		return target
	}
	target = &Resolution{}

	return target
}

// Clone function
func (m *GraphQLApi) Clone() proto.Message {
	var target *GraphQLApi
	if m == nil {
		return target
	}
	target = &GraphQLApi{}

	return target
}

// Clone function
func (m *PersistedQueryCacheConfig) Clone() proto.Message {
	var target *PersistedQueryCacheConfig
	if m == nil {
		return target
	}
	target = &PersistedQueryCacheConfig{}

	return target
}

// Clone function
func (m *ExecutableSchema) Clone() proto.Message {
	var target *ExecutableSchema
	if m == nil {
		return target
	}
	target = &ExecutableSchema{}

	return target
}

// Clone function
func (m *Executor) Clone() proto.Message {
	var target *Executor
	if m == nil {
		return target
	}
	target = &Executor{}

	return target
}

// Clone function
func (m *GrpcDescriptorRegistry_ProtoRefs) Clone() proto.Message {
	var target *GrpcDescriptorRegistry_ProtoRefs
	if m == nil {
		return target
	}
	target = &GrpcDescriptorRegistry_ProtoRefs{}

	return target
}

// Clone function
func (m *StitchedSchema_SubschemaConfig) Clone() proto.Message {
	var target *StitchedSchema_SubschemaConfig
	if m == nil {
		return target
	}
	target = &StitchedSchema_SubschemaConfig{}

	return target
}

// Clone function
func (m *StitchedSchema_SubschemaConfig_TypeMergeConfig) Clone() proto.Message {
	var target *StitchedSchema_SubschemaConfig_TypeMergeConfig
	if m == nil {
		return target
	}
	target = &StitchedSchema_SubschemaConfig_TypeMergeConfig{}

	return target
}

// Clone function
func (m *MockResolver_AsyncResponse) Clone() proto.Message {
	var target *MockResolver_AsyncResponse
	if m == nil {
		return target
	}
	target = &MockResolver_AsyncResponse{}

	return target
}

// Clone function
func (m *GraphQLApi_GraphQLApiOptions) Clone() proto.Message {
	var target *GraphQLApi_GraphQLApiOptions
	if m == nil {
		return target
	}
	target = &GraphQLApi_GraphQLApiOptions{}

	return target
}

// Clone function
func (m *Executor_Local) Clone() proto.Message {
	var target *Executor_Local
	if m == nil {
		return target
	}
	target = &Executor_Local{}

	return target
}

// Clone function
func (m *Executor_Remote) Clone() proto.Message {
	var target *Executor_Remote
	if m == nil {
		return target
	}
	target = &Executor_Remote{}

	return target
}

// Clone function
func (m *Executor_Local_LocalExecutorOptions) Clone() proto.Message {
	var target *Executor_Local_LocalExecutorOptions
	if m == nil {
		return target
	}
	target = &Executor_Local_LocalExecutorOptions{}

	return target
}
