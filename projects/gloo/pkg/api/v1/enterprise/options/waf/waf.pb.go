// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/waf/waf.proto

package waf

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	waf "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/waf"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Settings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disable waf on this resource (if omitted defaults to false).
	// If a route/virtual host is configured with WAF, you must explicitly disable its WAF,
	// i.e., it will not inherit the disabled status of its parent
	Disabled bool `protobuf:"varint,1,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// Custom massage to display if an intervention occurs.
	CustomInterventionMessage string `protobuf:"bytes,2,opt,name=custom_intervention_message,json=customInterventionMessage,proto3" json:"custom_intervention_message,omitempty"`
	// Add OWASP core rule set
	// if nil will not be added
	CoreRuleSet *CoreRuleSet `protobuf:"bytes,3,opt,name=core_rule_set,json=coreRuleSet,proto3" json:"core_rule_set,omitempty"`
	// Custom rule sets to add. Any subsequent changes to the rules in these files are not automatically updated. To update rules from files, version and update the file name.
	// If you want dynamically updated rules, use the `configMapRuleSets` option instead.
	RuleSets []*waf.RuleSet `protobuf:"bytes,4,rep,name=rule_sets,json=ruleSets,proto3" json:"rule_sets,omitempty"`
	// Kubernetes configmaps with the rule sets that you want to use.
	// The rules must be in the value of the key-value mappings in the `data` field of the configmap.
	// Subsequent updates to the configmap values are dynamically updated in the configuration.
	ConfigMapRuleSets []*RuleSetFromConfigMap `protobuf:"bytes,8,rep,name=config_map_rule_sets,json=configMapRuleSets,proto3" json:"config_map_rule_sets,omitempty"`
	// Audit Log settings
	AuditLogging *waf.AuditLogging `protobuf:"bytes,5,opt,name=audit_logging,json=auditLogging,proto3" json:"audit_logging,omitempty"`
	// Only process request headers, not buffering the request body
	RequestHeadersOnly bool `protobuf:"varint,6,opt,name=request_headers_only,json=requestHeadersOnly,proto3" json:"request_headers_only,omitempty"`
	// Only process response headers, not buffering the response body
	ResponseHeadersOnly bool `protobuf:"varint,7,opt,name=response_headers_only,json=responseHeadersOnly,proto3" json:"response_headers_only,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Settings) Reset() {
	*x = Settings{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDescGZIP(), []int{0}
}

func (x *Settings) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Settings) GetCustomInterventionMessage() string {
	if x != nil {
		return x.CustomInterventionMessage
	}
	return ""
}

func (x *Settings) GetCoreRuleSet() *CoreRuleSet {
	if x != nil {
		return x.CoreRuleSet
	}
	return nil
}

func (x *Settings) GetRuleSets() []*waf.RuleSet {
	if x != nil {
		return x.RuleSets
	}
	return nil
}

func (x *Settings) GetConfigMapRuleSets() []*RuleSetFromConfigMap {
	if x != nil {
		return x.ConfigMapRuleSets
	}
	return nil
}

func (x *Settings) GetAuditLogging() *waf.AuditLogging {
	if x != nil {
		return x.AuditLogging
	}
	return nil
}

func (x *Settings) GetRequestHeadersOnly() bool {
	if x != nil {
		return x.RequestHeadersOnly
	}
	return false
}

func (x *Settings) GetResponseHeadersOnly() bool {
	if x != nil {
		return x.ResponseHeadersOnly
	}
	return false
}

type RuleSetFromConfigMap struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Kubernetes configmap that has the rule sets as values in the `data` section.
	ConfigMapRef *core.ResourceRef `protobuf:"bytes,1,opt,name=config_map_ref,json=configMapRef,proto3" json:"config_map_ref,omitempty"`
	// The ConfigMap might have multiple key-value pairs in the `data` section, such as when you create the ConfigMap from multiple files. Each value in a key-value pair may contain 0 or more rules.
	// You can use the `dataMapKey` field to select which keys to use, and the order you want them applied.
	// If this field is included, only the rules from the specified keys are applied, in the specified order. Any rules contained in the value of keys not included are ignored.
	// If this field is not included, all of the keys in the `data` section of the ConfigMap are sorted alphabetically, and all of the rules are included in the resulting order. The order of key-value pairs might differ from the order in which they appear in the ConfigMap (note, the rules within each mapping stay in the same order as they appear in the ConfigMap).
	DataMapKeys   []string `protobuf:"bytes,2,rep,name=data_map_keys,json=dataMapKeys,proto3" json:"data_map_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuleSetFromConfigMap) Reset() {
	*x = RuleSetFromConfigMap{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleSetFromConfigMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleSetFromConfigMap) ProtoMessage() {}

func (x *RuleSetFromConfigMap) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleSetFromConfigMap.ProtoReflect.Descriptor instead.
func (*RuleSetFromConfigMap) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDescGZIP(), []int{1}
}

func (x *RuleSetFromConfigMap) GetConfigMapRef() *core.ResourceRef {
	if x != nil {
		return x.ConfigMapRef
	}
	return nil
}

func (x *RuleSetFromConfigMap) GetDataMapKeys() []string {
	if x != nil {
		return x.DataMapKeys
	}
	return nil
}

type CoreRuleSet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional custom settings for the OWASP core rule set.
	// For an example on the configuration options see: https://github.com/SpiderLabs/owasp-modsecurity-crs/blob/v3.2/dev/crs-setup.conf.example
	// The same rules apply to these options as do to the `RuleSet`s. The file option is better if possible.
	//
	// Types that are valid to be assigned to CustomSettingsType:
	//
	//	*CoreRuleSet_CustomSettingsString
	//	*CoreRuleSet_CustomSettingsFile
	CustomSettingsType isCoreRuleSet_CustomSettingsType `protobuf_oneof:"CustomSettingsType"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CoreRuleSet) Reset() {
	*x = CoreRuleSet{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoreRuleSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreRuleSet) ProtoMessage() {}

func (x *CoreRuleSet) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreRuleSet.ProtoReflect.Descriptor instead.
func (*CoreRuleSet) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDescGZIP(), []int{2}
}

func (x *CoreRuleSet) GetCustomSettingsType() isCoreRuleSet_CustomSettingsType {
	if x != nil {
		return x.CustomSettingsType
	}
	return nil
}

func (x *CoreRuleSet) GetCustomSettingsString() string {
	if x != nil {
		if x, ok := x.CustomSettingsType.(*CoreRuleSet_CustomSettingsString); ok {
			return x.CustomSettingsString
		}
	}
	return ""
}

func (x *CoreRuleSet) GetCustomSettingsFile() string {
	if x != nil {
		if x, ok := x.CustomSettingsType.(*CoreRuleSet_CustomSettingsFile); ok {
			return x.CustomSettingsFile
		}
	}
	return ""
}

type isCoreRuleSet_CustomSettingsType interface {
	isCoreRuleSet_CustomSettingsType()
}

type CoreRuleSet_CustomSettingsString struct {
	// String representing the core rule set custom config options
	CustomSettingsString string `protobuf:"bytes,2,opt,name=custom_settings_string,json=customSettingsString,proto3,oneof"`
}

type CoreRuleSet_CustomSettingsFile struct {
	// String representing a file location with core rule set custom config options
	CustomSettingsFile string `protobuf:"bytes,3,opt,name=custom_settings_file,json=customSettingsFile,proto3,oneof"`
}

func (*CoreRuleSet_CustomSettingsString) isCoreRuleSet_CustomSettingsType() {}

func (*CoreRuleSet_CustomSettingsFile) isCoreRuleSet_CustomSettingsType() {}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDesc = "" +
	"\n" +
	"Mgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/waf/waf.proto\x12\x18waf.options.gloo.solo.io\x1aQgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/waf/waf.proto\x1a,github.com/solo-io/solo-kit/api/v1/ref.proto\x1a\x12extproto/ext.proto\"\xa3\x04\n" +
	"\bSettings\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12>\n" +
	"\x1bcustom_intervention_message\x18\x02 \x01(\tR\x19customInterventionMessage\x12I\n" +
	"\rcore_rule_set\x18\x03 \x01(\v2%.waf.options.gloo.solo.io.CoreRuleSetR\vcoreRuleSet\x12M\n" +
	"\trule_sets\x18\x04 \x03(\v20.envoy.config.filter.http.modsecurity.v2.RuleSetR\bruleSets\x12_\n" +
	"\x14config_map_rule_sets\x18\b \x03(\v2..waf.options.gloo.solo.io.RuleSetFromConfigMapR\x11configMapRuleSets\x12Z\n" +
	"\raudit_logging\x18\x05 \x01(\v25.envoy.config.filter.http.modsecurity.v2.AuditLoggingR\fauditLogging\x120\n" +
	"\x14request_headers_only\x18\x06 \x01(\bR\x12requestHeadersOnly\x122\n" +
	"\x15response_headers_only\x18\a \x01(\bR\x13responseHeadersOnly\"{\n" +
	"\x14RuleSetFromConfigMap\x12?\n" +
	"\x0econfig_map_ref\x18\x01 \x01(\v2\x19.core.solo.io.ResourceRefR\fconfigMapRef\x12\"\n" +
	"\rdata_map_keys\x18\x02 \x03(\tR\vdataMapKeys\"\x8f\x01\n" +
	"\vCoreRuleSet\x126\n" +
	"\x16custom_settings_string\x18\x02 \x01(\tH\x00R\x14customSettingsString\x122\n" +
	"\x14custom_settings_file\x18\x03 \x01(\tH\x00R\x12customSettingsFileB\x14\n" +
	"\x12CustomSettingsTypeBU\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01ZGgithub.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/wafb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_goTypes = []any{
	(*Settings)(nil),             // 0: waf.options.gloo.solo.io.Settings
	(*RuleSetFromConfigMap)(nil), // 1: waf.options.gloo.solo.io.RuleSetFromConfigMap
	(*CoreRuleSet)(nil),          // 2: waf.options.gloo.solo.io.CoreRuleSet
	(*waf.RuleSet)(nil),          // 3: envoy.config.filter.http.modsecurity.v2.RuleSet
	(*waf.AuditLogging)(nil),     // 4: envoy.config.filter.http.modsecurity.v2.AuditLogging
	(*core.ResourceRef)(nil),     // 5: core.solo.io.ResourceRef
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_depIdxs = []int32{
	2, // 0: waf.options.gloo.solo.io.Settings.core_rule_set:type_name -> waf.options.gloo.solo.io.CoreRuleSet
	3, // 1: waf.options.gloo.solo.io.Settings.rule_sets:type_name -> envoy.config.filter.http.modsecurity.v2.RuleSet
	1, // 2: waf.options.gloo.solo.io.Settings.config_map_rule_sets:type_name -> waf.options.gloo.solo.io.RuleSetFromConfigMap
	4, // 3: waf.options.gloo.solo.io.Settings.audit_logging:type_name -> envoy.config.filter.http.modsecurity.v2.AuditLogging
	5, // 4: waf.options.gloo.solo.io.RuleSetFromConfigMap.config_map_ref:type_name -> core.solo.io.ResourceRef
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_init()
}
func file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_msgTypes[2].OneofWrappers = []any{
		(*CoreRuleSet_CustomSettingsString)(nil),
		(*CoreRuleSet_CustomSettingsFile)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_waf_waf_proto_depIdxs = nil
}
