// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/jwt/jwt.proto

package jwt

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	v3 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/filters/http/jwt_authn/v3"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VhostExtension_ValidationPolicy int32

const (
	// Default value. Allow only requests that authenticate with a valid JWT to succeed.
	// Note that the `allowMissingOrFailed=true` setting takes precedence. In such a case, even if you explicitly set `validationPolicy=REQUIRE_VALID`, this field is ignored.
	VhostExtension_REQUIRE_VALID VhostExtension_ValidationPolicy = 0
	// Allow requests to succeed even if JWT authentication is missing, but fail when an invalid JWT token is presented.
	// You might use this setting when later steps depend on input from the JWT.
	// For example, you might add claims from the JWT to request headers with the claimsToHeaders field.
	// As such, you may want to make sure that any provided JWT is valid. If not, the request fails,
	// which informs the requester that their JWT is not valid.
	// Requests without a JWT, however, still succeed and skip JWT validation.
	VhostExtension_ALLOW_MISSING VhostExtension_ValidationPolicy = 1
	// Allow requests to succeed even when a JWT is missing or JWT verification fails.
	// For example, you might apply multiple policies to your routes so that requests can authenticate with either a
	// JWT or another method such as external auth. Use this value
	// to allow a failed JWT auth request to pass through to the other authentication method.
	VhostExtension_ALLOW_MISSING_OR_FAILED VhostExtension_ValidationPolicy = 2
)

// Enum value maps for VhostExtension_ValidationPolicy.
var (
	VhostExtension_ValidationPolicy_name = map[int32]string{
		0: "REQUIRE_VALID",
		1: "ALLOW_MISSING",
		2: "ALLOW_MISSING_OR_FAILED",
	}
	VhostExtension_ValidationPolicy_value = map[string]int32{
		"REQUIRE_VALID":           0,
		"ALLOW_MISSING":           1,
		"ALLOW_MISSING_OR_FAILED": 2,
	}
)

func (x VhostExtension_ValidationPolicy) Enum() *VhostExtension_ValidationPolicy {
	p := new(VhostExtension_ValidationPolicy)
	*p = x
	return p
}

func (x VhostExtension_ValidationPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VhostExtension_ValidationPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_enumTypes[0].Descriptor()
}

func (VhostExtension_ValidationPolicy) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_enumTypes[0]
}

func (x VhostExtension_ValidationPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VhostExtension_ValidationPolicy.Descriptor instead.
func (VhostExtension_ValidationPolicy) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP(), []int{3, 0}
}

type JwtStagedVhostExtension struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// JWT Virtual host config for the JWT filter that runs before the extauth filter.
	BeforeExtAuth *VhostExtension `protobuf:"bytes,1,opt,name=before_ext_auth,json=beforeExtAuth,proto3" json:"before_ext_auth,omitempty"`
	// JWT Virtual host config for the JWT filter that runs after the extauth filter.
	AfterExtAuth  *VhostExtension `protobuf:"bytes,2,opt,name=after_ext_auth,json=afterExtAuth,proto3" json:"after_ext_auth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JwtStagedVhostExtension) Reset() {
	*x = JwtStagedVhostExtension{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JwtStagedVhostExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtStagedVhostExtension) ProtoMessage() {}

func (x *JwtStagedVhostExtension) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtStagedVhostExtension.ProtoReflect.Descriptor instead.
func (*JwtStagedVhostExtension) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP(), []int{0}
}

func (x *JwtStagedVhostExtension) GetBeforeExtAuth() *VhostExtension {
	if x != nil {
		return x.BeforeExtAuth
	}
	return nil
}

func (x *JwtStagedVhostExtension) GetAfterExtAuth() *VhostExtension {
	if x != nil {
		return x.AfterExtAuth
	}
	return nil
}

type JwtStagedRouteProvidersExtension struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Per-route JWT config for the JWT filter that runs before the extauth filter.
	BeforeExtAuth *VhostExtension `protobuf:"bytes,1,opt,name=before_ext_auth,json=beforeExtAuth,proto3" json:"before_ext_auth,omitempty"`
	// Per-route JWT config for the JWT filter that runs before the extauth filter.
	AfterExtAuth  *VhostExtension `protobuf:"bytes,2,opt,name=after_ext_auth,json=afterExtAuth,proto3" json:"after_ext_auth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JwtStagedRouteProvidersExtension) Reset() {
	*x = JwtStagedRouteProvidersExtension{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JwtStagedRouteProvidersExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtStagedRouteProvidersExtension) ProtoMessage() {}

func (x *JwtStagedRouteProvidersExtension) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtStagedRouteProvidersExtension.ProtoReflect.Descriptor instead.
func (*JwtStagedRouteProvidersExtension) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP(), []int{1}
}

func (x *JwtStagedRouteProvidersExtension) GetBeforeExtAuth() *VhostExtension {
	if x != nil {
		return x.BeforeExtAuth
	}
	return nil
}

func (x *JwtStagedRouteProvidersExtension) GetAfterExtAuth() *VhostExtension {
	if x != nil {
		return x.AfterExtAuth
	}
	return nil
}

type JwtStagedRouteExtension struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Per-route JWT config for the JWT filter that runs before the extauth filter.
	BeforeExtAuth *RouteExtension `protobuf:"bytes,1,opt,name=before_ext_auth,json=beforeExtAuth,proto3" json:"before_ext_auth,omitempty"`
	// Per-route JWT config for the JWT filter that runs before the extauth filter.
	AfterExtAuth  *RouteExtension `protobuf:"bytes,2,opt,name=after_ext_auth,json=afterExtAuth,proto3" json:"after_ext_auth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JwtStagedRouteExtension) Reset() {
	*x = JwtStagedRouteExtension{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JwtStagedRouteExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtStagedRouteExtension) ProtoMessage() {}

func (x *JwtStagedRouteExtension) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtStagedRouteExtension.ProtoReflect.Descriptor instead.
func (*JwtStagedRouteExtension) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP(), []int{2}
}

func (x *JwtStagedRouteExtension) GetBeforeExtAuth() *RouteExtension {
	if x != nil {
		return x.BeforeExtAuth
	}
	return nil
}

func (x *JwtStagedRouteExtension) GetAfterExtAuth() *RouteExtension {
	if x != nil {
		return x.AfterExtAuth
	}
	return nil
}

type VhostExtension struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Map of JWT provider name to Provider.
	// If specified, multiple providers will be `OR`-ed together and will allow validation to any of the providers.
	Providers map[string]*Provider `protobuf:"bytes,4,rep,name=providers,proto3" json:"providers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Allow pass through of JWT requests for this virtual host, even if JWT token is missing or JWT auth failed.
	// If this is false (default false), requests that fail JWT authentication will fail authorization immediately.
	// For example, if a request requires either JWT auth OR another auth method, this can be enabled to allow a failed JWT auth request to pass through to the other auth method.
	// Deprecated: use validation_policy instead.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/jwt/jwt.proto.
	AllowMissingOrFailedJwt bool `protobuf:"varint,2,opt,name=allow_missing_or_failed_jwt,json=allowMissingOrFailedJwt,proto3" json:"allow_missing_or_failed_jwt,omitempty"`
	// Optional: Configure how JWT validation works, with the flexibility to handle requests with missing or invalid JWTs.
	// By default, after applying JWT policy to a route, only requests that authenticate with a valid JWT succeed.
	ValidationPolicy VhostExtension_ValidationPolicy `protobuf:"varint,3,opt,name=validation_policy,json=validationPolicy,proto3,enum=jwt.options.gloo.solo.io.VhostExtension_ValidationPolicy" json:"validation_policy,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *VhostExtension) Reset() {
	*x = VhostExtension{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VhostExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VhostExtension) ProtoMessage() {}

func (x *VhostExtension) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VhostExtension.ProtoReflect.Descriptor instead.
func (*VhostExtension) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP(), []int{3}
}

func (x *VhostExtension) GetProviders() map[string]*Provider {
	if x != nil {
		return x.Providers
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/jwt/jwt.proto.
func (x *VhostExtension) GetAllowMissingOrFailedJwt() bool {
	if x != nil {
		return x.AllowMissingOrFailedJwt
	}
	return false
}

func (x *VhostExtension) GetValidationPolicy() VhostExtension_ValidationPolicy {
	if x != nil {
		return x.ValidationPolicy
	}
	return VhostExtension_REQUIRE_VALID
}

type RouteExtension struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disable JWT checks on this route.
	Disable       bool `protobuf:"varint,1,opt,name=disable,proto3" json:"disable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteExtension) Reset() {
	*x = RouteExtension{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteExtension) ProtoMessage() {}

func (x *RouteExtension) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteExtension.ProtoReflect.Descriptor instead.
func (*RouteExtension) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP(), []int{4}
}

func (x *RouteExtension) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

type Provider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The source for the keys to validate JWTs.
	Jwks *Jwks `protobuf:"bytes,1,opt,name=jwks,proto3" json:"jwks,omitempty"`
	// An incoming JWT must have an 'aud' claim and it must be in this list.
	Audiences []string `protobuf:"bytes,2,rep,name=audiences,proto3" json:"audiences,omitempty"`
	// Issuer of the JWT. the 'iss' claim of the JWT must match this.
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// Where to find the JWT of the current provider.
	TokenSource *TokenSource `protobuf:"bytes,4,opt,name=token_source,json=tokenSource,proto3" json:"token_source,omitempty"`
	// Should the token forwarded upstream. if false, the header containing the token will be removed.
	KeepToken bool `protobuf:"varint,5,opt,name=keep_token,json=keepToken,proto3" json:"keep_token,omitempty"`
	// What claims should be copied to upstream headers.
	ClaimsToHeaders []*ClaimToHeader `protobuf:"bytes,6,rep,name=claims_to_headers,json=claimsToHeaders,proto3" json:"claims_to_headers,omitempty"`
	// Optional: ClockSkewSeconds is used to verify time constraints, such as `exp` and `npf`. Default is 60s
	ClockSkewSeconds *wrapperspb.UInt32Value `protobuf:"bytes,8,opt,name=clock_skew_seconds,json=clockSkewSeconds,proto3" json:"clock_skew_seconds,omitempty"`
	// Optional: When this field is set, the specified value is used as the key in DynamicMetadata to store the JWT failure status code and message under that key. If the value is empty (i.e., ""), it is ignored.
	// This field is particularly useful when logging the failure status.
	//
	// For example, if the value of `attach_failed_status_to_metadata` is 'custom_auth_failure_status' then
	// the failure status can be accessed in the access log as '%DYNAMIC_METADATA(envoy.filters.http.jwt_authn:custom_auth_failure_status)'
	// Note: status code and message can be individually accessed as '%DYNAMIC_METADATA(envoy.filters.http.jwt_authn:custom_auth_failure_status.code)' and '%DYNAMIC_METADATA(envoy.filters.http.jwt_authn:custom_auth_failure_status.message)' respectively.
	AttachFailedStatusToMetadata string `protobuf:"bytes,9,opt,name=attach_failed_status_to_metadata,json=attachFailedStatusToMetadata,proto3" json:"attach_failed_status_to_metadata,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *Provider) Reset() {
	*x = Provider{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provider) ProtoMessage() {}

func (x *Provider) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provider.ProtoReflect.Descriptor instead.
func (*Provider) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP(), []int{5}
}

func (x *Provider) GetJwks() *Jwks {
	if x != nil {
		return x.Jwks
	}
	return nil
}

func (x *Provider) GetAudiences() []string {
	if x != nil {
		return x.Audiences
	}
	return nil
}

func (x *Provider) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Provider) GetTokenSource() *TokenSource {
	if x != nil {
		return x.TokenSource
	}
	return nil
}

func (x *Provider) GetKeepToken() bool {
	if x != nil {
		return x.KeepToken
	}
	return false
}

func (x *Provider) GetClaimsToHeaders() []*ClaimToHeader {
	if x != nil {
		return x.ClaimsToHeaders
	}
	return nil
}

func (x *Provider) GetClockSkewSeconds() *wrapperspb.UInt32Value {
	if x != nil {
		return x.ClockSkewSeconds
	}
	return nil
}

func (x *Provider) GetAttachFailedStatusToMetadata() string {
	if x != nil {
		return x.AttachFailedStatusToMetadata
	}
	return ""
}

type Jwks struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Jwks:
	//
	//	*Jwks_Remote
	//	*Jwks_Local
	Jwks          isJwks_Jwks `protobuf_oneof:"jwks"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Jwks) Reset() {
	*x = Jwks{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Jwks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jwks) ProtoMessage() {}

func (x *Jwks) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jwks.ProtoReflect.Descriptor instead.
func (*Jwks) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP(), []int{6}
}

func (x *Jwks) GetJwks() isJwks_Jwks {
	if x != nil {
		return x.Jwks
	}
	return nil
}

func (x *Jwks) GetRemote() *RemoteJwks {
	if x != nil {
		if x, ok := x.Jwks.(*Jwks_Remote); ok {
			return x.Remote
		}
	}
	return nil
}

func (x *Jwks) GetLocal() *LocalJwks {
	if x != nil {
		if x, ok := x.Jwks.(*Jwks_Local); ok {
			return x.Local
		}
	}
	return nil
}

type isJwks_Jwks interface {
	isJwks_Jwks()
}

type Jwks_Remote struct {
	// Use a remote JWKS server
	Remote *RemoteJwks `protobuf:"bytes,1,opt,name=remote,proto3,oneof"`
}

type Jwks_Local struct {
	// Use an inline JWKS
	Local *LocalJwks `protobuf:"bytes,2,opt,name=local,proto3,oneof"`
}

func (*Jwks_Remote) isJwks_Jwks() {}

func (*Jwks_Local) isJwks_Jwks() {}

type RemoteJwks struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The url used when accessing the upstream for Json Web Key Set.
	// This is used to set the host and path in the request
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The Upstream representing the Json Web Key Set server
	//
	// Note: Setting this to an upstream using an HTTP tunnel (`httpProxyHostname`)
	// requires also using that upstream in a route.
	UpstreamRef *core.ResourceRef `protobuf:"bytes,2,opt,name=upstream_ref,json=upstreamRef,proto3" json:"upstream_ref,omitempty"`
	// Duration after which the cached JWKS should be expired.
	// If not specified, default cache duration is 5 minutes.
	CacheDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=cache_duration,json=cacheDuration,proto3" json:"cache_duration,omitempty"`
	// Fetch Jwks asynchronously in the main thread before the listener is activated.
	// Fetched Jwks can be used by all worker threads.
	//
	// If this feature is not enabled:
	//
	//   - The Jwks is fetched on-demand when the requests come. During the fetching, first
	//     few requests are paused until the Jwks is fetched.
	//   - Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
	//
	// If this feature is enabled:
	//
	//   - Fetched Jwks is done in the main thread before the listener is activated. Its fetched
	//     Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
	//   - Jwks is ready when the requests come, not need to wait for the Jwks fetching.
	AsyncFetch    *v3.JwksAsyncFetch `protobuf:"bytes,3,opt,name=async_fetch,json=asyncFetch,proto3" json:"async_fetch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteJwks) Reset() {
	*x = RemoteJwks{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteJwks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteJwks) ProtoMessage() {}

func (x *RemoteJwks) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteJwks.ProtoReflect.Descriptor instead.
func (*RemoteJwks) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP(), []int{7}
}

func (x *RemoteJwks) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RemoteJwks) GetUpstreamRef() *core.ResourceRef {
	if x != nil {
		return x.UpstreamRef
	}
	return nil
}

func (x *RemoteJwks) GetCacheDuration() *durationpb.Duration {
	if x != nil {
		return x.CacheDuration
	}
	return nil
}

func (x *RemoteJwks) GetAsyncFetch() *v3.JwksAsyncFetch {
	if x != nil {
		return x.AsyncFetch
	}
	return nil
}

type LocalJwks struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Inline key. this can be json web key, key-set or PEM format.
	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocalJwks) Reset() {
	*x = LocalJwks{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalJwks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalJwks) ProtoMessage() {}

func (x *LocalJwks) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalJwks.ProtoReflect.Descriptor instead.
func (*LocalJwks) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP(), []int{8}
}

func (x *LocalJwks) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Describes the location of a JWT token
type TokenSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Try to retrieve token from these headers
	Headers []*TokenSource_HeaderSource `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
	// Try to retrieve token from these query params
	QueryParams   []string `protobuf:"bytes,2,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenSource) Reset() {
	*x = TokenSource{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenSource) ProtoMessage() {}

func (x *TokenSource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenSource.ProtoReflect.Descriptor instead.
func (*TokenSource) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP(), []int{9}
}

func (x *TokenSource) GetHeaders() []*TokenSource_HeaderSource {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TokenSource) GetQueryParams() []string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

// Allows copying verified claims to headers sent upstream
type ClaimToHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Claim name. for example, "sub"
	Claim string `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	// The header the claim will be copied to. for example, "x-sub".
	Header string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// If the header exists, append to it (true), or overwrite it (false).
	Append        bool `protobuf:"varint,4,opt,name=append,proto3" json:"append,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClaimToHeader) Reset() {
	*x = ClaimToHeader{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClaimToHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimToHeader) ProtoMessage() {}

func (x *ClaimToHeader) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimToHeader.ProtoReflect.Descriptor instead.
func (*ClaimToHeader) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP(), []int{10}
}

func (x *ClaimToHeader) GetClaim() string {
	if x != nil {
		return x.Claim
	}
	return ""
}

func (x *ClaimToHeader) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *ClaimToHeader) GetAppend() bool {
	if x != nil {
		return x.Append
	}
	return false
}

// Describes how to retrieve a JWT from a header
type TokenSource_HeaderSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the header. for example, "authorization"
	Header string `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Prefix before the token. for example, "Bearer "
	Prefix        string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenSource_HeaderSource) Reset() {
	*x = TokenSource_HeaderSource{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenSource_HeaderSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenSource_HeaderSource) ProtoMessage() {}

func (x *TokenSource_HeaderSource) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenSource_HeaderSource.ProtoReflect.Descriptor instead.
func (*TokenSource_HeaderSource) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP(), []int{9, 0}
}

func (x *TokenSource_HeaderSource) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *TokenSource_HeaderSource) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDesc = "" +
	"\n" +
	"Mgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/jwt/jwt.proto\x12\x18jwt.options.gloo.solo.io\x1a,github.com/solo-io/solo-kit/api/v1/ref.proto\x1ajgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/jwt_authn/v3/config.proto\x1a\x12extproto/ext.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1egoogle/protobuf/duration.proto\"\xbb\x01\n" +
	"\x17JwtStagedVhostExtension\x12P\n" +
	"\x0fbefore_ext_auth\x18\x01 \x01(\v2(.jwt.options.gloo.solo.io.VhostExtensionR\rbeforeExtAuth\x12N\n" +
	"\x0eafter_ext_auth\x18\x02 \x01(\v2(.jwt.options.gloo.solo.io.VhostExtensionR\fafterExtAuth\"\xc4\x01\n" +
	" JwtStagedRouteProvidersExtension\x12P\n" +
	"\x0fbefore_ext_auth\x18\x01 \x01(\v2(.jwt.options.gloo.solo.io.VhostExtensionR\rbeforeExtAuth\x12N\n" +
	"\x0eafter_ext_auth\x18\x02 \x01(\v2(.jwt.options.gloo.solo.io.VhostExtensionR\fafterExtAuth\"\xbb\x01\n" +
	"\x17JwtStagedRouteExtension\x12P\n" +
	"\x0fbefore_ext_auth\x18\x01 \x01(\v2(.jwt.options.gloo.solo.io.RouteExtensionR\rbeforeExtAuth\x12N\n" +
	"\x0eafter_ext_auth\x18\x02 \x01(\v2(.jwt.options.gloo.solo.io.RouteExtensionR\fafterExtAuth\"\xca\x03\n" +
	"\x0eVhostExtension\x12U\n" +
	"\tproviders\x18\x04 \x03(\v27.jwt.options.gloo.solo.io.VhostExtension.ProvidersEntryR\tproviders\x12@\n" +
	"\x1ballow_missing_or_failed_jwt\x18\x02 \x01(\bB\x02\x18\x01R\x17allowMissingOrFailedJwt\x12f\n" +
	"\x11validation_policy\x18\x03 \x01(\x0e29.jwt.options.gloo.solo.io.VhostExtension.ValidationPolicyR\x10validationPolicy\x1a`\n" +
	"\x0eProvidersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x128\n" +
	"\x05value\x18\x02 \x01(\v2\".jwt.options.gloo.solo.io.ProviderR\x05value:\x028\x01\"U\n" +
	"\x10ValidationPolicy\x12\x11\n" +
	"\rREQUIRE_VALID\x10\x00\x12\x11\n" +
	"\rALLOW_MISSING\x10\x01\x12\x1b\n" +
	"\x17ALLOW_MISSING_OR_FAILED\x10\x02\"*\n" +
	"\x0eRouteExtension\x12\x18\n" +
	"\adisable\x18\x01 \x01(\bR\adisable\"\xc6\x03\n" +
	"\bProvider\x122\n" +
	"\x04jwks\x18\x01 \x01(\v2\x1e.jwt.options.gloo.solo.io.JwksR\x04jwks\x12\x1c\n" +
	"\taudiences\x18\x02 \x03(\tR\taudiences\x12\x16\n" +
	"\x06issuer\x18\x03 \x01(\tR\x06issuer\x12H\n" +
	"\ftoken_source\x18\x04 \x01(\v2%.jwt.options.gloo.solo.io.TokenSourceR\vtokenSource\x12\x1d\n" +
	"\n" +
	"keep_token\x18\x05 \x01(\bR\tkeepToken\x12S\n" +
	"\x11claims_to_headers\x18\x06 \x03(\v2'.jwt.options.gloo.solo.io.ClaimToHeaderR\x0fclaimsToHeaders\x12J\n" +
	"\x12clock_skew_seconds\x18\b \x01(\v2\x1c.google.protobuf.UInt32ValueR\x10clockSkewSeconds\x12F\n" +
	" attach_failed_status_to_metadata\x18\t \x01(\tR\x1cattachFailedStatusToMetadata\"\x8b\x01\n" +
	"\x04Jwks\x12>\n" +
	"\x06remote\x18\x01 \x01(\v2$.jwt.options.gloo.solo.io.RemoteJwksH\x00R\x06remote\x12;\n" +
	"\x05local\x18\x02 \x01(\v2#.jwt.options.gloo.solo.io.LocalJwksH\x00R\x05localB\x06\n" +
	"\x04jwks\"\x83\x02\n" +
	"\n" +
	"RemoteJwks\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12<\n" +
	"\fupstream_ref\x18\x02 \x01(\v2\x19.core.solo.io.ResourceRefR\vupstreamRef\x12@\n" +
	"\x0ecache_duration\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\rcacheDuration\x12c\n" +
	"\vasync_fetch\x18\x03 \x01(\v2B.solo.io.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetchR\n" +
	"asyncFetch\"\x1d\n" +
	"\tLocalJwks\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\"\xbe\x01\n" +
	"\vTokenSource\x12L\n" +
	"\aheaders\x18\x01 \x03(\v22.jwt.options.gloo.solo.io.TokenSource.HeaderSourceR\aheaders\x12!\n" +
	"\fquery_params\x18\x02 \x03(\tR\vqueryParams\x1a>\n" +
	"\fHeaderSource\x12\x16\n" +
	"\x06header\x18\x01 \x01(\tR\x06header\x12\x16\n" +
	"\x06prefix\x18\x02 \x01(\tR\x06prefix\"U\n" +
	"\rClaimToHeader\x12\x14\n" +
	"\x05claim\x18\x01 \x01(\tR\x05claim\x12\x16\n" +
	"\x06header\x18\x02 \x01(\tR\x06header\x12\x16\n" +
	"\x06append\x18\x04 \x01(\bR\x06appendBU\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01ZGgithub.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/jwtb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_goTypes = []any{
	(VhostExtension_ValidationPolicy)(0),     // 0: jwt.options.gloo.solo.io.VhostExtension.ValidationPolicy
	(*JwtStagedVhostExtension)(nil),          // 1: jwt.options.gloo.solo.io.JwtStagedVhostExtension
	(*JwtStagedRouteProvidersExtension)(nil), // 2: jwt.options.gloo.solo.io.JwtStagedRouteProvidersExtension
	(*JwtStagedRouteExtension)(nil),          // 3: jwt.options.gloo.solo.io.JwtStagedRouteExtension
	(*VhostExtension)(nil),                   // 4: jwt.options.gloo.solo.io.VhostExtension
	(*RouteExtension)(nil),                   // 5: jwt.options.gloo.solo.io.RouteExtension
	(*Provider)(nil),                         // 6: jwt.options.gloo.solo.io.Provider
	(*Jwks)(nil),                             // 7: jwt.options.gloo.solo.io.Jwks
	(*RemoteJwks)(nil),                       // 8: jwt.options.gloo.solo.io.RemoteJwks
	(*LocalJwks)(nil),                        // 9: jwt.options.gloo.solo.io.LocalJwks
	(*TokenSource)(nil),                      // 10: jwt.options.gloo.solo.io.TokenSource
	(*ClaimToHeader)(nil),                    // 11: jwt.options.gloo.solo.io.ClaimToHeader
	nil,                                      // 12: jwt.options.gloo.solo.io.VhostExtension.ProvidersEntry
	(*TokenSource_HeaderSource)(nil),         // 13: jwt.options.gloo.solo.io.TokenSource.HeaderSource
	(*wrapperspb.UInt32Value)(nil),           // 14: google.protobuf.UInt32Value
	(*core.ResourceRef)(nil),                 // 15: core.solo.io.ResourceRef
	(*durationpb.Duration)(nil),              // 16: google.protobuf.Duration
	(*v3.JwksAsyncFetch)(nil),                // 17: solo.io.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_depIdxs = []int32{
	4,  // 0: jwt.options.gloo.solo.io.JwtStagedVhostExtension.before_ext_auth:type_name -> jwt.options.gloo.solo.io.VhostExtension
	4,  // 1: jwt.options.gloo.solo.io.JwtStagedVhostExtension.after_ext_auth:type_name -> jwt.options.gloo.solo.io.VhostExtension
	4,  // 2: jwt.options.gloo.solo.io.JwtStagedRouteProvidersExtension.before_ext_auth:type_name -> jwt.options.gloo.solo.io.VhostExtension
	4,  // 3: jwt.options.gloo.solo.io.JwtStagedRouteProvidersExtension.after_ext_auth:type_name -> jwt.options.gloo.solo.io.VhostExtension
	5,  // 4: jwt.options.gloo.solo.io.JwtStagedRouteExtension.before_ext_auth:type_name -> jwt.options.gloo.solo.io.RouteExtension
	5,  // 5: jwt.options.gloo.solo.io.JwtStagedRouteExtension.after_ext_auth:type_name -> jwt.options.gloo.solo.io.RouteExtension
	12, // 6: jwt.options.gloo.solo.io.VhostExtension.providers:type_name -> jwt.options.gloo.solo.io.VhostExtension.ProvidersEntry
	0,  // 7: jwt.options.gloo.solo.io.VhostExtension.validation_policy:type_name -> jwt.options.gloo.solo.io.VhostExtension.ValidationPolicy
	7,  // 8: jwt.options.gloo.solo.io.Provider.jwks:type_name -> jwt.options.gloo.solo.io.Jwks
	10, // 9: jwt.options.gloo.solo.io.Provider.token_source:type_name -> jwt.options.gloo.solo.io.TokenSource
	11, // 10: jwt.options.gloo.solo.io.Provider.claims_to_headers:type_name -> jwt.options.gloo.solo.io.ClaimToHeader
	14, // 11: jwt.options.gloo.solo.io.Provider.clock_skew_seconds:type_name -> google.protobuf.UInt32Value
	8,  // 12: jwt.options.gloo.solo.io.Jwks.remote:type_name -> jwt.options.gloo.solo.io.RemoteJwks
	9,  // 13: jwt.options.gloo.solo.io.Jwks.local:type_name -> jwt.options.gloo.solo.io.LocalJwks
	15, // 14: jwt.options.gloo.solo.io.RemoteJwks.upstream_ref:type_name -> core.solo.io.ResourceRef
	16, // 15: jwt.options.gloo.solo.io.RemoteJwks.cache_duration:type_name -> google.protobuf.Duration
	17, // 16: jwt.options.gloo.solo.io.RemoteJwks.async_fetch:type_name -> solo.io.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch
	13, // 17: jwt.options.gloo.solo.io.TokenSource.headers:type_name -> jwt.options.gloo.solo.io.TokenSource.HeaderSource
	6,  // 18: jwt.options.gloo.solo.io.VhostExtension.ProvidersEntry.value:type_name -> jwt.options.gloo.solo.io.Provider
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_init()
}
func file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes[6].OneofWrappers = []any{
		(*Jwks_Remote)(nil),
		(*Jwks_Local)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_jwt_jwt_proto_depIdxs = nil
}
