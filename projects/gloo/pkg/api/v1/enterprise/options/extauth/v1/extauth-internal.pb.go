// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto

package v1

import (
	context "context"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v2 "github.com/solo-io/solo-kit/pkg/api/external/envoy/api/v2"
	_ "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// @solo-kit:xds-service=ExtAuthDiscoveryService
// @solo-kit:resource.no_references
//
// This is an internal API used to share configuration between gloo-ee and extauth. Although this API is only used in gloo-ee,
// rules about breaking changes still apply to ensure we do not get errors during upgrade and downgrade.
type ExtAuthConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @solo-kit:resource.name
	// This is the identifier of the AuthConfig resource that this configuration is associated with.
	// Any request to the external auth server includes an identifier that is matched against this field to determine
	// which AuthConfig should be applied to it.
	AuthConfigRefName string `protobuf:"bytes,1,opt,name=auth_config_ref_name,json=authConfigRefName,proto3" json:"auth_config_ref_name,omitempty"`
	// List of auth configs to be checked for requests on a route referencing this auth config,
	// By default, every config must be authorized for the entire request to be authorized. This
	// behavior can be changed by defining names for each config and defining `boolean_expr` below.
	//
	// State is shared between successful requests on the chain, i.e., the headers returned from each
	// successful auth service get appended into the final auth response.
	Configs []*ExtAuthConfig_Config `protobuf:"bytes,8,rep,name=configs,proto3" json:"configs,omitempty"`
	// How to handle processing of named configs within an auth config chain.
	// An example config might be: `( basic1 || basic2 || (oidc1 && !oidc2) )`
	// The boolean expression is evaluated left to right but honors parenthesis and short-circuiting.
	// Defaults to an empty string, which is interpreted as `and`-ing the configs.
	BooleanExpr *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=boolean_expr,json=booleanExpr,proto3" json:"boolean_expr,omitempty"`
	// How the service should handle a redirect response from an OIDC issuer. In the default false mode,
	// the redirect will be considered a successful response, and the client will receive a 302 with a location header.
	// If this is set to true, the client will instead receive a 401 unauthorized response. This is useful in cases where
	// API calls are being made or other such occurrences where the client cannot handle the redirect.
	FailOnRedirect bool `protobuf:"varint,11,opt,name=fail_on_redirect,json=failOnRedirect,proto3" json:"fail_on_redirect,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExtAuthConfig) Reset() {
	*x = ExtAuthConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig) ProtoMessage() {}

func (x *ExtAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0}
}

func (x *ExtAuthConfig) GetAuthConfigRefName() string {
	if x != nil {
		return x.AuthConfigRefName
	}
	return ""
}

func (x *ExtAuthConfig) GetConfigs() []*ExtAuthConfig_Config {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *ExtAuthConfig) GetBooleanExpr() *wrapperspb.StringValue {
	if x != nil {
		return x.BooleanExpr
	}
	return nil
}

func (x *ExtAuthConfig) GetFailOnRedirect() bool {
	if x != nil {
		return x.FailOnRedirect
	}
	return false
}

type ApiKeyCreateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKeys       []*ApiKey              `protobuf:"bytes,1,rep,name=api_keys,json=apiKeys,proto3" json:"api_keys,omitempty"`
	RawApiKeys    []string               `protobuf:"bytes,2,rep,name=raw_api_keys,json=rawApiKeys,proto3" json:"raw_api_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiKeyCreateRequest) Reset() {
	*x = ApiKeyCreateRequest{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiKeyCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyCreateRequest) ProtoMessage() {}

func (x *ApiKeyCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyCreateRequest.ProtoReflect.Descriptor instead.
func (*ApiKeyCreateRequest) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{1}
}

func (x *ApiKeyCreateRequest) GetApiKeys() []*ApiKey {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

func (x *ApiKeyCreateRequest) GetRawApiKeys() []string {
	if x != nil {
		return x.RawApiKeys
	}
	return nil
}

type ApiKeyCreateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKeys       []*ApiKey              `protobuf:"bytes,1,rep,name=api_keys,json=apiKeys,proto3" json:"api_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiKeyCreateResponse) Reset() {
	*x = ApiKeyCreateResponse{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiKeyCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyCreateResponse) ProtoMessage() {}

func (x *ApiKeyCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyCreateResponse.ProtoReflect.Descriptor instead.
func (*ApiKeyCreateResponse) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{2}
}

func (x *ApiKeyCreateResponse) GetApiKeys() []*ApiKey {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

type ApiKeyReadRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawApiKeys    []string               `protobuf:"bytes,1,rep,name=raw_api_keys,json=rawApiKeys,proto3" json:"raw_api_keys,omitempty"`
	Labels        []string               `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiKeyReadRequest) Reset() {
	*x = ApiKeyReadRequest{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiKeyReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyReadRequest) ProtoMessage() {}

func (x *ApiKeyReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyReadRequest.ProtoReflect.Descriptor instead.
func (*ApiKeyReadRequest) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{3}
}

func (x *ApiKeyReadRequest) GetRawApiKeys() []string {
	if x != nil {
		return x.RawApiKeys
	}
	return nil
}

func (x *ApiKeyReadRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ApiKeyReadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKeys       []*ApiKey              `protobuf:"bytes,1,rep,name=api_keys,json=apiKeys,proto3" json:"api_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiKeyReadResponse) Reset() {
	*x = ApiKeyReadResponse{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiKeyReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyReadResponse) ProtoMessage() {}

func (x *ApiKeyReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyReadResponse.ProtoReflect.Descriptor instead.
func (*ApiKeyReadResponse) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{4}
}

func (x *ApiKeyReadResponse) GetApiKeys() []*ApiKey {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

type ApiKeyUpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Upsert        bool                   `protobuf:"varint,1,opt,name=upsert,proto3" json:"upsert,omitempty"`
	ApiKeys       []*ApiKey              `protobuf:"bytes,2,rep,name=api_keys,json=apiKeys,proto3" json:"api_keys,omitempty"`
	RawApiKeys    []string               `protobuf:"bytes,3,rep,name=raw_api_keys,json=rawApiKeys,proto3" json:"raw_api_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiKeyUpdateRequest) Reset() {
	*x = ApiKeyUpdateRequest{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiKeyUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyUpdateRequest) ProtoMessage() {}

func (x *ApiKeyUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyUpdateRequest.ProtoReflect.Descriptor instead.
func (*ApiKeyUpdateRequest) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{5}
}

func (x *ApiKeyUpdateRequest) GetUpsert() bool {
	if x != nil {
		return x.Upsert
	}
	return false
}

func (x *ApiKeyUpdateRequest) GetApiKeys() []*ApiKey {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

func (x *ApiKeyUpdateRequest) GetRawApiKeys() []string {
	if x != nil {
		return x.RawApiKeys
	}
	return nil
}

type ApiKeyUpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKeys       []*ApiKey              `protobuf:"bytes,1,rep,name=api_keys,json=apiKeys,proto3" json:"api_keys,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiKeyUpdateResponse) Reset() {
	*x = ApiKeyUpdateResponse{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiKeyUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyUpdateResponse) ProtoMessage() {}

func (x *ApiKeyUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyUpdateResponse.ProtoReflect.Descriptor instead.
func (*ApiKeyUpdateResponse) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{6}
}

func (x *ApiKeyUpdateResponse) GetApiKeys() []*ApiKey {
	if x != nil {
		return x.ApiKeys
	}
	return nil
}

type ApiKeyDeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawApiKeys    []string               `protobuf:"bytes,1,rep,name=raw_api_keys,json=rawApiKeys,proto3" json:"raw_api_keys,omitempty"`
	Labels        []string               `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiKeyDeleteRequest) Reset() {
	*x = ApiKeyDeleteRequest{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiKeyDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyDeleteRequest) ProtoMessage() {}

func (x *ApiKeyDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyDeleteRequest.ProtoReflect.Descriptor instead.
func (*ApiKeyDeleteRequest) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{7}
}

func (x *ApiKeyDeleteRequest) GetRawApiKeys() []string {
	if x != nil {
		return x.RawApiKeys
	}
	return nil
}

func (x *ApiKeyDeleteRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type ApiKeyDeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiKeyDeleteResponse) Reset() {
	*x = ApiKeyDeleteResponse{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiKeyDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyDeleteResponse) ProtoMessage() {}

func (x *ApiKeyDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyDeleteResponse.ProtoReflect.Descriptor instead.
func (*ApiKeyDeleteResponse) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{8}
}

// For apps in Microsoft Azure, configure Microsoft Entra ID as the OpenID Connect (OIDC) provider.
// This way, you can enable distributed claims and caching for when users are members of more than 200 groups.
type ExtAuthConfig_Azure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The client ID for the ExtAuthService app that is registered in MS Entra,
	// to access the Microsoft Graph API to retrieve distributed claims.
	// This app is NOT the app that you want to configure external auth for.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The tenant ID represents the MS Entra organization ID where the ExtAuthService app is registered.
	// This tenant ID may or may not be the same as in the top level `OidcAuthorizationCodeConfig`,
	// depending on how your Azure account is provisioned.
	TenantId string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// The client secret of the ExtAuthService app that is registered with MS Entra to communicate with the MS Graph API.
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// Redis connection details to cache MS Entra claims.
	// This way, you avoid performance issues of accessing the Microsoft Graph API too many times.
	// Note that this setting does NOT turn on Redis caching for the user session.
	// To turn on Redis user session caching, use the `userSessionConfig` field.
	ClaimsCachingOptions *RedisOptions `protobuf:"bytes,4,opt,name=claims_caching_options,json=claimsCachingOptions,proto3" json:"claims_caching_options,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ExtAuthConfig_Azure) Reset() {
	*x = ExtAuthConfig_Azure{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_Azure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_Azure) ProtoMessage() {}

func (x *ExtAuthConfig_Azure) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_Azure.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_Azure) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ExtAuthConfig_Azure) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ExtAuthConfig_Azure) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ExtAuthConfig_Azure) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ExtAuthConfig_Azure) GetClaimsCachingOptions() *RedisOptions {
	if x != nil {
		return x.ClaimsCachingOptions
	}
	return nil
}

// Map a single claim from an OAuth2 or OIDC token to a header in the request to the upstream destination.
type ExtAuthConfig_ClaimToHeader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The claim name from the token, such as `sub`.
	Claim string `protobuf:"bytes,1,opt,name=claim,proto3" json:"claim,omitempty"`
	// The header to copy the claim to, such as `x-sub`.
	Header string `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// If the header exists, append the claim value to the header (true), or overwrite any existing value (false). The default behavior is to overwrite any existing value (false).
	Append        bool `protobuf:"varint,3,opt,name=append,proto3" json:"append,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_ClaimToHeader) Reset() {
	*x = ExtAuthConfig_ClaimToHeader{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_ClaimToHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_ClaimToHeader) ProtoMessage() {}

func (x *ExtAuthConfig_ClaimToHeader) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_ClaimToHeader.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_ClaimToHeader) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ExtAuthConfig_ClaimToHeader) GetClaim() string {
	if x != nil {
		return x.Claim
	}
	return ""
}

func (x *ExtAuthConfig_ClaimToHeader) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *ExtAuthConfig_ClaimToHeader) GetAppend() bool {
	if x != nil {
		return x.Append
	}
	return false
}

// Message to store Basic Auth Configuration.
// "Internal" refers to this format allowing for selection of the hashing algorithm and user source.
// If only the legacy "apr" field is defined, the existing public BasicAuth configuration will continue be used.
type ExtAuthConfig_BasicAuthInternal struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Realm to use in the Basic Auth challenge.
	Realm string `protobuf:"bytes,1,opt,name=realm,proto3" json:"realm,omitempty"`
	// Hashing algorithm to use for password hashing.
	Encryption *ExtAuthConfig_BasicAuthInternal_EncryptionType `protobuf:"bytes,2,opt,name=encryption,proto3" json:"encryption,omitempty"`
	// Source of user credential data.
	//
	// Types that are valid to be assigned to UserSource:
	//
	//	*ExtAuthConfig_BasicAuthInternal_UserList_
	UserSource    isExtAuthConfig_BasicAuthInternal_UserSource `protobuf_oneof:"user_source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_BasicAuthInternal) Reset() {
	*x = ExtAuthConfig_BasicAuthInternal{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_BasicAuthInternal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_BasicAuthInternal) ProtoMessage() {}

func (x *ExtAuthConfig_BasicAuthInternal) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_BasicAuthInternal.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_BasicAuthInternal) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ExtAuthConfig_BasicAuthInternal) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *ExtAuthConfig_BasicAuthInternal) GetEncryption() *ExtAuthConfig_BasicAuthInternal_EncryptionType {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (x *ExtAuthConfig_BasicAuthInternal) GetUserSource() isExtAuthConfig_BasicAuthInternal_UserSource {
	if x != nil {
		return x.UserSource
	}
	return nil
}

func (x *ExtAuthConfig_BasicAuthInternal) GetUserList() *ExtAuthConfig_BasicAuthInternal_UserList {
	if x != nil {
		if x, ok := x.UserSource.(*ExtAuthConfig_BasicAuthInternal_UserList_); ok {
			return x.UserList
		}
	}
	return nil
}

type isExtAuthConfig_BasicAuthInternal_UserSource interface {
	isExtAuthConfig_BasicAuthInternal_UserSource()
}

type ExtAuthConfig_BasicAuthInternal_UserList_ struct {
	UserList *ExtAuthConfig_BasicAuthInternal_UserList `protobuf:"bytes,3,opt,name=user_list,json=userList,proto3,oneof"`
}

func (*ExtAuthConfig_BasicAuthInternal_UserList_) isExtAuthConfig_BasicAuthInternal_UserSource() {}

// Deprecated, prefer OAuth2Config
type ExtAuthConfig_OAuthConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// your client id as registered with the issuer
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// your client secret as registered with the issuer
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// The url of the issuer. We will look for OIDC information in issuerUrl+
	// ".well-known/openid-configuration"
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
	IssuerUrl string `protobuf:"bytes,3,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"`
	// extra query parameters to apply to the Ext-Auth service's authorization request to the identity provider.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
	AuthEndpointQueryParams map[string]string `protobuf:"bytes,7,rep,name=auth_endpoint_query_params,json=authEndpointQueryParams,proto3" json:"auth_endpoint_query_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// we to redirect after successful auth, if we can't determine the original
	// url this should be your publicly available app url.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
	AppUrl string `protobuf:"bytes,4,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	// a callback path relative to app url that will be used for OIDC callbacks.
	// needs to not be used by the application
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
	CallbackPath string `protobuf:"bytes,5,opt,name=callback_path,json=callbackPath,proto3" json:"callback_path,omitempty"`
	// scopes to request in addition to the openid scope.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
	Scopes        []string `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_OAuthConfig) Reset() {
	*x = ExtAuthConfig_OAuthConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_OAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_OAuthConfig) ProtoMessage() {}

func (x *ExtAuthConfig_OAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_OAuthConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_OAuthConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 3}
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
func (x *ExtAuthConfig_OAuthConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
func (x *ExtAuthConfig_OAuthConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
func (x *ExtAuthConfig_OAuthConfig) GetIssuerUrl() string {
	if x != nil {
		return x.IssuerUrl
	}
	return ""
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
func (x *ExtAuthConfig_OAuthConfig) GetAuthEndpointQueryParams() map[string]string {
	if x != nil {
		return x.AuthEndpointQueryParams
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
func (x *ExtAuthConfig_OAuthConfig) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
func (x *ExtAuthConfig_OAuthConfig) GetCallbackPath() string {
	if x != nil {
		return x.CallbackPath
	}
	return ""
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
func (x *ExtAuthConfig_OAuthConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type ExtAuthConfig_UserSessionConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// should we fail auth flow when failing to get a session from redis, or allow it to continue,
	// potentially starting a new auth flow and setting a new session.
	FailOnFetchFailure bool `protobuf:"varint,1,opt,name=fail_on_fetch_failure,json=failOnFetchFailure,proto3" json:"fail_on_fetch_failure,omitempty"`
	// Set-Cookie options
	CookieOptions *UserSession_CookieOptions `protobuf:"bytes,2,opt,name=cookie_options,json=cookieOptions,proto3" json:"cookie_options,omitempty"`
	// Types that are valid to be assigned to Session:
	//
	//	*ExtAuthConfig_UserSessionConfig_Cookie
	//	*ExtAuthConfig_UserSessionConfig_Redis
	Session isExtAuthConfig_UserSessionConfig_Session `protobuf_oneof:"session"`
	// the cipher config enables the symmetric key encryption of the cookie values of the user session.
	CipherConfig  *ExtAuthConfig_UserSessionConfig_CipherConfig `protobuf:"bytes,5,opt,name=cipher_config,json=cipherConfig,proto3" json:"cipher_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_UserSessionConfig) Reset() {
	*x = ExtAuthConfig_UserSessionConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_UserSessionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_UserSessionConfig) ProtoMessage() {}

func (x *ExtAuthConfig_UserSessionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_UserSessionConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_UserSessionConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ExtAuthConfig_UserSessionConfig) GetFailOnFetchFailure() bool {
	if x != nil {
		return x.FailOnFetchFailure
	}
	return false
}

func (x *ExtAuthConfig_UserSessionConfig) GetCookieOptions() *UserSession_CookieOptions {
	if x != nil {
		return x.CookieOptions
	}
	return nil
}

func (x *ExtAuthConfig_UserSessionConfig) GetSession() isExtAuthConfig_UserSessionConfig_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ExtAuthConfig_UserSessionConfig) GetCookie() *UserSession_InternalSession {
	if x != nil {
		if x, ok := x.Session.(*ExtAuthConfig_UserSessionConfig_Cookie); ok {
			return x.Cookie
		}
	}
	return nil
}

func (x *ExtAuthConfig_UserSessionConfig) GetRedis() *UserSession_RedisSession {
	if x != nil {
		if x, ok := x.Session.(*ExtAuthConfig_UserSessionConfig_Redis); ok {
			return x.Redis
		}
	}
	return nil
}

func (x *ExtAuthConfig_UserSessionConfig) GetCipherConfig() *ExtAuthConfig_UserSessionConfig_CipherConfig {
	if x != nil {
		return x.CipherConfig
	}
	return nil
}

type isExtAuthConfig_UserSessionConfig_Session interface {
	isExtAuthConfig_UserSessionConfig_Session()
}

type ExtAuthConfig_UserSessionConfig_Cookie struct {
	// Set the tokens in the cookie itself. No need for server side state.
	Cookie *UserSession_InternalSession `protobuf:"bytes,3,opt,name=cookie,proto3,oneof"`
}

type ExtAuthConfig_UserSessionConfig_Redis struct {
	// Use redis to store the tokens and just store a random id in the cookie.
	Redis *UserSession_RedisSession `protobuf:"bytes,4,opt,name=redis,proto3,oneof"`
}

func (*ExtAuthConfig_UserSessionConfig_Cookie) isExtAuthConfig_UserSessionConfig_Session() {}

func (*ExtAuthConfig_UserSessionConfig_Redis) isExtAuthConfig_UserSessionConfig_Session() {}

type ExtAuthConfig_OidcAuthorizationCodeConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// your client id as registered with the issuer
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// your client secret as registered with the issuer.
	// Only one of client_secret or pk_jwt_client_authentication_config should be set. pk_jwt_client_authentication_config takes precedence.
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// The url of the issuer. We will look for OIDC information in issuerUrl+
	// ".well-known/openid-configuration"
	IssuerUrl string `protobuf:"bytes,3,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"`
	// extra query parameters to apply to the Ext-Auth service's authorization request to the identity provider.
	// this can be useful for flows such as PKCE (https://www.oauth.com/oauth2-servers/pkce/authorization-request/)
	// to set the `code_challenge` and `code_challenge_method`.
	AuthEndpointQueryParams map[string]string `protobuf:"bytes,4,rep,name=auth_endpoint_query_params,json=authEndpointQueryParams,proto3" json:"auth_endpoint_query_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// extra query parameters to apply to the Ext-Auth service's token request to the identity provider.
	// this can be useful for flows such as PKCE (https://www.oauth.com/oauth2-servers/pkce/authorization-request/)
	// to set the `code_verifier`.
	TokenEndpointQueryParams map[string]string `protobuf:"bytes,14,rep,name=token_endpoint_query_params,json=tokenEndpointQueryParams,proto3" json:"token_endpoint_query_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// we to redirect after successful auth, if we can't determine the original
	// url this should be your publicly available app url.
	AppUrl string `protobuf:"bytes,5,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	// a callback path relative to app url that will be used for OIDC callbacks.
	// needs to not be used by the application
	CallbackPath string `protobuf:"bytes,6,opt,name=callback_path,json=callbackPath,proto3" json:"callback_path,omitempty"`
	// a path relative to app url that will be used for logging out from an OIDC session.
	// should not be used by the application.
	// If not provided, logout functionality will be disabled.
	LogoutPath string `protobuf:"bytes,9,opt,name=logout_path,json=logoutPath,proto3" json:"logout_path,omitempty"`
	// url to redirect to after logout.
	// This should be a publicly available URL. If not provided, will default to the `app_url`.
	AfterLogoutUrl string `protobuf:"bytes,15,opt,name=after_logout_url,json=afterLogoutUrl,proto3" json:"after_logout_url,omitempty"`
	// scopes to request in addition to the openid scope.
	Scopes []string `protobuf:"bytes,7,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// DEPRECATED: use userSessionConfig [userSession]
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
	Session *UserSession `protobuf:"bytes,8,opt,name=session,proto3" json:"session,omitempty"`
	// Configures headers added to requests.
	Headers *HeaderConfiguration `protobuf:"bytes,10,opt,name=headers,proto3" json:"headers,omitempty"`
	// OIDC configuration is discovered at <issuerUrl>/.well-known/openid-configuration
	// The configuration override defines any properties that should override this discovery configuration
	// For example, the following AuthConfig CRD could be defined as:
	//
	//	```yaml
	//	apiVersion: enterprise.gloo.solo.io/v1
	//	kind: AuthConfig
	//	metadata:
	//	  name: google-oidc
	//	  namespace: gloo-system
	//	spec:
	//	  configs:
	//	  - oauth:
	//	      app_url: http://localhost:8080
	//	      callback_path: /callback
	//	      client_id: $CLIENT_ID
	//	      client_secret_ref:
	//	        name: google
	//	        namespace: gloo-system
	//	      issuer_url: https://accounts.google.com
	//	      discovery_override:
	//	        token_endpoint: "https://token.url/gettoken"
	//	```
	//
	// And this will ensure that regardless of what value is discovered at
	// <issuerUrl>/.well-known/openid-configuration, "https://token.url/gettoken" will be used as the token endpoint
	DiscoveryOverride *DiscoveryOverride `protobuf:"bytes,11,opt,name=discovery_override,json=discoveryOverride,proto3" json:"discovery_override,omitempty"`
	// The interval at which OIDC configuration is discovered at <issuerUrl>/.well-known/openid-configuration
	// If not specified, the default value is 30 minutes.
	DiscoveryPollInterval *durationpb.Duration `protobuf:"bytes,12,opt,name=discovery_poll_interval,json=discoveryPollInterval,proto3" json:"discovery_poll_interval,omitempty"`
	// If a user executes a request with a key that is not found in the JWKS, it could be
	// that the keys have rotated on the remote source, and not yet in the local cache.
	// This policy lets you define the behavior for how to refresh the local cache during a request
	// where an invalid key is provided
	JwksCacheRefreshPolicy *JwksOnDemandCacheRefreshPolicy `protobuf:"bytes,13,opt,name=jwks_cache_refresh_policy,json=jwksCacheRefreshPolicy,proto3" json:"jwks_cache_refresh_policy,omitempty"`
	// If set, the randomly generated session id will be sent to the token endpoint as part of the code exchange
	// The session id is used as the key for sessions in Redis
	SessionIdHeaderName string `protobuf:"bytes,16,opt,name=session_id_header_name,json=sessionIdHeaderName,proto3" json:"session_id_header_name,omitempty"`
	// If set, CallbackPath will be evaluated as a regular expression
	ParseCallbackPathAsRegex bool `protobuf:"varint,17,opt,name=parse_callback_path_as_regex,json=parseCallbackPathAsRegex,proto3" json:"parse_callback_path_as_regex,omitempty"`
	// If specified, authEndpointQueryParams and tokenEndpointQueryParams will be populated using dynamic metadata values.
	// By default parameters will be extracted from the solo_authconfig_oidc namespace
	// this behavior can be overridden by explicitly specifying a namespace
	AutoMapFromMetadata *AutoMapFromMetadata `protobuf:"bytes,18,opt,name=auto_map_from_metadata,json=autoMapFromMetadata,proto3" json:"auto_map_from_metadata,omitempty"`
	// If specified, these are properties defined for the end session endpoint
	// specifications. Noted [here](https://openid.net/specs/openid-connect-rpinitiated-1_0.html)
	// in the OIDC documentation.
	EndSessionProperties *EndSessionProperties `protobuf:"bytes,19,opt,name=end_session_properties,json=endSessionProperties,proto3" json:"end_session_properties,omitempty"`
	// Configuration related to the user session.
	UserSession *ExtAuthConfig_UserSessionConfig `protobuf:"bytes,20,opt,name=user_session,json=userSession,proto3" json:"user_session,omitempty"`
	// Configuration for private key JWT client authentication.
	// Only one of client_secret or pk_jwt_client_authentication_config should be set. pk_jwt_client_authentication_config takes precedence.
	PkJwtClientAuthenticationConfig *ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig `protobuf:"bytes,21,opt,name=pk_jwt_client_authentication_config,json=pkJwtClientAuthenticationConfig,proto3" json:"pk_jwt_client_authentication_config,omitempty"`
	// Optional: Configuration specific to the OAuth2 access token received and processed by the ext-auth-service.
	AccessToken *ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken `protobuf:"bytes,22,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	// Optional: Configuration specific to the OIDC identity token received and processed by the ext-auth-service.
	IdentityToken *ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken `protobuf:"bytes,23,opt,name=identity_token,json=identityToken,proto3" json:"identity_token,omitempty"`
	// Types that are valid to be assigned to Provider:
	//
	//	*ExtAuthConfig_OidcAuthorizationCodeConfig_Default_
	//	*ExtAuthConfig_OidcAuthorizationCodeConfig_Azure
	Provider isExtAuthConfig_OidcAuthorizationCodeConfig_Provider `protobuf_oneof:"Provider"`
	// Configuration for front channel logout. This is used to log out the user from multiple apps/clients associated with one OpenId Provider (OP).
	// The path is registered with the OP and is called for each app/client that the user is logged into when the logout endpoint is called.
	FrontChannelLogout *ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout `protobuf:"bytes,28,opt,name=front_channel_logout,json=frontChannelLogout,proto3" json:"front_channel_logout,omitempty"`
	// Map of metadata key to claim. Ie:
	// dynamic_metadata_from_claims:
	//
	//	issuer: iss
	//	email: email
	//
	// When specified, the matching claims from the ID token will be emitted as dynamic metadata.
	// Note that metadata keys must be unique, and the claim names must be alphanumeric and use `-` or `_` as separators.
	// The metadata will live in a namespace specified by the canonical name of the ext auth filter (in our case `envoy.filters.http.ext_authz`),
	// and the structure of the claim value will be preserved in the metadata struct.
	DynamicMetadataFromClaims map[string]string `protobuf:"bytes,29,rep,name=dynamic_metadata_from_claims,json=dynamicMetadataFromClaims,proto3" json:"dynamic_metadata_from_claims,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) Reset() {
	*x = ExtAuthConfig_OidcAuthorizationCodeConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_OidcAuthorizationCodeConfig) ProtoMessage() {}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_OidcAuthorizationCodeConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_OidcAuthorizationCodeConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 5}
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetIssuerUrl() string {
	if x != nil {
		return x.IssuerUrl
	}
	return ""
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetAuthEndpointQueryParams() map[string]string {
	if x != nil {
		return x.AuthEndpointQueryParams
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetTokenEndpointQueryParams() map[string]string {
	if x != nil {
		return x.TokenEndpointQueryParams
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetCallbackPath() string {
	if x != nil {
		return x.CallbackPath
	}
	return ""
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetLogoutPath() string {
	if x != nil {
		return x.LogoutPath
	}
	return ""
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetAfterLogoutUrl() string {
	if x != nil {
		return x.AfterLogoutUrl
	}
	return ""
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetSession() *UserSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetHeaders() *HeaderConfiguration {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetDiscoveryOverride() *DiscoveryOverride {
	if x != nil {
		return x.DiscoveryOverride
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetDiscoveryPollInterval() *durationpb.Duration {
	if x != nil {
		return x.DiscoveryPollInterval
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetJwksCacheRefreshPolicy() *JwksOnDemandCacheRefreshPolicy {
	if x != nil {
		return x.JwksCacheRefreshPolicy
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetSessionIdHeaderName() string {
	if x != nil {
		return x.SessionIdHeaderName
	}
	return ""
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetParseCallbackPathAsRegex() bool {
	if x != nil {
		return x.ParseCallbackPathAsRegex
	}
	return false
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetAutoMapFromMetadata() *AutoMapFromMetadata {
	if x != nil {
		return x.AutoMapFromMetadata
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetEndSessionProperties() *EndSessionProperties {
	if x != nil {
		return x.EndSessionProperties
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetUserSession() *ExtAuthConfig_UserSessionConfig {
	if x != nil {
		return x.UserSession
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetPkJwtClientAuthenticationConfig() *ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig {
	if x != nil {
		return x.PkJwtClientAuthenticationConfig
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetAccessToken() *ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken {
	if x != nil {
		return x.AccessToken
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetIdentityToken() *ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken {
	if x != nil {
		return x.IdentityToken
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetProvider() isExtAuthConfig_OidcAuthorizationCodeConfig_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetDefault() *ExtAuthConfig_OidcAuthorizationCodeConfig_Default {
	if x != nil {
		if x, ok := x.Provider.(*ExtAuthConfig_OidcAuthorizationCodeConfig_Default_); ok {
			return x.Default
		}
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetAzure() *ExtAuthConfig_Azure {
	if x != nil {
		if x, ok := x.Provider.(*ExtAuthConfig_OidcAuthorizationCodeConfig_Azure); ok {
			return x.Azure
		}
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetFrontChannelLogout() *ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout {
	if x != nil {
		return x.FrontChannelLogout
	}
	return nil
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig) GetDynamicMetadataFromClaims() map[string]string {
	if x != nil {
		return x.DynamicMetadataFromClaims
	}
	return nil
}

type isExtAuthConfig_OidcAuthorizationCodeConfig_Provider interface {
	isExtAuthConfig_OidcAuthorizationCodeConfig_Provider()
}

type ExtAuthConfig_OidcAuthorizationCodeConfig_Default_ struct {
	Default *ExtAuthConfig_OidcAuthorizationCodeConfig_Default `protobuf:"bytes,26,opt,name=default,proto3,oneof"`
}

type ExtAuthConfig_OidcAuthorizationCodeConfig_Azure struct {
	Azure *ExtAuthConfig_Azure `protobuf:"bytes,27,opt,name=azure,proto3,oneof"`
}

func (*ExtAuthConfig_OidcAuthorizationCodeConfig_Default_) isExtAuthConfig_OidcAuthorizationCodeConfig_Provider() {
}

func (*ExtAuthConfig_OidcAuthorizationCodeConfig_Azure) isExtAuthConfig_OidcAuthorizationCodeConfig_Provider() {
}

type ExtAuthConfig_AccessTokenValidationConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ValidationType:
	//
	//	*ExtAuthConfig_AccessTokenValidationConfig_IntrospectionUrl
	//	*ExtAuthConfig_AccessTokenValidationConfig_Jwt
	//	*ExtAuthConfig_AccessTokenValidationConfig_Introspection
	ValidationType isExtAuthConfig_AccessTokenValidationConfig_ValidationType `protobuf_oneof:"validation_type"`
	// The URL for the OIDC userinfo endpoint.
	// If provided, the (opaque) access token provided or received from the oauth endpoint
	// will be queried and the userinfo response (or cached response) will be added to the
	// `AuthorizationRequest` state under the "introspection" key.
	// This can be useful to leverage the userinfo response in, for example, an external auth server plugin.
	UserinfoUrl string `protobuf:"bytes,4,opt,name=userinfo_url,json=userinfoUrl,proto3" json:"userinfo_url,omitempty"`
	// How long the token introspection and userinfo endpoint response for a specific access token should be kept
	// in the in-memory cache. The result will be invalidated at this timeout, or at "exp" time from the introspection
	// result, whichever comes sooner. If omitted, defaults to 10 minutes. If zero, then no caching will be done.
	CacheTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=cache_timeout,json=cacheTimeout,proto3" json:"cache_timeout,omitempty"`
	// Optional criteria for validating the scopes of a token.
	//
	// Types that are valid to be assigned to ScopeValidation:
	//
	//	*ExtAuthConfig_AccessTokenValidationConfig_RequiredScopes
	ScopeValidation isExtAuthConfig_AccessTokenValidationConfig_ScopeValidation `protobuf_oneof:"scope_validation"`
	// Map of metadata key to claim. Ie:
	// dynamic_metadata_from_claims:
	//
	//	issuer: iss
	//	email: email
	//
	// When specified, the matching claims from the access token will be emitted as dynamic metadata.
	// Note that metadata keys must be unique, and the claim names must be alphanumeric and use `-` or `_` as separators.
	// Works when the access token is a JWT or when the access token is opaque, in which case the claims will refer to field in the response from the token introspection endpoint.
	// The metadata will live in a namespace specified by the canonical name of the ext auth filter (in our case `envoy.filters.http.ext_authz`),
	// and the structure of the claim value will be preserved in the metadata struct.
	DynamicMetadataFromClaims map[string]string              `protobuf:"bytes,7,rep,name=dynamic_metadata_from_claims,json=dynamicMetadataFromClaims,proto3" json:"dynamic_metadata_from_claims,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ClaimsToHeaders           []*ExtAuthConfig_ClaimToHeader `protobuf:"bytes,8,rep,name=claims_to_headers,json=claimsToHeaders,proto3" json:"claims_to_headers,omitempty"`
	// Types that are valid to be assigned to Provider:
	//
	//	*ExtAuthConfig_AccessTokenValidationConfig_Default_
	//	*ExtAuthConfig_AccessTokenValidationConfig_Azure
	Provider      isExtAuthConfig_AccessTokenValidationConfig_Provider `protobuf_oneof:"Provider"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) Reset() {
	*x = ExtAuthConfig_AccessTokenValidationConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_AccessTokenValidationConfig) ProtoMessage() {}

func (x *ExtAuthConfig_AccessTokenValidationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_AccessTokenValidationConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_AccessTokenValidationConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 6}
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) GetValidationType() isExtAuthConfig_AccessTokenValidationConfig_ValidationType {
	if x != nil {
		return x.ValidationType
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
func (x *ExtAuthConfig_AccessTokenValidationConfig) GetIntrospectionUrl() string {
	if x != nil {
		if x, ok := x.ValidationType.(*ExtAuthConfig_AccessTokenValidationConfig_IntrospectionUrl); ok {
			return x.IntrospectionUrl
		}
	}
	return ""
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) GetJwt() *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation {
	if x != nil {
		if x, ok := x.ValidationType.(*ExtAuthConfig_AccessTokenValidationConfig_Jwt); ok {
			return x.Jwt
		}
	}
	return nil
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) GetIntrospection() *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation {
	if x != nil {
		if x, ok := x.ValidationType.(*ExtAuthConfig_AccessTokenValidationConfig_Introspection); ok {
			return x.Introspection
		}
	}
	return nil
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) GetUserinfoUrl() string {
	if x != nil {
		return x.UserinfoUrl
	}
	return ""
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) GetCacheTimeout() *durationpb.Duration {
	if x != nil {
		return x.CacheTimeout
	}
	return nil
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) GetScopeValidation() isExtAuthConfig_AccessTokenValidationConfig_ScopeValidation {
	if x != nil {
		return x.ScopeValidation
	}
	return nil
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) GetRequiredScopes() *ExtAuthConfig_AccessTokenValidationConfig_ScopeList {
	if x != nil {
		if x, ok := x.ScopeValidation.(*ExtAuthConfig_AccessTokenValidationConfig_RequiredScopes); ok {
			return x.RequiredScopes
		}
	}
	return nil
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) GetDynamicMetadataFromClaims() map[string]string {
	if x != nil {
		return x.DynamicMetadataFromClaims
	}
	return nil
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) GetClaimsToHeaders() []*ExtAuthConfig_ClaimToHeader {
	if x != nil {
		return x.ClaimsToHeaders
	}
	return nil
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) GetProvider() isExtAuthConfig_AccessTokenValidationConfig_Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) GetDefault() *ExtAuthConfig_AccessTokenValidationConfig_Default {
	if x != nil {
		if x, ok := x.Provider.(*ExtAuthConfig_AccessTokenValidationConfig_Default_); ok {
			return x.Default
		}
	}
	return nil
}

func (x *ExtAuthConfig_AccessTokenValidationConfig) GetAzure() *ExtAuthConfig_Azure {
	if x != nil {
		if x, ok := x.Provider.(*ExtAuthConfig_AccessTokenValidationConfig_Azure); ok {
			return x.Azure
		}
	}
	return nil
}

type isExtAuthConfig_AccessTokenValidationConfig_ValidationType interface {
	isExtAuthConfig_AccessTokenValidationConfig_ValidationType()
}

type ExtAuthConfig_AccessTokenValidationConfig_IntrospectionUrl struct {
	// The URL for the [OAuth2.0 Token Introspection](https://datatracker.ietf.org/doc/html/rfc7662) endpoint.
	// If provided, the (opaque) access token provided or received from the oauth authorization endpoint
	// will be validated against this endpoint, or locally cached responses for this access token.
	// This field is deprecated as it does not support authenticated introspection requests
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
	IntrospectionUrl string `protobuf:"bytes,1,opt,name=introspection_url,json=introspectionUrl,proto3,oneof"`
}

type ExtAuthConfig_AccessTokenValidationConfig_Jwt struct {
	// Validate access tokens that conform to the
	// [JSON Web Token (JWT)](https://datatracker.ietf.org/doc/rfc7662/) specification.
	Jwt *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation `protobuf:"bytes,2,opt,name=jwt,proto3,oneof"`
}

type ExtAuthConfig_AccessTokenValidationConfig_Introspection struct {
	// Defines how (opaque) access tokens, received from the oauth authorization endpoint, are validated
	// [OAuth2.0 Token Introspection](https://datatracker.ietf.org/doc/html/rfc7662) specification.
	Introspection *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation `protobuf:"bytes,3,opt,name=introspection,proto3,oneof"`
}

func (*ExtAuthConfig_AccessTokenValidationConfig_IntrospectionUrl) isExtAuthConfig_AccessTokenValidationConfig_ValidationType() {
}

func (*ExtAuthConfig_AccessTokenValidationConfig_Jwt) isExtAuthConfig_AccessTokenValidationConfig_ValidationType() {
}

func (*ExtAuthConfig_AccessTokenValidationConfig_Introspection) isExtAuthConfig_AccessTokenValidationConfig_ValidationType() {
}

type isExtAuthConfig_AccessTokenValidationConfig_ScopeValidation interface {
	isExtAuthConfig_AccessTokenValidationConfig_ScopeValidation()
}

type ExtAuthConfig_AccessTokenValidationConfig_RequiredScopes struct {
	// Require access token to have all of the scopes in the given list.
	// This configuration applies to both opaque and JWT tokens. In the case of opaque tokens,
	// this will check the scopes returned in the "scope" member of introspection response
	// (as described in [Section 2.2 of RFC7662](https://datatracker.ietf.org/doc/html/rfc7662#section-2.2).
	// In case of JWTs the scopes to be validated are expected to be contained in the "scope" claim of the
	// token in the form of a space-separated string.
	// Omitting this field means that scope validation will be skipped.
	RequiredScopes *ExtAuthConfig_AccessTokenValidationConfig_ScopeList `protobuf:"bytes,6,opt,name=required_scopes,json=requiredScopes,proto3,oneof"`
}

func (*ExtAuthConfig_AccessTokenValidationConfig_RequiredScopes) isExtAuthConfig_AccessTokenValidationConfig_ScopeValidation() {
}

type isExtAuthConfig_AccessTokenValidationConfig_Provider interface {
	isExtAuthConfig_AccessTokenValidationConfig_Provider()
}

type ExtAuthConfig_AccessTokenValidationConfig_Default_ struct {
	Default *ExtAuthConfig_AccessTokenValidationConfig_Default `protobuf:"bytes,26,opt,name=default,proto3,oneof"`
}

type ExtAuthConfig_AccessTokenValidationConfig_Azure struct {
	Azure *ExtAuthConfig_Azure `protobuf:"bytes,27,opt,name=azure,proto3,oneof"`
}

func (*ExtAuthConfig_AccessTokenValidationConfig_Default_) isExtAuthConfig_AccessTokenValidationConfig_Provider() {
}

func (*ExtAuthConfig_AccessTokenValidationConfig_Azure) isExtAuthConfig_AccessTokenValidationConfig_Provider() {
}

type ExtAuthConfig_PlainOAuth2Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Your client ID as registered with the issuer
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Your client secret as registered with the issuer
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// Extra query parameters to apply to the Ext-Auth service's authorization request to the identity provider.
	// These parameters can be useful for flows such as [PKCE](https://www.oauth.com/oauth2-servers/pkce/authorization-request/)
	// to set the `code_challenge` and `code_challenge_method`.
	AuthEndpointQueryParams map[string]string `protobuf:"bytes,3,rep,name=auth_endpoint_query_params,json=authEndpointQueryParams,proto3" json:"auth_endpoint_query_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Where to redirect after successful auth, if Gloo can't determine the original URL.
	// Set this field to your publicly available app URL.
	AppUrl string `protobuf:"bytes,4,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	// A callback path relative to the app URL to be used for OAuth2 callbacks.
	// Do not use this path in the application itself.
	CallbackPath string `protobuf:"bytes,5,opt,name=callback_path,json=callbackPath,proto3" json:"callback_path,omitempty"`
	// Scopes to request for.
	Scopes []string `protobuf:"bytes,6,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// DEPRECATED: use userSessionConfig [userSession]
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
	Session *UserSession `protobuf:"bytes,7,opt,name=session,proto3" json:"session,omitempty"`
	// A path relative to the app URL to use for logging out from an OAuth2 session.
	// Do not use this path in the application itself.
	// If not provided, logout functionality is disabled.
	LogoutPath string `protobuf:"bytes,8,opt,name=logout_path,json=logoutPath,proto3" json:"logout_path,omitempty"`
	// Extra query parameters to apply to the Ext-Auth service's token request to the identity provider.
	// These parameters can be useful for flows such as [PKCE](https://www.oauth.com/oauth2-servers/pkce/authorization-request/)
	// to set the `code_verifier`.
	TokenEndpointQueryParams map[string]string `protobuf:"bytes,9,rep,name=token_endpoint_query_params,json=tokenEndpointQueryParams,proto3" json:"token_endpoint_query_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// URL to redirect to after logout.
	// Set this field to a publicly available URL. If not provided, this value defaults to the `app_url` value.
	AfterLogoutUrl string `protobuf:"bytes,10,opt,name=after_logout_url,json=afterLogoutUrl,proto3" json:"after_logout_url,omitempty"`
	// The URL of the provider authorization endpoint.
	AuthEndpoint string `protobuf:"bytes,11,opt,name=auth_endpoint,json=authEndpoint,proto3" json:"auth_endpoint,omitempty"`
	// The URL of the provider token endpoint.
	TokenEndpoint string `protobuf:"bytes,12,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	// The URL of the provider token revocation endpoint.
	// For more information, refer to https://www.rfc-editor.org/rfc/rfc7009.
	RevocationEndpoint string `protobuf:"bytes,13,opt,name=revocation_endpoint,json=revocationEndpoint,proto3" json:"revocation_endpoint,omitempty"`
	// Configuration related to the user session.
	UserSession   *ExtAuthConfig_UserSessionConfig `protobuf:"bytes,14,opt,name=user_session,json=userSession,proto3" json:"user_session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_PlainOAuth2Config) Reset() {
	*x = ExtAuthConfig_PlainOAuth2Config{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_PlainOAuth2Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_PlainOAuth2Config) ProtoMessage() {}

func (x *ExtAuthConfig_PlainOAuth2Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_PlainOAuth2Config.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_PlainOAuth2Config) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 7}
}

func (x *ExtAuthConfig_PlainOAuth2Config) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ExtAuthConfig_PlainOAuth2Config) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ExtAuthConfig_PlainOAuth2Config) GetAuthEndpointQueryParams() map[string]string {
	if x != nil {
		return x.AuthEndpointQueryParams
	}
	return nil
}

func (x *ExtAuthConfig_PlainOAuth2Config) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

func (x *ExtAuthConfig_PlainOAuth2Config) GetCallbackPath() string {
	if x != nil {
		return x.CallbackPath
	}
	return ""
}

func (x *ExtAuthConfig_PlainOAuth2Config) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
func (x *ExtAuthConfig_PlainOAuth2Config) GetSession() *UserSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ExtAuthConfig_PlainOAuth2Config) GetLogoutPath() string {
	if x != nil {
		return x.LogoutPath
	}
	return ""
}

func (x *ExtAuthConfig_PlainOAuth2Config) GetTokenEndpointQueryParams() map[string]string {
	if x != nil {
		return x.TokenEndpointQueryParams
	}
	return nil
}

func (x *ExtAuthConfig_PlainOAuth2Config) GetAfterLogoutUrl() string {
	if x != nil {
		return x.AfterLogoutUrl
	}
	return ""
}

func (x *ExtAuthConfig_PlainOAuth2Config) GetAuthEndpoint() string {
	if x != nil {
		return x.AuthEndpoint
	}
	return ""
}

func (x *ExtAuthConfig_PlainOAuth2Config) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *ExtAuthConfig_PlainOAuth2Config) GetRevocationEndpoint() string {
	if x != nil {
		return x.RevocationEndpoint
	}
	return ""
}

func (x *ExtAuthConfig_PlainOAuth2Config) GetUserSession() *ExtAuthConfig_UserSessionConfig {
	if x != nil {
		return x.UserSession
	}
	return nil
}

type ExtAuthConfig_OAuth2Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to OauthType:
	//
	//	*ExtAuthConfig_OAuth2Config_OidcAuthorizationCode
	//	*ExtAuthConfig_OAuth2Config_AccessTokenValidationConfig
	//	*ExtAuthConfig_OAuth2Config_Oauth2Config
	OauthType     isExtAuthConfig_OAuth2Config_OauthType `protobuf_oneof:"oauth_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_OAuth2Config) Reset() {
	*x = ExtAuthConfig_OAuth2Config{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_OAuth2Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_OAuth2Config) ProtoMessage() {}

func (x *ExtAuthConfig_OAuth2Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_OAuth2Config.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_OAuth2Config) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 8}
}

func (x *ExtAuthConfig_OAuth2Config) GetOauthType() isExtAuthConfig_OAuth2Config_OauthType {
	if x != nil {
		return x.OauthType
	}
	return nil
}

func (x *ExtAuthConfig_OAuth2Config) GetOidcAuthorizationCode() *ExtAuthConfig_OidcAuthorizationCodeConfig {
	if x != nil {
		if x, ok := x.OauthType.(*ExtAuthConfig_OAuth2Config_OidcAuthorizationCode); ok {
			return x.OidcAuthorizationCode
		}
	}
	return nil
}

func (x *ExtAuthConfig_OAuth2Config) GetAccessTokenValidationConfig() *ExtAuthConfig_AccessTokenValidationConfig {
	if x != nil {
		if x, ok := x.OauthType.(*ExtAuthConfig_OAuth2Config_AccessTokenValidationConfig); ok {
			return x.AccessTokenValidationConfig
		}
	}
	return nil
}

func (x *ExtAuthConfig_OAuth2Config) GetOauth2Config() *ExtAuthConfig_PlainOAuth2Config {
	if x != nil {
		if x, ok := x.OauthType.(*ExtAuthConfig_OAuth2Config_Oauth2Config); ok {
			return x.Oauth2Config
		}
	}
	return nil
}

type isExtAuthConfig_OAuth2Config_OauthType interface {
	isExtAuthConfig_OAuth2Config_OauthType()
}

type ExtAuthConfig_OAuth2Config_OidcAuthorizationCode struct {
	// provide issuer location and let gloo handle OIDC flow for you.
	// requests authorized by validating the contents of ID token.
	// can also authorize the access token if configured.
	OidcAuthorizationCode *ExtAuthConfig_OidcAuthorizationCodeConfig `protobuf:"bytes,1,opt,name=oidc_authorization_code,json=oidcAuthorizationCode,proto3,oneof"`
}

type ExtAuthConfig_OAuth2Config_AccessTokenValidationConfig struct {
	// provide the access token on the request and let gloo handle authorization.
	//
	// according to https://datatracker.ietf.org/doc/html/rfc6750 you can pass tokens through:
	// - form-encoded body parameter. recommended, more likely to appear. e.g.: Authorization: Bearer mytoken123
	// - URI query parameter e.g. access_token=mytoken123
	// - and (preferably) secure cookies
	AccessTokenValidationConfig *ExtAuthConfig_AccessTokenValidationConfig `protobuf:"bytes,3,opt,name=access_token_validation_config,json=accessTokenValidationConfig,proto3,oneof"`
}

type ExtAuthConfig_OAuth2Config_Oauth2Config struct {
	// Enterprise-Only: THIS FEATURE IS IN TECH PREVIEW. APIs are versioned as alpha and subject to change.
	// provide issuer location and let Gloo handle Oauth2 flow for you.
	// requests authorized by validating the contents of access token.
	// Prefer to use OIDC for better security.
	Oauth2Config *ExtAuthConfig_PlainOAuth2Config `protobuf:"bytes,4,opt,name=oauth2_config,json=oauth2Config,proto3,oneof"`
}

func (*ExtAuthConfig_OAuth2Config_OidcAuthorizationCode) isExtAuthConfig_OAuth2Config_OauthType() {}

func (*ExtAuthConfig_OAuth2Config_AccessTokenValidationConfig) isExtAuthConfig_OAuth2Config_OauthType() {
}

func (*ExtAuthConfig_OAuth2Config_Oauth2Config) isExtAuthConfig_OAuth2Config_OauthType() {}

// **NOTE: This configuration is not user-facing and will be auto generated**
type ExtAuthConfig_ApiKeyAuthConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A mapping of valid API keys to their associated metadata.
	// This map is automatically populated with the information from the relevant `ApiKey`s.
	// Currently this is only configured when using the k8s Secret storage backend
	ValidApiKeys map[string]*ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata `protobuf:"bytes,1,rep,name=valid_api_keys,json=validApiKeys,proto3" json:"valid_api_keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// (Optional) When receiving a request, the Gloo Edge Enterprise external auth server will look for an API key
	// in a header with this name. This field is optional; if not provided it defaults to `api-key`.
	HeaderName string `protobuf:"bytes,2,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	// Determines the key metadata that will be included as headers on the upstream request.
	// Each entry represents a header to add: the key is the name of the header, and the
	// value is the key that will be used to look up the data entry in the key metadata.
	HeadersFromKeyMetadata map[string]string `protobuf:"bytes,3,rep,name=headers_from_key_metadata,json=headersFromKeyMetadata,proto3" json:"headers_from_key_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Types that are valid to be assigned to StorageBackend:
	//
	//	*ExtAuthConfig_ApiKeyAuthConfig_K8SSecretApikeyStorage
	//	*ExtAuthConfig_ApiKeyAuthConfig_AerospikeApikeyStorage
	//	*ExtAuthConfig_ApiKeyAuthConfig_ServerDefaultApikeyStorage
	StorageBackend isExtAuthConfig_ApiKeyAuthConfig_StorageBackend `protobuf_oneof:"storage_backend"`
	// API key metadata may contain data is is invalid for a header, such as a newline. By default, this data will be validated
	// in the data plane and mitigated in a way that provides a consistent experience for the user and visibility for the operator.
	// This validation comes with a performance cost, and can be disabled by setting this field to `true`.
	SkipMetadataValidation bool `protobuf:"varint,6,opt,name=skip_metadata_validation,json=skipMetadataValidation,proto3" json:"skip_metadata_validation,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ExtAuthConfig_ApiKeyAuthConfig) Reset() {
	*x = ExtAuthConfig_ApiKeyAuthConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_ApiKeyAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_ApiKeyAuthConfig) ProtoMessage() {}

func (x *ExtAuthConfig_ApiKeyAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_ApiKeyAuthConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_ApiKeyAuthConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 9}
}

func (x *ExtAuthConfig_ApiKeyAuthConfig) GetValidApiKeys() map[string]*ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata {
	if x != nil {
		return x.ValidApiKeys
	}
	return nil
}

func (x *ExtAuthConfig_ApiKeyAuthConfig) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

func (x *ExtAuthConfig_ApiKeyAuthConfig) GetHeadersFromKeyMetadata() map[string]string {
	if x != nil {
		return x.HeadersFromKeyMetadata
	}
	return nil
}

func (x *ExtAuthConfig_ApiKeyAuthConfig) GetStorageBackend() isExtAuthConfig_ApiKeyAuthConfig_StorageBackend {
	if x != nil {
		return x.StorageBackend
	}
	return nil
}

func (x *ExtAuthConfig_ApiKeyAuthConfig) GetK8SSecretApikeyStorage() *K8SSecretApiKeyStorage {
	if x != nil {
		if x, ok := x.StorageBackend.(*ExtAuthConfig_ApiKeyAuthConfig_K8SSecretApikeyStorage); ok {
			return x.K8SSecretApikeyStorage
		}
	}
	return nil
}

func (x *ExtAuthConfig_ApiKeyAuthConfig) GetAerospikeApikeyStorage() *AerospikeApiKeyStorage {
	if x != nil {
		if x, ok := x.StorageBackend.(*ExtAuthConfig_ApiKeyAuthConfig_AerospikeApikeyStorage); ok {
			return x.AerospikeApikeyStorage
		}
	}
	return nil
}

func (x *ExtAuthConfig_ApiKeyAuthConfig) GetServerDefaultApikeyStorage() *ServerDefaultApiKeyStorage {
	if x != nil {
		if x, ok := x.StorageBackend.(*ExtAuthConfig_ApiKeyAuthConfig_ServerDefaultApikeyStorage); ok {
			return x.ServerDefaultApikeyStorage
		}
	}
	return nil
}

func (x *ExtAuthConfig_ApiKeyAuthConfig) GetSkipMetadataValidation() bool {
	if x != nil {
		return x.SkipMetadataValidation
	}
	return false
}

type isExtAuthConfig_ApiKeyAuthConfig_StorageBackend interface {
	isExtAuthConfig_ApiKeyAuthConfig_StorageBackend()
}

type ExtAuthConfig_ApiKeyAuthConfig_K8SSecretApikeyStorage struct {
	K8SSecretApikeyStorage *K8SSecretApiKeyStorage `protobuf:"bytes,4,opt,name=k8s_secret_apikey_storage,json=k8sSecretApikeyStorage,proto3,oneof"`
}

type ExtAuthConfig_ApiKeyAuthConfig_AerospikeApikeyStorage struct {
	// <b>Deprecated</b>: Support for Aerospike is deprecated and will be removed in a future release.
	// Use of this feature is not recommended.
	AerospikeApikeyStorage *AerospikeApiKeyStorage `protobuf:"bytes,5,opt,name=aerospike_apikey_storage,json=aerospikeApikeyStorage,proto3,oneof"`
}

type ExtAuthConfig_ApiKeyAuthConfig_ServerDefaultApikeyStorage struct {
	ServerDefaultApikeyStorage *ServerDefaultApiKeyStorage `protobuf:"bytes,7,opt,name=server_default_apikey_storage,json=serverDefaultApikeyStorage,proto3,oneof"`
}

func (*ExtAuthConfig_ApiKeyAuthConfig_K8SSecretApikeyStorage) isExtAuthConfig_ApiKeyAuthConfig_StorageBackend() {
}

func (*ExtAuthConfig_ApiKeyAuthConfig_AerospikeApikeyStorage) isExtAuthConfig_ApiKeyAuthConfig_StorageBackend() {
}

func (*ExtAuthConfig_ApiKeyAuthConfig_ServerDefaultApikeyStorage) isExtAuthConfig_ApiKeyAuthConfig_StorageBackend() {
}

type ExtAuthConfig_OpaAuthConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An optional modules (filename, module content) maps containing modules assist in the resolution of `query`.
	Modules map[string]string `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The query that determines the auth decision. The result of this query
	// must be either a boolean or an array with boolean as the first element. A boolean `true` value means that
	// the request will be authorized. Any other value, or error, means that the request will be denied.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// Additional Options for Opa Auth configuration.
	Options       *OpaAuthOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_OpaAuthConfig) Reset() {
	*x = ExtAuthConfig_OpaAuthConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_OpaAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_OpaAuthConfig) ProtoMessage() {}

func (x *ExtAuthConfig_OpaAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_OpaAuthConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_OpaAuthConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 10}
}

func (x *ExtAuthConfig_OpaAuthConfig) GetModules() map[string]string {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *ExtAuthConfig_OpaAuthConfig) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ExtAuthConfig_OpaAuthConfig) GetOptions() *OpaAuthOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Configure the Gloo external auth server to use your own Open Policy Agent (OPA) server.
// This way, you can use extra capabilities such as bundling or caching.
type ExtAuthConfig_OpaServerAuthConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The package from your Rego policy bundle used to query the OPA data API.
	Package string `protobuf:"bytes,1,opt,name=package,proto3" json:"package,omitempty"`
	// The rule in your Rego policy bundle used to query the OPA data API. Supports querying subfields with a `/`.
	// For more information, see the [OPA docs for the Data API](https://www.openpolicyagent.org/docs/latest/rest-api/#data-api).
	RuleName string `protobuf:"bytes,2,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	// The address of the OPA server to query, in the format `ADDRESS:PORT`.
	// For OPA servers within the cluster, the address is the pod’s service address,
	// such as `opa-svc.default.svc.cluster.local:8181`.
	// For OPA servers outside the cluster, the server must be accessible to the cluster,
	// such as through an ExternalService.
	// If you do not have your own OPA server instance, omit this field.
	// When the external auth service has the OPA server sidecar enabled,
	// the OPA server sidecar will be used instead, with an address such as `http://localhost:8181`.
	ServerAddr string `protobuf:"bytes,3,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty"`
	// Additional options for OPA Auth configuration.
	Options       *OpaAuthOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_OpaServerAuthConfig) Reset() {
	*x = ExtAuthConfig_OpaServerAuthConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_OpaServerAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_OpaServerAuthConfig) ProtoMessage() {}

func (x *ExtAuthConfig_OpaServerAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_OpaServerAuthConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_OpaServerAuthConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 11}
}

func (x *ExtAuthConfig_OpaServerAuthConfig) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *ExtAuthConfig_OpaServerAuthConfig) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *ExtAuthConfig_OpaServerAuthConfig) GetServerAddr() string {
	if x != nil {
		return x.ServerAddr
	}
	return ""
}

func (x *ExtAuthConfig_OpaServerAuthConfig) GetOptions() *OpaAuthOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ExtAuthConfig_LdapConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Address of the LDAP server to query. Should be in the form ADDRESS:PORT, e.g. `ldap.default.svc.cluster.local:389`.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Template to build user entry distinguished names (DN). This must contains a single occurrence of the "%s" placeholder.
	// When processing a request, Gloo will substitute the name of the user (extracted from the auth header) for the
	// placeholder and issue a search request with the resulting DN as baseDN (and 'base' search scope).
	// E.g. "uid=%s,ou=people,dc=solo,dc=io"
	UserDnTemplate string `protobuf:"bytes,2,opt,name=userDnTemplate,proto3" json:"userDnTemplate,omitempty"`
	// Case-insensitive name of the attribute that contains the names of the groups an entry is member of. Gloo will look
	// for attributes with the given name to determine which groups the user entry belongs to. Defaults to 'memberOf' if not provided.
	MembershipAttributeName string `protobuf:"bytes,3,opt,name=membershipAttributeName,proto3" json:"membershipAttributeName,omitempty"`
	// In order for the request to be authenticated, the membership attribute (e.g. *memberOf*) on the user entry must
	// contain at least of one of the group DNs specified via this option.
	// E.g. []string{ "cn=managers,ou=groups,dc=solo,dc=io", "cn=developers,ou=groups,dc=solo,dc=io" }
	AllowedGroups []string `protobuf:"bytes,4,rep,name=allowedGroups,proto3" json:"allowedGroups,omitempty"`
	// Use this property to tune the pool of connections to the LDAP server that Gloo maintains.
	Pool *Ldap_ConnectionPool `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`
	// Use to set a custom filter when searching a member. Defaults to "(uid=*)".
	SearchFilter string `protobuf:"bytes,6,opt,name=searchFilter,proto3" json:"searchFilter,omitempty"`
	// Disables group checking, regardless of the value for allowedGroups,
	// and disables validation for the membership attribute of the user entry.
	// Group checking is enabled by default.
	DisableGroupChecking bool `protobuf:"varint,7,opt,name=disable_group_checking,json=disableGroupChecking,proto3" json:"disable_group_checking,omitempty"`
	// Settings for using a separate service account for looking up group membership
	// To use this, you also need to configure credentials
	GroupLookupSettings *ExtAuthConfig_LdapServiceAccountConfig `protobuf:"bytes,8,opt,name=group_lookup_settings,json=groupLookupSettings,proto3" json:"group_lookup_settings,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExtAuthConfig_LdapConfig) Reset() {
	*x = ExtAuthConfig_LdapConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_LdapConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_LdapConfig) ProtoMessage() {}

func (x *ExtAuthConfig_LdapConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_LdapConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_LdapConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 12}
}

func (x *ExtAuthConfig_LdapConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ExtAuthConfig_LdapConfig) GetUserDnTemplate() string {
	if x != nil {
		return x.UserDnTemplate
	}
	return ""
}

func (x *ExtAuthConfig_LdapConfig) GetMembershipAttributeName() string {
	if x != nil {
		return x.MembershipAttributeName
	}
	return ""
}

func (x *ExtAuthConfig_LdapConfig) GetAllowedGroups() []string {
	if x != nil {
		return x.AllowedGroups
	}
	return nil
}

func (x *ExtAuthConfig_LdapConfig) GetPool() *Ldap_ConnectionPool {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *ExtAuthConfig_LdapConfig) GetSearchFilter() string {
	if x != nil {
		return x.SearchFilter
	}
	return ""
}

func (x *ExtAuthConfig_LdapConfig) GetDisableGroupChecking() bool {
	if x != nil {
		return x.DisableGroupChecking
	}
	return false
}

func (x *ExtAuthConfig_LdapConfig) GetGroupLookupSettings() *ExtAuthConfig_LdapServiceAccountConfig {
	if x != nil {
		return x.GroupLookupSettings
	}
	return nil
}

type ExtAuthConfig_LdapServiceAccountConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// username and password are taken from the secret during gloo-ee translation
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// If true, Gloo will use the service account to check group membership
	CheckGroupsWithServiceAccount bool `protobuf:"varint,3,opt,name=check_groups_with_service_account,json=checkGroupsWithServiceAccount,proto3" json:"check_groups_with_service_account,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *ExtAuthConfig_LdapServiceAccountConfig) Reset() {
	*x = ExtAuthConfig_LdapServiceAccountConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_LdapServiceAccountConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_LdapServiceAccountConfig) ProtoMessage() {}

func (x *ExtAuthConfig_LdapServiceAccountConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_LdapServiceAccountConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_LdapServiceAccountConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 13}
}

func (x *ExtAuthConfig_LdapServiceAccountConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ExtAuthConfig_LdapServiceAccountConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ExtAuthConfig_LdapServiceAccountConfig) GetCheckGroupsWithServiceAccount() bool {
	if x != nil {
		return x.CheckGroupsWithServiceAccount
	}
	return false
}

type ExtAuthConfig_HmacAuthConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to SecretStorage:
	//
	//	*ExtAuthConfig_HmacAuthConfig_SecretList
	SecretStorage isExtAuthConfig_HmacAuthConfig_SecretStorage `protobuf_oneof:"secret_storage"`
	// Algorithm to use to turn the request into a hashable string
	//
	// Types that are valid to be assigned to ImplementationType:
	//
	//	*ExtAuthConfig_HmacAuthConfig_ParametersInHeaders
	ImplementationType isExtAuthConfig_HmacAuthConfig_ImplementationType `protobuf_oneof:"implementation_type"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ExtAuthConfig_HmacAuthConfig) Reset() {
	*x = ExtAuthConfig_HmacAuthConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_HmacAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_HmacAuthConfig) ProtoMessage() {}

func (x *ExtAuthConfig_HmacAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_HmacAuthConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_HmacAuthConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 14}
}

func (x *ExtAuthConfig_HmacAuthConfig) GetSecretStorage() isExtAuthConfig_HmacAuthConfig_SecretStorage {
	if x != nil {
		return x.SecretStorage
	}
	return nil
}

func (x *ExtAuthConfig_HmacAuthConfig) GetSecretList() *ExtAuthConfig_InMemorySecretList {
	if x != nil {
		if x, ok := x.SecretStorage.(*ExtAuthConfig_HmacAuthConfig_SecretList); ok {
			return x.SecretList
		}
	}
	return nil
}

func (x *ExtAuthConfig_HmacAuthConfig) GetImplementationType() isExtAuthConfig_HmacAuthConfig_ImplementationType {
	if x != nil {
		return x.ImplementationType
	}
	return nil
}

func (x *ExtAuthConfig_HmacAuthConfig) GetParametersInHeaders() *HmacParametersInHeaders {
	if x != nil {
		if x, ok := x.ImplementationType.(*ExtAuthConfig_HmacAuthConfig_ParametersInHeaders); ok {
			return x.ParametersInHeaders
		}
	}
	return nil
}

type isExtAuthConfig_HmacAuthConfig_SecretStorage interface {
	isExtAuthConfig_HmacAuthConfig_SecretStorage()
}

type ExtAuthConfig_HmacAuthConfig_SecretList struct {
	SecretList *ExtAuthConfig_InMemorySecretList `protobuf:"bytes,1,opt,name=secret_list,json=secretList,proto3,oneof"`
}

func (*ExtAuthConfig_HmacAuthConfig_SecretList) isExtAuthConfig_HmacAuthConfig_SecretStorage() {}

type isExtAuthConfig_HmacAuthConfig_ImplementationType interface {
	isExtAuthConfig_HmacAuthConfig_ImplementationType()
}

type ExtAuthConfig_HmacAuthConfig_ParametersInHeaders struct {
	ParametersInHeaders *HmacParametersInHeaders `protobuf:"bytes,2,opt,name=parameters_in_headers,json=parametersInHeaders,proto3,oneof"`
}

func (*ExtAuthConfig_HmacAuthConfig_ParametersInHeaders) isExtAuthConfig_HmacAuthConfig_ImplementationType() {
}

// This API is only supported for Gloo Gateway Portal.
type ExtAuthConfig_PortalAuthConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The portal web server url used to validate credentials generated by the portal for the backing service(s).
	Url          string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	ApiKeyHeader string `protobuf:"bytes,2,opt,name=api_key_header,json=apiKeyHeader,proto3" json:"api_key_header,omitempty"`
	// Options to connect to redis. If not provided, data will be cached in memory.
	RedisOptions *RedisOptions `protobuf:"bytes,3,opt,name=redis_options,json=redisOptions,proto3" json:"redis_options,omitempty"`
	// The frequency at which the validated credential data should be refreshed by quering the portal web server. Defaults to 60s
	CacheDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=cache_duration,json=cacheDuration,proto3" json:"cache_duration,omitempty"`
	// Timeout for the portal web server to respond. Defaults to 200ms
	RequestTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExtAuthConfig_PortalAuthConfig) Reset() {
	*x = ExtAuthConfig_PortalAuthConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_PortalAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_PortalAuthConfig) ProtoMessage() {}

func (x *ExtAuthConfig_PortalAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_PortalAuthConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_PortalAuthConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 15}
}

func (x *ExtAuthConfig_PortalAuthConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ExtAuthConfig_PortalAuthConfig) GetApiKeyHeader() string {
	if x != nil {
		return x.ApiKeyHeader
	}
	return ""
}

func (x *ExtAuthConfig_PortalAuthConfig) GetRedisOptions() *RedisOptions {
	if x != nil {
		return x.RedisOptions
	}
	return nil
}

func (x *ExtAuthConfig_PortalAuthConfig) GetCacheDuration() *durationpb.Duration {
	if x != nil {
		return x.CacheDuration
	}
	return nil
}

func (x *ExtAuthConfig_PortalAuthConfig) GetRequestTimeout() *durationpb.Duration {
	if x != nil {
		return x.RequestTimeout
	}
	return nil
}

type ExtAuthConfig_InMemorySecretList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// list of username/password pairs taken from secrets during gloo-ee translation
	SecretList    map[string]string `protobuf:"bytes,1,rep,name=secret_list,json=secretList,proto3" json:"secret_list,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_InMemorySecretList) Reset() {
	*x = ExtAuthConfig_InMemorySecretList{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_InMemorySecretList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_InMemorySecretList) ProtoMessage() {}

func (x *ExtAuthConfig_InMemorySecretList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_InMemorySecretList.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_InMemorySecretList) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 16}
}

func (x *ExtAuthConfig_InMemorySecretList) GetSecretList() map[string]string {
	if x != nil {
		return x.SecretList
	}
	return nil
}

type ExtAuthConfig_Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// optional: used when defining complex boolean logic, if `boolean_expr` is defined below. Also used
	// in logging. If omitted, an automatically generated name will be used (e.g. config_0, of the
	// pattern 'config_$INDEX_IN_CHAIN'). In the case of plugin auth, this field is ignored in favor of
	// the name assigned on the plugin config itself.
	Name *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to AuthConfig:
	//
	//	*ExtAuthConfig_Config_Oauth
	//	*ExtAuthConfig_Config_Oauth2
	//	*ExtAuthConfig_Config_BasicAuth
	//	*ExtAuthConfig_Config_BasicAuthInternal
	//	*ExtAuthConfig_Config_ApiKeyAuth
	//	*ExtAuthConfig_Config_PluginAuth
	//	*ExtAuthConfig_Config_OpaAuth
	//	*ExtAuthConfig_Config_Ldap
	//	*ExtAuthConfig_Config_LdapInternal
	//	*ExtAuthConfig_Config_Jwt
	//	*ExtAuthConfig_Config_PassThroughAuth
	//	*ExtAuthConfig_Config_HmacAuth
	//	*ExtAuthConfig_Config_OpaServerAuth
	//	*ExtAuthConfig_Config_PortalAuth
	AuthConfig    isExtAuthConfig_Config_AuthConfig `protobuf_oneof:"auth_config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_Config) Reset() {
	*x = ExtAuthConfig_Config{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_Config) ProtoMessage() {}

func (x *ExtAuthConfig_Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_Config.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_Config) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 17}
}

func (x *ExtAuthConfig_Config) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ExtAuthConfig_Config) GetAuthConfig() isExtAuthConfig_Config_AuthConfig {
	if x != nil {
		return x.AuthConfig
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
func (x *ExtAuthConfig_Config) GetOauth() *ExtAuthConfig_OAuthConfig {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_Oauth); ok {
			return x.Oauth
		}
	}
	return nil
}

func (x *ExtAuthConfig_Config) GetOauth2() *ExtAuthConfig_OAuth2Config {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_Oauth2); ok {
			return x.Oauth2
		}
	}
	return nil
}

func (x *ExtAuthConfig_Config) GetBasicAuth() *BasicAuth {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_BasicAuth); ok {
			return x.BasicAuth
		}
	}
	return nil
}

func (x *ExtAuthConfig_Config) GetBasicAuthInternal() *ExtAuthConfig_BasicAuthInternal {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_BasicAuthInternal); ok {
			return x.BasicAuthInternal
		}
	}
	return nil
}

func (x *ExtAuthConfig_Config) GetApiKeyAuth() *ExtAuthConfig_ApiKeyAuthConfig {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_ApiKeyAuth); ok {
			return x.ApiKeyAuth
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
func (x *ExtAuthConfig_Config) GetPluginAuth() *AuthPlugin {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_PluginAuth); ok {
			return x.PluginAuth
		}
	}
	return nil
}

func (x *ExtAuthConfig_Config) GetOpaAuth() *ExtAuthConfig_OpaAuthConfig {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_OpaAuth); ok {
			return x.OpaAuth
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
func (x *ExtAuthConfig_Config) GetLdap() *Ldap {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_Ldap); ok {
			return x.Ldap
		}
	}
	return nil
}

func (x *ExtAuthConfig_Config) GetLdapInternal() *ExtAuthConfig_LdapConfig {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_LdapInternal); ok {
			return x.LdapInternal
		}
	}
	return nil
}

func (x *ExtAuthConfig_Config) GetJwt() *emptypb.Empty {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_Jwt); ok {
			return x.Jwt
		}
	}
	return nil
}

func (x *ExtAuthConfig_Config) GetPassThroughAuth() *PassThroughAuth {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_PassThroughAuth); ok {
			return x.PassThroughAuth
		}
	}
	return nil
}

func (x *ExtAuthConfig_Config) GetHmacAuth() *ExtAuthConfig_HmacAuthConfig {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_HmacAuth); ok {
			return x.HmacAuth
		}
	}
	return nil
}

func (x *ExtAuthConfig_Config) GetOpaServerAuth() *ExtAuthConfig_OpaServerAuthConfig {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_OpaServerAuth); ok {
			return x.OpaServerAuth
		}
	}
	return nil
}

func (x *ExtAuthConfig_Config) GetPortalAuth() *ExtAuthConfig_PortalAuthConfig {
	if x != nil {
		if x, ok := x.AuthConfig.(*ExtAuthConfig_Config_PortalAuth); ok {
			return x.PortalAuth
		}
	}
	return nil
}

type isExtAuthConfig_Config_AuthConfig interface {
	isExtAuthConfig_Config_AuthConfig()
}

type ExtAuthConfig_Config_Oauth struct {
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
	Oauth *ExtAuthConfig_OAuthConfig `protobuf:"bytes,3,opt,name=oauth,proto3,oneof"`
}

type ExtAuthConfig_Config_Oauth2 struct {
	Oauth2 *ExtAuthConfig_OAuth2Config `protobuf:"bytes,9,opt,name=oauth2,proto3,oneof"`
}

type ExtAuthConfig_Config_BasicAuth struct {
	BasicAuth *BasicAuth `protobuf:"bytes,4,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}

type ExtAuthConfig_Config_BasicAuthInternal struct {
	BasicAuthInternal *ExtAuthConfig_BasicAuthInternal `protobuf:"bytes,17,opt,name=basic_auth_internal,json=basicAuthInternal,proto3,oneof"`
}

type ExtAuthConfig_Config_ApiKeyAuth struct {
	ApiKeyAuth *ExtAuthConfig_ApiKeyAuthConfig `protobuf:"bytes,5,opt,name=api_key_auth,json=apiKeyAuth,proto3,oneof"`
}

type ExtAuthConfig_Config_PluginAuth struct {
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
	PluginAuth *AuthPlugin `protobuf:"bytes,6,opt,name=plugin_auth,json=pluginAuth,proto3,oneof"`
}

type ExtAuthConfig_Config_OpaAuth struct {
	OpaAuth *ExtAuthConfig_OpaAuthConfig `protobuf:"bytes,7,opt,name=opa_auth,json=opaAuth,proto3,oneof"`
}

type ExtAuthConfig_Config_Ldap struct {
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto.
	Ldap *Ldap `protobuf:"bytes,8,opt,name=ldap,proto3,oneof"`
}

type ExtAuthConfig_Config_LdapInternal struct {
	// Used for LDAP configurations that need service account credentials saved in a secret.
	LdapInternal *ExtAuthConfig_LdapConfig `protobuf:"bytes,14,opt,name=ldap_internal,json=ldapInternal,proto3,oneof"`
}

type ExtAuthConfig_Config_Jwt struct {
	// This is a "dummy" extauth service which can be used to support multiple auth mechanisms with JWT authentication.
	// If Jwt authentication is to be used in the [boolean expression](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto.sk/#authconfig) in an AuthConfig, you can use this auth config type to include Jwt as an Auth config.
	// In addition, `allow_missing_or_failed_jwt` must be set on the Virtual Host or Route that uses JWT auth or else the JWT filter will short circuit this behaviour.
	Jwt *emptypb.Empty `protobuf:"bytes,12,opt,name=jwt,proto3,oneof"`
}

type ExtAuthConfig_Config_PassThroughAuth struct {
	PassThroughAuth *PassThroughAuth `protobuf:"bytes,13,opt,name=pass_through_auth,json=passThroughAuth,proto3,oneof"`
}

type ExtAuthConfig_Config_HmacAuth struct {
	HmacAuth *ExtAuthConfig_HmacAuthConfig `protobuf:"bytes,15,opt,name=hmac_auth,json=hmacAuth,proto3,oneof"`
}

type ExtAuthConfig_Config_OpaServerAuth struct {
	OpaServerAuth *ExtAuthConfig_OpaServerAuthConfig `protobuf:"bytes,16,opt,name=opa_server_auth,json=opaServerAuth,proto3,oneof"`
}

type ExtAuthConfig_Config_PortalAuth struct {
	PortalAuth *ExtAuthConfig_PortalAuthConfig `protobuf:"bytes,18,opt,name=portal_auth,json=portalAuth,proto3,oneof"`
}

func (*ExtAuthConfig_Config_Oauth) isExtAuthConfig_Config_AuthConfig() {}

func (*ExtAuthConfig_Config_Oauth2) isExtAuthConfig_Config_AuthConfig() {}

func (*ExtAuthConfig_Config_BasicAuth) isExtAuthConfig_Config_AuthConfig() {}

func (*ExtAuthConfig_Config_BasicAuthInternal) isExtAuthConfig_Config_AuthConfig() {}

func (*ExtAuthConfig_Config_ApiKeyAuth) isExtAuthConfig_Config_AuthConfig() {}

func (*ExtAuthConfig_Config_PluginAuth) isExtAuthConfig_Config_AuthConfig() {}

func (*ExtAuthConfig_Config_OpaAuth) isExtAuthConfig_Config_AuthConfig() {}

func (*ExtAuthConfig_Config_Ldap) isExtAuthConfig_Config_AuthConfig() {}

func (*ExtAuthConfig_Config_LdapInternal) isExtAuthConfig_Config_AuthConfig() {}

func (*ExtAuthConfig_Config_Jwt) isExtAuthConfig_Config_AuthConfig() {}

func (*ExtAuthConfig_Config_PassThroughAuth) isExtAuthConfig_Config_AuthConfig() {}

func (*ExtAuthConfig_Config_HmacAuth) isExtAuthConfig_Config_AuthConfig() {}

func (*ExtAuthConfig_Config_OpaServerAuth) isExtAuthConfig_Config_AuthConfig() {}

func (*ExtAuthConfig_Config_PortalAuth) isExtAuthConfig_Config_AuthConfig() {}

// Selection of hashing algorithms to use for password hashing.
type ExtAuthConfig_BasicAuthInternal_EncryptionType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Algorithm:
	//
	//	*ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr_
	//	*ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1_
	Algorithm     isExtAuthConfig_BasicAuthInternal_EncryptionType_Algorithm `protobuf_oneof:"algorithm"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_BasicAuthInternal_EncryptionType) Reset() {
	*x = ExtAuthConfig_BasicAuthInternal_EncryptionType{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_BasicAuthInternal_EncryptionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_BasicAuthInternal_EncryptionType) ProtoMessage() {}

func (x *ExtAuthConfig_BasicAuthInternal_EncryptionType) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_BasicAuthInternal_EncryptionType.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_BasicAuthInternal_EncryptionType) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *ExtAuthConfig_BasicAuthInternal_EncryptionType) GetAlgorithm() isExtAuthConfig_BasicAuthInternal_EncryptionType_Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

func (x *ExtAuthConfig_BasicAuthInternal_EncryptionType) GetApr() *ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr {
	if x != nil {
		if x, ok := x.Algorithm.(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr_); ok {
			return x.Apr
		}
	}
	return nil
}

func (x *ExtAuthConfig_BasicAuthInternal_EncryptionType) GetSha1() *ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1 {
	if x != nil {
		if x, ok := x.Algorithm.(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1_); ok {
			return x.Sha1
		}
	}
	return nil
}

type isExtAuthConfig_BasicAuthInternal_EncryptionType_Algorithm interface {
	isExtAuthConfig_BasicAuthInternal_EncryptionType_Algorithm()
}

type ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr_ struct {
	Apr *ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr `protobuf:"bytes,1,opt,name=apr,proto3,oneof"`
}

type ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1_ struct {
	Sha1 *ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1 `protobuf:"bytes,2,opt,name=sha1,proto3,oneof"`
}

func (*ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr_) isExtAuthConfig_BasicAuthInternal_EncryptionType_Algorithm() {
}

func (*ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1_) isExtAuthConfig_BasicAuthInternal_EncryptionType_Algorithm() {
}

// To authenticate a user we need the salt and hashed password. The username is expected to be the key in a map of Users.
type ExtAuthConfig_BasicAuthInternal_User struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Salt           string                 `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	HashedPassword string                 `protobuf:"bytes,2,opt,name=hashed_password,json=hashedPassword,proto3" json:"hashed_password,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExtAuthConfig_BasicAuthInternal_User) Reset() {
	*x = ExtAuthConfig_BasicAuthInternal_User{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_BasicAuthInternal_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_BasicAuthInternal_User) ProtoMessage() {}

func (x *ExtAuthConfig_BasicAuthInternal_User) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_BasicAuthInternal_User.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_BasicAuthInternal_User) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *ExtAuthConfig_BasicAuthInternal_User) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *ExtAuthConfig_BasicAuthInternal_User) GetHashedPassword() string {
	if x != nil {
		return x.HashedPassword
	}
	return ""
}

// Map of valid usernames to stored credentials
type ExtAuthConfig_BasicAuthInternal_UserList struct {
	state         protoimpl.MessageState                           `protogen:"open.v1"`
	Users         map[string]*ExtAuthConfig_BasicAuthInternal_User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_BasicAuthInternal_UserList) Reset() {
	*x = ExtAuthConfig_BasicAuthInternal_UserList{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_BasicAuthInternal_UserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_BasicAuthInternal_UserList) ProtoMessage() {}

func (x *ExtAuthConfig_BasicAuthInternal_UserList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_BasicAuthInternal_UserList.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_BasicAuthInternal_UserList) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 2, 2}
}

func (x *ExtAuthConfig_BasicAuthInternal_UserList) GetUsers() map[string]*ExtAuthConfig_BasicAuthInternal_User {
	if x != nil {
		return x.Users
	}
	return nil
}

type ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1) Reset() {
	*x = ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1) ProtoMessage() {}

func (x *ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 2, 0, 0}
}

type ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr) Reset() {
	*x = ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr) ProtoMessage() {}

func (x *ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 2, 0, 1}
}

type ExtAuthConfig_UserSessionConfig_CipherConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// to enable the cipher encryption, the key has to be present.
	// Note that the key has to be found and 32 bytes in length for the authconfig to not be rejected.
	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_UserSessionConfig_CipherConfig) Reset() {
	*x = ExtAuthConfig_UserSessionConfig_CipherConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_UserSessionConfig_CipherConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_UserSessionConfig_CipherConfig) ProtoMessage() {}

func (x *ExtAuthConfig_UserSessionConfig_CipherConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_UserSessionConfig_CipherConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_UserSessionConfig_CipherConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *ExtAuthConfig_UserSessionConfig_CipherConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Fields for private key JWT Client Authentication.
type ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Signing key for the JWT used for client authentication
	SigningKey string `protobuf:"bytes,1,opt,name=signing_key,json=signingKey,proto3" json:"signing_key,omitempty"`
	// Amount of time for which the JWT is valid. No maximum is enforced, but different IDPs may impose limits on how far in
	// the future the expiration time is allowed to be. Defaults in 5s in front end, but expected to be set explicitly here
	ValidFor      *durationpb.Duration `protobuf:"bytes,2,opt,name=valid_for,json=validFor,proto3" json:"valid_for,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig) Reset() {
	*x = ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig) ProtoMessage() {}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 5, 2}
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig) GetSigningKey() string {
	if x != nil {
		return x.SigningKey
	}
	return ""
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig) GetValidFor() *durationpb.Duration {
	if x != nil {
		return x.ValidFor
	}
	return nil
}

// Optional: Map a single claim from an OAuth2 access token to a header in the request to the upstream destination.
type ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of claims to be mapped from the JWT token received by ext-auth-service to an upstream destination
	ClaimsToHeaders []*ExtAuthConfig_ClaimToHeader `protobuf:"bytes,1,rep,name=claims_to_headers,json=claimsToHeaders,proto3" json:"claims_to_headers,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken) Reset() {
	*x = ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken) ProtoMessage() {}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 5, 3}
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken) GetClaimsToHeaders() []*ExtAuthConfig_ClaimToHeader {
	if x != nil {
		return x.ClaimsToHeaders
	}
	return nil
}

// Optional: Map a single claim from an OIDC identity token to a header in the request to the upstream destination.
type ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A list of claims to be mapped from the JWT token received by ext-auth-service to an upstream destination
	ClaimsToHeaders []*ExtAuthConfig_ClaimToHeader `protobuf:"bytes,1,rep,name=claims_to_headers,json=claimsToHeaders,proto3" json:"claims_to_headers,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken) Reset() {
	*x = ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken) ProtoMessage() {}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 5, 4}
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken) GetClaimsToHeaders() []*ExtAuthConfig_ClaimToHeader {
	if x != nil {
		return x.ClaimsToHeaders
	}
	return nil
}

// No-op, represents default OIDC behavior
type ExtAuthConfig_OidcAuthorizationCodeConfig_Default struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_Default) Reset() {
	*x = ExtAuthConfig_OidcAuthorizationCodeConfig_Default{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_Default) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_OidcAuthorizationCodeConfig_Default) ProtoMessage() {}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_Default) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_OidcAuthorizationCodeConfig_Default.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_OidcAuthorizationCodeConfig_Default) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 5, 5}
}

// For the moment this is just path, but we may want to configure things like iss/sid validation
type ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to use for front channel logout. Should not be the same as logout or callback paths.
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout) Reset() {
	*x = ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout) ProtoMessage() {}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 5, 6}
}

func (x *ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Defines how JSON Web Token (JWT) access tokens are validated.
//
// Tokens are validated using a JSON Web Key Set (as defined in
// [Section 5 of RFC7517](https://datatracker.ietf.org/doc/html/rfc7517#section-5)),
// which can be either inlined in the configuration or fetched from a remote location via HTTP.
// Any keys in the JWKS that are not intended for signature verification (i.e. whose
// ["use" parameter](https://datatracker.ietf.org/doc/html/rfc7517#section-4.2) is not "sig")
// will be ignored by the system, as will keys that do not specify a
// ["kid" (Key ID) parameter](https://datatracker.ietf.org/doc/html/rfc7517#section-4.2).
//
// The JWT to be validated must define non-empty "kid" and "alg" headers. The "kid" header
// determines which key in the JWKS will be used to verify the signature of the token;
// if no matching key is found, the token will be rejected.
//
// If present, the server will verify the "exp", "iat", and "nbf" standard JWT claims.
// Validation of the "iss" claim and of token scopes can be configured as well.
// If the JWT has been successfully validated, its set of claims will be added to the
// `AuthorizationRequest` state under the "jwtAccessToken" key.
type ExtAuthConfig_AccessTokenValidationConfig_JwtValidation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to JwksSourceSpecifier:
	//
	//	*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks_
	//	*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks_
	JwksSourceSpecifier isExtAuthConfig_AccessTokenValidationConfig_JwtValidation_JwksSourceSpecifier `protobuf_oneof:"jwks_source_specifier"`
	// Allow only tokens that have been issued by this principal (i.e. whose "iss" claim matches this value).
	// If empty, issuer validation will be skipped.
	Issuer        string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation) Reset() {
	*x = ExtAuthConfig_AccessTokenValidationConfig_JwtValidation{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation) ProtoMessage() {}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_AccessTokenValidationConfig_JwtValidation.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation) GetJwksSourceSpecifier() isExtAuthConfig_AccessTokenValidationConfig_JwtValidation_JwksSourceSpecifier {
	if x != nil {
		return x.JwksSourceSpecifier
	}
	return nil
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation) GetRemoteJwks() *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks {
	if x != nil {
		if x, ok := x.JwksSourceSpecifier.(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks_); ok {
			return x.RemoteJwks
		}
	}
	return nil
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation) GetLocalJwks() *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks {
	if x != nil {
		if x, ok := x.JwksSourceSpecifier.(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks_); ok {
			return x.LocalJwks
		}
	}
	return nil
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

type isExtAuthConfig_AccessTokenValidationConfig_JwtValidation_JwksSourceSpecifier interface {
	isExtAuthConfig_AccessTokenValidationConfig_JwtValidation_JwksSourceSpecifier()
}

type ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks_ struct {
	// Fetches the JWKS from a remote location.
	RemoteJwks *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks `protobuf:"bytes,1,opt,name=remote_jwks,json=remoteJwks,proto3,oneof"`
}

type ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks_ struct {
	// Loads the JWKS from a local data source.
	LocalJwks *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks `protobuf:"bytes,2,opt,name=local_jwks,json=localJwks,proto3,oneof"`
}

func (*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks_) isExtAuthConfig_AccessTokenValidationConfig_JwtValidation_JwksSourceSpecifier() {
}

func (*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks_) isExtAuthConfig_AccessTokenValidationConfig_JwtValidation_JwksSourceSpecifier() {
}

// Defines how (opaque) access tokens, received from the oauth authorization endpoint, are validated
// [OAuth2.0 Token Introspection](https://datatracker.ietf.org/doc/html/rfc7662)
//
// If the token introspection url requires client authentication, both the client_id and client_secret
// are required. If only one is provided, the config will be rejected.
// These values will be encoded in a basic auth header in order to authenticate the client.
type ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The URL for the [OAuth2.0 Token Introspection](https://datatracker.ietf.org/doc/html/rfc7662) endpoint.
	// If provided, the (opaque) access token provided or received from the oauth authorization endpoint
	// will be validated against this endpoint, or locally cached responses for this access token.
	IntrospectionUrl string `protobuf:"bytes,1,opt,name=introspection_url,json=introspectionUrl,proto3" json:"introspection_url,omitempty"`
	// Your client id as registered with the issuer.
	// Optional: Use if the token introspection url requires client authentication.
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Your client secret as registered with the issuer.
	// Optional: Use if the token introspection url requires client authentication.
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// The name of the [introspection response](https://datatracker.ietf.org/doc/html/rfc7662#section-2.2)
	// attribute that contains the ID of the resource owner (e.g. `sub`, `username`).
	// If specified, the external auth server will use the value of the attribute as the identifier of the
	// authenticated user and add it to the request headers and/or dynamic metadata (depending on how the
	// server is configured); if the field is set and the attribute cannot be found, the request will be denied.
	// This field is optional and by default the server will not try to derive the user ID.
	UserIdAttributeName string `protobuf:"bytes,4,opt,name=user_id_attribute_name,json=userIdAttributeName,proto3" json:"user_id_attribute_name,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation) Reset() {
	*x = ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation) ProtoMessage() {}

func (x *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 6, 1}
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation) GetIntrospectionUrl() string {
	if x != nil {
		return x.IntrospectionUrl
	}
	return ""
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation) GetUserIdAttributeName() string {
	if x != nil {
		return x.UserIdAttributeName
	}
	return ""
}

type ExtAuthConfig_AccessTokenValidationConfig_ScopeList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scope         []string               `protobuf:"bytes,1,rep,name=scope,proto3" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_ScopeList) Reset() {
	*x = ExtAuthConfig_AccessTokenValidationConfig_ScopeList{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_ScopeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_AccessTokenValidationConfig_ScopeList) ProtoMessage() {}

func (x *ExtAuthConfig_AccessTokenValidationConfig_ScopeList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_AccessTokenValidationConfig_ScopeList.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_AccessTokenValidationConfig_ScopeList) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 6, 2}
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_ScopeList) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

// No-op, represents default OIDC behavior
type ExtAuthConfig_AccessTokenValidationConfig_Default struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_Default) Reset() {
	*x = ExtAuthConfig_AccessTokenValidationConfig_Default{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_Default) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_AccessTokenValidationConfig_Default) ProtoMessage() {}

func (x *ExtAuthConfig_AccessTokenValidationConfig_Default) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_AccessTokenValidationConfig_Default.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_AccessTokenValidationConfig_Default) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 6, 4}
}

// Specifies how to fetch JWKS from remote and how to cache it.
type ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The HTTP URI to fetch the JWKS.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The frequency at which the JWKS should be refreshed.
	// If not specified, the default value is 5 minutes.
	RefreshInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks) Reset() {
	*x = ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks) ProtoMessage() {}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 6, 0, 0}
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks) GetRefreshInterval() *durationpb.Duration {
	if x != nil {
		return x.RefreshInterval
	}
	return nil
}

// Represents a locally available JWKS.
type ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// JWKS is embedded as a string.
	InlineString  string `protobuf:"bytes,1,opt,name=inline_string,json=inlineString,proto3" json:"inline_string,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks) Reset() {
	*x = ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks) ProtoMessage() {}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 6, 0, 1}
}

func (x *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks) GetInlineString() string {
	if x != nil {
		return x.InlineString
	}
	return ""
}

type ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The user is mapped as the name of `Secret` which contains the `ApiKey`
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The metadata present on the `ApiKey`.
	Metadata      map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata) Reset() {
	*x = ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata) ProtoMessage() {}

func (x *ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata.ProtoReflect.Descriptor instead.
func (*ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP(), []int{0, 9, 0}
}

func (x *ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDesc = "" +
	"\n" +
	"agithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto\x12\x17enterprise.gloo.solo.io\x1a,github.com/solo-io/solo-kit/api/v1/ref.proto\x1a\x12extproto/ext.proto\x1a1github.com/solo-io/solo-kit/api/v1/metadata.proto\x1a/github.com/solo-io/solo-kit/api/v1/status.proto\x1a1github.com/solo-io/solo-kit/api/v1/solo-kit.proto\x1aEgithub.com/solo-io/solo-kit/api/external/envoy/api/v2/discovery.proto\x1aXgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1bgoogle/protobuf/empty.proto\"\x95c\n" +
	"\rExtAuthConfig\x12/\n" +
	"\x14auth_config_ref_name\x18\x01 \x01(\tR\x11authConfigRefName\x12G\n" +
	"\aconfigs\x18\b \x03(\v2-.enterprise.gloo.solo.io.ExtAuthConfig.ConfigR\aconfigs\x12?\n" +
	"\fboolean_expr\x18\n" +
	" \x01(\v2\x1c.google.protobuf.StringValueR\vbooleanExpr\x12(\n" +
	"\x10fail_on_redirect\x18\v \x01(\bR\x0efailOnRedirect\x1a\xc9\x01\n" +
	"\x05Azure\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12\x1b\n" +
	"\ttenant_id\x18\x02 \x01(\tR\btenantId\x12)\n" +
	"\rclient_secret\x18\x03 \x01(\tB\x04\xc8\xf5\x04\x01R\fclientSecret\x12[\n" +
	"\x16claims_caching_options\x18\x04 \x01(\v2%.enterprise.gloo.solo.io.RedisOptionsR\x14claimsCachingOptions\x1aU\n" +
	"\rClaimToHeader\x12\x14\n" +
	"\x05claim\x18\x01 \x01(\tR\x05claim\x12\x16\n" +
	"\x06header\x18\x02 \x01(\tR\x06header\x12\x16\n" +
	"\x06append\x18\x03 \x01(\bR\x06append\x1a\xa6\x06\n" +
	"\x11BasicAuthInternal\x12\x14\n" +
	"\x05realm\x18\x01 \x01(\tR\x05realm\x12g\n" +
	"\n" +
	"encryption\x18\x02 \x01(\v2G.enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.EncryptionTypeR\n" +
	"encryption\x12`\n" +
	"\tuser_list\x18\x03 \x01(\v2A.enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.UserListH\x00R\buserList\x1a\xf1\x01\n" +
	"\x0eEncryptionType\x12_\n" +
	"\x03apr\x18\x01 \x01(\v2K.enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.EncryptionType.AprH\x00R\x03apr\x12b\n" +
	"\x04sha1\x18\x02 \x01(\v2L.enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.EncryptionType.Sha1H\x00R\x04sha1\x1a\x06\n" +
	"\x04Sha1\x1a\x05\n" +
	"\x03AprB\v\n" +
	"\talgorithm\x1aC\n" +
	"\x04User\x12\x12\n" +
	"\x04salt\x18\x01 \x01(\tR\x04salt\x12'\n" +
	"\x0fhashed_password\x18\x02 \x01(\tR\x0ehashedPassword\x1a\xe7\x01\n" +
	"\bUserList\x12b\n" +
	"\x05users\x18\x01 \x03(\v2L.enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.UserList.UsersEntryR\x05users\x1aw\n" +
	"\n" +
	"UsersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12S\n" +
	"\x05value\x18\x02 \x01(\v2=.enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.UserR\x05value:\x028\x01B\r\n" +
	"\vuser_source\x1a\xbf\x03\n" +
	"\vOAuthConfig\x12\x1f\n" +
	"\tclient_id\x18\x01 \x01(\tB\x02\x18\x01R\bclientId\x12+\n" +
	"\rclient_secret\x18\x02 \x01(\tB\x06\xc8\xf5\x04\x01\x18\x01R\fclientSecret\x12!\n" +
	"\n" +
	"issuer_url\x18\x03 \x01(\tB\x02\x18\x01R\tissuerUrl\x12\x90\x01\n" +
	"\x1aauth_endpoint_query_params\x18\a \x03(\v2O.enterprise.gloo.solo.io.ExtAuthConfig.OAuthConfig.AuthEndpointQueryParamsEntryB\x02\x18\x01R\x17authEndpointQueryParams\x12\x1b\n" +
	"\aapp_url\x18\x04 \x01(\tB\x02\x18\x01R\x06appUrl\x12'\n" +
	"\rcallback_path\x18\x05 \x01(\tB\x02\x18\x01R\fcallbackPath\x12\x1a\n" +
	"\x06scopes\x18\x06 \x03(\tB\x02\x18\x01R\x06scopes\x1aJ\n" +
	"\x1cAuthEndpointQueryParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xdb\x03\n" +
	"\x11UserSessionConfig\x121\n" +
	"\x15fail_on_fetch_failure\x18\x01 \x01(\bR\x12failOnFetchFailure\x12Y\n" +
	"\x0ecookie_options\x18\x02 \x01(\v22.enterprise.gloo.solo.io.UserSession.CookieOptionsR\rcookieOptions\x12N\n" +
	"\x06cookie\x18\x03 \x01(\v24.enterprise.gloo.solo.io.UserSession.InternalSessionH\x00R\x06cookie\x12I\n" +
	"\x05redis\x18\x04 \x01(\v21.enterprise.gloo.solo.io.UserSession.RedisSessionH\x00R\x05redis\x12j\n" +
	"\rcipher_config\x18\x05 \x01(\v2E.enterprise.gloo.solo.io.ExtAuthConfig.UserSessionConfig.CipherConfigR\fcipherConfig\x1a&\n" +
	"\fCipherConfig\x12\x16\n" +
	"\x03key\x18\x01 \x01(\tB\x04\xc8\xf5\x04\x01R\x03keyB\t\n" +
	"\asession\x1a\xb9\x17\n" +
	"\x1bOidcAuthorizationCodeConfig\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12)\n" +
	"\rclient_secret\x18\x02 \x01(\tB\x04\xc8\xf5\x04\x01R\fclientSecret\x12\x1d\n" +
	"\n" +
	"issuer_url\x18\x03 \x01(\tR\tissuerUrl\x12\x9c\x01\n" +
	"\x1aauth_endpoint_query_params\x18\x04 \x03(\v2_.enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.AuthEndpointQueryParamsEntryR\x17authEndpointQueryParams\x12\x9f\x01\n" +
	"\x1btoken_endpoint_query_params\x18\x0e \x03(\v2`.enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.TokenEndpointQueryParamsEntryR\x18tokenEndpointQueryParams\x12\x17\n" +
	"\aapp_url\x18\x05 \x01(\tR\x06appUrl\x12#\n" +
	"\rcallback_path\x18\x06 \x01(\tR\fcallbackPath\x12\x1f\n" +
	"\vlogout_path\x18\t \x01(\tR\n" +
	"logoutPath\x12(\n" +
	"\x10after_logout_url\x18\x0f \x01(\tR\x0eafterLogoutUrl\x12\x16\n" +
	"\x06scopes\x18\a \x03(\tR\x06scopes\x12B\n" +
	"\asession\x18\b \x01(\v2$.enterprise.gloo.solo.io.UserSessionB\x02\x18\x01R\asession\x12F\n" +
	"\aheaders\x18\n" +
	" \x01(\v2,.enterprise.gloo.solo.io.HeaderConfigurationR\aheaders\x12Y\n" +
	"\x12discovery_override\x18\v \x01(\v2*.enterprise.gloo.solo.io.DiscoveryOverrideR\x11discoveryOverride\x12Q\n" +
	"\x17discovery_poll_interval\x18\f \x01(\v2\x19.google.protobuf.DurationR\x15discoveryPollInterval\x12r\n" +
	"\x19jwks_cache_refresh_policy\x18\r \x01(\v27.enterprise.gloo.solo.io.JwksOnDemandCacheRefreshPolicyR\x16jwksCacheRefreshPolicy\x123\n" +
	"\x16session_id_header_name\x18\x10 \x01(\tR\x13sessionIdHeaderName\x12>\n" +
	"\x1cparse_callback_path_as_regex\x18\x11 \x01(\bR\x18parseCallbackPathAsRegex\x12a\n" +
	"\x16auto_map_from_metadata\x18\x12 \x01(\v2,.enterprise.gloo.solo.io.AutoMapFromMetadataR\x13autoMapFromMetadata\x12c\n" +
	"\x16end_session_properties\x18\x13 \x01(\v2-.enterprise.gloo.solo.io.EndSessionPropertiesR\x14endSessionProperties\x12[\n" +
	"\fuser_session\x18\x14 \x01(\v28.enterprise.gloo.solo.io.ExtAuthConfig.UserSessionConfigR\vuserSession\x12\xb0\x01\n" +
	"#pk_jwt_client_authentication_config\x18\x15 \x01(\v2b.enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.PkJwtClientAuthenticationConfigR\x1fpkJwtClientAuthenticationConfig\x12q\n" +
	"\faccess_token\x18\x16 \x01(\v2N.enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.AccessTokenR\vaccessToken\x12w\n" +
	"\x0eidentity_token\x18\x17 \x01(\v2P.enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.IdentityTokenR\ridentityToken\x12f\n" +
	"\adefault\x18\x1a \x01(\v2J.enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.DefaultH\x00R\adefault\x12D\n" +
	"\x05azure\x18\x1b \x01(\v2,.enterprise.gloo.solo.io.ExtAuthConfig.AzureH\x00R\x05azure\x12\x87\x01\n" +
	"\x14front_channel_logout\x18\x1c \x01(\v2U.enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.FrontChannelLogoutR\x12frontChannelLogout\x12\xa2\x01\n" +
	"\x1cdynamic_metadata_from_claims\x18\x1d \x03(\v2a.enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.DynamicMetadataFromClaimsEntryR\x19dynamicMetadataFromClaims\x1aJ\n" +
	"\x1cAuthEndpointQueryParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aK\n" +
	"\x1dTokenEndpointQueryParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\x80\x01\n" +
	"\x1fPkJwtClientAuthenticationConfig\x12%\n" +
	"\vsigning_key\x18\x01 \x01(\tB\x04\xc8\xf5\x04\x01R\n" +
	"signingKey\x126\n" +
	"\tvalid_for\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\bvalidFor\x1ao\n" +
	"\vAccessToken\x12`\n" +
	"\x11claims_to_headers\x18\x01 \x03(\v24.enterprise.gloo.solo.io.ExtAuthConfig.ClaimToHeaderR\x0fclaimsToHeaders\x1aq\n" +
	"\rIdentityToken\x12`\n" +
	"\x11claims_to_headers\x18\x01 \x03(\v24.enterprise.gloo.solo.io.ExtAuthConfig.ClaimToHeaderR\x0fclaimsToHeaders\x1a\t\n" +
	"\aDefault\x1a(\n" +
	"\x12FrontChannelLogout\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x1aL\n" +
	"\x1eDynamicMetadataFromClaimsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\n" +
	"\n" +
	"\bProvider\x1a\x99\x0e\n" +
	"\x1bAccessTokenValidationConfig\x121\n" +
	"\x11introspection_url\x18\x01 \x01(\tB\x02\x18\x01H\x00R\x10introspectionUrl\x12d\n" +
	"\x03jwt\x18\x02 \x01(\v2P.enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.JwtValidationH\x00R\x03jwt\x12\x82\x01\n" +
	"\rintrospection\x18\x03 \x01(\v2Z.enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.IntrospectionValidationH\x00R\rintrospection\x12!\n" +
	"\fuserinfo_url\x18\x04 \x01(\tR\vuserinfoUrl\x12>\n" +
	"\rcache_timeout\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\fcacheTimeout\x12w\n" +
	"\x0frequired_scopes\x18\x06 \x01(\v2L.enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.ScopeListH\x01R\x0erequiredScopes\x12\xa2\x01\n" +
	"\x1cdynamic_metadata_from_claims\x18\a \x03(\v2a.enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.DynamicMetadataFromClaimsEntryR\x19dynamicMetadataFromClaims\x12`\n" +
	"\x11claims_to_headers\x18\b \x03(\v24.enterprise.gloo.solo.io.ExtAuthConfig.ClaimToHeaderR\x0fclaimsToHeaders\x12f\n" +
	"\adefault\x18\x1a \x01(\v2J.enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.DefaultH\x02R\adefault\x12D\n" +
	"\x05azure\x18\x1b \x01(\v2,.enterprise.gloo.solo.io.ExtAuthConfig.AzureH\x02R\x05azure\x1a\xd5\x03\n" +
	"\rJwtValidation\x12~\n" +
	"\vremote_jwks\x18\x01 \x01(\v2[.enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.JwtValidation.RemoteJwksH\x00R\n" +
	"remoteJwks\x12{\n" +
	"\n" +
	"local_jwks\x18\x02 \x01(\v2Z.enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.JwtValidation.LocalJwksH\x00R\tlocalJwks\x12\x16\n" +
	"\x06issuer\x18\x03 \x01(\tR\x06issuer\x1ad\n" +
	"\n" +
	"RemoteJwks\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12D\n" +
	"\x10refresh_interval\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x0frefreshInterval\x1a0\n" +
	"\tLocalJwks\x12#\n" +
	"\rinline_string\x18\x01 \x01(\tR\finlineStringB\x17\n" +
	"\x15jwks_source_specifier\x1a\xc3\x01\n" +
	"\x17IntrospectionValidation\x12+\n" +
	"\x11introspection_url\x18\x01 \x01(\tR\x10introspectionUrl\x12\x1b\n" +
	"\tclient_id\x18\x02 \x01(\tR\bclientId\x12)\n" +
	"\rclient_secret\x18\x03 \x01(\tB\x04\xc8\xf5\x04\x01R\fclientSecret\x123\n" +
	"\x16user_id_attribute_name\x18\x04 \x01(\tR\x13userIdAttributeName\x1a!\n" +
	"\tScopeList\x12\x14\n" +
	"\x05scope\x18\x01 \x03(\tR\x05scope\x1aL\n" +
	"\x1eDynamicMetadataFromClaimsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\t\n" +
	"\aDefaultB\x11\n" +
	"\x0fvalidation_typeB\x12\n" +
	"\x10scope_validationB\n" +
	"\n" +
	"\bProvider\x1a\xe0\a\n" +
	"\x11PlainOAuth2Config\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12)\n" +
	"\rclient_secret\x18\x02 \x01(\tB\x04\xc8\xf5\x04\x01R\fclientSecret\x12\x92\x01\n" +
	"\x1aauth_endpoint_query_params\x18\x03 \x03(\v2U.enterprise.gloo.solo.io.ExtAuthConfig.PlainOAuth2Config.AuthEndpointQueryParamsEntryR\x17authEndpointQueryParams\x12\x17\n" +
	"\aapp_url\x18\x04 \x01(\tR\x06appUrl\x12#\n" +
	"\rcallback_path\x18\x05 \x01(\tR\fcallbackPath\x12\x16\n" +
	"\x06scopes\x18\x06 \x03(\tR\x06scopes\x12B\n" +
	"\asession\x18\a \x01(\v2$.enterprise.gloo.solo.io.UserSessionB\x02\x18\x01R\asession\x12\x1f\n" +
	"\vlogout_path\x18\b \x01(\tR\n" +
	"logoutPath\x12\x95\x01\n" +
	"\x1btoken_endpoint_query_params\x18\t \x03(\v2V.enterprise.gloo.solo.io.ExtAuthConfig.PlainOAuth2Config.TokenEndpointQueryParamsEntryR\x18tokenEndpointQueryParams\x12(\n" +
	"\x10after_logout_url\x18\n" +
	" \x01(\tR\x0eafterLogoutUrl\x12#\n" +
	"\rauth_endpoint\x18\v \x01(\tR\fauthEndpoint\x12%\n" +
	"\x0etoken_endpoint\x18\f \x01(\tR\rtokenEndpoint\x12/\n" +
	"\x13revocation_endpoint\x18\r \x01(\tR\x12revocationEndpoint\x12[\n" +
	"\fuser_session\x18\x0e \x01(\v28.enterprise.gloo.solo.io.ExtAuthConfig.UserSessionConfigR\vuserSession\x1aJ\n" +
	"\x1cAuthEndpointQueryParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aK\n" +
	"\x1dTokenEndpointQueryParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\x8d\x03\n" +
	"\fOAuth2Config\x12|\n" +
	"\x17oidc_authorization_code\x18\x01 \x01(\v2B.enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfigH\x00R\x15oidcAuthorizationCode\x12\x89\x01\n" +
	"\x1eaccess_token_validation_config\x18\x03 \x01(\v2B.enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfigH\x00R\x1baccessTokenValidationConfig\x12_\n" +
	"\roauth2_config\x18\x04 \x01(\v28.enterprise.gloo.solo.io.ExtAuthConfig.PlainOAuth2ConfigH\x00R\foauth2ConfigB\f\n" +
	"\n" +
	"oauth_typeJ\x04\b\x02\x10\x03\x1a\x87\t\n" +
	"\x10ApiKeyAuthConfig\x12u\n" +
	"\x0evalid_api_keys\x18\x01 \x03(\v2I.enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.ValidApiKeysEntryB\x04\xc8\xf5\x04\x01R\fvalidApiKeys\x12\x1f\n" +
	"\vheader_name\x18\x02 \x01(\tR\n" +
	"headerName\x12\x8e\x01\n" +
	"\x19headers_from_key_metadata\x18\x03 \x03(\v2S.enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.HeadersFromKeyMetadataEntryR\x16headersFromKeyMetadata\x12l\n" +
	"\x19k8s_secret_apikey_storage\x18\x04 \x01(\v2/.enterprise.gloo.solo.io.K8sSecretApiKeyStorageH\x00R\x16k8sSecretApikeyStorage\x12k\n" +
	"\x18aerospike_apikey_storage\x18\x05 \x01(\v2/.enterprise.gloo.solo.io.AerospikeApiKeyStorageH\x00R\x16aerospikeApikeyStorage\x12x\n" +
	"\x1dserver_default_apikey_storage\x18\a \x01(\v23.enterprise.gloo.solo.io.ServerDefaultApiKeyStorageH\x00R\x1aserverDefaultApikeyStorage\x128\n" +
	"\x18skip_metadata_validation\x18\x06 \x01(\bR\x16skipMetadataValidation\x1a\xd5\x01\n" +
	"\vKeyMetadata\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12m\n" +
	"\bmetadata\x18\x02 \x03(\v2Q.enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.KeyMetadata.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\x84\x01\n" +
	"\x11ValidApiKeysEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12Y\n" +
	"\x05value\x18\x02 \x01(\v2C.enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.KeyMetadataR\x05value:\x028\x01\x1aI\n" +
	"\x1bHeadersFromKeyMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x11\n" +
	"\x0fstorage_backend\x1a\x81\x02\n" +
	"\rOpaAuthConfig\x12[\n" +
	"\amodules\x18\x01 \x03(\v2A.enterprise.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.ModulesEntryR\amodules\x12\x14\n" +
	"\x05query\x18\x02 \x01(\tR\x05query\x12A\n" +
	"\aoptions\x18\x03 \x01(\v2'.enterprise.gloo.solo.io.OpaAuthOptionsR\aoptions\x1a:\n" +
	"\fModulesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xb0\x01\n" +
	"\x13OpaServerAuthConfig\x12\x18\n" +
	"\apackage\x18\x01 \x01(\tR\apackage\x12\x1b\n" +
	"\trule_name\x18\x02 \x01(\tR\bruleName\x12\x1f\n" +
	"\vserver_addr\x18\x03 \x01(\tR\n" +
	"serverAddr\x12A\n" +
	"\aoptions\x18\x04 \x01(\v2'.enterprise.gloo.solo.io.OpaAuthOptionsR\aoptions\x1a\xbf\x03\n" +
	"\n" +
	"LdapConfig\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12&\n" +
	"\x0euserDnTemplate\x18\x02 \x01(\tR\x0euserDnTemplate\x128\n" +
	"\x17membershipAttributeName\x18\x03 \x01(\tR\x17membershipAttributeName\x12$\n" +
	"\rallowedGroups\x18\x04 \x03(\tR\rallowedGroups\x12@\n" +
	"\x04pool\x18\x05 \x01(\v2,.enterprise.gloo.solo.io.Ldap.ConnectionPoolR\x04pool\x12\"\n" +
	"\fsearchFilter\x18\x06 \x01(\tR\fsearchFilter\x124\n" +
	"\x16disable_group_checking\x18\a \x01(\bR\x14disableGroupChecking\x12s\n" +
	"\x15group_lookup_settings\x18\b \x01(\v2?.enterprise.gloo.solo.io.ExtAuthConfig.LdapServiceAccountConfigR\x13groupLookupSettings\x1a\xa8\x01\n" +
	"\x18LdapServiceAccountConfig\x12 \n" +
	"\busername\x18\x01 \x01(\tB\x04\xc8\xf5\x04\x01R\busername\x12 \n" +
	"\bpassword\x18\x02 \x01(\tB\x04\xc8\xf5\x04\x01R\bpassword\x12H\n" +
	"!check_groups_with_service_account\x18\x03 \x01(\bR\x1dcheckGroupsWithServiceAccount\x1a\xff\x01\n" +
	"\x0eHmacAuthConfig\x12\\\n" +
	"\vsecret_list\x18\x01 \x01(\v29.enterprise.gloo.solo.io.ExtAuthConfig.InMemorySecretListH\x00R\n" +
	"secretList\x12f\n" +
	"\x15parameters_in_headers\x18\x02 \x01(\v20.enterprise.gloo.solo.io.HmacParametersInHeadersH\x01R\x13parametersInHeadersB\x10\n" +
	"\x0esecret_storageB\x15\n" +
	"\x13implementation_type\x1a\x9c\x02\n" +
	"\x10PortalAuthConfig\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12$\n" +
	"\x0eapi_key_header\x18\x02 \x01(\tR\fapiKeyHeader\x12J\n" +
	"\rredis_options\x18\x03 \x01(\v2%.enterprise.gloo.solo.io.RedisOptionsR\fredisOptions\x12@\n" +
	"\x0ecache_duration\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\rcacheDuration\x12B\n" +
	"\x0frequest_timeout\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\x0erequestTimeout\x1a\xc5\x01\n" +
	"\x12InMemorySecretList\x12p\n" +
	"\vsecret_list\x18\x01 \x03(\v2I.enterprise.gloo.solo.io.ExtAuthConfig.InMemorySecretList.SecretListEntryB\x04\xc8\xf5\x04\x01R\n" +
	"secretList\x1a=\n" +
	"\x0fSecretListEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a\xd0\t\n" +
	"\x06Config\x120\n" +
	"\x04name\x18\v \x01(\v2\x1c.google.protobuf.StringValueR\x04name\x12N\n" +
	"\x05oauth\x18\x03 \x01(\v22.enterprise.gloo.solo.io.ExtAuthConfig.OAuthConfigB\x02\x18\x01H\x00R\x05oauth\x12M\n" +
	"\x06oauth2\x18\t \x01(\v23.enterprise.gloo.solo.io.ExtAuthConfig.OAuth2ConfigH\x00R\x06oauth2\x12C\n" +
	"\n" +
	"basic_auth\x18\x04 \x01(\v2\".enterprise.gloo.solo.io.BasicAuthH\x00R\tbasicAuth\x12j\n" +
	"\x13basic_auth_internal\x18\x11 \x01(\v28.enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternalH\x00R\x11basicAuthInternal\x12[\n" +
	"\fapi_key_auth\x18\x05 \x01(\v27.enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfigH\x00R\n" +
	"apiKeyAuth\x12J\n" +
	"\vplugin_auth\x18\x06 \x01(\v2#.enterprise.gloo.solo.io.AuthPluginB\x02\x18\x01H\x00R\n" +
	"pluginAuth\x12Q\n" +
	"\bopa_auth\x18\a \x01(\v24.enterprise.gloo.solo.io.ExtAuthConfig.OpaAuthConfigH\x00R\aopaAuth\x127\n" +
	"\x04ldap\x18\b \x01(\v2\x1d.enterprise.gloo.solo.io.LdapB\x02\x18\x01H\x00R\x04ldap\x12X\n" +
	"\rldap_internal\x18\x0e \x01(\v21.enterprise.gloo.solo.io.ExtAuthConfig.LdapConfigH\x00R\fldapInternal\x12*\n" +
	"\x03jwt\x18\f \x01(\v2\x16.google.protobuf.EmptyH\x00R\x03jwt\x12V\n" +
	"\x11pass_through_auth\x18\r \x01(\v2(.enterprise.gloo.solo.io.PassThroughAuthH\x00R\x0fpassThroughAuth\x12T\n" +
	"\thmac_auth\x18\x0f \x01(\v25.enterprise.gloo.solo.io.ExtAuthConfig.HmacAuthConfigH\x00R\bhmacAuth\x12d\n" +
	"\x0fopa_server_auth\x18\x10 \x01(\v2:.enterprise.gloo.solo.io.ExtAuthConfig.OpaServerAuthConfigH\x00R\ropaServerAuth\x12Z\n" +
	"\vportal_auth\x18\x12 \x01(\v27.enterprise.gloo.solo.io.ExtAuthConfig.PortalAuthConfigH\x00R\n" +
	"portalAuthB\r\n" +
	"\vauth_configJ\x04\b\x01\x10\x02J\x04\b\x02\x10\x03\"s\n" +
	"\x13ApiKeyCreateRequest\x12:\n" +
	"\bapi_keys\x18\x01 \x03(\v2\x1f.enterprise.gloo.solo.io.ApiKeyR\aapiKeys\x12 \n" +
	"\fraw_api_keys\x18\x02 \x03(\tR\n" +
	"rawApiKeys\"R\n" +
	"\x14ApiKeyCreateResponse\x12:\n" +
	"\bapi_keys\x18\x01 \x03(\v2\x1f.enterprise.gloo.solo.io.ApiKeyR\aapiKeys\"M\n" +
	"\x11ApiKeyReadRequest\x12 \n" +
	"\fraw_api_keys\x18\x01 \x03(\tR\n" +
	"rawApiKeys\x12\x16\n" +
	"\x06labels\x18\x02 \x03(\tR\x06labels\"P\n" +
	"\x12ApiKeyReadResponse\x12:\n" +
	"\bapi_keys\x18\x01 \x03(\v2\x1f.enterprise.gloo.solo.io.ApiKeyR\aapiKeys\"\x8b\x01\n" +
	"\x13ApiKeyUpdateRequest\x12\x16\n" +
	"\x06upsert\x18\x01 \x01(\bR\x06upsert\x12:\n" +
	"\bapi_keys\x18\x02 \x03(\v2\x1f.enterprise.gloo.solo.io.ApiKeyR\aapiKeys\x12 \n" +
	"\fraw_api_keys\x18\x03 \x03(\tR\n" +
	"rawApiKeys\"R\n" +
	"\x14ApiKeyUpdateResponse\x12:\n" +
	"\bapi_keys\x18\x01 \x03(\v2\x1f.enterprise.gloo.solo.io.ApiKeyR\aapiKeys\"O\n" +
	"\x13ApiKeyDeleteRequest\x12 \n" +
	"\fraw_api_keys\x18\x01 \x03(\tR\n" +
	"rawApiKeys\x12\x16\n" +
	"\x06labels\x18\x02 \x03(\tR\x06labels\"\x16\n" +
	"\x14ApiKeyDeleteResponse2\xdd\x02\n" +
	"\x17ExtAuthDiscoveryService\x12\\\n" +
	"\x13StreamExtAuthConfig\x12\x1e.envoy.api.v2.DiscoveryRequest\x1a\x1f.envoy.api.v2.DiscoveryResponse\"\x00(\x010\x01\x12e\n" +
	"\x12DeltaExtAuthConfig\x12#.envoy.api.v2.DeltaDiscoveryRequest\x1a$.envoy.api.v2.DeltaDiscoveryResponse\"\x00(\x010\x01\x12}\n" +
	"\x12FetchExtAuthConfig\x12\x1e.envoy.api.v2.DiscoveryRequest\x1a\x1f.envoy.api.v2.DiscoveryResponse\"&\x82\xd3\xe4\x93\x02 :\x01*\"\x1b/v2/discovery:extauthconfig2\xad\x03\n" +
	"\rApiKeyService\x12g\n" +
	"\x06Create\x12,.enterprise.gloo.solo.io.ApiKeyCreateRequest\x1a-.enterprise.gloo.solo.io.ApiKeyCreateResponse\"\x00\x12a\n" +
	"\x04Read\x12*.enterprise.gloo.solo.io.ApiKeyReadRequest\x1a+.enterprise.gloo.solo.io.ApiKeyReadResponse\"\x00\x12g\n" +
	"\x06Update\x12,.enterprise.gloo.solo.io.ApiKeyUpdateRequest\x1a-.enterprise.gloo.solo.io.ApiKeyUpdateResponse\"\x00\x12g\n" +
	"\x06Delete\x12,.enterprise.gloo.solo.io.ApiKeyDeleteRequest\x1a-.enterprise.gloo.solo.io.ApiKeyDeleteResponse\"\x00B\\\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01ZNgithub.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/extauth/v1b\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes = make([]protoimpl.MessageInfo, 58)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_goTypes = []any{
	(*ExtAuthConfig)(nil),                                       // 0: enterprise.gloo.solo.io.ExtAuthConfig
	(*ApiKeyCreateRequest)(nil),                                 // 1: enterprise.gloo.solo.io.ApiKeyCreateRequest
	(*ApiKeyCreateResponse)(nil),                                // 2: enterprise.gloo.solo.io.ApiKeyCreateResponse
	(*ApiKeyReadRequest)(nil),                                   // 3: enterprise.gloo.solo.io.ApiKeyReadRequest
	(*ApiKeyReadResponse)(nil),                                  // 4: enterprise.gloo.solo.io.ApiKeyReadResponse
	(*ApiKeyUpdateRequest)(nil),                                 // 5: enterprise.gloo.solo.io.ApiKeyUpdateRequest
	(*ApiKeyUpdateResponse)(nil),                                // 6: enterprise.gloo.solo.io.ApiKeyUpdateResponse
	(*ApiKeyDeleteRequest)(nil),                                 // 7: enterprise.gloo.solo.io.ApiKeyDeleteRequest
	(*ApiKeyDeleteResponse)(nil),                                // 8: enterprise.gloo.solo.io.ApiKeyDeleteResponse
	(*ExtAuthConfig_Azure)(nil),                                 // 9: enterprise.gloo.solo.io.ExtAuthConfig.Azure
	(*ExtAuthConfig_ClaimToHeader)(nil),                         // 10: enterprise.gloo.solo.io.ExtAuthConfig.ClaimToHeader
	(*ExtAuthConfig_BasicAuthInternal)(nil),                     // 11: enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal
	(*ExtAuthConfig_OAuthConfig)(nil),                           // 12: enterprise.gloo.solo.io.ExtAuthConfig.OAuthConfig
	(*ExtAuthConfig_UserSessionConfig)(nil),                     // 13: enterprise.gloo.solo.io.ExtAuthConfig.UserSessionConfig
	(*ExtAuthConfig_OidcAuthorizationCodeConfig)(nil),           // 14: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig
	(*ExtAuthConfig_AccessTokenValidationConfig)(nil),           // 15: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig
	(*ExtAuthConfig_PlainOAuth2Config)(nil),                     // 16: enterprise.gloo.solo.io.ExtAuthConfig.PlainOAuth2Config
	(*ExtAuthConfig_OAuth2Config)(nil),                          // 17: enterprise.gloo.solo.io.ExtAuthConfig.OAuth2Config
	(*ExtAuthConfig_ApiKeyAuthConfig)(nil),                      // 18: enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig
	(*ExtAuthConfig_OpaAuthConfig)(nil),                         // 19: enterprise.gloo.solo.io.ExtAuthConfig.OpaAuthConfig
	(*ExtAuthConfig_OpaServerAuthConfig)(nil),                   // 20: enterprise.gloo.solo.io.ExtAuthConfig.OpaServerAuthConfig
	(*ExtAuthConfig_LdapConfig)(nil),                            // 21: enterprise.gloo.solo.io.ExtAuthConfig.LdapConfig
	(*ExtAuthConfig_LdapServiceAccountConfig)(nil),              // 22: enterprise.gloo.solo.io.ExtAuthConfig.LdapServiceAccountConfig
	(*ExtAuthConfig_HmacAuthConfig)(nil),                        // 23: enterprise.gloo.solo.io.ExtAuthConfig.HmacAuthConfig
	(*ExtAuthConfig_PortalAuthConfig)(nil),                      // 24: enterprise.gloo.solo.io.ExtAuthConfig.PortalAuthConfig
	(*ExtAuthConfig_InMemorySecretList)(nil),                    // 25: enterprise.gloo.solo.io.ExtAuthConfig.InMemorySecretList
	(*ExtAuthConfig_Config)(nil),                                // 26: enterprise.gloo.solo.io.ExtAuthConfig.Config
	(*ExtAuthConfig_BasicAuthInternal_EncryptionType)(nil),      // 27: enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.EncryptionType
	(*ExtAuthConfig_BasicAuthInternal_User)(nil),                // 28: enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.User
	(*ExtAuthConfig_BasicAuthInternal_UserList)(nil),            // 29: enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.UserList
	(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1)(nil), // 30: enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.EncryptionType.Sha1
	(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr)(nil),  // 31: enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.EncryptionType.Apr
	nil, // 32: enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.UserList.UsersEntry
	nil, // 33: enterprise.gloo.solo.io.ExtAuthConfig.OAuthConfig.AuthEndpointQueryParamsEntry
	(*ExtAuthConfig_UserSessionConfig_CipherConfig)(nil), // 34: enterprise.gloo.solo.io.ExtAuthConfig.UserSessionConfig.CipherConfig
	nil, // 35: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.AuthEndpointQueryParamsEntry
	nil, // 36: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.TokenEndpointQueryParamsEntry
	(*ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig)(nil), // 37: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.PkJwtClientAuthenticationConfig
	(*ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken)(nil),                     // 38: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.AccessToken
	(*ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken)(nil),                   // 39: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.IdentityToken
	(*ExtAuthConfig_OidcAuthorizationCodeConfig_Default)(nil),                         // 40: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.Default
	(*ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout)(nil),              // 41: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.FrontChannelLogout
	nil, // 42: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.DynamicMetadataFromClaimsEntry
	(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation)(nil),           // 43: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.JwtValidation
	(*ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation)(nil), // 44: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.IntrospectionValidation
	(*ExtAuthConfig_AccessTokenValidationConfig_ScopeList)(nil),               // 45: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.ScopeList
	nil, // 46: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.DynamicMetadataFromClaimsEntry
	(*ExtAuthConfig_AccessTokenValidationConfig_Default)(nil),                  // 47: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.Default
	(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks)(nil), // 48: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.JwtValidation.RemoteJwks
	(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks)(nil),  // 49: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.JwtValidation.LocalJwks
	nil, // 50: enterprise.gloo.solo.io.ExtAuthConfig.PlainOAuth2Config.AuthEndpointQueryParamsEntry
	nil, // 51: enterprise.gloo.solo.io.ExtAuthConfig.PlainOAuth2Config.TokenEndpointQueryParamsEntry
	(*ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata)(nil), // 52: enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.KeyMetadata
	nil,                                    // 53: enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.ValidApiKeysEntry
	nil,                                    // 54: enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.HeadersFromKeyMetadataEntry
	nil,                                    // 55: enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.KeyMetadata.MetadataEntry
	nil,                                    // 56: enterprise.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.ModulesEntry
	nil,                                    // 57: enterprise.gloo.solo.io.ExtAuthConfig.InMemorySecretList.SecretListEntry
	(*wrapperspb.StringValue)(nil),         // 58: google.protobuf.StringValue
	(*ApiKey)(nil),                         // 59: enterprise.gloo.solo.io.ApiKey
	(*RedisOptions)(nil),                   // 60: enterprise.gloo.solo.io.RedisOptions
	(*UserSession_CookieOptions)(nil),      // 61: enterprise.gloo.solo.io.UserSession.CookieOptions
	(*UserSession_InternalSession)(nil),    // 62: enterprise.gloo.solo.io.UserSession.InternalSession
	(*UserSession_RedisSession)(nil),       // 63: enterprise.gloo.solo.io.UserSession.RedisSession
	(*UserSession)(nil),                    // 64: enterprise.gloo.solo.io.UserSession
	(*HeaderConfiguration)(nil),            // 65: enterprise.gloo.solo.io.HeaderConfiguration
	(*DiscoveryOverride)(nil),              // 66: enterprise.gloo.solo.io.DiscoveryOverride
	(*durationpb.Duration)(nil),            // 67: google.protobuf.Duration
	(*JwksOnDemandCacheRefreshPolicy)(nil), // 68: enterprise.gloo.solo.io.JwksOnDemandCacheRefreshPolicy
	(*AutoMapFromMetadata)(nil),            // 69: enterprise.gloo.solo.io.AutoMapFromMetadata
	(*EndSessionProperties)(nil),           // 70: enterprise.gloo.solo.io.EndSessionProperties
	(*K8SSecretApiKeyStorage)(nil),         // 71: enterprise.gloo.solo.io.K8sSecretApiKeyStorage
	(*AerospikeApiKeyStorage)(nil),         // 72: enterprise.gloo.solo.io.AerospikeApiKeyStorage
	(*ServerDefaultApiKeyStorage)(nil),     // 73: enterprise.gloo.solo.io.ServerDefaultApiKeyStorage
	(*OpaAuthOptions)(nil),                 // 74: enterprise.gloo.solo.io.OpaAuthOptions
	(*Ldap_ConnectionPool)(nil),            // 75: enterprise.gloo.solo.io.Ldap.ConnectionPool
	(*HmacParametersInHeaders)(nil),        // 76: enterprise.gloo.solo.io.HmacParametersInHeaders
	(*BasicAuth)(nil),                      // 77: enterprise.gloo.solo.io.BasicAuth
	(*AuthPlugin)(nil),                     // 78: enterprise.gloo.solo.io.AuthPlugin
	(*Ldap)(nil),                           // 79: enterprise.gloo.solo.io.Ldap
	(*emptypb.Empty)(nil),                  // 80: google.protobuf.Empty
	(*PassThroughAuth)(nil),                // 81: enterprise.gloo.solo.io.PassThroughAuth
	(*v2.DiscoveryRequest)(nil),            // 82: envoy.api.v2.DiscoveryRequest
	(*v2.DeltaDiscoveryRequest)(nil),       // 83: envoy.api.v2.DeltaDiscoveryRequest
	(*v2.DiscoveryResponse)(nil),           // 84: envoy.api.v2.DiscoveryResponse
	(*v2.DeltaDiscoveryResponse)(nil),      // 85: envoy.api.v2.DeltaDiscoveryResponse
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_depIdxs = []int32{
	26, // 0: enterprise.gloo.solo.io.ExtAuthConfig.configs:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.Config
	58, // 1: enterprise.gloo.solo.io.ExtAuthConfig.boolean_expr:type_name -> google.protobuf.StringValue
	59, // 2: enterprise.gloo.solo.io.ApiKeyCreateRequest.api_keys:type_name -> enterprise.gloo.solo.io.ApiKey
	59, // 3: enterprise.gloo.solo.io.ApiKeyCreateResponse.api_keys:type_name -> enterprise.gloo.solo.io.ApiKey
	59, // 4: enterprise.gloo.solo.io.ApiKeyReadResponse.api_keys:type_name -> enterprise.gloo.solo.io.ApiKey
	59, // 5: enterprise.gloo.solo.io.ApiKeyUpdateRequest.api_keys:type_name -> enterprise.gloo.solo.io.ApiKey
	59, // 6: enterprise.gloo.solo.io.ApiKeyUpdateResponse.api_keys:type_name -> enterprise.gloo.solo.io.ApiKey
	60, // 7: enterprise.gloo.solo.io.ExtAuthConfig.Azure.claims_caching_options:type_name -> enterprise.gloo.solo.io.RedisOptions
	27, // 8: enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.encryption:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.EncryptionType
	29, // 9: enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.user_list:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.UserList
	33, // 10: enterprise.gloo.solo.io.ExtAuthConfig.OAuthConfig.auth_endpoint_query_params:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OAuthConfig.AuthEndpointQueryParamsEntry
	61, // 11: enterprise.gloo.solo.io.ExtAuthConfig.UserSessionConfig.cookie_options:type_name -> enterprise.gloo.solo.io.UserSession.CookieOptions
	62, // 12: enterprise.gloo.solo.io.ExtAuthConfig.UserSessionConfig.cookie:type_name -> enterprise.gloo.solo.io.UserSession.InternalSession
	63, // 13: enterprise.gloo.solo.io.ExtAuthConfig.UserSessionConfig.redis:type_name -> enterprise.gloo.solo.io.UserSession.RedisSession
	34, // 14: enterprise.gloo.solo.io.ExtAuthConfig.UserSessionConfig.cipher_config:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.UserSessionConfig.CipherConfig
	35, // 15: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.auth_endpoint_query_params:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.AuthEndpointQueryParamsEntry
	36, // 16: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.token_endpoint_query_params:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.TokenEndpointQueryParamsEntry
	64, // 17: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.session:type_name -> enterprise.gloo.solo.io.UserSession
	65, // 18: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.headers:type_name -> enterprise.gloo.solo.io.HeaderConfiguration
	66, // 19: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.discovery_override:type_name -> enterprise.gloo.solo.io.DiscoveryOverride
	67, // 20: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.discovery_poll_interval:type_name -> google.protobuf.Duration
	68, // 21: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.jwks_cache_refresh_policy:type_name -> enterprise.gloo.solo.io.JwksOnDemandCacheRefreshPolicy
	69, // 22: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.auto_map_from_metadata:type_name -> enterprise.gloo.solo.io.AutoMapFromMetadata
	70, // 23: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.end_session_properties:type_name -> enterprise.gloo.solo.io.EndSessionProperties
	13, // 24: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.user_session:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.UserSessionConfig
	37, // 25: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.pk_jwt_client_authentication_config:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.PkJwtClientAuthenticationConfig
	38, // 26: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.access_token:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.AccessToken
	39, // 27: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.identity_token:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.IdentityToken
	40, // 28: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.default:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.Default
	9,  // 29: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.azure:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.Azure
	41, // 30: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.front_channel_logout:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.FrontChannelLogout
	42, // 31: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.dynamic_metadata_from_claims:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.DynamicMetadataFromClaimsEntry
	43, // 32: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.jwt:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.JwtValidation
	44, // 33: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.introspection:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.IntrospectionValidation
	67, // 34: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.cache_timeout:type_name -> google.protobuf.Duration
	45, // 35: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.required_scopes:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.ScopeList
	46, // 36: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.dynamic_metadata_from_claims:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.DynamicMetadataFromClaimsEntry
	10, // 37: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.claims_to_headers:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.ClaimToHeader
	47, // 38: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.default:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.Default
	9,  // 39: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.azure:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.Azure
	50, // 40: enterprise.gloo.solo.io.ExtAuthConfig.PlainOAuth2Config.auth_endpoint_query_params:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.PlainOAuth2Config.AuthEndpointQueryParamsEntry
	64, // 41: enterprise.gloo.solo.io.ExtAuthConfig.PlainOAuth2Config.session:type_name -> enterprise.gloo.solo.io.UserSession
	51, // 42: enterprise.gloo.solo.io.ExtAuthConfig.PlainOAuth2Config.token_endpoint_query_params:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.PlainOAuth2Config.TokenEndpointQueryParamsEntry
	13, // 43: enterprise.gloo.solo.io.ExtAuthConfig.PlainOAuth2Config.user_session:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.UserSessionConfig
	14, // 44: enterprise.gloo.solo.io.ExtAuthConfig.OAuth2Config.oidc_authorization_code:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig
	15, // 45: enterprise.gloo.solo.io.ExtAuthConfig.OAuth2Config.access_token_validation_config:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig
	16, // 46: enterprise.gloo.solo.io.ExtAuthConfig.OAuth2Config.oauth2_config:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.PlainOAuth2Config
	53, // 47: enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.valid_api_keys:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.ValidApiKeysEntry
	54, // 48: enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.headers_from_key_metadata:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.HeadersFromKeyMetadataEntry
	71, // 49: enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.k8s_secret_apikey_storage:type_name -> enterprise.gloo.solo.io.K8sSecretApiKeyStorage
	72, // 50: enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.aerospike_apikey_storage:type_name -> enterprise.gloo.solo.io.AerospikeApiKeyStorage
	73, // 51: enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.server_default_apikey_storage:type_name -> enterprise.gloo.solo.io.ServerDefaultApiKeyStorage
	56, // 52: enterprise.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.modules:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.ModulesEntry
	74, // 53: enterprise.gloo.solo.io.ExtAuthConfig.OpaAuthConfig.options:type_name -> enterprise.gloo.solo.io.OpaAuthOptions
	74, // 54: enterprise.gloo.solo.io.ExtAuthConfig.OpaServerAuthConfig.options:type_name -> enterprise.gloo.solo.io.OpaAuthOptions
	75, // 55: enterprise.gloo.solo.io.ExtAuthConfig.LdapConfig.pool:type_name -> enterprise.gloo.solo.io.Ldap.ConnectionPool
	22, // 56: enterprise.gloo.solo.io.ExtAuthConfig.LdapConfig.group_lookup_settings:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.LdapServiceAccountConfig
	25, // 57: enterprise.gloo.solo.io.ExtAuthConfig.HmacAuthConfig.secret_list:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.InMemorySecretList
	76, // 58: enterprise.gloo.solo.io.ExtAuthConfig.HmacAuthConfig.parameters_in_headers:type_name -> enterprise.gloo.solo.io.HmacParametersInHeaders
	60, // 59: enterprise.gloo.solo.io.ExtAuthConfig.PortalAuthConfig.redis_options:type_name -> enterprise.gloo.solo.io.RedisOptions
	67, // 60: enterprise.gloo.solo.io.ExtAuthConfig.PortalAuthConfig.cache_duration:type_name -> google.protobuf.Duration
	67, // 61: enterprise.gloo.solo.io.ExtAuthConfig.PortalAuthConfig.request_timeout:type_name -> google.protobuf.Duration
	57, // 62: enterprise.gloo.solo.io.ExtAuthConfig.InMemorySecretList.secret_list:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.InMemorySecretList.SecretListEntry
	58, // 63: enterprise.gloo.solo.io.ExtAuthConfig.Config.name:type_name -> google.protobuf.StringValue
	12, // 64: enterprise.gloo.solo.io.ExtAuthConfig.Config.oauth:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OAuthConfig
	17, // 65: enterprise.gloo.solo.io.ExtAuthConfig.Config.oauth2:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OAuth2Config
	77, // 66: enterprise.gloo.solo.io.ExtAuthConfig.Config.basic_auth:type_name -> enterprise.gloo.solo.io.BasicAuth
	11, // 67: enterprise.gloo.solo.io.ExtAuthConfig.Config.basic_auth_internal:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal
	18, // 68: enterprise.gloo.solo.io.ExtAuthConfig.Config.api_key_auth:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig
	78, // 69: enterprise.gloo.solo.io.ExtAuthConfig.Config.plugin_auth:type_name -> enterprise.gloo.solo.io.AuthPlugin
	19, // 70: enterprise.gloo.solo.io.ExtAuthConfig.Config.opa_auth:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OpaAuthConfig
	79, // 71: enterprise.gloo.solo.io.ExtAuthConfig.Config.ldap:type_name -> enterprise.gloo.solo.io.Ldap
	21, // 72: enterprise.gloo.solo.io.ExtAuthConfig.Config.ldap_internal:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.LdapConfig
	80, // 73: enterprise.gloo.solo.io.ExtAuthConfig.Config.jwt:type_name -> google.protobuf.Empty
	81, // 74: enterprise.gloo.solo.io.ExtAuthConfig.Config.pass_through_auth:type_name -> enterprise.gloo.solo.io.PassThroughAuth
	23, // 75: enterprise.gloo.solo.io.ExtAuthConfig.Config.hmac_auth:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.HmacAuthConfig
	20, // 76: enterprise.gloo.solo.io.ExtAuthConfig.Config.opa_server_auth:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.OpaServerAuthConfig
	24, // 77: enterprise.gloo.solo.io.ExtAuthConfig.Config.portal_auth:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.PortalAuthConfig
	31, // 78: enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.EncryptionType.apr:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.EncryptionType.Apr
	30, // 79: enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.EncryptionType.sha1:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.EncryptionType.Sha1
	32, // 80: enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.UserList.users:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.UserList.UsersEntry
	28, // 81: enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.UserList.UsersEntry.value:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.BasicAuthInternal.User
	67, // 82: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.PkJwtClientAuthenticationConfig.valid_for:type_name -> google.protobuf.Duration
	10, // 83: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.AccessToken.claims_to_headers:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.ClaimToHeader
	10, // 84: enterprise.gloo.solo.io.ExtAuthConfig.OidcAuthorizationCodeConfig.IdentityToken.claims_to_headers:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.ClaimToHeader
	48, // 85: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.JwtValidation.remote_jwks:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.JwtValidation.RemoteJwks
	49, // 86: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.JwtValidation.local_jwks:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.JwtValidation.LocalJwks
	67, // 87: enterprise.gloo.solo.io.ExtAuthConfig.AccessTokenValidationConfig.JwtValidation.RemoteJwks.refresh_interval:type_name -> google.protobuf.Duration
	55, // 88: enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.KeyMetadata.metadata:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.KeyMetadata.MetadataEntry
	52, // 89: enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.ValidApiKeysEntry.value:type_name -> enterprise.gloo.solo.io.ExtAuthConfig.ApiKeyAuthConfig.KeyMetadata
	82, // 90: enterprise.gloo.solo.io.ExtAuthDiscoveryService.StreamExtAuthConfig:input_type -> envoy.api.v2.DiscoveryRequest
	83, // 91: enterprise.gloo.solo.io.ExtAuthDiscoveryService.DeltaExtAuthConfig:input_type -> envoy.api.v2.DeltaDiscoveryRequest
	82, // 92: enterprise.gloo.solo.io.ExtAuthDiscoveryService.FetchExtAuthConfig:input_type -> envoy.api.v2.DiscoveryRequest
	1,  // 93: enterprise.gloo.solo.io.ApiKeyService.Create:input_type -> enterprise.gloo.solo.io.ApiKeyCreateRequest
	3,  // 94: enterprise.gloo.solo.io.ApiKeyService.Read:input_type -> enterprise.gloo.solo.io.ApiKeyReadRequest
	5,  // 95: enterprise.gloo.solo.io.ApiKeyService.Update:input_type -> enterprise.gloo.solo.io.ApiKeyUpdateRequest
	7,  // 96: enterprise.gloo.solo.io.ApiKeyService.Delete:input_type -> enterprise.gloo.solo.io.ApiKeyDeleteRequest
	84, // 97: enterprise.gloo.solo.io.ExtAuthDiscoveryService.StreamExtAuthConfig:output_type -> envoy.api.v2.DiscoveryResponse
	85, // 98: enterprise.gloo.solo.io.ExtAuthDiscoveryService.DeltaExtAuthConfig:output_type -> envoy.api.v2.DeltaDiscoveryResponse
	84, // 99: enterprise.gloo.solo.io.ExtAuthDiscoveryService.FetchExtAuthConfig:output_type -> envoy.api.v2.DiscoveryResponse
	2,  // 100: enterprise.gloo.solo.io.ApiKeyService.Create:output_type -> enterprise.gloo.solo.io.ApiKeyCreateResponse
	4,  // 101: enterprise.gloo.solo.io.ApiKeyService.Read:output_type -> enterprise.gloo.solo.io.ApiKeyReadResponse
	6,  // 102: enterprise.gloo.solo.io.ApiKeyService.Update:output_type -> enterprise.gloo.solo.io.ApiKeyUpdateResponse
	8,  // 103: enterprise.gloo.solo.io.ApiKeyService.Delete:output_type -> enterprise.gloo.solo.io.ApiKeyDeleteResponse
	97, // [97:104] is the sub-list for method output_type
	90, // [90:97] is the sub-list for method input_type
	90, // [90:90] is the sub-list for extension type_name
	90, // [90:90] is the sub-list for extension extendee
	0,  // [0:90] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_init()
}
func file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_proto_init()
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[11].OneofWrappers = []any{
		(*ExtAuthConfig_BasicAuthInternal_UserList_)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[13].OneofWrappers = []any{
		(*ExtAuthConfig_UserSessionConfig_Cookie)(nil),
		(*ExtAuthConfig_UserSessionConfig_Redis)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[14].OneofWrappers = []any{
		(*ExtAuthConfig_OidcAuthorizationCodeConfig_Default_)(nil),
		(*ExtAuthConfig_OidcAuthorizationCodeConfig_Azure)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[15].OneofWrappers = []any{
		(*ExtAuthConfig_AccessTokenValidationConfig_IntrospectionUrl)(nil),
		(*ExtAuthConfig_AccessTokenValidationConfig_Jwt)(nil),
		(*ExtAuthConfig_AccessTokenValidationConfig_Introspection)(nil),
		(*ExtAuthConfig_AccessTokenValidationConfig_RequiredScopes)(nil),
		(*ExtAuthConfig_AccessTokenValidationConfig_Default_)(nil),
		(*ExtAuthConfig_AccessTokenValidationConfig_Azure)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[17].OneofWrappers = []any{
		(*ExtAuthConfig_OAuth2Config_OidcAuthorizationCode)(nil),
		(*ExtAuthConfig_OAuth2Config_AccessTokenValidationConfig)(nil),
		(*ExtAuthConfig_OAuth2Config_Oauth2Config)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[18].OneofWrappers = []any{
		(*ExtAuthConfig_ApiKeyAuthConfig_K8SSecretApikeyStorage)(nil),
		(*ExtAuthConfig_ApiKeyAuthConfig_AerospikeApikeyStorage)(nil),
		(*ExtAuthConfig_ApiKeyAuthConfig_ServerDefaultApikeyStorage)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[23].OneofWrappers = []any{
		(*ExtAuthConfig_HmacAuthConfig_SecretList)(nil),
		(*ExtAuthConfig_HmacAuthConfig_ParametersInHeaders)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[26].OneofWrappers = []any{
		(*ExtAuthConfig_Config_Oauth)(nil),
		(*ExtAuthConfig_Config_Oauth2)(nil),
		(*ExtAuthConfig_Config_BasicAuth)(nil),
		(*ExtAuthConfig_Config_BasicAuthInternal)(nil),
		(*ExtAuthConfig_Config_ApiKeyAuth)(nil),
		(*ExtAuthConfig_Config_PluginAuth)(nil),
		(*ExtAuthConfig_Config_OpaAuth)(nil),
		(*ExtAuthConfig_Config_Ldap)(nil),
		(*ExtAuthConfig_Config_LdapInternal)(nil),
		(*ExtAuthConfig_Config_Jwt)(nil),
		(*ExtAuthConfig_Config_PassThroughAuth)(nil),
		(*ExtAuthConfig_Config_HmacAuth)(nil),
		(*ExtAuthConfig_Config_OpaServerAuth)(nil),
		(*ExtAuthConfig_Config_PortalAuth)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[27].OneofWrappers = []any{
		(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr_)(nil),
		(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1_)(nil),
	}
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes[43].OneofWrappers = []any{
		(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks_)(nil),
		(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   58,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_extauth_v1_extauth_internal_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExtAuthDiscoveryServiceClient is the client API for ExtAuthDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExtAuthDiscoveryServiceClient interface {
	StreamExtAuthConfig(ctx context.Context, opts ...grpc.CallOption) (ExtAuthDiscoveryService_StreamExtAuthConfigClient, error)
	DeltaExtAuthConfig(ctx context.Context, opts ...grpc.CallOption) (ExtAuthDiscoveryService_DeltaExtAuthConfigClient, error)
	FetchExtAuthConfig(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error)
}

type extAuthDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExtAuthDiscoveryServiceClient(cc grpc.ClientConnInterface) ExtAuthDiscoveryServiceClient {
	return &extAuthDiscoveryServiceClient{cc}
}

func (c *extAuthDiscoveryServiceClient) StreamExtAuthConfig(ctx context.Context, opts ...grpc.CallOption) (ExtAuthDiscoveryService_StreamExtAuthConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExtAuthDiscoveryService_serviceDesc.Streams[0], "/enterprise.gloo.solo.io.ExtAuthDiscoveryService/StreamExtAuthConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &extAuthDiscoveryServiceStreamExtAuthConfigClient{stream}
	return x, nil
}

type ExtAuthDiscoveryService_StreamExtAuthConfigClient interface {
	Send(*v2.DiscoveryRequest) error
	Recv() (*v2.DiscoveryResponse, error)
	grpc.ClientStream
}

type extAuthDiscoveryServiceStreamExtAuthConfigClient struct {
	grpc.ClientStream
}

func (x *extAuthDiscoveryServiceStreamExtAuthConfigClient) Send(m *v2.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *extAuthDiscoveryServiceStreamExtAuthConfigClient) Recv() (*v2.DiscoveryResponse, error) {
	m := new(v2.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *extAuthDiscoveryServiceClient) DeltaExtAuthConfig(ctx context.Context, opts ...grpc.CallOption) (ExtAuthDiscoveryService_DeltaExtAuthConfigClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExtAuthDiscoveryService_serviceDesc.Streams[1], "/enterprise.gloo.solo.io.ExtAuthDiscoveryService/DeltaExtAuthConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &extAuthDiscoveryServiceDeltaExtAuthConfigClient{stream}
	return x, nil
}

type ExtAuthDiscoveryService_DeltaExtAuthConfigClient interface {
	Send(*v2.DeltaDiscoveryRequest) error
	Recv() (*v2.DeltaDiscoveryResponse, error)
	grpc.ClientStream
}

type extAuthDiscoveryServiceDeltaExtAuthConfigClient struct {
	grpc.ClientStream
}

func (x *extAuthDiscoveryServiceDeltaExtAuthConfigClient) Send(m *v2.DeltaDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *extAuthDiscoveryServiceDeltaExtAuthConfigClient) Recv() (*v2.DeltaDiscoveryResponse, error) {
	m := new(v2.DeltaDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *extAuthDiscoveryServiceClient) FetchExtAuthConfig(ctx context.Context, in *v2.DiscoveryRequest, opts ...grpc.CallOption) (*v2.DiscoveryResponse, error) {
	out := new(v2.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/enterprise.gloo.solo.io.ExtAuthDiscoveryService/FetchExtAuthConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtAuthDiscoveryServiceServer is the server API for ExtAuthDiscoveryService service.
type ExtAuthDiscoveryServiceServer interface {
	StreamExtAuthConfig(ExtAuthDiscoveryService_StreamExtAuthConfigServer) error
	DeltaExtAuthConfig(ExtAuthDiscoveryService_DeltaExtAuthConfigServer) error
	FetchExtAuthConfig(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error)
}

// UnimplementedExtAuthDiscoveryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExtAuthDiscoveryServiceServer struct {
}

func (*UnimplementedExtAuthDiscoveryServiceServer) StreamExtAuthConfig(ExtAuthDiscoveryService_StreamExtAuthConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamExtAuthConfig not implemented")
}
func (*UnimplementedExtAuthDiscoveryServiceServer) DeltaExtAuthConfig(ExtAuthDiscoveryService_DeltaExtAuthConfigServer) error {
	return status.Errorf(codes.Unimplemented, "method DeltaExtAuthConfig not implemented")
}
func (*UnimplementedExtAuthDiscoveryServiceServer) FetchExtAuthConfig(context.Context, *v2.DiscoveryRequest) (*v2.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchExtAuthConfig not implemented")
}

func RegisterExtAuthDiscoveryServiceServer(s *grpc.Server, srv ExtAuthDiscoveryServiceServer) {
	s.RegisterService(&_ExtAuthDiscoveryService_serviceDesc, srv)
}

func _ExtAuthDiscoveryService_StreamExtAuthConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExtAuthDiscoveryServiceServer).StreamExtAuthConfig(&extAuthDiscoveryServiceStreamExtAuthConfigServer{stream})
}

type ExtAuthDiscoveryService_StreamExtAuthConfigServer interface {
	Send(*v2.DiscoveryResponse) error
	Recv() (*v2.DiscoveryRequest, error)
	grpc.ServerStream
}

type extAuthDiscoveryServiceStreamExtAuthConfigServer struct {
	grpc.ServerStream
}

func (x *extAuthDiscoveryServiceStreamExtAuthConfigServer) Send(m *v2.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *extAuthDiscoveryServiceStreamExtAuthConfigServer) Recv() (*v2.DiscoveryRequest, error) {
	m := new(v2.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExtAuthDiscoveryService_DeltaExtAuthConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExtAuthDiscoveryServiceServer).DeltaExtAuthConfig(&extAuthDiscoveryServiceDeltaExtAuthConfigServer{stream})
}

type ExtAuthDiscoveryService_DeltaExtAuthConfigServer interface {
	Send(*v2.DeltaDiscoveryResponse) error
	Recv() (*v2.DeltaDiscoveryRequest, error)
	grpc.ServerStream
}

type extAuthDiscoveryServiceDeltaExtAuthConfigServer struct {
	grpc.ServerStream
}

func (x *extAuthDiscoveryServiceDeltaExtAuthConfigServer) Send(m *v2.DeltaDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *extAuthDiscoveryServiceDeltaExtAuthConfigServer) Recv() (*v2.DeltaDiscoveryRequest, error) {
	m := new(v2.DeltaDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ExtAuthDiscoveryService_FetchExtAuthConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtAuthDiscoveryServiceServer).FetchExtAuthConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.gloo.solo.io.ExtAuthDiscoveryService/FetchExtAuthConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtAuthDiscoveryServiceServer).FetchExtAuthConfig(ctx, req.(*v2.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExtAuthDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enterprise.gloo.solo.io.ExtAuthDiscoveryService",
	HandlerType: (*ExtAuthDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchExtAuthConfig",
			Handler:    _ExtAuthDiscoveryService_FetchExtAuthConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamExtAuthConfig",
			Handler:       _ExtAuthDiscoveryService_StreamExtAuthConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeltaExtAuthConfig",
			Handler:       _ExtAuthDiscoveryService_DeltaExtAuthConfig_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto",
}

// ApiKeyServiceClient is the client API for ApiKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiKeyServiceClient interface {
	Create(ctx context.Context, in *ApiKeyCreateRequest, opts ...grpc.CallOption) (*ApiKeyCreateResponse, error)
	Read(ctx context.Context, in *ApiKeyReadRequest, opts ...grpc.CallOption) (*ApiKeyReadResponse, error)
	Update(ctx context.Context, in *ApiKeyUpdateRequest, opts ...grpc.CallOption) (*ApiKeyUpdateResponse, error)
	Delete(ctx context.Context, in *ApiKeyDeleteRequest, opts ...grpc.CallOption) (*ApiKeyDeleteResponse, error)
}

type apiKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiKeyServiceClient(cc grpc.ClientConnInterface) ApiKeyServiceClient {
	return &apiKeyServiceClient{cc}
}

func (c *apiKeyServiceClient) Create(ctx context.Context, in *ApiKeyCreateRequest, opts ...grpc.CallOption) (*ApiKeyCreateResponse, error) {
	out := new(ApiKeyCreateResponse)
	err := c.cc.Invoke(ctx, "/enterprise.gloo.solo.io.ApiKeyService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) Read(ctx context.Context, in *ApiKeyReadRequest, opts ...grpc.CallOption) (*ApiKeyReadResponse, error) {
	out := new(ApiKeyReadResponse)
	err := c.cc.Invoke(ctx, "/enterprise.gloo.solo.io.ApiKeyService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) Update(ctx context.Context, in *ApiKeyUpdateRequest, opts ...grpc.CallOption) (*ApiKeyUpdateResponse, error) {
	out := new(ApiKeyUpdateResponse)
	err := c.cc.Invoke(ctx, "/enterprise.gloo.solo.io.ApiKeyService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiKeyServiceClient) Delete(ctx context.Context, in *ApiKeyDeleteRequest, opts ...grpc.CallOption) (*ApiKeyDeleteResponse, error) {
	out := new(ApiKeyDeleteResponse)
	err := c.cc.Invoke(ctx, "/enterprise.gloo.solo.io.ApiKeyService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiKeyServiceServer is the server API for ApiKeyService service.
type ApiKeyServiceServer interface {
	Create(context.Context, *ApiKeyCreateRequest) (*ApiKeyCreateResponse, error)
	Read(context.Context, *ApiKeyReadRequest) (*ApiKeyReadResponse, error)
	Update(context.Context, *ApiKeyUpdateRequest) (*ApiKeyUpdateResponse, error)
	Delete(context.Context, *ApiKeyDeleteRequest) (*ApiKeyDeleteResponse, error)
}

// UnimplementedApiKeyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedApiKeyServiceServer struct {
}

func (*UnimplementedApiKeyServiceServer) Create(context.Context, *ApiKeyCreateRequest) (*ApiKeyCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedApiKeyServiceServer) Read(context.Context, *ApiKeyReadRequest) (*ApiKeyReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedApiKeyServiceServer) Update(context.Context, *ApiKeyUpdateRequest) (*ApiKeyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedApiKeyServiceServer) Delete(context.Context, *ApiKeyDeleteRequest) (*ApiKeyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterApiKeyServiceServer(s *grpc.Server, srv ApiKeyServiceServer) {
	s.RegisterService(&_ApiKeyService_serviceDesc, srv)
}

func _ApiKeyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiKeyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.gloo.solo.io.ApiKeyService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).Create(ctx, req.(*ApiKeyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiKeyReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.gloo.solo.io.ApiKeyService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).Read(ctx, req.(*ApiKeyReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiKeyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.gloo.solo.io.ApiKeyService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).Update(ctx, req.(*ApiKeyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiKeyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiKeyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiKeyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enterprise.gloo.solo.io.ApiKeyService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiKeyServiceServer).Delete(ctx, req.(*ApiKeyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiKeyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enterprise.gloo.solo.io.ApiKeyService",
	HandlerType: (*ApiKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ApiKeyService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ApiKeyService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApiKeyService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApiKeyService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto",
}
