// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/golang/protobuf/proto"
	equality "github.com/solo-io/protoc-gen-ext/pkg/equality"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = equality.Equalizer(nil)
	_ = proto.Message(nil)
)

// Equal function
func (m *ExtAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetAuthConfigRefName(), target.GetAuthConfigRefName()) != 0 {
		return false
	}

	if len(m.GetConfigs()) != len(target.GetConfigs()) {
		return false
	}
	for idx, v := range m.GetConfigs() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetConfigs()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetConfigs()[idx]) {
				return false
			}
		}

	}

	if h, ok := interface{}(m.GetBooleanExpr()).(equality.Equalizer); ok {
		if !h.Equal(target.GetBooleanExpr()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetBooleanExpr(), target.GetBooleanExpr()) {
			return false
		}
	}

	if m.GetFailOnRedirect() != target.GetFailOnRedirect() {
		return false
	}

	return true
}

// Equal function
func (m *ApiKeyCreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiKeyCreateRequest)
	if !ok {
		that2, ok := that.(ApiKeyCreateRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetApiKeys()) != len(target.GetApiKeys()) {
		return false
	}
	for idx, v := range m.GetApiKeys() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApiKeys()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApiKeys()[idx]) {
				return false
			}
		}

	}

	if len(m.GetRawApiKeys()) != len(target.GetRawApiKeys()) {
		return false
	}
	for idx, v := range m.GetRawApiKeys() {

		if strings.Compare(v, target.GetRawApiKeys()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *ApiKeyCreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiKeyCreateResponse)
	if !ok {
		that2, ok := that.(ApiKeyCreateResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetApiKeys()) != len(target.GetApiKeys()) {
		return false
	}
	for idx, v := range m.GetApiKeys() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApiKeys()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApiKeys()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ApiKeyReadRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiKeyReadRequest)
	if !ok {
		that2, ok := that.(ApiKeyReadRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetRawApiKeys()) != len(target.GetRawApiKeys()) {
		return false
	}
	for idx, v := range m.GetRawApiKeys() {

		if strings.Compare(v, target.GetRawApiKeys()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetLabels()) != len(target.GetLabels()) {
		return false
	}
	for idx, v := range m.GetLabels() {

		if strings.Compare(v, target.GetLabels()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *ApiKeyReadResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiKeyReadResponse)
	if !ok {
		that2, ok := that.(ApiKeyReadResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetApiKeys()) != len(target.GetApiKeys()) {
		return false
	}
	for idx, v := range m.GetApiKeys() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApiKeys()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApiKeys()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ApiKeyUpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiKeyUpdateRequest)
	if !ok {
		that2, ok := that.(ApiKeyUpdateRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetUpsert() != target.GetUpsert() {
		return false
	}

	if len(m.GetApiKeys()) != len(target.GetApiKeys()) {
		return false
	}
	for idx, v := range m.GetApiKeys() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApiKeys()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApiKeys()[idx]) {
				return false
			}
		}

	}

	if len(m.GetRawApiKeys()) != len(target.GetRawApiKeys()) {
		return false
	}
	for idx, v := range m.GetRawApiKeys() {

		if strings.Compare(v, target.GetRawApiKeys()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *ApiKeyUpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiKeyUpdateResponse)
	if !ok {
		that2, ok := that.(ApiKeyUpdateResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetApiKeys()) != len(target.GetApiKeys()) {
		return false
	}
	for idx, v := range m.GetApiKeys() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetApiKeys()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetApiKeys()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ApiKeyDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiKeyDeleteRequest)
	if !ok {
		that2, ok := that.(ApiKeyDeleteRequest)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetRawApiKeys()) != len(target.GetRawApiKeys()) {
		return false
	}
	for idx, v := range m.GetRawApiKeys() {

		if strings.Compare(v, target.GetRawApiKeys()[idx]) != 0 {
			return false
		}

	}

	if len(m.GetLabels()) != len(target.GetLabels()) {
		return false
	}
	for idx, v := range m.GetLabels() {

		if strings.Compare(v, target.GetLabels()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *ApiKeyDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ApiKeyDeleteResponse)
	if !ok {
		that2, ok := that.(ApiKeyDeleteResponse)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_Azure) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_Azure)
	if !ok {
		that2, ok := that.(ExtAuthConfig_Azure)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetClientId(), target.GetClientId()) != 0 {
		return false
	}

	if strings.Compare(m.GetTenantId(), target.GetTenantId()) != 0 {
		return false
	}

	if strings.Compare(m.GetClientSecret(), target.GetClientSecret()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetClaimsCachingOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetClaimsCachingOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetClaimsCachingOptions(), target.GetClaimsCachingOptions()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_ClaimToHeader) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_ClaimToHeader)
	if !ok {
		that2, ok := that.(ExtAuthConfig_ClaimToHeader)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetClaim(), target.GetClaim()) != 0 {
		return false
	}

	if strings.Compare(m.GetHeader(), target.GetHeader()) != 0 {
		return false
	}

	if m.GetAppend() != target.GetAppend() {
		return false
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_BasicAuthInternal) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_BasicAuthInternal)
	if !ok {
		that2, ok := that.(ExtAuthConfig_BasicAuthInternal)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetRealm(), target.GetRealm()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetEncryption()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEncryption()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEncryption(), target.GetEncryption()) {
			return false
		}
	}

	switch m.UserSource.(type) {

	case *ExtAuthConfig_BasicAuthInternal_UserList_:
		if _, ok := target.UserSource.(*ExtAuthConfig_BasicAuthInternal_UserList_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetUserList()).(equality.Equalizer); ok {
			if !h.Equal(target.GetUserList()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetUserList(), target.GetUserList()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.UserSource != target.UserSource {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_OAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_OAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OAuthConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetClientId(), target.GetClientId()) != 0 {
		return false
	}

	if strings.Compare(m.GetClientSecret(), target.GetClientSecret()) != 0 {
		return false
	}

	if strings.Compare(m.GetIssuerUrl(), target.GetIssuerUrl()) != 0 {
		return false
	}

	if len(m.GetAuthEndpointQueryParams()) != len(target.GetAuthEndpointQueryParams()) {
		return false
	}
	for k, v := range m.GetAuthEndpointQueryParams() {

		if strings.Compare(v, target.GetAuthEndpointQueryParams()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetAppUrl(), target.GetAppUrl()) != 0 {
		return false
	}

	if strings.Compare(m.GetCallbackPath(), target.GetCallbackPath()) != 0 {
		return false
	}

	if len(m.GetScopes()) != len(target.GetScopes()) {
		return false
	}
	for idx, v := range m.GetScopes() {

		if strings.Compare(v, target.GetScopes()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *ExtAuthConfig_UserSessionConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_UserSessionConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_UserSessionConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if m.GetFailOnFetchFailure() != target.GetFailOnFetchFailure() {
		return false
	}

	if h, ok := interface{}(m.GetCookieOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCookieOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCookieOptions(), target.GetCookieOptions()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCipherConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCipherConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCipherConfig(), target.GetCipherConfig()) {
			return false
		}
	}

	switch m.Session.(type) {

	case *ExtAuthConfig_UserSessionConfig_Cookie:
		if _, ok := target.Session.(*ExtAuthConfig_UserSessionConfig_Cookie); !ok {
			return false
		}

		if h, ok := interface{}(m.GetCookie()).(equality.Equalizer); ok {
			if !h.Equal(target.GetCookie()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetCookie(), target.GetCookie()) {
				return false
			}
		}

	case *ExtAuthConfig_UserSessionConfig_Redis:
		if _, ok := target.Session.(*ExtAuthConfig_UserSessionConfig_Redis); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRedis()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRedis()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRedis(), target.GetRedis()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Session != target.Session {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_OidcAuthorizationCodeConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OidcAuthorizationCodeConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetClientId(), target.GetClientId()) != 0 {
		return false
	}

	if strings.Compare(m.GetClientSecret(), target.GetClientSecret()) != 0 {
		return false
	}

	if strings.Compare(m.GetIssuerUrl(), target.GetIssuerUrl()) != 0 {
		return false
	}

	if len(m.GetAuthEndpointQueryParams()) != len(target.GetAuthEndpointQueryParams()) {
		return false
	}
	for k, v := range m.GetAuthEndpointQueryParams() {

		if strings.Compare(v, target.GetAuthEndpointQueryParams()[k]) != 0 {
			return false
		}

	}

	if len(m.GetTokenEndpointQueryParams()) != len(target.GetTokenEndpointQueryParams()) {
		return false
	}
	for k, v := range m.GetTokenEndpointQueryParams() {

		if strings.Compare(v, target.GetTokenEndpointQueryParams()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetAppUrl(), target.GetAppUrl()) != 0 {
		return false
	}

	if strings.Compare(m.GetCallbackPath(), target.GetCallbackPath()) != 0 {
		return false
	}

	if strings.Compare(m.GetLogoutPath(), target.GetLogoutPath()) != 0 {
		return false
	}

	if strings.Compare(m.GetAfterLogoutUrl(), target.GetAfterLogoutUrl()) != 0 {
		return false
	}

	if len(m.GetScopes()) != len(target.GetScopes()) {
		return false
	}
	for idx, v := range m.GetScopes() {

		if strings.Compare(v, target.GetScopes()[idx]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetSession()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSession()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSession(), target.GetSession()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetHeaders()).(equality.Equalizer); ok {
		if !h.Equal(target.GetHeaders()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetHeaders(), target.GetHeaders()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDiscoveryOverride()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDiscoveryOverride()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDiscoveryOverride(), target.GetDiscoveryOverride()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetDiscoveryPollInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetDiscoveryPollInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetDiscoveryPollInterval(), target.GetDiscoveryPollInterval()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetJwksCacheRefreshPolicy()).(equality.Equalizer); ok {
		if !h.Equal(target.GetJwksCacheRefreshPolicy()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetJwksCacheRefreshPolicy(), target.GetJwksCacheRefreshPolicy()) {
			return false
		}
	}

	if strings.Compare(m.GetSessionIdHeaderName(), target.GetSessionIdHeaderName()) != 0 {
		return false
	}

	if m.GetParseCallbackPathAsRegex() != target.GetParseCallbackPathAsRegex() {
		return false
	}

	if h, ok := interface{}(m.GetAutoMapFromMetadata()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAutoMapFromMetadata()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAutoMapFromMetadata(), target.GetAutoMapFromMetadata()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetEndSessionProperties()).(equality.Equalizer); ok {
		if !h.Equal(target.GetEndSessionProperties()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetEndSessionProperties(), target.GetEndSessionProperties()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetUserSession()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUserSession()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUserSession(), target.GetUserSession()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetPkJwtClientAuthenticationConfig()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPkJwtClientAuthenticationConfig()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPkJwtClientAuthenticationConfig(), target.GetPkJwtClientAuthenticationConfig()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetAccessToken()).(equality.Equalizer); ok {
		if !h.Equal(target.GetAccessToken()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetAccessToken(), target.GetAccessToken()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetIdentityToken()).(equality.Equalizer); ok {
		if !h.Equal(target.GetIdentityToken()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetIdentityToken(), target.GetIdentityToken()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetFrontChannelLogout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetFrontChannelLogout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetFrontChannelLogout(), target.GetFrontChannelLogout()) {
			return false
		}
	}

	if len(m.GetDynamicMetadataFromClaims()) != len(target.GetDynamicMetadataFromClaims()) {
		return false
	}
	for k, v := range m.GetDynamicMetadataFromClaims() {

		if strings.Compare(v, target.GetDynamicMetadataFromClaims()[k]) != 0 {
			return false
		}

	}

	switch m.Provider.(type) {

	case *ExtAuthConfig_OidcAuthorizationCodeConfig_Default_:
		if _, ok := target.Provider.(*ExtAuthConfig_OidcAuthorizationCodeConfig_Default_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetDefault()).(equality.Equalizer); ok {
			if !h.Equal(target.GetDefault()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetDefault(), target.GetDefault()) {
				return false
			}
		}

	case *ExtAuthConfig_OidcAuthorizationCodeConfig_Azure:
		if _, ok := target.Provider.(*ExtAuthConfig_OidcAuthorizationCodeConfig_Azure); !ok {
			return false
		}

		if h, ok := interface{}(m.GetAzure()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAzure()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAzure(), target.GetAzure()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Provider != target.Provider {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_AccessTokenValidationConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_AccessTokenValidationConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_AccessTokenValidationConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetUserinfoUrl(), target.GetUserinfoUrl()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetCacheTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCacheTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCacheTimeout(), target.GetCacheTimeout()) {
			return false
		}
	}

	if len(m.GetDynamicMetadataFromClaims()) != len(target.GetDynamicMetadataFromClaims()) {
		return false
	}
	for k, v := range m.GetDynamicMetadataFromClaims() {

		if strings.Compare(v, target.GetDynamicMetadataFromClaims()[k]) != 0 {
			return false
		}

	}

	if len(m.GetClaimsToHeaders()) != len(target.GetClaimsToHeaders()) {
		return false
	}
	for idx, v := range m.GetClaimsToHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetClaimsToHeaders()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetClaimsToHeaders()[idx]) {
				return false
			}
		}

	}

	switch m.ValidationType.(type) {

	case *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionUrl:
		if _, ok := target.ValidationType.(*ExtAuthConfig_AccessTokenValidationConfig_IntrospectionUrl); !ok {
			return false
		}

		if strings.Compare(m.GetIntrospectionUrl(), target.GetIntrospectionUrl()) != 0 {
			return false
		}

	case *ExtAuthConfig_AccessTokenValidationConfig_Jwt:
		if _, ok := target.ValidationType.(*ExtAuthConfig_AccessTokenValidationConfig_Jwt); !ok {
			return false
		}

		if h, ok := interface{}(m.GetJwt()).(equality.Equalizer); ok {
			if !h.Equal(target.GetJwt()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetJwt(), target.GetJwt()) {
				return false
			}
		}

	case *ExtAuthConfig_AccessTokenValidationConfig_Introspection:
		if _, ok := target.ValidationType.(*ExtAuthConfig_AccessTokenValidationConfig_Introspection); !ok {
			return false
		}

		if h, ok := interface{}(m.GetIntrospection()).(equality.Equalizer); ok {
			if !h.Equal(target.GetIntrospection()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetIntrospection(), target.GetIntrospection()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ValidationType != target.ValidationType {
			return false
		}
	}

	switch m.ScopeValidation.(type) {

	case *ExtAuthConfig_AccessTokenValidationConfig_RequiredScopes:
		if _, ok := target.ScopeValidation.(*ExtAuthConfig_AccessTokenValidationConfig_RequiredScopes); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRequiredScopes()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRequiredScopes()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRequiredScopes(), target.GetRequiredScopes()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ScopeValidation != target.ScopeValidation {
			return false
		}
	}

	switch m.Provider.(type) {

	case *ExtAuthConfig_AccessTokenValidationConfig_Default_:
		if _, ok := target.Provider.(*ExtAuthConfig_AccessTokenValidationConfig_Default_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetDefault()).(equality.Equalizer); ok {
			if !h.Equal(target.GetDefault()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetDefault(), target.GetDefault()) {
				return false
			}
		}

	case *ExtAuthConfig_AccessTokenValidationConfig_Azure:
		if _, ok := target.Provider.(*ExtAuthConfig_AccessTokenValidationConfig_Azure); !ok {
			return false
		}

		if h, ok := interface{}(m.GetAzure()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAzure()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAzure(), target.GetAzure()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Provider != target.Provider {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_PlainOAuth2Config) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_PlainOAuth2Config)
	if !ok {
		that2, ok := that.(ExtAuthConfig_PlainOAuth2Config)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetClientId(), target.GetClientId()) != 0 {
		return false
	}

	if strings.Compare(m.GetClientSecret(), target.GetClientSecret()) != 0 {
		return false
	}

	if len(m.GetAuthEndpointQueryParams()) != len(target.GetAuthEndpointQueryParams()) {
		return false
	}
	for k, v := range m.GetAuthEndpointQueryParams() {

		if strings.Compare(v, target.GetAuthEndpointQueryParams()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetAppUrl(), target.GetAppUrl()) != 0 {
		return false
	}

	if strings.Compare(m.GetCallbackPath(), target.GetCallbackPath()) != 0 {
		return false
	}

	if len(m.GetScopes()) != len(target.GetScopes()) {
		return false
	}
	for idx, v := range m.GetScopes() {

		if strings.Compare(v, target.GetScopes()[idx]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetSession()).(equality.Equalizer); ok {
		if !h.Equal(target.GetSession()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetSession(), target.GetSession()) {
			return false
		}
	}

	if strings.Compare(m.GetLogoutPath(), target.GetLogoutPath()) != 0 {
		return false
	}

	if len(m.GetTokenEndpointQueryParams()) != len(target.GetTokenEndpointQueryParams()) {
		return false
	}
	for k, v := range m.GetTokenEndpointQueryParams() {

		if strings.Compare(v, target.GetTokenEndpointQueryParams()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetAfterLogoutUrl(), target.GetAfterLogoutUrl()) != 0 {
		return false
	}

	if strings.Compare(m.GetAuthEndpoint(), target.GetAuthEndpoint()) != 0 {
		return false
	}

	if strings.Compare(m.GetTokenEndpoint(), target.GetTokenEndpoint()) != 0 {
		return false
	}

	if strings.Compare(m.GetRevocationEndpoint(), target.GetRevocationEndpoint()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetUserSession()).(equality.Equalizer); ok {
		if !h.Equal(target.GetUserSession()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetUserSession(), target.GetUserSession()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_OAuth2Config) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_OAuth2Config)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OAuth2Config)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.OauthType.(type) {

	case *ExtAuthConfig_OAuth2Config_OidcAuthorizationCode:
		if _, ok := target.OauthType.(*ExtAuthConfig_OAuth2Config_OidcAuthorizationCode); !ok {
			return false
		}

		if h, ok := interface{}(m.GetOidcAuthorizationCode()).(equality.Equalizer); ok {
			if !h.Equal(target.GetOidcAuthorizationCode()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetOidcAuthorizationCode(), target.GetOidcAuthorizationCode()) {
				return false
			}
		}

	case *ExtAuthConfig_OAuth2Config_AccessTokenValidationConfig:
		if _, ok := target.OauthType.(*ExtAuthConfig_OAuth2Config_AccessTokenValidationConfig); !ok {
			return false
		}

		if h, ok := interface{}(m.GetAccessTokenValidationConfig()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAccessTokenValidationConfig()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAccessTokenValidationConfig(), target.GetAccessTokenValidationConfig()) {
				return false
			}
		}

	case *ExtAuthConfig_OAuth2Config_Oauth2Config:
		if _, ok := target.OauthType.(*ExtAuthConfig_OAuth2Config_Oauth2Config); !ok {
			return false
		}

		if h, ok := interface{}(m.GetOauth2Config()).(equality.Equalizer); ok {
			if !h.Equal(target.GetOauth2Config()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetOauth2Config(), target.GetOauth2Config()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.OauthType != target.OauthType {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_ApiKeyAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_ApiKeyAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_ApiKeyAuthConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetValidApiKeys()) != len(target.GetValidApiKeys()) {
		return false
	}
	for k, v := range m.GetValidApiKeys() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetValidApiKeys()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetValidApiKeys()[k]) {
				return false
			}
		}

	}

	if strings.Compare(m.GetHeaderName(), target.GetHeaderName()) != 0 {
		return false
	}

	if len(m.GetHeadersFromKeyMetadata()) != len(target.GetHeadersFromKeyMetadata()) {
		return false
	}
	for k, v := range m.GetHeadersFromKeyMetadata() {

		if strings.Compare(v, target.GetHeadersFromKeyMetadata()[k]) != 0 {
			return false
		}

	}

	if m.GetSkipMetadataValidation() != target.GetSkipMetadataValidation() {
		return false
	}

	switch m.StorageBackend.(type) {

	case *ExtAuthConfig_ApiKeyAuthConfig_K8SSecretApikeyStorage:
		if _, ok := target.StorageBackend.(*ExtAuthConfig_ApiKeyAuthConfig_K8SSecretApikeyStorage); !ok {
			return false
		}

		if h, ok := interface{}(m.GetK8SSecretApikeyStorage()).(equality.Equalizer); ok {
			if !h.Equal(target.GetK8SSecretApikeyStorage()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetK8SSecretApikeyStorage(), target.GetK8SSecretApikeyStorage()) {
				return false
			}
		}

	case *ExtAuthConfig_ApiKeyAuthConfig_AerospikeApikeyStorage:
		if _, ok := target.StorageBackend.(*ExtAuthConfig_ApiKeyAuthConfig_AerospikeApikeyStorage); !ok {
			return false
		}

		if h, ok := interface{}(m.GetAerospikeApikeyStorage()).(equality.Equalizer); ok {
			if !h.Equal(target.GetAerospikeApikeyStorage()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetAerospikeApikeyStorage(), target.GetAerospikeApikeyStorage()) {
				return false
			}
		}

	case *ExtAuthConfig_ApiKeyAuthConfig_ServerDefaultApikeyStorage:
		if _, ok := target.StorageBackend.(*ExtAuthConfig_ApiKeyAuthConfig_ServerDefaultApikeyStorage); !ok {
			return false
		}

		if h, ok := interface{}(m.GetServerDefaultApikeyStorage()).(equality.Equalizer); ok {
			if !h.Equal(target.GetServerDefaultApikeyStorage()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetServerDefaultApikeyStorage(), target.GetServerDefaultApikeyStorage()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.StorageBackend != target.StorageBackend {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_OpaAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_OpaAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OpaAuthConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetModules()) != len(target.GetModules()) {
		return false
	}
	for k, v := range m.GetModules() {

		if strings.Compare(v, target.GetModules()[k]) != 0 {
			return false
		}

	}

	if strings.Compare(m.GetQuery(), target.GetQuery()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOptions(), target.GetOptions()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_OpaServerAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_OpaServerAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OpaServerAuthConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetPackage(), target.GetPackage()) != 0 {
		return false
	}

	if strings.Compare(m.GetRuleName(), target.GetRuleName()) != 0 {
		return false
	}

	if strings.Compare(m.GetServerAddr(), target.GetServerAddr()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetOptions(), target.GetOptions()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_LdapConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_LdapConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_LdapConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetAddress(), target.GetAddress()) != 0 {
		return false
	}

	if strings.Compare(m.GetUserDnTemplate(), target.GetUserDnTemplate()) != 0 {
		return false
	}

	if strings.Compare(m.GetMembershipAttributeName(), target.GetMembershipAttributeName()) != 0 {
		return false
	}

	if len(m.GetAllowedGroups()) != len(target.GetAllowedGroups()) {
		return false
	}
	for idx, v := range m.GetAllowedGroups() {

		if strings.Compare(v, target.GetAllowedGroups()[idx]) != 0 {
			return false
		}

	}

	if h, ok := interface{}(m.GetPool()).(equality.Equalizer); ok {
		if !h.Equal(target.GetPool()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetPool(), target.GetPool()) {
			return false
		}
	}

	if strings.Compare(m.GetSearchFilter(), target.GetSearchFilter()) != 0 {
		return false
	}

	if m.GetDisableGroupChecking() != target.GetDisableGroupChecking() {
		return false
	}

	if h, ok := interface{}(m.GetGroupLookupSettings()).(equality.Equalizer); ok {
		if !h.Equal(target.GetGroupLookupSettings()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetGroupLookupSettings(), target.GetGroupLookupSettings()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_LdapServiceAccountConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_LdapServiceAccountConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_LdapServiceAccountConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetUsername(), target.GetUsername()) != 0 {
		return false
	}

	if strings.Compare(m.GetPassword(), target.GetPassword()) != 0 {
		return false
	}

	if m.GetCheckGroupsWithServiceAccount() != target.GetCheckGroupsWithServiceAccount() {
		return false
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_HmacAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_HmacAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_HmacAuthConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.SecretStorage.(type) {

	case *ExtAuthConfig_HmacAuthConfig_SecretList:
		if _, ok := target.SecretStorage.(*ExtAuthConfig_HmacAuthConfig_SecretList); !ok {
			return false
		}

		if h, ok := interface{}(m.GetSecretList()).(equality.Equalizer); ok {
			if !h.Equal(target.GetSecretList()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetSecretList(), target.GetSecretList()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.SecretStorage != target.SecretStorage {
			return false
		}
	}

	switch m.ImplementationType.(type) {

	case *ExtAuthConfig_HmacAuthConfig_ParametersInHeaders:
		if _, ok := target.ImplementationType.(*ExtAuthConfig_HmacAuthConfig_ParametersInHeaders); !ok {
			return false
		}

		if h, ok := interface{}(m.GetParametersInHeaders()).(equality.Equalizer); ok {
			if !h.Equal(target.GetParametersInHeaders()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetParametersInHeaders(), target.GetParametersInHeaders()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.ImplementationType != target.ImplementationType {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_PortalAuthConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_PortalAuthConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_PortalAuthConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetUrl(), target.GetUrl()) != 0 {
		return false
	}

	if strings.Compare(m.GetApiKeyHeader(), target.GetApiKeyHeader()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetRedisOptions()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRedisOptions()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRedisOptions(), target.GetRedisOptions()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetCacheDuration()).(equality.Equalizer); ok {
		if !h.Equal(target.GetCacheDuration()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetCacheDuration(), target.GetCacheDuration()) {
			return false
		}
	}

	if h, ok := interface{}(m.GetRequestTimeout()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRequestTimeout()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRequestTimeout(), target.GetRequestTimeout()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_InMemorySecretList) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_InMemorySecretList)
	if !ok {
		that2, ok := that.(ExtAuthConfig_InMemorySecretList)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetSecretList()) != len(target.GetSecretList()) {
		return false
	}
	for k, v := range m.GetSecretList() {

		if strings.Compare(v, target.GetSecretList()[k]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *ExtAuthConfig_Config) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_Config)
	if !ok {
		that2, ok := that.(ExtAuthConfig_Config)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if h, ok := interface{}(m.GetName()).(equality.Equalizer); ok {
		if !h.Equal(target.GetName()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetName(), target.GetName()) {
			return false
		}
	}

	switch m.AuthConfig.(type) {

	case *ExtAuthConfig_Config_Oauth:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_Oauth); !ok {
			return false
		}

		if h, ok := interface{}(m.GetOauth()).(equality.Equalizer); ok {
			if !h.Equal(target.GetOauth()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetOauth(), target.GetOauth()) {
				return false
			}
		}

	case *ExtAuthConfig_Config_Oauth2:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_Oauth2); !ok {
			return false
		}

		if h, ok := interface{}(m.GetOauth2()).(equality.Equalizer); ok {
			if !h.Equal(target.GetOauth2()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetOauth2(), target.GetOauth2()) {
				return false
			}
		}

	case *ExtAuthConfig_Config_BasicAuth:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_BasicAuth); !ok {
			return false
		}

		if h, ok := interface{}(m.GetBasicAuth()).(equality.Equalizer); ok {
			if !h.Equal(target.GetBasicAuth()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetBasicAuth(), target.GetBasicAuth()) {
				return false
			}
		}

	case *ExtAuthConfig_Config_BasicAuthInternal:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_BasicAuthInternal); !ok {
			return false
		}

		if h, ok := interface{}(m.GetBasicAuthInternal()).(equality.Equalizer); ok {
			if !h.Equal(target.GetBasicAuthInternal()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetBasicAuthInternal(), target.GetBasicAuthInternal()) {
				return false
			}
		}

	case *ExtAuthConfig_Config_ApiKeyAuth:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_ApiKeyAuth); !ok {
			return false
		}

		if h, ok := interface{}(m.GetApiKeyAuth()).(equality.Equalizer); ok {
			if !h.Equal(target.GetApiKeyAuth()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetApiKeyAuth(), target.GetApiKeyAuth()) {
				return false
			}
		}

	case *ExtAuthConfig_Config_PluginAuth:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_PluginAuth); !ok {
			return false
		}

		if h, ok := interface{}(m.GetPluginAuth()).(equality.Equalizer); ok {
			if !h.Equal(target.GetPluginAuth()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetPluginAuth(), target.GetPluginAuth()) {
				return false
			}
		}

	case *ExtAuthConfig_Config_OpaAuth:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_OpaAuth); !ok {
			return false
		}

		if h, ok := interface{}(m.GetOpaAuth()).(equality.Equalizer); ok {
			if !h.Equal(target.GetOpaAuth()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetOpaAuth(), target.GetOpaAuth()) {
				return false
			}
		}

	case *ExtAuthConfig_Config_Ldap:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_Ldap); !ok {
			return false
		}

		if h, ok := interface{}(m.GetLdap()).(equality.Equalizer); ok {
			if !h.Equal(target.GetLdap()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetLdap(), target.GetLdap()) {
				return false
			}
		}

	case *ExtAuthConfig_Config_LdapInternal:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_LdapInternal); !ok {
			return false
		}

		if h, ok := interface{}(m.GetLdapInternal()).(equality.Equalizer); ok {
			if !h.Equal(target.GetLdapInternal()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetLdapInternal(), target.GetLdapInternal()) {
				return false
			}
		}

	case *ExtAuthConfig_Config_Jwt:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_Jwt); !ok {
			return false
		}

		if h, ok := interface{}(m.GetJwt()).(equality.Equalizer); ok {
			if !h.Equal(target.GetJwt()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetJwt(), target.GetJwt()) {
				return false
			}
		}

	case *ExtAuthConfig_Config_PassThroughAuth:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_PassThroughAuth); !ok {
			return false
		}

		if h, ok := interface{}(m.GetPassThroughAuth()).(equality.Equalizer); ok {
			if !h.Equal(target.GetPassThroughAuth()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetPassThroughAuth(), target.GetPassThroughAuth()) {
				return false
			}
		}

	case *ExtAuthConfig_Config_HmacAuth:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_HmacAuth); !ok {
			return false
		}

		if h, ok := interface{}(m.GetHmacAuth()).(equality.Equalizer); ok {
			if !h.Equal(target.GetHmacAuth()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetHmacAuth(), target.GetHmacAuth()) {
				return false
			}
		}

	case *ExtAuthConfig_Config_OpaServerAuth:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_OpaServerAuth); !ok {
			return false
		}

		if h, ok := interface{}(m.GetOpaServerAuth()).(equality.Equalizer); ok {
			if !h.Equal(target.GetOpaServerAuth()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetOpaServerAuth(), target.GetOpaServerAuth()) {
				return false
			}
		}

	case *ExtAuthConfig_Config_PortalAuth:
		if _, ok := target.AuthConfig.(*ExtAuthConfig_Config_PortalAuth); !ok {
			return false
		}

		if h, ok := interface{}(m.GetPortalAuth()).(equality.Equalizer); ok {
			if !h.Equal(target.GetPortalAuth()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetPortalAuth(), target.GetPortalAuth()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.AuthConfig != target.AuthConfig {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_BasicAuthInternal_EncryptionType) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_BasicAuthInternal_EncryptionType)
	if !ok {
		that2, ok := that.(ExtAuthConfig_BasicAuthInternal_EncryptionType)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	switch m.Algorithm.(type) {

	case *ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr_:
		if _, ok := target.Algorithm.(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetApr()).(equality.Equalizer); ok {
			if !h.Equal(target.GetApr()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetApr(), target.GetApr()) {
				return false
			}
		}

	case *ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1_:
		if _, ok := target.Algorithm.(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetSha1()).(equality.Equalizer); ok {
			if !h.Equal(target.GetSha1()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetSha1(), target.GetSha1()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.Algorithm != target.Algorithm {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_BasicAuthInternal_User) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_BasicAuthInternal_User)
	if !ok {
		that2, ok := that.(ExtAuthConfig_BasicAuthInternal_User)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetSalt(), target.GetSalt()) != 0 {
		return false
	}

	if strings.Compare(m.GetHashedPassword(), target.GetHashedPassword()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_BasicAuthInternal_UserList) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_BasicAuthInternal_UserList)
	if !ok {
		that2, ok := that.(ExtAuthConfig_BasicAuthInternal_UserList)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetUsers()) != len(target.GetUsers()) {
		return false
	}
	for k, v := range m.GetUsers() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetUsers()[k]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetUsers()[k]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1)
	if !ok {
		that2, ok := that.(ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr)
	if !ok {
		that2, ok := that.(ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_UserSessionConfig_CipherConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_UserSessionConfig_CipherConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_UserSessionConfig_CipherConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetKey(), target.GetKey()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetSigningKey(), target.GetSigningKey()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetValidFor()).(equality.Equalizer); ok {
		if !h.Equal(target.GetValidFor()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetValidFor(), target.GetValidFor()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetClaimsToHeaders()) != len(target.GetClaimsToHeaders()) {
		return false
	}
	for idx, v := range m.GetClaimsToHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetClaimsToHeaders()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetClaimsToHeaders()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetClaimsToHeaders()) != len(target.GetClaimsToHeaders()) {
		return false
	}
	for idx, v := range m.GetClaimsToHeaders() {

		if h, ok := interface{}(v).(equality.Equalizer); ok {
			if !h.Equal(target.GetClaimsToHeaders()[idx]) {
				return false
			}
		} else {
			if !proto.Equal(v, target.GetClaimsToHeaders()[idx]) {
				return false
			}
		}

	}

	return true
}

// Equal function
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig_Default) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_OidcAuthorizationCodeConfig_Default)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OidcAuthorizationCodeConfig_Default)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout)
	if !ok {
		that2, ok := that.(ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetPath(), target.GetPath()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation)
	if !ok {
		that2, ok := that.(ExtAuthConfig_AccessTokenValidationConfig_JwtValidation)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetIssuer(), target.GetIssuer()) != 0 {
		return false
	}

	switch m.JwksSourceSpecifier.(type) {

	case *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks_:
		if _, ok := target.JwksSourceSpecifier.(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetRemoteJwks()).(equality.Equalizer); ok {
			if !h.Equal(target.GetRemoteJwks()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetRemoteJwks(), target.GetRemoteJwks()) {
				return false
			}
		}

	case *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks_:
		if _, ok := target.JwksSourceSpecifier.(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks_); !ok {
			return false
		}

		if h, ok := interface{}(m.GetLocalJwks()).(equality.Equalizer); ok {
			if !h.Equal(target.GetLocalJwks()) {
				return false
			}
		} else {
			if !proto.Equal(m.GetLocalJwks(), target.GetLocalJwks()) {
				return false
			}
		}

	default:
		// m is nil but target is not nil
		if m.JwksSourceSpecifier != target.JwksSourceSpecifier {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation)
	if !ok {
		that2, ok := that.(ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetIntrospectionUrl(), target.GetIntrospectionUrl()) != 0 {
		return false
	}

	if strings.Compare(m.GetClientId(), target.GetClientId()) != 0 {
		return false
	}

	if strings.Compare(m.GetClientSecret(), target.GetClientSecret()) != 0 {
		return false
	}

	if strings.Compare(m.GetUserIdAttributeName(), target.GetUserIdAttributeName()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_AccessTokenValidationConfig_ScopeList) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_AccessTokenValidationConfig_ScopeList)
	if !ok {
		that2, ok := that.(ExtAuthConfig_AccessTokenValidationConfig_ScopeList)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if len(m.GetScope()) != len(target.GetScope()) {
		return false
	}
	for idx, v := range m.GetScope() {

		if strings.Compare(v, target.GetScope()[idx]) != 0 {
			return false
		}

	}

	return true
}

// Equal function
func (m *ExtAuthConfig_AccessTokenValidationConfig_Default) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_AccessTokenValidationConfig_Default)
	if !ok {
		that2, ok := that.(ExtAuthConfig_AccessTokenValidationConfig_Default)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks)
	if !ok {
		that2, ok := that.(ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetUrl(), target.GetUrl()) != 0 {
		return false
	}

	if h, ok := interface{}(m.GetRefreshInterval()).(equality.Equalizer); ok {
		if !h.Equal(target.GetRefreshInterval()) {
			return false
		}
	} else {
		if !proto.Equal(m.GetRefreshInterval(), target.GetRefreshInterval()) {
			return false
		}
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks)
	if !ok {
		that2, ok := that.(ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetInlineString(), target.GetInlineString()) != 0 {
		return false
	}

	return true
}

// Equal function
func (m *ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata) Equal(that interface{}) bool {
	if that == nil {
		return m == nil
	}

	target, ok := that.(*ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata)
	if !ok {
		that2, ok := that.(ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata)
		if ok {
			target = &that2
		} else {
			return false
		}
	}
	if target == nil {
		return m == nil
	} else if m == nil {
		return false
	}

	if strings.Compare(m.GetUsername(), target.GetUsername()) != 0 {
		return false
	}

	if len(m.GetMetadata()) != len(target.GetMetadata()) {
		return false
	}
	for k, v := range m.GetMetadata() {

		if strings.Compare(v, target.GetMetadata()[k]) != 0 {
			return false
		}

	}

	return true
}
