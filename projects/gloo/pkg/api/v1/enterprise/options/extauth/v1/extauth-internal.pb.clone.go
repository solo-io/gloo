// Code generated by protoc-gen-ext. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth-internal.proto

package v1

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/solo-io/protoc-gen-ext/pkg/clone"
	"google.golang.org/protobuf/proto"

	google_golang_org_protobuf_types_known_durationpb "google.golang.org/protobuf/types/known/durationpb"

	google_golang_org_protobuf_types_known_emptypb "google.golang.org/protobuf/types/known/emptypb"

	google_golang_org_protobuf_types_known_wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// ensure the imports are used
var (
	_ = errors.New("")
	_ = fmt.Print
	_ = binary.LittleEndian
	_ = bytes.Compare
	_ = strings.Compare
	_ = clone.Cloner(nil)
	_ = proto.Message(nil)
)

// Clone function
func (m *ExtAuthConfig) Clone() proto.Message {
	var target *ExtAuthConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig{}

	target.AuthConfigRefName = m.GetAuthConfigRefName()

	if m.GetConfigs() != nil {
		target.Configs = make([]*ExtAuthConfig_Config, len(m.GetConfigs()))
		for idx, v := range m.GetConfigs() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Configs[idx] = h.Clone().(*ExtAuthConfig_Config)
			} else {
				target.Configs[idx] = proto.Clone(v).(*ExtAuthConfig_Config)
			}

		}
	}

	if h, ok := interface{}(m.GetBooleanExpr()).(clone.Cloner); ok {
		target.BooleanExpr = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.StringValue)
	} else {
		target.BooleanExpr = proto.Clone(m.GetBooleanExpr()).(*google_golang_org_protobuf_types_known_wrapperspb.StringValue)
	}

	target.FailOnRedirect = m.GetFailOnRedirect()

	return target
}

// Clone function
func (m *ApiKeyCreateRequest) Clone() proto.Message {
	var target *ApiKeyCreateRequest
	if m == nil {
		return target
	}
	target = &ApiKeyCreateRequest{}

	if m.GetApiKeys() != nil {
		target.ApiKeys = make([]*ApiKey, len(m.GetApiKeys()))
		for idx, v := range m.GetApiKeys() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApiKeys[idx] = h.Clone().(*ApiKey)
			} else {
				target.ApiKeys[idx] = proto.Clone(v).(*ApiKey)
			}

		}
	}

	if m.GetRawApiKeys() != nil {
		target.RawApiKeys = make([]string, len(m.GetRawApiKeys()))
		for idx, v := range m.GetRawApiKeys() {

			target.RawApiKeys[idx] = v

		}
	}

	return target
}

// Clone function
func (m *ApiKeyCreateResponse) Clone() proto.Message {
	var target *ApiKeyCreateResponse
	if m == nil {
		return target
	}
	target = &ApiKeyCreateResponse{}

	if m.GetApiKeys() != nil {
		target.ApiKeys = make([]*ApiKey, len(m.GetApiKeys()))
		for idx, v := range m.GetApiKeys() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApiKeys[idx] = h.Clone().(*ApiKey)
			} else {
				target.ApiKeys[idx] = proto.Clone(v).(*ApiKey)
			}

		}
	}

	return target
}

// Clone function
func (m *ApiKeyReadRequest) Clone() proto.Message {
	var target *ApiKeyReadRequest
	if m == nil {
		return target
	}
	target = &ApiKeyReadRequest{}

	if m.GetRawApiKeys() != nil {
		target.RawApiKeys = make([]string, len(m.GetRawApiKeys()))
		for idx, v := range m.GetRawApiKeys() {

			target.RawApiKeys[idx] = v

		}
	}

	if m.GetLabels() != nil {
		target.Labels = make([]string, len(m.GetLabels()))
		for idx, v := range m.GetLabels() {

			target.Labels[idx] = v

		}
	}

	return target
}

// Clone function
func (m *ApiKeyReadResponse) Clone() proto.Message {
	var target *ApiKeyReadResponse
	if m == nil {
		return target
	}
	target = &ApiKeyReadResponse{}

	if m.GetApiKeys() != nil {
		target.ApiKeys = make([]*ApiKey, len(m.GetApiKeys()))
		for idx, v := range m.GetApiKeys() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApiKeys[idx] = h.Clone().(*ApiKey)
			} else {
				target.ApiKeys[idx] = proto.Clone(v).(*ApiKey)
			}

		}
	}

	return target
}

// Clone function
func (m *ApiKeyUpdateRequest) Clone() proto.Message {
	var target *ApiKeyUpdateRequest
	if m == nil {
		return target
	}
	target = &ApiKeyUpdateRequest{}

	target.Upsert = m.GetUpsert()

	if m.GetApiKeys() != nil {
		target.ApiKeys = make([]*ApiKey, len(m.GetApiKeys()))
		for idx, v := range m.GetApiKeys() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApiKeys[idx] = h.Clone().(*ApiKey)
			} else {
				target.ApiKeys[idx] = proto.Clone(v).(*ApiKey)
			}

		}
	}

	if m.GetRawApiKeys() != nil {
		target.RawApiKeys = make([]string, len(m.GetRawApiKeys()))
		for idx, v := range m.GetRawApiKeys() {

			target.RawApiKeys[idx] = v

		}
	}

	return target
}

// Clone function
func (m *ApiKeyUpdateResponse) Clone() proto.Message {
	var target *ApiKeyUpdateResponse
	if m == nil {
		return target
	}
	target = &ApiKeyUpdateResponse{}

	if m.GetApiKeys() != nil {
		target.ApiKeys = make([]*ApiKey, len(m.GetApiKeys()))
		for idx, v := range m.GetApiKeys() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ApiKeys[idx] = h.Clone().(*ApiKey)
			} else {
				target.ApiKeys[idx] = proto.Clone(v).(*ApiKey)
			}

		}
	}

	return target
}

// Clone function
func (m *ApiKeyDeleteRequest) Clone() proto.Message {
	var target *ApiKeyDeleteRequest
	if m == nil {
		return target
	}
	target = &ApiKeyDeleteRequest{}

	if m.GetRawApiKeys() != nil {
		target.RawApiKeys = make([]string, len(m.GetRawApiKeys()))
		for idx, v := range m.GetRawApiKeys() {

			target.RawApiKeys[idx] = v

		}
	}

	if m.GetLabels() != nil {
		target.Labels = make([]string, len(m.GetLabels()))
		for idx, v := range m.GetLabels() {

			target.Labels[idx] = v

		}
	}

	return target
}

// Clone function
func (m *ApiKeyDeleteResponse) Clone() proto.Message {
	var target *ApiKeyDeleteResponse
	if m == nil {
		return target
	}
	target = &ApiKeyDeleteResponse{}

	return target
}

// Clone function
func (m *ExtAuthConfig_Azure) Clone() proto.Message {
	var target *ExtAuthConfig_Azure
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_Azure{}

	target.ClientId = m.GetClientId()

	target.TenantId = m.GetTenantId()

	target.ClientSecret = m.GetClientSecret()

	if h, ok := interface{}(m.GetClaimsCachingOptions()).(clone.Cloner); ok {
		target.ClaimsCachingOptions = h.Clone().(*RedisOptions)
	} else {
		target.ClaimsCachingOptions = proto.Clone(m.GetClaimsCachingOptions()).(*RedisOptions)
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_ClaimToHeader) Clone() proto.Message {
	var target *ExtAuthConfig_ClaimToHeader
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_ClaimToHeader{}

	target.Claim = m.GetClaim()

	target.Header = m.GetHeader()

	target.Append = m.GetAppend()

	return target
}

// Clone function
func (m *ExtAuthConfig_BasicAuthInternal) Clone() proto.Message {
	var target *ExtAuthConfig_BasicAuthInternal
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_BasicAuthInternal{}

	target.Realm = m.GetRealm()

	if h, ok := interface{}(m.GetEncryption()).(clone.Cloner); ok {
		target.Encryption = h.Clone().(*ExtAuthConfig_BasicAuthInternal_EncryptionType)
	} else {
		target.Encryption = proto.Clone(m.GetEncryption()).(*ExtAuthConfig_BasicAuthInternal_EncryptionType)
	}

	switch m.UserSource.(type) {

	case *ExtAuthConfig_BasicAuthInternal_UserList_:

		if h, ok := interface{}(m.GetUserList()).(clone.Cloner); ok {
			target.UserSource = &ExtAuthConfig_BasicAuthInternal_UserList_{
				UserList: h.Clone().(*ExtAuthConfig_BasicAuthInternal_UserList),
			}
		} else {
			target.UserSource = &ExtAuthConfig_BasicAuthInternal_UserList_{
				UserList: proto.Clone(m.GetUserList()).(*ExtAuthConfig_BasicAuthInternal_UserList),
			}
		}

	}

	return target
}

// Clone function
func (m *ExtAuthConfig_OAuthConfig) Clone() proto.Message {
	var target *ExtAuthConfig_OAuthConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_OAuthConfig{}

	target.ClientId = m.GetClientId()

	target.ClientSecret = m.GetClientSecret()

	target.IssuerUrl = m.GetIssuerUrl()

	if m.GetAuthEndpointQueryParams() != nil {
		target.AuthEndpointQueryParams = make(map[string]string, len(m.GetAuthEndpointQueryParams()))
		for k, v := range m.GetAuthEndpointQueryParams() {

			target.AuthEndpointQueryParams[k] = v

		}
	}

	target.AppUrl = m.GetAppUrl()

	target.CallbackPath = m.GetCallbackPath()

	if m.GetScopes() != nil {
		target.Scopes = make([]string, len(m.GetScopes()))
		for idx, v := range m.GetScopes() {

			target.Scopes[idx] = v

		}
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_UserSessionConfig) Clone() proto.Message {
	var target *ExtAuthConfig_UserSessionConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_UserSessionConfig{}

	target.FailOnFetchFailure = m.GetFailOnFetchFailure()

	if h, ok := interface{}(m.GetCookieOptions()).(clone.Cloner); ok {
		target.CookieOptions = h.Clone().(*UserSession_CookieOptions)
	} else {
		target.CookieOptions = proto.Clone(m.GetCookieOptions()).(*UserSession_CookieOptions)
	}

	if h, ok := interface{}(m.GetCipherConfig()).(clone.Cloner); ok {
		target.CipherConfig = h.Clone().(*ExtAuthConfig_UserSessionConfig_CipherConfig)
	} else {
		target.CipherConfig = proto.Clone(m.GetCipherConfig()).(*ExtAuthConfig_UserSessionConfig_CipherConfig)
	}

	switch m.Session.(type) {

	case *ExtAuthConfig_UserSessionConfig_Cookie:

		if h, ok := interface{}(m.GetCookie()).(clone.Cloner); ok {
			target.Session = &ExtAuthConfig_UserSessionConfig_Cookie{
				Cookie: h.Clone().(*UserSession_InternalSession),
			}
		} else {
			target.Session = &ExtAuthConfig_UserSessionConfig_Cookie{
				Cookie: proto.Clone(m.GetCookie()).(*UserSession_InternalSession),
			}
		}

	case *ExtAuthConfig_UserSessionConfig_Redis:

		if h, ok := interface{}(m.GetRedis()).(clone.Cloner); ok {
			target.Session = &ExtAuthConfig_UserSessionConfig_Redis{
				Redis: h.Clone().(*UserSession_RedisSession),
			}
		} else {
			target.Session = &ExtAuthConfig_UserSessionConfig_Redis{
				Redis: proto.Clone(m.GetRedis()).(*UserSession_RedisSession),
			}
		}

	}

	return target
}

// Clone function
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig) Clone() proto.Message {
	var target *ExtAuthConfig_OidcAuthorizationCodeConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_OidcAuthorizationCodeConfig{}

	target.ClientId = m.GetClientId()

	target.ClientSecret = m.GetClientSecret()

	target.IssuerUrl = m.GetIssuerUrl()

	if m.GetAuthEndpointQueryParams() != nil {
		target.AuthEndpointQueryParams = make(map[string]string, len(m.GetAuthEndpointQueryParams()))
		for k, v := range m.GetAuthEndpointQueryParams() {

			target.AuthEndpointQueryParams[k] = v

		}
	}

	if m.GetTokenEndpointQueryParams() != nil {
		target.TokenEndpointQueryParams = make(map[string]string, len(m.GetTokenEndpointQueryParams()))
		for k, v := range m.GetTokenEndpointQueryParams() {

			target.TokenEndpointQueryParams[k] = v

		}
	}

	target.AppUrl = m.GetAppUrl()

	target.CallbackPath = m.GetCallbackPath()

	target.LogoutPath = m.GetLogoutPath()

	target.AfterLogoutUrl = m.GetAfterLogoutUrl()

	if m.GetScopes() != nil {
		target.Scopes = make([]string, len(m.GetScopes()))
		for idx, v := range m.GetScopes() {

			target.Scopes[idx] = v

		}
	}

	if h, ok := interface{}(m.GetSession()).(clone.Cloner); ok {
		target.Session = h.Clone().(*UserSession)
	} else {
		target.Session = proto.Clone(m.GetSession()).(*UserSession)
	}

	if h, ok := interface{}(m.GetHeaders()).(clone.Cloner); ok {
		target.Headers = h.Clone().(*HeaderConfiguration)
	} else {
		target.Headers = proto.Clone(m.GetHeaders()).(*HeaderConfiguration)
	}

	if h, ok := interface{}(m.GetDiscoveryOverride()).(clone.Cloner); ok {
		target.DiscoveryOverride = h.Clone().(*DiscoveryOverride)
	} else {
		target.DiscoveryOverride = proto.Clone(m.GetDiscoveryOverride()).(*DiscoveryOverride)
	}

	if h, ok := interface{}(m.GetDiscoveryPollInterval()).(clone.Cloner); ok {
		target.DiscoveryPollInterval = h.Clone().(*google_golang_org_protobuf_types_known_durationpb.Duration)
	} else {
		target.DiscoveryPollInterval = proto.Clone(m.GetDiscoveryPollInterval()).(*google_golang_org_protobuf_types_known_durationpb.Duration)
	}

	if h, ok := interface{}(m.GetJwksCacheRefreshPolicy()).(clone.Cloner); ok {
		target.JwksCacheRefreshPolicy = h.Clone().(*JwksOnDemandCacheRefreshPolicy)
	} else {
		target.JwksCacheRefreshPolicy = proto.Clone(m.GetJwksCacheRefreshPolicy()).(*JwksOnDemandCacheRefreshPolicy)
	}

	target.SessionIdHeaderName = m.GetSessionIdHeaderName()

	target.ParseCallbackPathAsRegex = m.GetParseCallbackPathAsRegex()

	if h, ok := interface{}(m.GetAutoMapFromMetadata()).(clone.Cloner); ok {
		target.AutoMapFromMetadata = h.Clone().(*AutoMapFromMetadata)
	} else {
		target.AutoMapFromMetadata = proto.Clone(m.GetAutoMapFromMetadata()).(*AutoMapFromMetadata)
	}

	if h, ok := interface{}(m.GetEndSessionProperties()).(clone.Cloner); ok {
		target.EndSessionProperties = h.Clone().(*EndSessionProperties)
	} else {
		target.EndSessionProperties = proto.Clone(m.GetEndSessionProperties()).(*EndSessionProperties)
	}

	if h, ok := interface{}(m.GetUserSession()).(clone.Cloner); ok {
		target.UserSession = h.Clone().(*ExtAuthConfig_UserSessionConfig)
	} else {
		target.UserSession = proto.Clone(m.GetUserSession()).(*ExtAuthConfig_UserSessionConfig)
	}

	if h, ok := interface{}(m.GetPkJwtClientAuthenticationConfig()).(clone.Cloner); ok {
		target.PkJwtClientAuthenticationConfig = h.Clone().(*ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig)
	} else {
		target.PkJwtClientAuthenticationConfig = proto.Clone(m.GetPkJwtClientAuthenticationConfig()).(*ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig)
	}

	if h, ok := interface{}(m.GetAccessToken()).(clone.Cloner); ok {
		target.AccessToken = h.Clone().(*ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken)
	} else {
		target.AccessToken = proto.Clone(m.GetAccessToken()).(*ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken)
	}

	if h, ok := interface{}(m.GetIdentityToken()).(clone.Cloner); ok {
		target.IdentityToken = h.Clone().(*ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken)
	} else {
		target.IdentityToken = proto.Clone(m.GetIdentityToken()).(*ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken)
	}

	if h, ok := interface{}(m.GetFrontChannelLogout()).(clone.Cloner); ok {
		target.FrontChannelLogout = h.Clone().(*ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout)
	} else {
		target.FrontChannelLogout = proto.Clone(m.GetFrontChannelLogout()).(*ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout)
	}

	if m.GetDynamicMetadataFromClaims() != nil {
		target.DynamicMetadataFromClaims = make(map[string]string, len(m.GetDynamicMetadataFromClaims()))
		for k, v := range m.GetDynamicMetadataFromClaims() {

			target.DynamicMetadataFromClaims[k] = v

		}
	}

	switch m.Provider.(type) {

	case *ExtAuthConfig_OidcAuthorizationCodeConfig_Default_:

		if h, ok := interface{}(m.GetDefault()).(clone.Cloner); ok {
			target.Provider = &ExtAuthConfig_OidcAuthorizationCodeConfig_Default_{
				Default: h.Clone().(*ExtAuthConfig_OidcAuthorizationCodeConfig_Default),
			}
		} else {
			target.Provider = &ExtAuthConfig_OidcAuthorizationCodeConfig_Default_{
				Default: proto.Clone(m.GetDefault()).(*ExtAuthConfig_OidcAuthorizationCodeConfig_Default),
			}
		}

	case *ExtAuthConfig_OidcAuthorizationCodeConfig_Azure:

		if h, ok := interface{}(m.GetAzure()).(clone.Cloner); ok {
			target.Provider = &ExtAuthConfig_OidcAuthorizationCodeConfig_Azure{
				Azure: h.Clone().(*ExtAuthConfig_Azure),
			}
		} else {
			target.Provider = &ExtAuthConfig_OidcAuthorizationCodeConfig_Azure{
				Azure: proto.Clone(m.GetAzure()).(*ExtAuthConfig_Azure),
			}
		}

	}

	return target
}

// Clone function
func (m *ExtAuthConfig_AccessTokenValidationConfig) Clone() proto.Message {
	var target *ExtAuthConfig_AccessTokenValidationConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_AccessTokenValidationConfig{}

	target.UserinfoUrl = m.GetUserinfoUrl()

	if h, ok := interface{}(m.GetCacheTimeout()).(clone.Cloner); ok {
		target.CacheTimeout = h.Clone().(*google_golang_org_protobuf_types_known_durationpb.Duration)
	} else {
		target.CacheTimeout = proto.Clone(m.GetCacheTimeout()).(*google_golang_org_protobuf_types_known_durationpb.Duration)
	}

	if m.GetDynamicMetadataFromClaims() != nil {
		target.DynamicMetadataFromClaims = make(map[string]string, len(m.GetDynamicMetadataFromClaims()))
		for k, v := range m.GetDynamicMetadataFromClaims() {

			target.DynamicMetadataFromClaims[k] = v

		}
	}

	if m.GetClaimsToHeaders() != nil {
		target.ClaimsToHeaders = make([]*ExtAuthConfig_ClaimToHeader, len(m.GetClaimsToHeaders()))
		for idx, v := range m.GetClaimsToHeaders() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ClaimsToHeaders[idx] = h.Clone().(*ExtAuthConfig_ClaimToHeader)
			} else {
				target.ClaimsToHeaders[idx] = proto.Clone(v).(*ExtAuthConfig_ClaimToHeader)
			}

		}
	}

	switch m.ValidationType.(type) {

	case *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionUrl:

		target.ValidationType = &ExtAuthConfig_AccessTokenValidationConfig_IntrospectionUrl{
			IntrospectionUrl: m.GetIntrospectionUrl(),
		}

	case *ExtAuthConfig_AccessTokenValidationConfig_Jwt:

		if h, ok := interface{}(m.GetJwt()).(clone.Cloner); ok {
			target.ValidationType = &ExtAuthConfig_AccessTokenValidationConfig_Jwt{
				Jwt: h.Clone().(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation),
			}
		} else {
			target.ValidationType = &ExtAuthConfig_AccessTokenValidationConfig_Jwt{
				Jwt: proto.Clone(m.GetJwt()).(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation),
			}
		}

	case *ExtAuthConfig_AccessTokenValidationConfig_Introspection:

		if h, ok := interface{}(m.GetIntrospection()).(clone.Cloner); ok {
			target.ValidationType = &ExtAuthConfig_AccessTokenValidationConfig_Introspection{
				Introspection: h.Clone().(*ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation),
			}
		} else {
			target.ValidationType = &ExtAuthConfig_AccessTokenValidationConfig_Introspection{
				Introspection: proto.Clone(m.GetIntrospection()).(*ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation),
			}
		}

	}

	switch m.ScopeValidation.(type) {

	case *ExtAuthConfig_AccessTokenValidationConfig_RequiredScopes:

		if h, ok := interface{}(m.GetRequiredScopes()).(clone.Cloner); ok {
			target.ScopeValidation = &ExtAuthConfig_AccessTokenValidationConfig_RequiredScopes{
				RequiredScopes: h.Clone().(*ExtAuthConfig_AccessTokenValidationConfig_ScopeList),
			}
		} else {
			target.ScopeValidation = &ExtAuthConfig_AccessTokenValidationConfig_RequiredScopes{
				RequiredScopes: proto.Clone(m.GetRequiredScopes()).(*ExtAuthConfig_AccessTokenValidationConfig_ScopeList),
			}
		}

	}

	switch m.Provider.(type) {

	case *ExtAuthConfig_AccessTokenValidationConfig_Default_:

		if h, ok := interface{}(m.GetDefault()).(clone.Cloner); ok {
			target.Provider = &ExtAuthConfig_AccessTokenValidationConfig_Default_{
				Default: h.Clone().(*ExtAuthConfig_AccessTokenValidationConfig_Default),
			}
		} else {
			target.Provider = &ExtAuthConfig_AccessTokenValidationConfig_Default_{
				Default: proto.Clone(m.GetDefault()).(*ExtAuthConfig_AccessTokenValidationConfig_Default),
			}
		}

	case *ExtAuthConfig_AccessTokenValidationConfig_Azure:

		if h, ok := interface{}(m.GetAzure()).(clone.Cloner); ok {
			target.Provider = &ExtAuthConfig_AccessTokenValidationConfig_Azure{
				Azure: h.Clone().(*ExtAuthConfig_Azure),
			}
		} else {
			target.Provider = &ExtAuthConfig_AccessTokenValidationConfig_Azure{
				Azure: proto.Clone(m.GetAzure()).(*ExtAuthConfig_Azure),
			}
		}

	}

	return target
}

// Clone function
func (m *ExtAuthConfig_PlainOAuth2Config) Clone() proto.Message {
	var target *ExtAuthConfig_PlainOAuth2Config
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_PlainOAuth2Config{}

	target.ClientId = m.GetClientId()

	target.ClientSecret = m.GetClientSecret()

	if m.GetAuthEndpointQueryParams() != nil {
		target.AuthEndpointQueryParams = make(map[string]string, len(m.GetAuthEndpointQueryParams()))
		for k, v := range m.GetAuthEndpointQueryParams() {

			target.AuthEndpointQueryParams[k] = v

		}
	}

	target.AppUrl = m.GetAppUrl()

	target.CallbackPath = m.GetCallbackPath()

	if m.GetScopes() != nil {
		target.Scopes = make([]string, len(m.GetScopes()))
		for idx, v := range m.GetScopes() {

			target.Scopes[idx] = v

		}
	}

	if h, ok := interface{}(m.GetSession()).(clone.Cloner); ok {
		target.Session = h.Clone().(*UserSession)
	} else {
		target.Session = proto.Clone(m.GetSession()).(*UserSession)
	}

	target.LogoutPath = m.GetLogoutPath()

	if m.GetTokenEndpointQueryParams() != nil {
		target.TokenEndpointQueryParams = make(map[string]string, len(m.GetTokenEndpointQueryParams()))
		for k, v := range m.GetTokenEndpointQueryParams() {

			target.TokenEndpointQueryParams[k] = v

		}
	}

	target.AfterLogoutUrl = m.GetAfterLogoutUrl()

	target.AuthEndpoint = m.GetAuthEndpoint()

	target.TokenEndpoint = m.GetTokenEndpoint()

	target.RevocationEndpoint = m.GetRevocationEndpoint()

	if h, ok := interface{}(m.GetUserSession()).(clone.Cloner); ok {
		target.UserSession = h.Clone().(*ExtAuthConfig_UserSessionConfig)
	} else {
		target.UserSession = proto.Clone(m.GetUserSession()).(*ExtAuthConfig_UserSessionConfig)
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_OAuth2Config) Clone() proto.Message {
	var target *ExtAuthConfig_OAuth2Config
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_OAuth2Config{}

	switch m.OauthType.(type) {

	case *ExtAuthConfig_OAuth2Config_OidcAuthorizationCode:

		if h, ok := interface{}(m.GetOidcAuthorizationCode()).(clone.Cloner); ok {
			target.OauthType = &ExtAuthConfig_OAuth2Config_OidcAuthorizationCode{
				OidcAuthorizationCode: h.Clone().(*ExtAuthConfig_OidcAuthorizationCodeConfig),
			}
		} else {
			target.OauthType = &ExtAuthConfig_OAuth2Config_OidcAuthorizationCode{
				OidcAuthorizationCode: proto.Clone(m.GetOidcAuthorizationCode()).(*ExtAuthConfig_OidcAuthorizationCodeConfig),
			}
		}

	case *ExtAuthConfig_OAuth2Config_AccessTokenValidationConfig:

		if h, ok := interface{}(m.GetAccessTokenValidationConfig()).(clone.Cloner); ok {
			target.OauthType = &ExtAuthConfig_OAuth2Config_AccessTokenValidationConfig{
				AccessTokenValidationConfig: h.Clone().(*ExtAuthConfig_AccessTokenValidationConfig),
			}
		} else {
			target.OauthType = &ExtAuthConfig_OAuth2Config_AccessTokenValidationConfig{
				AccessTokenValidationConfig: proto.Clone(m.GetAccessTokenValidationConfig()).(*ExtAuthConfig_AccessTokenValidationConfig),
			}
		}

	case *ExtAuthConfig_OAuth2Config_Oauth2Config:

		if h, ok := interface{}(m.GetOauth2Config()).(clone.Cloner); ok {
			target.OauthType = &ExtAuthConfig_OAuth2Config_Oauth2Config{
				Oauth2Config: h.Clone().(*ExtAuthConfig_PlainOAuth2Config),
			}
		} else {
			target.OauthType = &ExtAuthConfig_OAuth2Config_Oauth2Config{
				Oauth2Config: proto.Clone(m.GetOauth2Config()).(*ExtAuthConfig_PlainOAuth2Config),
			}
		}

	}

	return target
}

// Clone function
func (m *ExtAuthConfig_ApiKeyAuthConfig) Clone() proto.Message {
	var target *ExtAuthConfig_ApiKeyAuthConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_ApiKeyAuthConfig{}

	if m.GetValidApiKeys() != nil {
		target.ValidApiKeys = make(map[string]*ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata, len(m.GetValidApiKeys()))
		for k, v := range m.GetValidApiKeys() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ValidApiKeys[k] = h.Clone().(*ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata)
			} else {
				target.ValidApiKeys[k] = proto.Clone(v).(*ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata)
			}

		}
	}

	target.HeaderName = m.GetHeaderName()

	if m.GetHeadersFromKeyMetadata() != nil {
		target.HeadersFromKeyMetadata = make(map[string]string, len(m.GetHeadersFromKeyMetadata()))
		for k, v := range m.GetHeadersFromKeyMetadata() {

			target.HeadersFromKeyMetadata[k] = v

		}
	}

	target.SkipMetadataValidation = m.GetSkipMetadataValidation()

	switch m.StorageBackend.(type) {

	case *ExtAuthConfig_ApiKeyAuthConfig_K8SSecretApikeyStorage:

		if h, ok := interface{}(m.GetK8SSecretApikeyStorage()).(clone.Cloner); ok {
			target.StorageBackend = &ExtAuthConfig_ApiKeyAuthConfig_K8SSecretApikeyStorage{
				K8SSecretApikeyStorage: h.Clone().(*K8SSecretApiKeyStorage),
			}
		} else {
			target.StorageBackend = &ExtAuthConfig_ApiKeyAuthConfig_K8SSecretApikeyStorage{
				K8SSecretApikeyStorage: proto.Clone(m.GetK8SSecretApikeyStorage()).(*K8SSecretApiKeyStorage),
			}
		}

	case *ExtAuthConfig_ApiKeyAuthConfig_AerospikeApikeyStorage:

		if h, ok := interface{}(m.GetAerospikeApikeyStorage()).(clone.Cloner); ok {
			target.StorageBackend = &ExtAuthConfig_ApiKeyAuthConfig_AerospikeApikeyStorage{
				AerospikeApikeyStorage: h.Clone().(*AerospikeApiKeyStorage),
			}
		} else {
			target.StorageBackend = &ExtAuthConfig_ApiKeyAuthConfig_AerospikeApikeyStorage{
				AerospikeApikeyStorage: proto.Clone(m.GetAerospikeApikeyStorage()).(*AerospikeApiKeyStorage),
			}
		}

	case *ExtAuthConfig_ApiKeyAuthConfig_ServerDefaultApikeyStorage:

		if h, ok := interface{}(m.GetServerDefaultApikeyStorage()).(clone.Cloner); ok {
			target.StorageBackend = &ExtAuthConfig_ApiKeyAuthConfig_ServerDefaultApikeyStorage{
				ServerDefaultApikeyStorage: h.Clone().(*ServerDefaultApiKeyStorage),
			}
		} else {
			target.StorageBackend = &ExtAuthConfig_ApiKeyAuthConfig_ServerDefaultApikeyStorage{
				ServerDefaultApikeyStorage: proto.Clone(m.GetServerDefaultApikeyStorage()).(*ServerDefaultApiKeyStorage),
			}
		}

	}

	return target
}

// Clone function
func (m *ExtAuthConfig_OpaAuthConfig) Clone() proto.Message {
	var target *ExtAuthConfig_OpaAuthConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_OpaAuthConfig{}

	if m.GetModules() != nil {
		target.Modules = make(map[string]string, len(m.GetModules()))
		for k, v := range m.GetModules() {

			target.Modules[k] = v

		}
	}

	target.Query = m.GetQuery()

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*OpaAuthOptions)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*OpaAuthOptions)
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_OpaServerAuthConfig) Clone() proto.Message {
	var target *ExtAuthConfig_OpaServerAuthConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_OpaServerAuthConfig{}

	target.Package = m.GetPackage()

	target.RuleName = m.GetRuleName()

	target.ServerAddr = m.GetServerAddr()

	if h, ok := interface{}(m.GetOptions()).(clone.Cloner); ok {
		target.Options = h.Clone().(*OpaAuthOptions)
	} else {
		target.Options = proto.Clone(m.GetOptions()).(*OpaAuthOptions)
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_LdapConfig) Clone() proto.Message {
	var target *ExtAuthConfig_LdapConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_LdapConfig{}

	target.Address = m.GetAddress()

	target.UserDnTemplate = m.GetUserDnTemplate()

	target.MembershipAttributeName = m.GetMembershipAttributeName()

	if m.GetAllowedGroups() != nil {
		target.AllowedGroups = make([]string, len(m.GetAllowedGroups()))
		for idx, v := range m.GetAllowedGroups() {

			target.AllowedGroups[idx] = v

		}
	}

	if h, ok := interface{}(m.GetPool()).(clone.Cloner); ok {
		target.Pool = h.Clone().(*Ldap_ConnectionPool)
	} else {
		target.Pool = proto.Clone(m.GetPool()).(*Ldap_ConnectionPool)
	}

	target.SearchFilter = m.GetSearchFilter()

	target.DisableGroupChecking = m.GetDisableGroupChecking()

	if h, ok := interface{}(m.GetGroupLookupSettings()).(clone.Cloner); ok {
		target.GroupLookupSettings = h.Clone().(*ExtAuthConfig_LdapServiceAccountConfig)
	} else {
		target.GroupLookupSettings = proto.Clone(m.GetGroupLookupSettings()).(*ExtAuthConfig_LdapServiceAccountConfig)
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_LdapServiceAccountConfig) Clone() proto.Message {
	var target *ExtAuthConfig_LdapServiceAccountConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_LdapServiceAccountConfig{}

	target.Username = m.GetUsername()

	target.Password = m.GetPassword()

	target.CheckGroupsWithServiceAccount = m.GetCheckGroupsWithServiceAccount()

	return target
}

// Clone function
func (m *ExtAuthConfig_HmacAuthConfig) Clone() proto.Message {
	var target *ExtAuthConfig_HmacAuthConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_HmacAuthConfig{}

	switch m.SecretStorage.(type) {

	case *ExtAuthConfig_HmacAuthConfig_SecretList:

		if h, ok := interface{}(m.GetSecretList()).(clone.Cloner); ok {
			target.SecretStorage = &ExtAuthConfig_HmacAuthConfig_SecretList{
				SecretList: h.Clone().(*ExtAuthConfig_InMemorySecretList),
			}
		} else {
			target.SecretStorage = &ExtAuthConfig_HmacAuthConfig_SecretList{
				SecretList: proto.Clone(m.GetSecretList()).(*ExtAuthConfig_InMemorySecretList),
			}
		}

	}

	switch m.ImplementationType.(type) {

	case *ExtAuthConfig_HmacAuthConfig_ParametersInHeaders:

		if h, ok := interface{}(m.GetParametersInHeaders()).(clone.Cloner); ok {
			target.ImplementationType = &ExtAuthConfig_HmacAuthConfig_ParametersInHeaders{
				ParametersInHeaders: h.Clone().(*HmacParametersInHeaders),
			}
		} else {
			target.ImplementationType = &ExtAuthConfig_HmacAuthConfig_ParametersInHeaders{
				ParametersInHeaders: proto.Clone(m.GetParametersInHeaders()).(*HmacParametersInHeaders),
			}
		}

	}

	return target
}

// Clone function
func (m *ExtAuthConfig_PortalAuthConfig) Clone() proto.Message {
	var target *ExtAuthConfig_PortalAuthConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_PortalAuthConfig{}

	target.Url = m.GetUrl()

	target.ApiKeyHeader = m.GetApiKeyHeader()

	if h, ok := interface{}(m.GetRedisOptions()).(clone.Cloner); ok {
		target.RedisOptions = h.Clone().(*RedisOptions)
	} else {
		target.RedisOptions = proto.Clone(m.GetRedisOptions()).(*RedisOptions)
	}

	if h, ok := interface{}(m.GetCacheDuration()).(clone.Cloner); ok {
		target.CacheDuration = h.Clone().(*google_golang_org_protobuf_types_known_durationpb.Duration)
	} else {
		target.CacheDuration = proto.Clone(m.GetCacheDuration()).(*google_golang_org_protobuf_types_known_durationpb.Duration)
	}

	if h, ok := interface{}(m.GetRequestTimeout()).(clone.Cloner); ok {
		target.RequestTimeout = h.Clone().(*google_golang_org_protobuf_types_known_durationpb.Duration)
	} else {
		target.RequestTimeout = proto.Clone(m.GetRequestTimeout()).(*google_golang_org_protobuf_types_known_durationpb.Duration)
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_InMemorySecretList) Clone() proto.Message {
	var target *ExtAuthConfig_InMemorySecretList
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_InMemorySecretList{}

	if m.GetSecretList() != nil {
		target.SecretList = make(map[string]string, len(m.GetSecretList()))
		for k, v := range m.GetSecretList() {

			target.SecretList[k] = v

		}
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_Config) Clone() proto.Message {
	var target *ExtAuthConfig_Config
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_Config{}

	if h, ok := interface{}(m.GetName()).(clone.Cloner); ok {
		target.Name = h.Clone().(*google_golang_org_protobuf_types_known_wrapperspb.StringValue)
	} else {
		target.Name = proto.Clone(m.GetName()).(*google_golang_org_protobuf_types_known_wrapperspb.StringValue)
	}

	switch m.AuthConfig.(type) {

	case *ExtAuthConfig_Config_Oauth:

		if h, ok := interface{}(m.GetOauth()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_Oauth{
				Oauth: h.Clone().(*ExtAuthConfig_OAuthConfig),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_Oauth{
				Oauth: proto.Clone(m.GetOauth()).(*ExtAuthConfig_OAuthConfig),
			}
		}

	case *ExtAuthConfig_Config_Oauth2:

		if h, ok := interface{}(m.GetOauth2()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_Oauth2{
				Oauth2: h.Clone().(*ExtAuthConfig_OAuth2Config),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_Oauth2{
				Oauth2: proto.Clone(m.GetOauth2()).(*ExtAuthConfig_OAuth2Config),
			}
		}

	case *ExtAuthConfig_Config_BasicAuth:

		if h, ok := interface{}(m.GetBasicAuth()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_BasicAuth{
				BasicAuth: h.Clone().(*BasicAuth),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_BasicAuth{
				BasicAuth: proto.Clone(m.GetBasicAuth()).(*BasicAuth),
			}
		}

	case *ExtAuthConfig_Config_BasicAuthInternal:

		if h, ok := interface{}(m.GetBasicAuthInternal()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_BasicAuthInternal{
				BasicAuthInternal: h.Clone().(*ExtAuthConfig_BasicAuthInternal),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_BasicAuthInternal{
				BasicAuthInternal: proto.Clone(m.GetBasicAuthInternal()).(*ExtAuthConfig_BasicAuthInternal),
			}
		}

	case *ExtAuthConfig_Config_ApiKeyAuth:

		if h, ok := interface{}(m.GetApiKeyAuth()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_ApiKeyAuth{
				ApiKeyAuth: h.Clone().(*ExtAuthConfig_ApiKeyAuthConfig),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_ApiKeyAuth{
				ApiKeyAuth: proto.Clone(m.GetApiKeyAuth()).(*ExtAuthConfig_ApiKeyAuthConfig),
			}
		}

	case *ExtAuthConfig_Config_PluginAuth:

		if h, ok := interface{}(m.GetPluginAuth()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_PluginAuth{
				PluginAuth: h.Clone().(*AuthPlugin),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_PluginAuth{
				PluginAuth: proto.Clone(m.GetPluginAuth()).(*AuthPlugin),
			}
		}

	case *ExtAuthConfig_Config_OpaAuth:

		if h, ok := interface{}(m.GetOpaAuth()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_OpaAuth{
				OpaAuth: h.Clone().(*ExtAuthConfig_OpaAuthConfig),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_OpaAuth{
				OpaAuth: proto.Clone(m.GetOpaAuth()).(*ExtAuthConfig_OpaAuthConfig),
			}
		}

	case *ExtAuthConfig_Config_Ldap:

		if h, ok := interface{}(m.GetLdap()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_Ldap{
				Ldap: h.Clone().(*Ldap),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_Ldap{
				Ldap: proto.Clone(m.GetLdap()).(*Ldap),
			}
		}

	case *ExtAuthConfig_Config_LdapInternal:

		if h, ok := interface{}(m.GetLdapInternal()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_LdapInternal{
				LdapInternal: h.Clone().(*ExtAuthConfig_LdapConfig),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_LdapInternal{
				LdapInternal: proto.Clone(m.GetLdapInternal()).(*ExtAuthConfig_LdapConfig),
			}
		}

	case *ExtAuthConfig_Config_Jwt:

		if h, ok := interface{}(m.GetJwt()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_Jwt{
				Jwt: h.Clone().(*google_golang_org_protobuf_types_known_emptypb.Empty),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_Jwt{
				Jwt: proto.Clone(m.GetJwt()).(*google_golang_org_protobuf_types_known_emptypb.Empty),
			}
		}

	case *ExtAuthConfig_Config_PassThroughAuth:

		if h, ok := interface{}(m.GetPassThroughAuth()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_PassThroughAuth{
				PassThroughAuth: h.Clone().(*PassThroughAuth),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_PassThroughAuth{
				PassThroughAuth: proto.Clone(m.GetPassThroughAuth()).(*PassThroughAuth),
			}
		}

	case *ExtAuthConfig_Config_HmacAuth:

		if h, ok := interface{}(m.GetHmacAuth()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_HmacAuth{
				HmacAuth: h.Clone().(*ExtAuthConfig_HmacAuthConfig),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_HmacAuth{
				HmacAuth: proto.Clone(m.GetHmacAuth()).(*ExtAuthConfig_HmacAuthConfig),
			}
		}

	case *ExtAuthConfig_Config_OpaServerAuth:

		if h, ok := interface{}(m.GetOpaServerAuth()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_OpaServerAuth{
				OpaServerAuth: h.Clone().(*ExtAuthConfig_OpaServerAuthConfig),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_OpaServerAuth{
				OpaServerAuth: proto.Clone(m.GetOpaServerAuth()).(*ExtAuthConfig_OpaServerAuthConfig),
			}
		}

	case *ExtAuthConfig_Config_PortalAuth:

		if h, ok := interface{}(m.GetPortalAuth()).(clone.Cloner); ok {
			target.AuthConfig = &ExtAuthConfig_Config_PortalAuth{
				PortalAuth: h.Clone().(*ExtAuthConfig_PortalAuthConfig),
			}
		} else {
			target.AuthConfig = &ExtAuthConfig_Config_PortalAuth{
				PortalAuth: proto.Clone(m.GetPortalAuth()).(*ExtAuthConfig_PortalAuthConfig),
			}
		}

	}

	return target
}

// Clone function
func (m *ExtAuthConfig_BasicAuthInternal_EncryptionType) Clone() proto.Message {
	var target *ExtAuthConfig_BasicAuthInternal_EncryptionType
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_BasicAuthInternal_EncryptionType{}

	switch m.Algorithm.(type) {

	case *ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr_:

		if h, ok := interface{}(m.GetApr()).(clone.Cloner); ok {
			target.Algorithm = &ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr_{
				Apr: h.Clone().(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr),
			}
		} else {
			target.Algorithm = &ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr_{
				Apr: proto.Clone(m.GetApr()).(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr),
			}
		}

	case *ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1_:

		if h, ok := interface{}(m.GetSha1()).(clone.Cloner); ok {
			target.Algorithm = &ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1_{
				Sha1: h.Clone().(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1),
			}
		} else {
			target.Algorithm = &ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1_{
				Sha1: proto.Clone(m.GetSha1()).(*ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1),
			}
		}

	}

	return target
}

// Clone function
func (m *ExtAuthConfig_BasicAuthInternal_User) Clone() proto.Message {
	var target *ExtAuthConfig_BasicAuthInternal_User
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_BasicAuthInternal_User{}

	target.Salt = m.GetSalt()

	target.HashedPassword = m.GetHashedPassword()

	return target
}

// Clone function
func (m *ExtAuthConfig_BasicAuthInternal_UserList) Clone() proto.Message {
	var target *ExtAuthConfig_BasicAuthInternal_UserList
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_BasicAuthInternal_UserList{}

	if m.GetUsers() != nil {
		target.Users = make(map[string]*ExtAuthConfig_BasicAuthInternal_User, len(m.GetUsers()))
		for k, v := range m.GetUsers() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.Users[k] = h.Clone().(*ExtAuthConfig_BasicAuthInternal_User)
			} else {
				target.Users[k] = proto.Clone(v).(*ExtAuthConfig_BasicAuthInternal_User)
			}

		}
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1) Clone() proto.Message {
	var target *ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_BasicAuthInternal_EncryptionType_Sha1{}

	return target
}

// Clone function
func (m *ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr) Clone() proto.Message {
	var target *ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_BasicAuthInternal_EncryptionType_Apr{}

	return target
}

// Clone function
func (m *ExtAuthConfig_UserSessionConfig_CipherConfig) Clone() proto.Message {
	var target *ExtAuthConfig_UserSessionConfig_CipherConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_UserSessionConfig_CipherConfig{}

	target.Key = m.GetKey()

	return target
}

// Clone function
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig) Clone() proto.Message {
	var target *ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_OidcAuthorizationCodeConfig_PkJwtClientAuthenticationConfig{}

	target.SigningKey = m.GetSigningKey()

	if h, ok := interface{}(m.GetValidFor()).(clone.Cloner); ok {
		target.ValidFor = h.Clone().(*google_golang_org_protobuf_types_known_durationpb.Duration)
	} else {
		target.ValidFor = proto.Clone(m.GetValidFor()).(*google_golang_org_protobuf_types_known_durationpb.Duration)
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken) Clone() proto.Message {
	var target *ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_OidcAuthorizationCodeConfig_AccessToken{}

	if m.GetClaimsToHeaders() != nil {
		target.ClaimsToHeaders = make([]*ExtAuthConfig_ClaimToHeader, len(m.GetClaimsToHeaders()))
		for idx, v := range m.GetClaimsToHeaders() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ClaimsToHeaders[idx] = h.Clone().(*ExtAuthConfig_ClaimToHeader)
			} else {
				target.ClaimsToHeaders[idx] = proto.Clone(v).(*ExtAuthConfig_ClaimToHeader)
			}

		}
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken) Clone() proto.Message {
	var target *ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_OidcAuthorizationCodeConfig_IdentityToken{}

	if m.GetClaimsToHeaders() != nil {
		target.ClaimsToHeaders = make([]*ExtAuthConfig_ClaimToHeader, len(m.GetClaimsToHeaders()))
		for idx, v := range m.GetClaimsToHeaders() {

			if h, ok := interface{}(v).(clone.Cloner); ok {
				target.ClaimsToHeaders[idx] = h.Clone().(*ExtAuthConfig_ClaimToHeader)
			} else {
				target.ClaimsToHeaders[idx] = proto.Clone(v).(*ExtAuthConfig_ClaimToHeader)
			}

		}
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig_Default) Clone() proto.Message {
	var target *ExtAuthConfig_OidcAuthorizationCodeConfig_Default
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_OidcAuthorizationCodeConfig_Default{}

	return target
}

// Clone function
func (m *ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout) Clone() proto.Message {
	var target *ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_OidcAuthorizationCodeConfig_FrontChannelLogout{}

	target.Path = m.GetPath()

	return target
}

// Clone function
func (m *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation) Clone() proto.Message {
	var target *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_AccessTokenValidationConfig_JwtValidation{}

	target.Issuer = m.GetIssuer()

	switch m.JwksSourceSpecifier.(type) {

	case *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks_:

		if h, ok := interface{}(m.GetRemoteJwks()).(clone.Cloner); ok {
			target.JwksSourceSpecifier = &ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks_{
				RemoteJwks: h.Clone().(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks),
			}
		} else {
			target.JwksSourceSpecifier = &ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks_{
				RemoteJwks: proto.Clone(m.GetRemoteJwks()).(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks),
			}
		}

	case *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks_:

		if h, ok := interface{}(m.GetLocalJwks()).(clone.Cloner); ok {
			target.JwksSourceSpecifier = &ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks_{
				LocalJwks: h.Clone().(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks),
			}
		} else {
			target.JwksSourceSpecifier = &ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks_{
				LocalJwks: proto.Clone(m.GetLocalJwks()).(*ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks),
			}
		}

	}

	return target
}

// Clone function
func (m *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation) Clone() proto.Message {
	var target *ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_AccessTokenValidationConfig_IntrospectionValidation{}

	target.IntrospectionUrl = m.GetIntrospectionUrl()

	target.ClientId = m.GetClientId()

	target.ClientSecret = m.GetClientSecret()

	target.UserIdAttributeName = m.GetUserIdAttributeName()

	return target
}

// Clone function
func (m *ExtAuthConfig_AccessTokenValidationConfig_ScopeList) Clone() proto.Message {
	var target *ExtAuthConfig_AccessTokenValidationConfig_ScopeList
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_AccessTokenValidationConfig_ScopeList{}

	if m.GetScope() != nil {
		target.Scope = make([]string, len(m.GetScope()))
		for idx, v := range m.GetScope() {

			target.Scope[idx] = v

		}
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_AccessTokenValidationConfig_Default) Clone() proto.Message {
	var target *ExtAuthConfig_AccessTokenValidationConfig_Default
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_AccessTokenValidationConfig_Default{}

	return target
}

// Clone function
func (m *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks) Clone() proto.Message {
	var target *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_RemoteJwks{}

	target.Url = m.GetUrl()

	if h, ok := interface{}(m.GetRefreshInterval()).(clone.Cloner); ok {
		target.RefreshInterval = h.Clone().(*google_golang_org_protobuf_types_known_durationpb.Duration)
	} else {
		target.RefreshInterval = proto.Clone(m.GetRefreshInterval()).(*google_golang_org_protobuf_types_known_durationpb.Duration)
	}

	return target
}

// Clone function
func (m *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks) Clone() proto.Message {
	var target *ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_AccessTokenValidationConfig_JwtValidation_LocalJwks{}

	target.InlineString = m.GetInlineString()

	return target
}

// Clone function
func (m *ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata) Clone() proto.Message {
	var target *ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata
	if m == nil {
		return target
	}
	target = &ExtAuthConfig_ApiKeyAuthConfig_KeyMetadata{}

	target.Username = m.GetUsername()

	if m.GetMetadata() != nil {
		target.Metadata = make(map[string]string, len(m.GetMetadata()))
		for k, v := range m.GetMetadata() {

			target.Metadata[k] = v

		}
	}

	return target
}
