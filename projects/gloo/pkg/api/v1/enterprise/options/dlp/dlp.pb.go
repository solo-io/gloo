// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/dlp/dlp.proto

package dlp

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	transformation_ee "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/transformation_ee"
	matchers "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/core/matchers"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	_type "github.com/solo-io/solo-kit/pkg/api/external/envoy/type"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilterConfig_EnableFor int32

const (
	// Only enable DLP masking of response bodies. Defaults to this value.
	FilterConfig_RESPONSE_BODY FilterConfig_EnableFor = 0
	// Only enable DLP masking of access logs.
	FilterConfig_ACCESS_LOGS FilterConfig_EnableFor = 1
	// Enable DLP masking for both responses and access logs.
	FilterConfig_ALL FilterConfig_EnableFor = 2
)

// Enum value maps for FilterConfig_EnableFor.
var (
	FilterConfig_EnableFor_name = map[int32]string{
		0: "RESPONSE_BODY",
		1: "ACCESS_LOGS",
		2: "ALL",
	}
	FilterConfig_EnableFor_value = map[string]int32{
		"RESPONSE_BODY": 0,
		"ACCESS_LOGS":   1,
		"ALL":           2,
	}
)

func (x FilterConfig_EnableFor) Enum() *FilterConfig_EnableFor {
	p := new(FilterConfig_EnableFor)
	*p = x
	return p
}

func (x FilterConfig_EnableFor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterConfig_EnableFor) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_enumTypes[0].Descriptor()
}

func (FilterConfig_EnableFor) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_enumTypes[0]
}

func (x FilterConfig_EnableFor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterConfig_EnableFor.Descriptor instead.
func (FilterConfig_EnableFor) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescGZIP(), []int{0, 0}
}

type Config_EnableFor int32

const (
	// Only enable DLP masking of response bodies. Defaults to this value.
	Config_RESPONSE_BODY Config_EnableFor = 0
	// Only enable DLP masking of access logs.
	Config_ACCESS_LOGS Config_EnableFor = 1
	// Enable DLP masking for both responses and access logs.
	Config_ALL Config_EnableFor = 2
)

// Enum value maps for Config_EnableFor.
var (
	Config_EnableFor_name = map[int32]string{
		0: "RESPONSE_BODY",
		1: "ACCESS_LOGS",
		2: "ALL",
	}
	Config_EnableFor_value = map[string]int32{
		"RESPONSE_BODY": 0,
		"ACCESS_LOGS":   1,
		"ALL":           2,
	}
)

func (x Config_EnableFor) Enum() *Config_EnableFor {
	p := new(Config_EnableFor)
	*p = x
	return p
}

func (x Config_EnableFor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config_EnableFor) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_enumTypes[1].Descriptor()
}

func (Config_EnableFor) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_enumTypes[1]
}

func (x Config_EnableFor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config_EnableFor.Descriptor instead.
func (Config_EnableFor) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescGZIP(), []int{2, 0}
}

// The following pre-made action types map to subgroup 1 of the listed regex patterns:
//
// SSN:
// - '(?:^|\D)([0-9]{9})(?:\D|$)'
// - '(?:^|\D)([0-9]{3}\-[0-9]{2}\-[0-9]{4})(?:\D|$)'
// - '(?:^|\D)([0-9]{3}\ [0-9]{2}\ [0-9]{4})(?:\D|$)'
//
// MASTERCARD:
// - '(?:^|\D)(5[1-5][0-9]{2}(?:\ |\-|)[0-9]{4}(?:\ |\-|)[0-9]{4}(?:\ |\-|)[0-9]{4})(?:\D|$)'
//
// VISA:
// - '(?:^|\D)(4[0-9]{3}(?:\ |\-|)[0-9]{4}(?:\ |\-|)[0-9]{4}(?:\ |\-|)[0-9]{4})(?:\D|$)'
//
// AMEX:
// - '(?:^|\D)((?:34|37)[0-9]{2}(?:\ |\-|)[0-9]{6}(?:\ |\-|)[0-9]{5})(?:\D|$)'
//
// DISCOVER:
// - '(?:^|\D)(6011(?:\ |\-|)[0-9]{4}(?:\ |\-|)[0-9]{4}(?:\ |\-|)[0-9]{4})(?:\D|$)'
//
// JCB:
// - '(?:^|\D)(3[0-9]{3}(?:\ |\-|)[0-9]{4}(?:\ |\-|)[0-9]{4}(?:\ |\-|)[0-9]{4})(?:\D|$)'
// - '(?:^|\D)((?:2131|1800)[0-9]{11})(?:\D|$)'
//
// DINERS_CLUB:
// - '(?:^|\D)(30[0-5][0-9](?:\ |\-|)[0-9]{6}(?:\ |\-|)[0-9]{4})(?:\D|$)'
// - '(?:^|\D)((?:36|38)[0-9]{2}(?:\ |\-|)[0-9]{6}(?:\ |\-|)[0-9]{4})(?:\D|$)'
//
// CREDIT_CARD_TRACKERS:
// - '([1-9][0-9]{2}\-[0-9]{2}\-[0-9]{4}\^\d)'
// - '(?:^|\D)(\%?[Bb]\d{13,19}\^[\-\/\.\w\s]{2,26}\^[0-9][0-9][01][0-9][0-9]{3})'
// - '(?:^|\D)(\;\d{13,19}\=(?:\d{3}|)(?:\d{4}|\=))'
//
// ALL_CREDIT_CARDS:
// - (All credit card related regexes from above)
//
// ALL_CREDIT_CARDS_COMBINED:
// - Same as ALL_CREDIT_CARDS but using a single action instead of multiple which should be marginally faster
type Action_ActionType int32

const (
	Action_CUSTOM                    Action_ActionType = 0
	Action_SSN                       Action_ActionType = 1
	Action_MASTERCARD                Action_ActionType = 2
	Action_VISA                      Action_ActionType = 3
	Action_AMEX                      Action_ActionType = 4
	Action_DISCOVER                  Action_ActionType = 5
	Action_JCB                       Action_ActionType = 6
	Action_DINERS_CLUB               Action_ActionType = 7
	Action_CREDIT_CARD_TRACKERS      Action_ActionType = 8
	Action_ALL_CREDIT_CARDS          Action_ActionType = 9
	Action_KEYVALUE                  Action_ActionType = 10
	Action_ALL_CREDIT_CARDS_COMBINED Action_ActionType = 11
)

// Enum value maps for Action_ActionType.
var (
	Action_ActionType_name = map[int32]string{
		0:  "CUSTOM",
		1:  "SSN",
		2:  "MASTERCARD",
		3:  "VISA",
		4:  "AMEX",
		5:  "DISCOVER",
		6:  "JCB",
		7:  "DINERS_CLUB",
		8:  "CREDIT_CARD_TRACKERS",
		9:  "ALL_CREDIT_CARDS",
		10: "KEYVALUE",
		11: "ALL_CREDIT_CARDS_COMBINED",
	}
	Action_ActionType_value = map[string]int32{
		"CUSTOM":                    0,
		"SSN":                       1,
		"MASTERCARD":                2,
		"VISA":                      3,
		"AMEX":                      4,
		"DISCOVER":                  5,
		"JCB":                       6,
		"DINERS_CLUB":               7,
		"CREDIT_CARD_TRACKERS":      8,
		"ALL_CREDIT_CARDS":          9,
		"KEYVALUE":                  10,
		"ALL_CREDIT_CARDS_COMBINED": 11,
	}
)

func (x Action_ActionType) Enum() *Action_ActionType {
	p := new(Action_ActionType)
	*p = x
	return p
}

func (x Action_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_enumTypes[2].Descriptor()
}

func (Action_ActionType) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_enumTypes[2]
}

func (x Action_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action_ActionType.Descriptor instead.
func (Action_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescGZIP(), []int{3, 0}
}

// Listener level config for dlp filter
type FilterConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of transformation, matcher pairs.
	// The first rule which matches will be applied.
	DlpRules []*DlpRule `protobuf:"bytes,1,rep,name=dlp_rules,json=dlpRules,proto3" json:"dlp_rules,omitempty"`
	// Whether responses, access logs, or both should be masked by the applied actions.
	// If not defined, masking will only be enabled for responses bodies.
	EnabledFor    FilterConfig_EnableFor `protobuf:"varint,2,opt,name=enabled_for,json=enabledFor,proto3,enum=dlp.options.gloo.solo.io.FilterConfig_EnableFor" json:"enabled_for,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterConfig) Reset() {
	*x = FilterConfig{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterConfig) ProtoMessage() {}

func (x *FilterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterConfig.ProtoReflect.Descriptor instead.
func (*FilterConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescGZIP(), []int{0}
}

func (x *FilterConfig) GetDlpRules() []*DlpRule {
	if x != nil {
		return x.DlpRules
	}
	return nil
}

func (x *FilterConfig) GetEnabledFor() FilterConfig_EnableFor {
	if x != nil {
		return x.EnabledFor
	}
	return FilterConfig_RESPONSE_BODY
}

// Rule which applies a given set of actions to a matching route.
// The route matching functions exactly the same as the envoy routes in the virtual host.
type DlpRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Matcher by which to determine if the given transformation should be applied
	// if omitted, will it match all (i.e., default to / prefix matcher)
	Matcher *matchers.Matcher `protobuf:"bytes,1,opt,name=matcher,proto3" json:"matcher,omitempty"`
	// List of data loss prevention actions to be applied.
	// These actions will be applied in order, one at a time.
	Actions       []*Action `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DlpRule) Reset() {
	*x = DlpRule{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DlpRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DlpRule) ProtoMessage() {}

func (x *DlpRule) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DlpRule.ProtoReflect.Descriptor instead.
func (*DlpRule) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescGZIP(), []int{1}
}

func (x *DlpRule) GetMatcher() *matchers.Matcher {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *DlpRule) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

// Route/Vhost level config for dlp filter
//
// If a config is present on the route or vhost level it will completely overwrite the
// listener level config.
type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of data loss prevention actions to be applied.
	// These actions will be applied in order, one at a time.
	Actions []*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	// Whether responses, access logs, or both should be masked by the applied actions.
	// If not defined, masking will only be enabled for responses bodies.
	EnabledFor    Config_EnableFor `protobuf:"varint,2,opt,name=enabled_for,json=enabledFor,proto3,enum=dlp.options.gloo.solo.io.Config_EnableFor" json:"enabled_for,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescGZIP(), []int{2}
}

func (x *Config) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Config) GetEnabledFor() Config_EnableFor {
	if x != nil {
		return x.EnabledFor
	}
	return Config_RESPONSE_BODY
}

// A single action meant to mask sensitive data.
// The action type represents a set of pre configured actions,
// as well as the ability to create custom actions.
// These actions can also be shadowed, a shadowed action will be recorded
// in the statistics, and debug logs, but not actually committed in the response body.
//
// To use a pre-made action simply set the action type to anything other than `CUSTOM`
//
// ``` yaml
// actionType: VISA
// ```
//
// To create a custom action set the custom action field. The default enum value
// is custom, so that can be left empty.
//
// ``` yaml
// customAction:
// name: test
// regex:
// - "hello"
// - "world"
// maskChar: Y
// percent: 60
// ```
type Action struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The action type to implement.
	ActionType Action_ActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=dlp.options.gloo.solo.io.Action_ActionType" json:"action_type,omitempty"`
	// The custom user action to be applied.
	// This field will only be used if the custom action type is specified above.
	CustomAction *CustomAction `protobuf:"bytes,2,opt,name=custom_action,json=customAction,proto3" json:"custom_action,omitempty"`
	// The key/value action to be applied.
	// This field will only be used if the KEYVALUE action type is specified above
	// will only affect access logs and response headers, not response bodies
	KeyValueAction *KeyValueAction `protobuf:"bytes,4,opt,name=key_value_action,json=keyValueAction,proto3" json:"key_value_action,omitempty"`
	// Shadow represents whether the action should be taken, or just recorded.
	Shadow        bool `protobuf:"varint,3,opt,name=shadow,proto3" json:"shadow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescGZIP(), []int{3}
}

func (x *Action) GetActionType() Action_ActionType {
	if x != nil {
		return x.ActionType
	}
	return Action_CUSTOM
}

func (x *Action) GetCustomAction() *CustomAction {
	if x != nil {
		return x.CustomAction
	}
	return nil
}

func (x *Action) GetKeyValueAction() *KeyValueAction {
	if x != nil {
		return x.KeyValueAction
	}
	return nil
}

func (x *Action) GetShadow() bool {
	if x != nil {
		return x.Shadow
	}
	return false
}

// A user defined custom action to carry out on the response body.
//
// The list of regex strings are applied in order. So for instance, if there is a response body with the content:
// `hello world`
//
// And there is a custom action
// ``` yaml
// customAction:
// name: test
// regex:
// - "hello"
// - "world"
// maskChar: Y
// percent: 60
// ```
//
// the result would be:
// `YYYlo YYYld`
//
// If the mask_char, and percent were left to default, the result would be:
// `XXXXo XXXXd`
type CustomAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the custom action.
	// This name is used for logging and debugging purposes.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The list of regex strings which will be applied in order.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/dlp/dlp.proto.
	Regex []string `protobuf:"bytes,2,rep,name=regex,proto3" json:"regex,omitempty"`
	// The masking character for the sensitive data.
	// default value: X
	MaskChar string `protobuf:"bytes,3,opt,name=mask_char,json=maskChar,proto3" json:"mask_char,omitempty"`
	// The percent of the string which will be masked by the mask_char
	// default value: 75%
	// rounds ratio (percent/100) by std::round http://www.cplusplus.com/reference/cmath/round/
	Percent *_type.Percent `protobuf:"bytes,4,opt,name=percent,proto3" json:"percent,omitempty"`
	// List of regexes to apply to the response body to match data which should be
	// masked. They will be applied iteratively in the order which they are
	// specified. If this field and `regex` are both provided, all the regexes will
	// be applied iteratively in the order provided, starting with the ones from `regex`
	RegexActions  []*transformation_ee.RegexAction `protobuf:"bytes,5,rep,name=regex_actions,json=regexActions,proto3" json:"regex_actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomAction) Reset() {
	*x = CustomAction{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomAction) ProtoMessage() {}

func (x *CustomAction) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomAction.ProtoReflect.Descriptor instead.
func (*CustomAction) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescGZIP(), []int{4}
}

func (x *CustomAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/dlp/dlp.proto.
func (x *CustomAction) GetRegex() []string {
	if x != nil {
		return x.Regex
	}
	return nil
}

func (x *CustomAction) GetMaskChar() string {
	if x != nil {
		return x.MaskChar
	}
	return ""
}

func (x *CustomAction) GetPercent() *_type.Percent {
	if x != nil {
		return x.Percent
	}
	return nil
}

func (x *CustomAction) GetRegexActions() []*transformation_ee.RegexAction {
	if x != nil {
		return x.RegexActions
	}
	return nil
}

type KeyValueAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the key/value action.
	// This name is used for logging and debugging purposes.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The masking character for the sensitive data.
	// default value: X
	MaskChar string `protobuf:"bytes,2,opt,name=mask_char,json=maskChar,proto3" json:"mask_char,omitempty"`
	// The percent of the string which will be masked by the mask_char
	// default value: 75%
	// rounds ratio (percent/100) by std::round http://www.cplusplus.com/reference/cmath/round/
	Percent *_type.Percent `protobuf:"bytes,3,opt,name=percent,proto3" json:"percent,omitempty"`
	// The key for which corresponding header names/dynamic metadata values should be censored
	// Must be specified
	KeyToMask     string `protobuf:"bytes,4,opt,name=key_to_mask,json=keyToMask,proto3" json:"key_to_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValueAction) Reset() {
	*x = KeyValueAction{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueAction) ProtoMessage() {}

func (x *KeyValueAction) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueAction.ProtoReflect.Descriptor instead.
func (*KeyValueAction) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescGZIP(), []int{5}
}

func (x *KeyValueAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeyValueAction) GetMaskChar() string {
	if x != nil {
		return x.MaskChar
	}
	return ""
}

func (x *KeyValueAction) GetPercent() *_type.Percent {
	if x != nil {
		return x.Percent
	}
	return nil
}

func (x *KeyValueAction) GetKeyToMask() string {
	if x != nil {
		return x.KeyToMask
	}
	return ""
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDesc = "" +
	"\n" +
	"Mgithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/dlp/dlp.proto\x12\x18dlp.options.gloo.solo.io\x1a\x17validate/validate.proto\x1aIgithub.com/solo-io/gloo/projects/gloo/api/v1/core/matchers/matchers.proto\x1aAgithub.com/solo-io/solo-kit/api/external/envoy/type/percent.proto\x1ajgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/transformation_ee/transformation.proto\x1a\x12extproto/ext.proto\"\xdb\x01\n" +
	"\fFilterConfig\x12>\n" +
	"\tdlp_rules\x18\x01 \x03(\v2!.dlp.options.gloo.solo.io.DlpRuleR\bdlpRules\x12Q\n" +
	"\venabled_for\x18\x02 \x01(\x0e20.dlp.options.gloo.solo.io.FilterConfig.EnableForR\n" +
	"enabledFor\"8\n" +
	"\tEnableFor\x12\x11\n" +
	"\rRESPONSE_BODY\x10\x00\x12\x0f\n" +
	"\vACCESS_LOGS\x10\x01\x12\a\n" +
	"\x03ALL\x10\x02\"\x84\x01\n" +
	"\aDlpRule\x12=\n" +
	"\amatcher\x18\x01 \x01(\v2#.matchers.core.gloo.solo.io.MatcherR\amatcher\x12:\n" +
	"\aactions\x18\x02 \x03(\v2 .dlp.options.gloo.solo.io.ActionR\aactions\"\xcb\x01\n" +
	"\x06Config\x12:\n" +
	"\aactions\x18\x01 \x03(\v2 .dlp.options.gloo.solo.io.ActionR\aactions\x12K\n" +
	"\venabled_for\x18\x02 \x01(\x0e2*.dlp.options.gloo.solo.io.Config.EnableForR\n" +
	"enabledFor\"8\n" +
	"\tEnableFor\x12\x11\n" +
	"\rRESPONSE_BODY\x10\x00\x12\x0f\n" +
	"\vACCESS_LOGS\x10\x01\x12\a\n" +
	"\x03ALL\x10\x02\"\xdc\x03\n" +
	"\x06Action\x12L\n" +
	"\vaction_type\x18\x01 \x01(\x0e2+.dlp.options.gloo.solo.io.Action.ActionTypeR\n" +
	"actionType\x12K\n" +
	"\rcustom_action\x18\x02 \x01(\v2&.dlp.options.gloo.solo.io.CustomActionR\fcustomAction\x12R\n" +
	"\x10key_value_action\x18\x04 \x01(\v2(.dlp.options.gloo.solo.io.KeyValueActionR\x0ekeyValueAction\x12\x16\n" +
	"\x06shadow\x18\x03 \x01(\bR\x06shadow\"\xca\x01\n" +
	"\n" +
	"ActionType\x12\n" +
	"\n" +
	"\x06CUSTOM\x10\x00\x12\a\n" +
	"\x03SSN\x10\x01\x12\x0e\n" +
	"\n" +
	"MASTERCARD\x10\x02\x12\b\n" +
	"\x04VISA\x10\x03\x12\b\n" +
	"\x04AMEX\x10\x04\x12\f\n" +
	"\bDISCOVER\x10\x05\x12\a\n" +
	"\x03JCB\x10\x06\x12\x0f\n" +
	"\vDINERS_CLUB\x10\a\x12\x18\n" +
	"\x14CREDIT_CARD_TRACKERS\x10\b\x12\x14\n" +
	"\x10ALL_CREDIT_CARDS\x10\t\x12\f\n" +
	"\bKEYVALUE\x10\n" +
	"\x12\x1d\n" +
	"\x19ALL_CREDIT_CARDS_COMBINED\x10\v\"\xf1\x01\n" +
	"\fCustomAction\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\x05regex\x18\x02 \x03(\tB\x02\x18\x01R\x05regex\x12\x1b\n" +
	"\tmask_char\x18\x03 \x01(\tR\bmaskChar\x125\n" +
	"\apercent\x18\x04 \x01(\v2\x1b.solo.io.envoy.type.PercentR\apercent\x12_\n" +
	"\rregex_actions\x18\x05 \x03(\v2:.envoy.config.filter.http.transformation_ee.v2.RegexActionR\fregexActions\"\x98\x01\n" +
	"\x0eKeyValueAction\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tmask_char\x18\x02 \x01(\tR\bmaskChar\x125\n" +
	"\apercent\x18\x03 \x01(\v2\x1b.solo.io.envoy.type.PercentR\apercent\x12\x1e\n" +
	"\vkey_to_mask\x18\x04 \x01(\tR\tkeyToMaskBU\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01ZGgithub.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/dlpb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_goTypes = []any{
	(FilterConfig_EnableFor)(0),           // 0: dlp.options.gloo.solo.io.FilterConfig.EnableFor
	(Config_EnableFor)(0),                 // 1: dlp.options.gloo.solo.io.Config.EnableFor
	(Action_ActionType)(0),                // 2: dlp.options.gloo.solo.io.Action.ActionType
	(*FilterConfig)(nil),                  // 3: dlp.options.gloo.solo.io.FilterConfig
	(*DlpRule)(nil),                       // 4: dlp.options.gloo.solo.io.DlpRule
	(*Config)(nil),                        // 5: dlp.options.gloo.solo.io.Config
	(*Action)(nil),                        // 6: dlp.options.gloo.solo.io.Action
	(*CustomAction)(nil),                  // 7: dlp.options.gloo.solo.io.CustomAction
	(*KeyValueAction)(nil),                // 8: dlp.options.gloo.solo.io.KeyValueAction
	(*matchers.Matcher)(nil),              // 9: matchers.core.gloo.solo.io.Matcher
	(*_type.Percent)(nil),                 // 10: solo.io.envoy.type.Percent
	(*transformation_ee.RegexAction)(nil), // 11: envoy.config.filter.http.transformation_ee.v2.RegexAction
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_depIdxs = []int32{
	4,  // 0: dlp.options.gloo.solo.io.FilterConfig.dlp_rules:type_name -> dlp.options.gloo.solo.io.DlpRule
	0,  // 1: dlp.options.gloo.solo.io.FilterConfig.enabled_for:type_name -> dlp.options.gloo.solo.io.FilterConfig.EnableFor
	9,  // 2: dlp.options.gloo.solo.io.DlpRule.matcher:type_name -> matchers.core.gloo.solo.io.Matcher
	6,  // 3: dlp.options.gloo.solo.io.DlpRule.actions:type_name -> dlp.options.gloo.solo.io.Action
	6,  // 4: dlp.options.gloo.solo.io.Config.actions:type_name -> dlp.options.gloo.solo.io.Action
	1,  // 5: dlp.options.gloo.solo.io.Config.enabled_for:type_name -> dlp.options.gloo.solo.io.Config.EnableFor
	2,  // 6: dlp.options.gloo.solo.io.Action.action_type:type_name -> dlp.options.gloo.solo.io.Action.ActionType
	7,  // 7: dlp.options.gloo.solo.io.Action.custom_action:type_name -> dlp.options.gloo.solo.io.CustomAction
	8,  // 8: dlp.options.gloo.solo.io.Action.key_value_action:type_name -> dlp.options.gloo.solo.io.KeyValueAction
	10, // 9: dlp.options.gloo.solo.io.CustomAction.percent:type_name -> solo.io.envoy.type.Percent
	11, // 10: dlp.options.gloo.solo.io.CustomAction.regex_actions:type_name -> envoy.config.filter.http.transformation_ee.v2.RegexAction
	10, // 11: dlp.options.gloo.solo.io.KeyValueAction.percent:type_name -> solo.io.envoy.type.Percent
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_init()
}
func file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_dlp_dlp_proto_depIdxs = nil
}
