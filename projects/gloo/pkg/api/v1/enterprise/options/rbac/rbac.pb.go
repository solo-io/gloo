// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/rbac/rbac.proto

package rbac

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Used to specify how claims should be matched to the value.
type JWTPrincipal_ClaimMatcher int32

const (
	// The JWT claim value is a string that exactly matches the value.
	JWTPrincipal_EXACT_STRING JWTPrincipal_ClaimMatcher = 0
	// The JWT claim value is a boolean that matches the value.
	JWTPrincipal_BOOLEAN JWTPrincipal_ClaimMatcher = 1
	// The JWT claim value is a list that contains a string that exactly matches the value.
	JWTPrincipal_LIST_CONTAINS JWTPrincipal_ClaimMatcher = 2
)

// Enum value maps for JWTPrincipal_ClaimMatcher.
var (
	JWTPrincipal_ClaimMatcher_name = map[int32]string{
		0: "EXACT_STRING",
		1: "BOOLEAN",
		2: "LIST_CONTAINS",
	}
	JWTPrincipal_ClaimMatcher_value = map[string]int32{
		"EXACT_STRING":  0,
		"BOOLEAN":       1,
		"LIST_CONTAINS": 2,
	}
)

func (x JWTPrincipal_ClaimMatcher) Enum() *JWTPrincipal_ClaimMatcher {
	p := new(JWTPrincipal_ClaimMatcher)
	*p = x
	return p
}

func (x JWTPrincipal_ClaimMatcher) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JWTPrincipal_ClaimMatcher) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_enumTypes[0].Descriptor()
}

func (JWTPrincipal_ClaimMatcher) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_enumTypes[0]
}

func (x JWTPrincipal_ClaimMatcher) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JWTPrincipal_ClaimMatcher.Descriptor instead.
func (JWTPrincipal_ClaimMatcher) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDescGZIP(), []int{4, 0}
}

// Global RBAC settings
type Settings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Require RBAC for all virtual hosts. A vhost without an RBAC policy set will fallback to a deny-all policy.
	RequireRbac   bool `protobuf:"varint,1,opt,name=require_rbac,json=requireRbac,proto3" json:"require_rbac,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Settings) Reset() {
	*x = Settings{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDescGZIP(), []int{0}
}

func (x *Settings) GetRequireRbac() bool {
	if x != nil {
		return x.RequireRbac
	}
	return false
}

// RBAC settings for Virtual Hosts and Routes
type ExtensionSettings struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Disable RBAC checks on this resource (default false). This is useful to allow access to static resources/login page without RBAC checks.
	// If provided on a route, all route settings override any vhost settings
	Disable bool `protobuf:"varint,1,opt,name=disable,proto3" json:"disable,omitempty"`
	// Named policies to apply.
	Policies      map[string]*Policy `protobuf:"bytes,2,rep,name=policies,proto3" json:"policies,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtensionSettings) Reset() {
	*x = ExtensionSettings{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtensionSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionSettings) ProtoMessage() {}

func (x *ExtensionSettings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionSettings.ProtoReflect.Descriptor instead.
func (*ExtensionSettings) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDescGZIP(), []int{1}
}

func (x *ExtensionSettings) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

func (x *ExtensionSettings) GetPolicies() map[string]*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type Policy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Principals in this policy.
	Principals []*Principal `protobuf:"bytes,1,rep,name=principals,proto3" json:"principals,omitempty"`
	// Permissions granted to the principals.
	Permissions *Permissions `protobuf:"bytes,2,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// The delimiter to use when specifying nested claim names within principals.
	// Default is an empty string, which disables nested claim functionality.
	// This is commonly set to `.`, allowing for nested claim names of the form
	// `parent.child.grandchild`
	NestedClaimDelimiter string `protobuf:"bytes,3,opt,name=nested_claim_delimiter,json=nestedClaimDelimiter,proto3" json:"nested_claim_delimiter,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Policy) Reset() {
	*x = Policy{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDescGZIP(), []int{2}
}

func (x *Policy) GetPrincipals() []*Principal {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *Policy) GetPermissions() *Permissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Policy) GetNestedClaimDelimiter() string {
	if x != nil {
		return x.NestedClaimDelimiter
	}
	return ""
}

// An RBAC principal - the identity entity (usually a user or a service account).
type Principal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JwtPrincipal  *JWTPrincipal          `protobuf:"bytes,1,opt,name=jwt_principal,json=jwtPrincipal,proto3" json:"jwt_principal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Principal) Reset() {
	*x = Principal{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Principal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Principal) ProtoMessage() {}

func (x *Principal) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Principal.ProtoReflect.Descriptor instead.
func (*Principal) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDescGZIP(), []int{3}
}

func (x *Principal) GetJwtPrincipal() *JWTPrincipal {
	if x != nil {
		return x.JwtPrincipal
	}
	return nil
}

// A JWT principal. To use this, JWT option MUST be enabled.
type JWTPrincipal struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set of claims that make up this principal. Commonly, the 'iss' and 'sub' or 'email' claims are used.
	// If you specify the path for a nested claim, such as 'parent.child.foo', you must also specify
	// a non-empty string value for the `nested_claim_delimiter` field in the Policy.
	Claims map[string]string `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Verify that the JWT came from a specific provider. This usually can be left empty
	// and a provider will be chosen automatically.
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// The matcher to use when evaluating this principal. By default, exact string comparison (EXACT_STRING) is used.
	Matcher       JWTPrincipal_ClaimMatcher `protobuf:"varint,3,opt,name=matcher,proto3,enum=rbac.options.gloo.solo.io.JWTPrincipal_ClaimMatcher" json:"matcher,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JWTPrincipal) Reset() {
	*x = JWTPrincipal{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JWTPrincipal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPrincipal) ProtoMessage() {}

func (x *JWTPrincipal) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPrincipal.ProtoReflect.Descriptor instead.
func (*JWTPrincipal) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDescGZIP(), []int{4}
}

func (x *JWTPrincipal) GetClaims() map[string]string {
	if x != nil {
		return x.Claims
	}
	return nil
}

func (x *JWTPrincipal) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *JWTPrincipal) GetMatcher() JWTPrincipal_ClaimMatcher {
	if x != nil {
		return x.Matcher
	}
	return JWTPrincipal_EXACT_STRING
}

// What permissions should be granted. An empty field means allow-all.
// If more than one field is added, all of them need to match.
type Permissions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Paths that have this prefix will be allowed.
	PathPrefix string `protobuf:"bytes,1,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	// What http methods (GET, POST, ...) are allowed.
	Methods       []string `protobuf:"bytes,2,rep,name=methods,proto3" json:"methods,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Permissions) Reset() {
	*x = Permissions{}
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Permissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permissions) ProtoMessage() {}

func (x *Permissions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permissions.ProtoReflect.Descriptor instead.
func (*Permissions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDescGZIP(), []int{5}
}

func (x *Permissions) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

func (x *Permissions) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDesc = "" +
	"\n" +
	"Ogithub.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/rbac/rbac.proto\x12\x19rbac.options.gloo.solo.io\x1a\x12extproto/ext.proto\"-\n" +
	"\bSettings\x12!\n" +
	"\frequire_rbac\x18\x01 \x01(\bR\vrequireRbac\"\xe5\x01\n" +
	"\x11ExtensionSettings\x12\x18\n" +
	"\adisable\x18\x01 \x01(\bR\adisable\x12V\n" +
	"\bpolicies\x18\x02 \x03(\v2:.rbac.options.gloo.solo.io.ExtensionSettings.PoliciesEntryR\bpolicies\x1a^\n" +
	"\rPoliciesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x127\n" +
	"\x05value\x18\x02 \x01(\v2!.rbac.options.gloo.solo.io.PolicyR\x05value:\x028\x01\"\xce\x01\n" +
	"\x06Policy\x12D\n" +
	"\n" +
	"principals\x18\x01 \x03(\v2$.rbac.options.gloo.solo.io.PrincipalR\n" +
	"principals\x12H\n" +
	"\vpermissions\x18\x02 \x01(\v2&.rbac.options.gloo.solo.io.PermissionsR\vpermissions\x124\n" +
	"\x16nested_claim_delimiter\x18\x03 \x01(\tR\x14nestedClaimDelimiter\"Y\n" +
	"\tPrincipal\x12L\n" +
	"\rjwt_principal\x18\x01 \x01(\v2'.rbac.options.gloo.solo.io.JWTPrincipalR\fjwtPrincipal\"\xc4\x02\n" +
	"\fJWTPrincipal\x12K\n" +
	"\x06claims\x18\x01 \x03(\v23.rbac.options.gloo.solo.io.JWTPrincipal.ClaimsEntryR\x06claims\x12\x1a\n" +
	"\bprovider\x18\x02 \x01(\tR\bprovider\x12N\n" +
	"\amatcher\x18\x03 \x01(\x0e24.rbac.options.gloo.solo.io.JWTPrincipal.ClaimMatcherR\amatcher\x1a9\n" +
	"\vClaimsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"@\n" +
	"\fClaimMatcher\x12\x10\n" +
	"\fEXACT_STRING\x10\x00\x12\v\n" +
	"\aBOOLEAN\x10\x01\x12\x11\n" +
	"\rLIST_CONTAINS\x10\x02\"H\n" +
	"\vPermissions\x12\x1f\n" +
	"\vpath_prefix\x18\x01 \x01(\tR\n" +
	"pathPrefix\x12\x18\n" +
	"\amethods\x18\x02 \x03(\tR\amethodsBV\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01ZHgithub.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/rbacb\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_goTypes = []any{
	(JWTPrincipal_ClaimMatcher)(0), // 0: rbac.options.gloo.solo.io.JWTPrincipal.ClaimMatcher
	(*Settings)(nil),               // 1: rbac.options.gloo.solo.io.Settings
	(*ExtensionSettings)(nil),      // 2: rbac.options.gloo.solo.io.ExtensionSettings
	(*Policy)(nil),                 // 3: rbac.options.gloo.solo.io.Policy
	(*Principal)(nil),              // 4: rbac.options.gloo.solo.io.Principal
	(*JWTPrincipal)(nil),           // 5: rbac.options.gloo.solo.io.JWTPrincipal
	(*Permissions)(nil),            // 6: rbac.options.gloo.solo.io.Permissions
	nil,                            // 7: rbac.options.gloo.solo.io.ExtensionSettings.PoliciesEntry
	nil,                            // 8: rbac.options.gloo.solo.io.JWTPrincipal.ClaimsEntry
}
var file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_depIdxs = []int32{
	7, // 0: rbac.options.gloo.solo.io.ExtensionSettings.policies:type_name -> rbac.options.gloo.solo.io.ExtensionSettings.PoliciesEntry
	4, // 1: rbac.options.gloo.solo.io.Policy.principals:type_name -> rbac.options.gloo.solo.io.Principal
	6, // 2: rbac.options.gloo.solo.io.Policy.permissions:type_name -> rbac.options.gloo.solo.io.Permissions
	5, // 3: rbac.options.gloo.solo.io.Principal.jwt_principal:type_name -> rbac.options.gloo.solo.io.JWTPrincipal
	8, // 4: rbac.options.gloo.solo.io.JWTPrincipal.claims:type_name -> rbac.options.gloo.solo.io.JWTPrincipal.ClaimsEntry
	0, // 5: rbac.options.gloo.solo.io.JWTPrincipal.matcher:type_name -> rbac.options.gloo.solo.io.JWTPrincipal.ClaimMatcher
	3, // 6: rbac.options.gloo.solo.io.ExtensionSettings.PoliciesEntry.value:type_name -> rbac.options.gloo.solo.io.Policy
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() {
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_init()
}
func file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_init() {
	if File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto = out.File
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gloo_api_v1_enterprise_options_rbac_rbac_proto_depIdxs = nil
}
