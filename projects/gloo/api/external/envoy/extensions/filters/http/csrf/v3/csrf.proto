// copied from https://github.com/envoyproxy/envoy/blob/main/api/envoy/extensions/filters/http/csrf/v3/csrf.proto

syntax = "proto3";

package solo.io.envoy.extensions.filters.http.csrf.v3;

// manually updated this line:
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/extensions/filters/http/csrf/v3";

import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/core/v3/base.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/type/matcher/v3/string.proto";

import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.csrf.v3";
option java_outer_classname = "CsrfProto";
option java_multiple_files = true;

// manually added equal_all:
import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

// [#protodoc-title: CSRF]
// Cross-Site Request Forgery configuration overview.
// [#extension: envoy.filters.http.csrf]

// CSRF filter config.
message CsrfPolicy {

  // Specifies the % of requests for which the CSRF filter is enabled.
  //
  // If runtime_key is specified,
  // Envoy will lookup the runtime key to get the percentage of requests to filter.
  //
  // **Note**:
  //
  //   This field defaults to 100/:ref:`HUNDRED
  //   <envoy_api_enum_type.v3.FractionalPercent.DenominatorType>`.
  config.core.v3.RuntimeFractionalPercent filter_enabled = 1
  [(validate.rules).message = {required: true}];

  // Specifies that CSRF policies will be evaluated and tracked, but not enforced.
  //
  // This is intended to be used when `filter_enabled` is off and will be ignored otherwise.
  //
  // If runtime_key is specified,
  // Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
  // and track the request's *Origin* and *Destination* to determine if it's valid, but will not
  // enforce any policies.
  config.core.v3.RuntimeFractionalPercent shadow_enabled = 2;

  // Specifies additional source origins that will be allowed in addition to
  // the destination origin.
  //
  // More information on how this can be configured via runtime can be found
  // here.
  repeated type.matcher.v3.StringMatcher additional_origins = 3;
}