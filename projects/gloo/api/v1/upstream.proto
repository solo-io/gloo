
syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/ssl/ssl.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/circuit_breaker/circuit_breaker.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/load_balancer.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/connection.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/api/v2/core/health_check.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/api/v2/cluster/outlier_detection.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/static/static.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/pipe/pipe.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/kubernetes/kubernetes.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/aws/aws.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/azure/azure.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/consul/consul.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/aws/ec2/aws_ec2.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/failover.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/gcp/gcp.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/ai/ai.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";

/*
 * Upstreams represent destination for routing HTTP requests. Upstreams can be compared to
 * [clusters](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto) in Envoy terminology.
 * Each upstream in Gloo has a type. Supported types include `static`, `kubernetes`, `aws`, `consul`, and more.
 * Each upstream type is handled by a corresponding Gloo plugin. (plugins currently need to be compiled into Gloo)
 */
message Upstream {



    option (core.solo.io.resource).short_name = "us";
    option (core.solo.io.resource).plural_name = "upstreams";

    reserved 1;
    // NamespacedStatuses indicates the validation status of this resource.
    // NamespacedStatuses is read-only by clients, and set by gloo during validation
    core.solo.io.NamespacedStatuses namespaced_statuses = 23 [(extproto.skip_hashing) = true];

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 2;

    // Upstreams and their configuration can be automatically by Gloo Discovery
    // if this upstream is created or modified by Discovery, metadata about the operation will be placed here.
    DiscoveryMetadata discovery_metadata = 3;

    // SslConfig contains the options necessary to configure envoy to originate TLS to an upstream.
    UpstreamSslConfig ssl_config = 4;

    // Circuit breakers for this upstream. if not set, the defaults ones from the Gloo settings will be used.
    // if those are not set, [envoy's defaults](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/circuit_breaker.proto#envoy-api-msg-cluster-circuitbreakers)
    // will be used.
    CircuitBreakerConfig circuit_breakers = 5;

    // Settings for the load balancer that sends requests to the Upstream. The load balancing method is set to round robin by default.
    LoadBalancerConfig load_balancer_config = 6;

    repeated .solo.io.envoy.api.v2.core.HealthCheck health_checks = 8;
    .solo.io.envoy.api.v2.cluster.OutlierDetection outlier_detection = 9;

    // Note to developers: new Upstream plugins must be added to this oneof field
    // to be usable by Gloo. (plugins currently need to be compiled into Gloo)
    oneof upstream_type {
        kubernetes.options.gloo.solo.io.UpstreamSpec kube = 11;
        static.options.gloo.solo.io.UpstreamSpec static = 12;
        pipe.options.gloo.solo.io.UpstreamSpec pipe = 13;
        aws.options.gloo.solo.io.UpstreamSpec aws = 14;
        azure.options.gloo.solo.io.UpstreamSpec azure = 15;
        consul.options.gloo.solo.io.UpstreamSpec consul = 16;
        aws_ec2.options.gloo.solo.io.UpstreamSpec aws_ec2 = 17;
        gcp.options.gloo.solo.io.UpstreamSpec gcp = 34;
        ai.options.gloo.solo.io.UpstreamSpec ai = 35;
    }

    // Failover endpoints for this upstream. If omitted (the default) no failovers will be applied.
    gloo.solo.io.Failover failover = 18;

    //HTTP/1 connection configurations
    ConnectionConfig connection_config = 7;

    enum ClusterProtocolSelection {
        // Cluster can only operate on one of the possible upstream protocols (HTTP1.1, HTTP2).
        // If http2_protocol_options are
        // present, HTTP2 will be used, otherwise HTTP1.1 will be used.
        USE_CONFIGURED_PROTOCOL = 0;

        // Use HTTP1.1 or HTTP2, depending on which one is used on the downstream connection.
        USE_DOWNSTREAM_PROTOCOL = 1;
    }

    // Determines how Envoy selects the protocol used to speak to upstream hosts.
    ClusterProtocolSelection protocol_selection = 25;

    // Use http2 when communicating with this upstream
    // this field is evaluated `true` for upstreams
    // with a grpc service spec. otherwise defaults to `false`
    google.protobuf.BoolValue use_http2 = 10;

    // (UInt32Value) Initial stream-level flow-control window size.
    // Valid values range from 65535 (2^16 - 1, HTTP/2 default) to 2147483647 (2^31 - 1, HTTP/2 maximum)
    // and defaults to 268435456 (256 * 1024 * 1024).
    // NOTE: 65535 is the initial window size from HTTP/2 spec.
    // We only support increasing the default window size now, so itâ€™s also the minimum.
    // This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream
    // in the HTTP/2 codec buffers. Once the buffer reaches this pointer,
    // watermark callbacks will fire to stop the flow of data to the codec buffers.
    // Requires UseHttp2 to be true to be acknowledged.
    google.protobuf.UInt32Value initial_stream_window_size = 19;

    // (UInt32Value) Similar to initial_stream_window_size, but for connection-level flow-control window.
    // Currently, this has the same minimum/maximum/default as initial_stream_window_size.
    // Requires UseHttp2 to be true to be acknowledged.
    google.protobuf.UInt32Value initial_connection_window_size = 20;

    // (UInt32Value) Maximum concurrent streams allowed for peer on one HTTP/2 connection.
    // Valid values range from 1 to 2147483647 (2^31 - 1) and defaults to 2147483647.
    // Requires UseHttp2 to be true to be acknowledged.
    google.protobuf.UInt32Value max_concurrent_streams = 24;

    // Allows invalid HTTP messaging and headers. When this option is disabled (default), then
    // the whole HTTP/2 connection is terminated upon receiving invalid HEADERS frame. However,
    // when this option is enabled, only the offending stream is terminated.
    //
    // This overrides any HCM :ref:`stream_error_on_invalid_http_messaging
    // <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_error_on_invalid_http_message>`
    //
    // See [RFC7540, sec. 8.1](https://datatracker.ietf.org/doc/html/rfc7540#section-8.1) for details.
    google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 26;

    // Tells Envoy that the upstream is an HTTP proxy that supports [HTTP CONNECT method](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/CONNECT).
    // The hostname is the destination of the tunnel established by the proxy.
    // Some Envoy Command Operators (.e.g `%REQUESTED_SERVER_NAME%`) are supported allowing for dynamic destinations.
    //
    // For example, setting to: host.com:443 and making a request routed to the upstream such as `curl <envoy>:<port>/v1`
    // would result in the following request:
    //
    //    CONNECT host.com:443 HTTP/1.1
    //    host: host.com:443
    //
    //    GET /v1 HTTP/1.1
    //    host: <envoy>:<port>
    //    user-agent: curl/7.64.1
    //    accept: */*
    //
    // Note: If setting this field to a hostname rather than IP:PORT, you may want to also set `host_rewrite` on the route
    google.protobuf.StringValue http_proxy_hostname = 21;

    // HttpConnectSslConfig contains the options necessary to configure envoy to originate TLS to an HTTP Connect proxy.
    // If you also want to ensure the bytes proxied by the HTTP Connect proxy are encrypted, you should also
    // specify `ssl_config`.
    UpstreamSslConfig http_connect_ssl_config = 27;

    // HttpConnectHeaders specifies the headers sent with the initial HTTP Connect request.
    repeated HeaderValue http_connect_headers = 28;

    // (bool) If set to true, Envoy will ignore the health value of a host when processing its removal from service discovery.
    // This means that if active health checking is used, Envoy will not wait for the endpoint to go unhealthy before removing it.
    google.protobuf.BoolValue ignore_health_on_host_removal = 22;

    // If set to true, Service Discovery update period will be triggered once the TTL is expired.
    // If minimum TTL of all records is 0 then dns_refresh_rate will be used.
    google.protobuf.BoolValue respect_dns_ttl= 29;

    // Service Discovery DNS Refresh Rate.
    // Minimum value is 1 ms. Values below the minimum are considered invalid.
    // Only valid for STRICT_DNS and LOGICAL_DNS cluster types. All other cluster types are considered invalid.
    google.protobuf.Duration dns_refresh_rate = 30;


    // Proxy Protocol Version to add when communicating with the upstream.
    // If unset will not wrap the transport socket. 
    // These are of the format "V1" or "V2"
    google.protobuf.StringValue proxy_protocol_version= 31;

    // Preconnect policy for the cluster 
    // Aligns as closely as possible with https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto#envoy-v3-api-msg-config-cluster-v3-cluster-preconnectpolicy
    // This is not recommended for use unless you are sure you need it.
    // In most cases preconnect hurts more than it helps.
    PreconnectPolicy preconnect_policy= 32;

    // If set to true, the proxy will not allow automatic mTLS detection for Istio upstreams.
    // Defaults to false.
    google.protobuf.BoolValue disable_istio_auto_mtls = 33;
}

// created by discovery services
message DiscoveryMetadata {
    // Labels inherited from the original upstream (e.g. Kubernetes labels)
    map<string, string> labels = 1;
}

// Header name/value pair.
message HeaderValue {
    // Header name.
    string key = 1;
    // Header value.
    string value = 2;
}

message PreconnectPolicy {
    // Indicates how many streams (rounded up) can be anticipated per-upstream for each
    // incoming stream. This is useful for high-QPS or latency-sensitive services. Preconnecting
    // will only be done if the upstream is healthy and the cluster has traffic.
    //
    // For example if this is 2, for an incoming HTTP/1.1 stream, 2 connections will be
    // established, one for the new incoming stream, and one for a presumed follow-up stream. For
    // HTTP/2, only one connection would be established by default as one connection can
    // serve both the original and presumed follow-up stream.
    //
    // In steady state for non-multiplexed connections a value of 1.5 would mean if there were 100
    // active streams, there would be 100 connections in use, and 50 connections preconnected.
    // This might be a useful value for something like short lived single-use connections,
    // for example proxying HTTP/1.1 if keep-alive were false and each stream resulted in connection
    // termination. It would likely be overkill for long lived connections, such as TCP proxying SMTP
    // or regular HTTP/1.1 with keep-alive. For long lived traffic, a value of 1.05 would be more
    // reasonable, where for every 100 connections, 5 preconnected connections would be in the queue
    // in case of unexpected disconnects where the connection could not be reused.
    //
    // If this value is not set, or set explicitly to one, Envoy will fetch as many connections
    // as needed to serve streams in flight. This means in steady state if a connection is torn down,
    // a subsequent streams will pay an upstream-rtt latency penalty waiting for a new connection.
    //
    // This is limited somewhat arbitrarily to 3 because preconnecting too aggressively can
    // harm latency more than the preconnecting helps.
    google.protobuf.DoubleValue per_upstream_preconnect_ratio = 1
        [(validate.rules).double = {lte: 3.0 gte: 1.0}];

    // Indicates how many streams (rounded up) can be anticipated across a cluster for each
    // stream, useful for low QPS services. This is currently supported for a subset of
    // deterministic non-hash-based load-balancing algorithms (weighted round robin, random).
    // Unlike `per_upstream_preconnect_ratio` this preconnects across the upstream instances in a
    // cluster, doing best effort predictions of what upstream would be picked next and
    // pre-establishing a connection.
    //
    // Preconnecting will be limited to one preconnect per configured upstream in the cluster and will
    // only be done if there are healthy upstreams and the cluster has traffic.
    //
    // For example if preconnecting is set to 2 for a round robin HTTP/2 cluster, on the first
    // incoming stream, 2 connections will be preconnected - one to the first upstream for this
    // cluster, one to the second on the assumption there will be a follow-up stream.
    //
    // If this value is not set, or set explicitly to one, Envoy will fetch as many connections
    // as needed to serve streams in flight, so during warm up and in steady state if a connection
    // is closed (and per_upstream_preconnect_ratio is not set), there will be a latency hit for
    // connection establishment.
    //
    // If both this and preconnect_ratio are set, Envoy will make sure both predicted needs are met,
    // basically preconnecting max(predictive-preconnect, per-upstream-preconnect), for each
    // upstream.
    google.protobuf.DoubleValue predictive_preconnect_ratio = 2
        [(validate.rules).double = {lte: 3.0 gte: 1.0}];
  }