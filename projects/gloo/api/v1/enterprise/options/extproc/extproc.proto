syntax = "proto3";
package extproc.options.gloo.solo.io;

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/extproc";

import "extproto/ext.proto";
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;
option (extproto.equal_all) = true;
import "validate/validate.proto";

import "github.com/solo-io/solo-kit/api/v1/ref.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/filters/stages.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/common/mutation_rules/v3/mutation_rules.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/core/v3/base.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/ext_proc/v3/processing_mode.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/type/matcher/v3/string.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

// Enterprise-only: Configuration for Envoy's [External Processing Filter](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/ext_proc_filter).
// The External Processing filter allows for calling out to an external gRPC service at a specified
// point within a HTTP filter chain. The external service may access and modify various parts of the
// request or response, and may terminate processing.
// Envoy's External Processing Filter is considered a work in progress and has an unknown security posture.
// Users should take care to understand the risks of using this extension before proceeding.
message Settings {
  // Required. Configuration for the gRPC service that the filter will communicate with.
  GrpcService grpc_service = 1;

  // Required. Where in the HTTP filter chain to insert the filter.
  .filters.gloo.solo.io.FilterStage filter_stage = 2;

  // By default, if the gRPC stream cannot be established, or if it is closed
  // prematurely with an error, the filter will fail. Specifically, if the
  // response headers have not yet been delivered, then it will return a 500
  // error downstream. If they have been delivered, then instead the HTTP stream to the
  // downstream client will be reset.
  // With this parameter set to true, however, then if the gRPC stream is prematurely closed
  // or could not be opened, processing continues without error.
  google.protobuf.BoolValue failure_mode_allow = 3;

  // Specifies default options for how HTTP headers, trailers, and bodies are
  // sent.
  .solo.io.envoy.extensions.filters.http.ext_proc.v3.ProcessingMode processing_mode = 4;

  // NOT CURRENTLY IMPLEMENTED.
  // If true, send each part of the HTTP request or response specified by ProcessingMode
  // asynchronously -- in other words, send the message on the gRPC stream and then continue
  // filter processing. If false, which is the default, suspend filter execution after
  // each message is sent to the remote service and wait up to "message_timeout"
  // for a reply.
  google.protobuf.BoolValue async_mode = 5;

  // NOT CURRENTLY IMPLEMENTED.
  // Envoy provides a number of [attributes](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes#arch-overview-attributes)
  // for expressive policies. Each attribute name provided in this field will be
  // matched against that list and populated in the request_headers message.
  // See the [request attribute documentation](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes#request-attributes)
  // for the list of supported attributes and their types.
  repeated string request_attributes = 6;

  // NOT CURRENTLY IMPLEMENTED.
  // Envoy provides a number of [attributes](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes#arch-overview-attributes)
  // for expressive policies. Each attribute name provided in this field will be
  // matched against that list and populated in the response_headers message.
  // See the [response attribute documentation](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/advanced/attributes#response-attributes)
  // for the list of supported attributes and their types.
  repeated string response_attributes = 7;

  // Specifies the timeout for each individual message sent on the stream
  // when the filter is running in synchronous mode. Whenever the proxy sends
  // a message on the stream that requires a response, it will reset this timer,
  // and will stop processing and return an error (subject to the processing mode)
  // if the timer expires before a matching response is received. There is no
  // timeout when the filter is running in asynchronous mode. Value must be at
  // least 0 seconds, and less than or equal to 3600 seconds. Zero is a valid
  // value which means the timer will be triggered immediately. If not
  // configured, default is 200 milliseconds.
  google.protobuf.Duration message_timeout = 8 [(validate.rules).duration = {
    lte {seconds: 3600}
    gte {}
  }];

  // Optional additional prefix to use when emitting statistics. This allows distinguishing
  // between statistics emitted by multiple *ext_proc* filters in an HTTP filter chain.
  google.protobuf.StringValue stat_prefix = 9;

  // Rules that determine what modifications an external processing server may
  // make to message headers. If not set, all headers may be modified except
  // for "host", ":authority", ":scheme", ":method", and headers that start
  // with the header prefix set via
  // [header_prefix](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/bootstrap/v3/bootstrap.proto#envoy-v3-api-field-config-bootstrap-v3-bootstrap-header-prefix)
  // (which is usually "x-envoy").
  // Note that changing headers such as "host" or ":authority" may not in itself
  // change Envoy's routing decision, as routes can be cached. To also force the
  // route to be recomputed, set the
  // [clear_route_cache](https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/ext_proc/v3/external_processor.proto#envoy-v3-api-field-service-ext-proc-v3-commonresponse-clear-route-cache)
  // field to true in the same response.
  .solo.io.envoy.config.common.mutation_rules.v3.HeaderMutationRules mutation_rules = 10;

  // Specify the upper bound of
  // [override_message_timeout](https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/ext_proc/v3/external_processor.proto#envoy-v3-api-field-service-ext-proc-v3-processingresponse-override-message-timeout).
  // If not specified, by default it is 0, which will effectively disable the `override_message_timeout` API.
  // Value must be greater than or equal to the `messageTimeout` and less than or equal to 3600 seconds.
  google.protobuf.Duration max_message_timeout = 11 [(validate.rules).duration = {
    lte {seconds: 3600}
    gte {}
  }];

  // Prevents clearing the route-cache when the
  // [clear_route_cache](https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/ext_proc/v3/external_processor.proto#envoy-v3-api-field-service-ext-proc-v3-commonresponse-clear-route-cache)
  // field is set in an external processor response.
  google.protobuf.BoolValue disable_clear_route_cache = 12;

  // Allow headers matching the `forward_rules` to be forwarded to the external processing server.
  // If not set, all headers are forwarded to the external processing server.
  HeaderForwardingRules forward_rules = 13;

  // Additional metadata to be added to the filter state for logging purposes. The metadata
  // will be added to StreamInfo's filter state under the namespace corresponding to the
  // ext_proc filter name.
  google.protobuf.Struct filter_metadata = 14;


  // If `allow_mode_override` is set to true, the filter config [processing_mode](https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_proc/v3/ext_proc.proto#envoy-v3-api-field-extensions-filters-http-ext-proc-v3-externalprocessor-processing-mode)
  // can be overridden by the response message from the external processing server
  // [mode_override](https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/ext_proc/v3/external_processor.proto#envoy-v3-api-field-service-ext-proc-v3-processingresponse-mode-override).
  // If not set, `mode_override` API in the response message will be ignored.
  google.protobuf.BoolValue allow_mode_override = 15;

  // Specifies a list of metadata namespaces whose values, if present, will be passed to the
  // ext_proc service as an opaque *protobuf::Struct*.
  repeated string metadata_context_namespaces = 16;

  // Specifies a list of metadata namespaces whose values, if present, will be passed to the
  // ext_proc service. typed_filter_metadata is passed as an `protobuf::Any`.
  //
  // It works in a way similar to `metadata_context_namespaces` but allows envoy and external processing server to share the protobuf message definition
  // in order to do a safe parsing.
  repeated string typed_metadata_context_namespaces = 17;

}

// External processor settings that can be configured on a virtual host or route.
message RouteSettings {
  oneof override {
    // Set to true to disable the External Processing filter for this virtual host or route.
    // Setting this value to false is not supported.
    google.protobuf.BoolValue disabled = 1;

    // Override specific configuration for this virtual host or route.
    // If a route specifies overrides, it will override the disabled flag of its parent virtual host.
    Overrides overrides = 2;
  }
}

message GrpcService {
  // A reference to the Upstream representing the external processor gRPC server.
  // See https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/ext_proc/v3/external_processor.proto
  // for details.
  core.solo.io.ResourceRef ext_proc_server_ref = 1;

  // The `:authority` header in the grpc request. If this field is not set, the authority header value will be the
  // cluster name.
  // Note that this authority does not override the SNI. The SNI is provided by the transport socket of the cluster.
  google.protobuf.StringValue authority = 2;

  // Indicates the retry policy for re-establishing the gRPC stream
  // This field is optional. If max interval is not provided, it will be set to ten times the provided base interval.
  // Currently only supported for xDS gRPC streams.
  // If not set, xDS gRPC streams default base interval:500ms, maximum interval:30s will be applied.
  .solo.io.envoy.config.core.v3.RetryPolicy retry_policy = 3;

  // The timeout for the gRPC request. This is the timeout for a specific request.
  google.protobuf.Duration timeout = 4;

  // Additional metadata to include in streams initiated to the GrpcService. This can be used for
  // scenarios in which additional ad hoc authorization headers (e.g. `x-foo-bar: baz-key`) are to
  // be injected. For more information, including details on header value syntax, see the
  // documentation on [custom request headers](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers#config-http-conn-man-headers-custom-request-headers).
  repeated .solo.io.envoy.config.core.v3.HeaderValue initial_metadata = 5;
}

message Overrides {
  // Set a different processing mode for this virtual host or route than the default.
  .solo.io.envoy.extensions.filters.http.ext_proc.v3.ProcessingMode processing_mode = 1;

  // NOT CURRENTLY IMPLEMENTED.
  // Set a different asynchronous processing option than the default.
  google.protobuf.BoolValue async_mode = 2;

  // NOT FINALIZED UPSTREAM use at your own upgrade risk
  // Set different optional attributes than the default setting of the
  // `request_attributes` field.
  repeated string request_attributes = 3;

  // NOT FINALIZED UPSTREAM use at your own upgrade risk
  // Set different optional properties than the default setting of the
  // `response_attributes` field.
  repeated string response_attributes = 4;

  // Set a different gRPC service for this virtual host or route than the default.
  GrpcService grpc_service = 5;

    // Specifies a list of metadata namespaces whose values, if present, will be passed to the
  // ext_proc service as an opaque *protobuf::Struct*.
  repeated string metadata_context_namespaces = 6;


  // Specifies a list of metadata namespaces whose values, if present, will be passed to the
  // ext_proc service. typed_filter_metadata is passed as an `protobuf::Any`.
  //
  // It works in a way similar to `metadata_context_namespaces` but allows envoy and external processing server to share the protobuf message definition
  // in order to do a safe parsing.
  repeated string typed_metadata_context_namespaces = 7;
}

// The HeaderForwardingRules structure specifies what headers are
// allowed to be forwarded to the external processing server.
// See https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/http/ext_proc/v3/ext_proc.proto#extensions-filters-http-ext-proc-v3-headerforwardingrules
// for details.
message HeaderForwardingRules {
  // If set, specifically allow any header in this list to be forwarded to the external
  // processing server. This can be overridden by the below `disallowed_headers`.
  .solo.io.envoy.type.matcher.v3.ListStringMatcher allowed_headers = 1;

  // If set, specifically disallow any header in this list to be forwarded to the external
  // processing server. This overrides the above `allowed_headers` if a header matches both.
  // NOT CURRENTLY IMPLEMENTED.
  .solo.io.envoy.type.matcher.v3.ListStringMatcher disallowed_headers = 2;
}