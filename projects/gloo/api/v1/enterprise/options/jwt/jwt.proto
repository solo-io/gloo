syntax = "proto3";
package jwt.options.gloo.solo.io;

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/jwt";

import "github.com/solo-io/solo-kit/api/v1/ref.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/filters/http/jwt_authn/v3/config.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";

message JwtStagedVhostExtension {
    // JWT Virtual host config for the JWT filter that runs before the extauth filter.
    VhostExtension before_ext_auth = 1;

    // JWT Virtual host config for the JWT filter that runs after the extauth filter.
    VhostExtension after_ext_auth = 2;
}

message JwtStagedRouteProvidersExtension {

   // Per-route JWT config for the JWT filter that runs before the extauth filter.
    VhostExtension before_ext_auth = 1;

   // Per-route JWT config for the JWT filter that runs before the extauth filter.
    VhostExtension after_ext_auth = 2;
}

message JwtStagedRouteExtension {

   // Per-route JWT config for the JWT filter that runs before the extauth filter.
    RouteExtension before_ext_auth = 1;

   // Per-route JWT config for the JWT filter that runs before the extauth filter.
    RouteExtension after_ext_auth = 2;
}

message VhostExtension {
    // Map of JWT provider name to Provider.
    // If specified, multiple providers will be `OR`-ed together and will allow validation to any of the providers.
    map<string, Provider> providers = 4;

    // Allow pass through of JWT requests for this virtual host, even if JWT token is missing or JWT auth failed.
    // If this is false (default false), requests that fail JWT authentication will fail authorization immediately.
    // For example, if a request requires either JWT auth OR another auth method, this can be enabled to allow a failed JWT auth request to pass through to the other auth method.
    // Deprecated: use validation_policy instead.
    bool allow_missing_or_failed_jwt = 2 [deprecated = true];

    // Optional: Configure how JWT validation works, with the flexibility to handle requests with missing or invalid JWTs.
    // By default, after applying JWT policy to a route, only requests that authenticate with a valid JWT succeed.
    ValidationPolicy validation_policy = 3;

    enum ValidationPolicy {
        // Default value. Allow only requests that authenticate with a valid JWT to succeed.
        // Note that the `allowMissingOrFailed=true` setting takes precedence. In such a case, even if you explicitly set `validationPolicy=REQUIRE_VALID`, this field is ignored.
        REQUIRE_VALID = 0;

        // Allow requests to succeed even if JWT authentication is missing, but fail when an invalid JWT token is presented.
        // You might use this setting when later steps depend on input from the JWT.
        // For example, you might add claims from the JWT to request headers with the claimsToHeaders field.
        // As such, you may want to make sure that any provided JWT is valid. If not, the request fails,
        // which informs the requester that their JWT is not valid.
        // Requests without a JWT, however, still succeed and skip JWT validation.
        ALLOW_MISSING = 1;

        // Allow requests to succeed even when a JWT is missing or JWT verification fails.
        // For example, you might apply multiple policies to your routes so that requests can authenticate with either a
        // JWT or another method such as external auth. Use this value
        // to allow a failed JWT auth request to pass through to the other authentication method.
        ALLOW_MISSING_OR_FAILED = 2;
    }
}

message RouteExtension {
    // Disable JWT checks on this route.
    bool disable = 1;
}

message Provider {
    // The source for the keys to validate JWTs.
    Jwks jwks = 1;
    // An incoming JWT must have an 'aud' claim and it must be in this list.
    repeated string audiences = 2;
    // Issuer of the JWT. the 'iss' claim of the JWT must match this.
    string issuer = 3;

    // Where to find the JWT of the current provider.
    TokenSource token_source = 4;

    // Should the token forwarded upstream. if false, the header containing the token will be removed.
    bool keep_token = 5;

    // What claims should be copied to upstream headers.
    repeated ClaimToHeader claims_to_headers = 6;

    // Optional: ClockSkewSeconds is used to verify time constraints, such as `exp` and `npf`. Default is 60s
    google.protobuf.UInt32Value clock_skew_seconds = 8;

    // Optional: When this field is set, the specified value is used as the key in DynamicMetadata to store the JWT failure status code and message under that key. If the value is empty (i.e., ""), it is ignored.
    // This field is particularly useful when logging the failure status.
    //
    // For example, if the value of `attach_failed_status_to_metadata` is 'custom_auth_failure_status' then
    // the failure status can be accessed in the access log as '%DYNAMIC_METADATA(envoy.filters.http.jwt_authn:custom_auth_failure_status)'
    // Note: status code and message can be individually accessed as '%DYNAMIC_METADATA(envoy.filters.http.jwt_authn:custom_auth_failure_status.code)' and '%DYNAMIC_METADATA(envoy.filters.http.jwt_authn:custom_auth_failure_status.message)' respectively.
    string attach_failed_status_to_metadata = 9;
}

message Jwks {
    oneof jwks {
        // Use a remote JWKS server
        RemoteJwks remote = 1;
        // Use an inline JWKS
        LocalJwks local   = 2;
    }
}

message RemoteJwks {
    // The url used when accessing the upstream for Json Web Key Set.
    // This is used to set the host and path in the request
    string url = 1;
    // The Upstream representing the Json Web Key Set server
    core.solo.io.ResourceRef upstream_ref = 2;
    // Duration after which the cached JWKS should be expired. 
    // If not specified, default cache duration is 5 minutes.
    google.protobuf.Duration cache_duration = 4;
    // Fetch Jwks asynchronously in the main thread before the listener is activated.
    // Fetched Jwks can be used by all worker threads.
    //
    // If this feature is not enabled:
    //
    // * The Jwks is fetched on-demand when the requests come. During the fetching, first
    //   few requests are paused until the Jwks is fetched.
    // * Each worker thread fetches its own Jwks since Jwks cache is per worker thread.
    //
    // If this feature is enabled:
    //
    // * Fetched Jwks is done in the main thread before the listener is activated. Its fetched
    //   Jwks can be used by all worker threads. Each worker thread doesn't need to fetch its own.
    // * Jwks is ready when the requests come, not need to wait for the Jwks fetching.
    .solo.io.envoy.extensions.filters.http.jwt_authn.v3.JwksAsyncFetch async_fetch = 3;
}
message LocalJwks {
    // Inline key. this can be json web key, key-set or PEM format.
    string key = 1;
}

// Describes the location of a JWT token
message TokenSource {
    // Describes how to retrieve a JWT from a header
    message HeaderSource {
        // The name of the header. for example, "authorization"
        string header = 1;
        // Prefix before the token. for example, "Bearer "
        string prefix = 2;
    }

    // Try to retrieve token from these headers
    repeated HeaderSource headers = 1;
    // Try to retrieve token from these query params
    repeated string query_params = 2;
}

// Allows copying verified claims to headers sent upstream
message ClaimToHeader {
    // Claim name. for example, "sub"
    string claim = 1;
    // The header the claim will be copied to. for example, "x-sub".
    string header = 2;
    // If the header exists, append to it (true), or overwrite it (false).
    bool append = 4;
}
