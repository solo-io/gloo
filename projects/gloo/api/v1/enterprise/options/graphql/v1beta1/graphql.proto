syntax = "proto3";

package graphql.gloo.solo.io;

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/enterprise/options/graphql/v1beta1";

option java_package = "io.envoyproxy.envoy.config.filter.http.graphql.v2";
option java_outer_classname = "GraphQLFilterProto";
option java_multiple_files = true;

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";

import "validate/validate.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

/**
  Using `string` value templates

  When defining resolutions, many instances allow you to use "templated strings", which are strings
  with extra templating capabilities. The following rules must be followed when using a templated strings:
  - templated values will be interpolated into the strings they are in
    * e.g. if `$parent.token` is `ABDEFG`, "Bearer_{$parent.token}" may become "Bearer_ABCDEFG"
  - templated values must start with `{$`, immediately preceded by
    - `parent` for extracting a value from the parent object
    - `args` for extracting a value from the graphql field arguments
    - `headers` for extracting a value from the request headers.
  - `headers` extractions can only have one value in the path to represent the header being extracted
  - for other extractions, e.g. `parent` and `args`, a more complicated path can be used for extracting nested values
    using the following rules:
      - use `a.b` to extract key "b" from object "a"
      - use `a[0]` to extract the 1st element in array "a"
      - use `a[*].b` to extract key "b" from all objects in array "a"
      - use `a[*]` to create a list of key-value pairs from object "a"
      - use `a[*][0]` to create a list of all keys from object "a"
      - use `a[*][1]` to create a list of all values from object "a"
 */

// Deprecated: The GraphQL feature of Gloo Gateway will be removed in a future release.
// Defines a configuration for generating outgoing requests for a resolver.
message RequestTemplate {
  // Use this attribute to set request headers to your REST service. It consists of a
  // map of strings to templated value strings. The string key determines the name of the
  // resulting header, the value provided will be the value.
  //
  // The least needed here is the ":method" and ":path" headers.
  // for example, if a header is an authorization token, taken from the graphql args,
  // we can use the following configuration:
  // headers:
  //   Authorization: "Bearer {$args.token}"
  map<string, string> headers = 1;

  // Use this attribute to set query parameters to your REST service. It consists of a
  // map of strings to templated value strings. The string key determines the name of the
  // query param, the provided value will be the value. This value is appended to any
  // value set to the :path header in `headers`.
  //
  // for example, if a query parameter is an id, taken from the graphql parent object,
  // we can use the following configuration:
  // queryParams:
  //   id: "{$parent.id}"
  map<string, string> query_params = 2;

  // Used to construct the outgoing body to the upstream from the
  // graphql value providers.
  // All string values can be templated strings.
  google.protobuf.Value body = 3;
}

// Deprecated: The GraphQL feature of Gloo Gateway will be removed in a future release.
message ResponseTemplate {
  /*
    Sets the "root" of the upstream response to be turned into a graphql type by the graphql server.
    For example, if the graphql type is:

    type Simple {
      name String
    }

    and the upstream response is `{"data": {"simple": {"name": "simple name"}}}`,
    the graphql server will not be able to marshal the upstream response into the Simple graphql type
    because it does not know where the relevant data is. If we set result_root to "data.simple", we can give the
    graphql server a hint of where to look in the upstream response for the relevant data that graphql type wants.
  */
  string result_root = 1;

  /*
    Field-specific mapping for a graphql field to a JSON path in the upstream response.
    For example, if the graphql type is:

    type Person {
      firstname String
      lastname String
      fullname String
    }

    and the upstream response is `{"firstname": "Joe", "details": {"lastname": "Smith"}}`,
    the graphql server will not be able to marshal the upstream response into the Person graphql type because of the
    nested `lastname` field. We can use a simple setter here:

    setters:
      lastname: '{$body.details.lastname}'
      fullname: '{$body.details.firstname} {$body.details.lastname}'

    and the graphql server will be able to extract data for a field given the path to the relevant data
    in the upstream JSON response. We do not need to have a setter for the `firstname` field because the
    JSON response has that field in a position the graphql server can understand automatically.

    So far only the $body keyword is supported, but in the future we may add support for others such as $headers.
  */
  map<string, string> setters = 2;
}

// Deprecated: The GraphQL feature of Gloo Gateway will be removed in a future release.
// Defines a configuration for generating outgoing requests for a resolver.
message GrpcRequestTemplate {
  // json representation of outgoing gRPC message to be sent to gRPC service
  google.protobuf.Value outgoing_message_json = 1;

  // request has shape matching service with name registered in registry
  // is the full_name(), e.g. main.Bookstore
  string service_name = 2;

  // make request to method with this name on the grpc service defined above
  // is just the name(), e.g. GetBook
  string method_name = 3;

  // in the future, we may want to make this a map<string, ValueProvider>
  // once we know better what the use cases are
  map<string, string> request_metadata = 4;
}

// Deprecated: The GraphQL feature of Gloo Gateway will be removed in a future release.
// control-plane API
message RESTResolver {
  core.solo.io.ResourceRef upstream_ref = 1;
  // configuration used to compose the outgoing request to a REST API
  RequestTemplate request = 2;
  // configuration used to modify the response from the REST API
  // before being handled by the graphql server.
  ResponseTemplate response = 3;
  string span_name = 4;

  // The timeout to use for this resolver. If unset, the upstream connection timeout
  // or a default of 1 second will be used.
  google.protobuf.Duration timeout = 5;
}

// Deprecated: The GraphQL feature of Gloo Gateway will be removed in a future release.
// Defines a configuration for serializing and deserializing requests for a gRPC resolver.
// Is a Schema Extension
message GrpcDescriptorRegistry {
  message ProtoRefs {
    // List of references to config maps that contain proto data for this resolver.
    // For each of the config maps referenced here, they must contain keys in their data map with valid base64 encoded
    // proto descriptor set binaries as the values.
    // Also they must be in a namespace watched by gloo edge.
    repeated core.solo.io.ResourceRef config_map_refs = 1;
  }
  oneof descriptor_set {
    option (validate.required) = true;

    // Supplies the filename of
    // the proto descriptor set for the gRPC
    // services.
    string proto_descriptor = 1;

    // Supplies the binary content of
    // the proto descriptor set for the gRPC
    // services.
    // Note: in yaml, this must be provided as a base64 standard encoded string; yaml cannot handle binary bytes
    bytes proto_descriptor_bin = 2;

    // Allows the user to put proto descriptor set binary content in configmaps;
    // The descriptor set binary content in these config maps must be base64 encoded
    // Generating the proto descriptor binary and base64 encoding it can be done using the following command
    // `protoc ./your-proto-here.proto --proto_path . --descriptor_set_out="/dev/stdout" --include_imports | base64`
    ProtoRefs proto_refs_list = 3;
  }
}

// control-plane API
message GrpcResolver {
  core.solo.io.ResourceRef upstream_ref = 1;
  // configuration used to compose the outgoing request to a REST API
  GrpcRequestTemplate request_transform = 2;
  // Unclear why 3 was skipped, but reserve it in case it was previously used and removed
  reserved 3;
  string span_name = 4;

  // The timeout to use for this resolver. If unset, the upstream connection timeout
  // or a default of 1 second will be used.
  google.protobuf.Duration timeout = 5;
}

// Deprecated: The GraphQL feature of Gloo Gateway will be removed in a future release.
message StitchedSchema {

  message SubschemaConfig {
    message TypeMergeConfig {
      // This specifies one or more key fields required from other services to perform this query.
      // Query planning will automatically resolve these fields from other subschemas in dependency order.
      // This is a graphql selection set specified as a string
      // e.g. '{ username }'
      string selection_set = 1;
      // specifies the root field from this subschema used to request the local type
      string query_name = 2;
      //       this provides the schema stitching engine the format to turn the initial object representation
      //       to query arguments
      //       so if the GetUser query was defined as
      //
      //      ```gql
      //      input UserSearch {
      //        username: String
      //      }
      //
      //      type Query {
      //        GetUser(user_search: UserSearch): User
      //      }
      //      ```
      //      we would want to set the user query argument with the correct username from an object.
      //      we can do that by setting the args as:
      //      ```yaml
      //      args:
      //        user_search.username: username
      //      ```
      //      where `user_search.username` is the "setter" path that we are setting the argument input value at and
      //      `username` is the "extraction" path that we are extracting from an object, such as `{"username": "wpatel"}`.

      map<string, string> args = 3;
    }
    // name of the GraphQLApi subschema
    string name = 1;
    // namespace of the GraphQLApi subschema
    string namespace = 2;
    /*
      Type merge configuration for this subschema. Let's say this subschema is a Users service schema
      and provides the User type (with a query to fetch a user given the username)

      ```gql
      type Query {
        GetUser(username: String): User
      }
      type User {
        username: String
        firstName: String
        lastName: String
      }
      ```

      and another subschema, e.g. Reviews schema, may have a partial User type:
      ```gql
      type Review {
        author: User
      }

      type User {
        username: String
      }
      ```
      We want to provide the relevant information from this Users service schema,
      so that another API that can give us a partial User type (with the username) will then
      be able to have access to the full user type. With the correct type merging config under the Users subschema, e.g.:

      ```yaml
      type_merge:
        User:
          selection_set: '{ username }'
          query_name: 'GetUser'
          args:
            username: username
      ```
      the stitched schema will now be able to provide the full user type to all types that require it. In this case,
      we can now get the first name of an author from the Review.author field even though the Reviews schema does not
      provide the full User type.
     */
    map<string,TypeMergeConfig> type_merge = 3;
  }

  // List of GraphQLApis that compose this stitched GraphQL schema.
  repeated SubschemaConfig subschemas = 1;
}

// Deprecated: The GraphQL feature of Gloo Gateway will be removed in a future release.
message MockResolver {
  message AsyncResponse {
    // The response from the resolver as a JSON.
    google.protobuf.Value response = 1;
    // The delay time before this response is sent back to the graphql server
    google.protobuf.Duration delay = 2;
  }
  oneof response {
    // The JSON response from the resolver that will be "responded" immediately.
    google.protobuf.Value sync_response = 1;

    // Used to create a asynchronous JSON response from the Mock resolver.
    AsyncResponse async_response = 2;

    // Responds as an error with the given message. This can be any string message.
    string error_response = 3;
  }
}

// Deprecated: The GraphQL feature of Gloo Gateway will be removed in a future release.
// Define a named resolver which can be then matched to a field using the `resolve` directive.
// if a field does not have resolver, the default resolver will be used.
// the default resolver takes the field with the same name from the parent, and uses that value
// to resolve the field.
// If a field with the same name does not exist in the parent, null will be used.
message Resolution {
  // The resolver to use.
  oneof resolver {
    // REST resolver used to translate and send graphql requests
    // to a REST upstream.
    RESTResolver rest_resolver = 1;
    // gRPC resolver used to translate and send graphql requests
    // to a gRPC upstream.
    GrpcResolver grpc_resolver = 2;
    // Resolver used to mock responses from an upstream.
    // This resolver does not make a call out to an upstream, but can mock responses
    // either synchronously or with a delay.
    // Additionally, can be used to mock errors from an upstream.
    MockResolver mock_resolver = 4;
  }

  // The stats prefix which will be used for this resolver.
  // If empty, will generate a stats prefix ${RESOLVER_NAME}
  google.protobuf.StringValue stat_prefix = 3;
}

// Deprecated, Enterprise-Only: THIS FEATURE IS DEPRECATED AND WILL BE REMOVED IN A FUTURE RELEASE. APIs are versioned as alpha and subject to change.
// User-facing CR config for resolving client requests to graphql schemas.
// Routes that have this config will execute graphql queries, and will not make it to the router filter. i.e. this
// filter will terminate the request for these routes.
// Note: while users can provide this configuration manually, the eventual UX will
// be to generate the Executable Schema CRs from other sources and just have users
// configure the routes to point to these schema CRs.
message GraphQLApi {

  option (core.solo.io.resource).short_name = "gql";
  option (core.solo.io.resource).plural_name = "graphql_apis";

  // NamespacedStatuses indicates the validation status of this resource.
  // NamespacedStatuses is read-only by clients, and set by gloo during validation
  core.solo.io.NamespacedStatuses namespaced_statuses = 1 [(extproto.skip_hashing) = true];

  // Metadata contains the object metadata for this resource
  core.solo.io.Metadata metadata = 2;

  oneof schema {
    // An Executable Schema represents a single upstream, which could be a locally resolved
    // schema, or a remotely resolved schema.
    ExecutableSchema executable_schema = 6;
    // A stitched schema represents the product of stitching multiple graphql subschemas together.
    StitchedSchema stitched_schema = 7;
  }

  // The stats prefix which will be used for this route config.
  // If empty, will generate a stats prefix ${GRAPHQLAPI_REF}
  google.protobuf.StringValue stat_prefix = 3;

  // Configuration settings for persisted query cache
  PersistedQueryCacheConfig persisted_query_cache_config = 4;

  // Safelist: only allow queries to be executed that match these sha256 hashes.
  // The hash can be computed from the query string or provided (i.e. persisted queries).
  repeated string allowed_query_hashes = 5;

  message GraphQLApiOptions {
    // If true, includes information about request and response in the gateway-proxy debug and trace logs.
    // This is useful when debugging but is not recommended for security and performance reasons in
    // production scenarios.
    // Defaults to false.
    bool log_sensitive_info = 1;
  }

  // Options that apply to this GraphQLApi.
  GraphQLApiOptions options = 8;
}

// Deprecated: The GraphQL feature of Gloo Gateway will be removed in a future release.
// This message specifies Persisted Query Cache configuration.
message PersistedQueryCacheConfig {
  // The unit is number of queries to store, default to 1000.
  uint32 cache_size = 1;
}

// Deprecated: The GraphQL feature of Gloo Gateway will be removed in a future release.
message ExecutableSchema {
  // Schema to use in string format.

  /* The following directives are supported:
   - @resolve(name: string)
   - @cacheControl(maxAge: uint32, inheritMaxAge: bool, scope: unset/public/private)

   Define named resolvers on the `Executor.Local.resolutions` message, and reference them here using @resolve:
   ```gql
   type Query {
     author: String @resolve(name: "authorResolver")
   }

   Further, fields/types can be annotated with the @cacheControl directive, e.g.
   ```gql
   type Query @cacheControl(maxAge: 60) {
     author: String @resolve(name: "authorResolver") @cacheControl(maxAge: 90, scope: private)
   }
   ```
   Any type-level cache control defaults are overridden by field settings, if provided.
   The most restrictive cache control setting (smallest maxAge and scope) across all fields in
   an entire query will be returned to the client in the `Cache-Control` header with appropriate
   `max-age` and  scope (unset, `public`, or `private`) directives.
  */
  string schema_definition = 1;

  // how to execute the schema
  Executor executor = 2;

  // Schema extensions
  GrpcDescriptorRegistry grpc_descriptor_registry = 3;
}

// Deprecated: The GraphQL feature of Gloo Gateway will be removed in a future release.
message Executor {
  // Execute schema using resolvers.
  message Local {
    message LocalExecutorOptions {
      // Max GraphQL operation (query/mutation/subscription) depth. This sets a limitation on the max nesting on a query that runs against this schema.
      // any GraphQL operation that runs past the `max_depth` will add an error message to the response and will return as `null`.
      // As as simple example, if the schema is
      // ```gql
      // type Query {
      //   employee: Employee
      // }
      //
      // type Employee {
      //   manager: Employee
      //   name: String
      // }
      // ```
      // and we set a `max_depth` of `3` and we run a query
      // ```gql
      // query {             # query depth : 0
      //   employee {        # query depth : 1
      //     manager {       # query depth : 2
      //       name          # query depth : 3
      //       manager {     # query depth : 3
      //         name        # query depth : 4
      //       }
      //     }
      //   }
      // }
      // ```
      // the graphql server will respond with a response:
      // ```json
      // { "data" : {
      //     "employee" : {
      //       "manager" : {
      //         "name" : "Manager 1",
      //         "manager"  : {
      //           "name" : null
      //   }}}},
      //   "errors": [
      //      {"message": "field 'name' exceeds the max operation depth of 3 for this schema"}
      //    ]
      // }
      // If not configured, or the value is 0, the query depth will be unbounded.
      google.protobuf.UInt32Value max_depth = 1;
    }

    /* Mapping of resolver name to resolver definition.
     The names are used to reference the resolver in the graphql schema.
     For example, a resolver with name "authorResolver" can be defined as
     ```yaml
     authorResolver:
       restResolver:
         upstreamRef: ...
         request:
           ...
         response:
           ...
      ```
      and referenced in the graphql schema as
      ```gql
      type Query {
        author: String @resolve(name: "authorResolver")
      }
      ```
    */
    map<string, Resolution> resolutions = 1;
    // Do we enable introspection for the schema? general recommendation is to
    // disable this for production and hence it defaults to false.
    bool enable_introspection = 2;

    // Options that apply to this local executable schema
    LocalExecutorOptions options = 3;
  }
  message Remote {
    core.solo.io.ResourceRef upstream_ref = 1;
    // map of header name to extraction type:
    // e.g.
    // ':path':   '/hard/coded/path'
    // ':method': '{$headers.method}'
    //  ':key':    '{$metadata.io.solo.transformation:endpoint_url}'
    map<string, string> headers = 2;

    // map of query parameter name to extraction type:
    // e.g.
    //
    // 'query': '{$metadata.$KEY_NAME:$KEY_VALUE}'
    map<string, string> query_params = 3;

    string span_name = 4;
  }
  oneof executor {
    Local local = 1;
    Remote remote = 2;
  }
}
