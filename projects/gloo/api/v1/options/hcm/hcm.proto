syntax = "proto3";
package hcm.options.gloo.solo.io;

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/hcm";


import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/any.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/tracing/tracing.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/protocol_upgrade/protocol_upgrade.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/protocol/protocol.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/headers/headers.proto";


import "extproto/ext.proto";
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;
option (extproto.equal_all) = true;

// Contains various settings for Envoy's http connection manager.
// See here for more information: https://www.envoyproxy.io/docs/envoy/v1.9.0/configuration/http_conn_man/http_conn_man
// Now contains v3 fields as well
// v3 documents https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#extensions-filters-network-http-connection-manager-v3-httpconnectionmanager
message HttpConnectionManagerSettings {
    enum ForwardClientCertDetails {
        SANITIZE = 0;
        FORWARD_ONLY = 1;
        APPEND_FORWARD = 2;
        SANITIZE_SET = 3;
        ALWAYS_FORWARD_ONLY = 4;
    }

    enum ServerHeaderTransformation {
        // (DEFAULT) Overwrite any Server header with the contents of server_name.
        OVERWRITE = 0;
        // If no Server header is present, append Server server_name If a Server header is present, pass it through.
        APPEND_IF_ABSENT = 1;
        // Pass through the value of the server header, and do not append a header if none is present.
        PASS_THROUGH = 2;
    }

    message SetCurrentClientCertDetails {
        google.protobuf.BoolValue subject = 1;
        google.protobuf.BoolValue cert = 2;
        google.protobuf.BoolValue chain = 3;
        google.protobuf.BoolValue dns = 4;
        google.protobuf.BoolValue uri = 5;
    }

    google.protobuf.BoolValue skip_xff_append = 1;
    google.protobuf.StringValue via = 2;
    google.protobuf.UInt32Value xff_num_trusted_hops = 3;
    google.protobuf.BoolValue use_remote_address = 4;
    google.protobuf.BoolValue generate_request_id = 5;
    google.protobuf.BoolValue proxy_100_continue = 6;
    google.protobuf.Duration stream_idle_timeout = 7;
    google.protobuf.Duration idle_timeout = 8;
    google.protobuf.UInt32Value max_request_headers_kb = 9;
    google.protobuf.Duration request_timeout = 10;
    // The amount of time that Envoy will wait for the request headers to be received. The timer is
    // activated when the first byte of the headers is received, and is disarmed when the last byte of
    // the headers has been received. If not specified or set to 0, this timeout is disabled.
    google.protobuf.Duration request_headers_timeout = 11;
    google.protobuf.Duration drain_timeout = 12;
    google.protobuf.Duration delayed_close_timeout = 13;
    google.protobuf.StringValue server_name = 14;
    google.protobuf.BoolValue strip_any_host_port = 36;


    // For explanation of these settings see: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#envoy-api-msg-core-http1protocoloptions
    google.protobuf.BoolValue accept_http_10 = 15;
    google.protobuf.StringValue default_host_for_http_10 = 16;


    // For an explanation of these settings, see: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-http1protocoloptions
    google.protobuf.BoolValue allow_chunked_length = 34;
    google.protobuf.BoolValue enable_trailers = 35;

    oneof header_format {
        // Formats the REQUEST HEADER by proper casing words: the first character and any character following
        // a special character will be capitalized if it's an alpha character. For example,
        // "content-type" becomes "Content-Type", and "foo$b#$are" becomes "Foo$B#$Are".
        // Note that while this results in most headers following conventional casing, certain headers
        // are not covered. For example, the "TE" header will be formatted as "Te".
        google.protobuf.BoolValue proper_case_header_key_format = 22;

        // Generates configuration for a stateful formatter extension that allows using received headers to
        // affect the output of encoding headers. Specifically: preserving REQUEST HEADER case during proxying.
        google.protobuf.BoolValue preserve_case_header_key_format = 31;
    }
    

    tracing.options.gloo.solo.io.ListenerTracingSettings tracing = 17;

    ForwardClientCertDetails forward_client_cert_details = 18;

    SetCurrentClientCertDetails set_current_client_cert_details = 19;

    google.protobuf.BoolValue preserve_external_request_id = 20;

    // HttpConnectionManager configuration for protocol upgrade requests. 
    // Note: WebSocket upgrades are enabled by default on the HTTP Connection Manager and must be explicitly disabled.
    repeated protocol_upgrade.options.gloo.solo.io.ProtocolUpgradeConfig upgrades = 21;

    // For an explanation of these settings see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-httpprotocoloptions
    google.protobuf.Duration max_connection_duration = 23;
     // For an explanation of these settings see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-httpprotocoloptions
    google.protobuf.Duration max_stream_duration = 24;
     // For an explanation of these settings see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-httpprotocoloptions
    google.protobuf.UInt32Value max_headers_count = 27;
    
    
    // Action to take when Envoy receives client request with header names containing underscore characters. Underscore character 
    // is allowed in header names by the RFC-7230 and this behavior is implemented as a security measure due to systems that treat 
    // ‘_’ and ‘-‘ as interchangeable. Envoy by default allows client request headers with underscore characters.
    enum HeadersWithUnderscoreAction {
        // ⁣Allow headers with underscores. This is the default behavior.
        ALLOW = 0;

        // ⁣Reject client request. HTTP/1 requests are rejected with the 400 status. HTTP/2 requests end with the stream reset.
        // The “httpN.requests_rejected_with_underscores_in_headers” counter is incremented for each rejected request.
        REJECT_CLIENT_REQUEST = 1;

        // ⁣Drop the client header with name containing underscores. The header is dropped before the filter chain is invoked
        // and as such filters will not see dropped headers. The “httpN.dropped_headers_with_underscores” is incremented for each dropped header.
        DROP_HEADER = 2;
    }
    // For an explanation of these settings see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-httpprotocoloptions
    HeadersWithUnderscoreAction headers_with_underscores_action = 32;
     // For an explanation of these settings see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/protocol.proto#config-core-v3-httpprotocoloptions
    google.protobuf.UInt32Value max_requests_per_connection = 33;

    // For an explanation of the settings see: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto.html#envoy-v3-api-enum-extensions-filters-network-http-connection-manager-v3-httpconnectionmanager-serverheadertransformation
    ServerHeaderTransformation server_header_transformation = 25;

    // Determines the action for request that contain %2F, %2f, %5C or %5c sequences in the URI path.
    // This operation occurs before URL normalization and the merge slashes transformations if they were enabled.
    enum PathWithEscapedSlashesAction {
        // Default behavior specific to implementation (i.e. Envoy) of this configuration option.
        // Envoy, by default, takes the KEEP_UNCHANGED action.
        // NOTE: the implementation may change the default behavior at-will.
        IMPLEMENTATION_SPECIFIC_DEFAULT = 0;

        // Keep escaped slashes.
        KEEP_UNCHANGED = 1;

        // Reject client request with the 400 status. gRPC requests will be rejected with the INTERNAL (13) error code.
        // The "httpN.downstream_rq_failed_path_normalization" counter is incremented for each rejected request.
        REJECT_REQUEST = 2;

        // Unescape %2F and %5C sequences and redirect request to the new path if these sequences were present.
        // Redirect occurs after path normalization and merge slashes transformations if they were configured.
        // NOTE: gRPC requests will be rejected with the INTERNAL (13) error code.
        // This option minimizes possibility of path confusion exploits by forcing request with unescaped slashes to
        // traverse all parties: downstream client, intermediate proxies, Envoy and upstream server.
        // The "httpN.downstream_rq_redirected_with_normalized_path" counter is incremented for each
        // redirected request.
        UNESCAPE_AND_REDIRECT = 3;

        // Unescape %2F and %5C sequences.
        // Note: this option should not be enabled if intermediaries perform path based access control as
        // it may lead to path confusion vulnerabilities.
        UNESCAPE_AND_FORWARD = 4;
    }

    // Action to take when request URL path contains escaped slash sequences (%2F, %2f, %5C and %5c).
    // The default value can be overridden by the :ref:`http_connection_manager.path_with_escaped_slashes_action<config_http_conn_man_runtime_path_with_escaped_slashes_action>`
    // runtime variable.
    // The :ref:`http_connection_manager.path_with_escaped_slashes_action_sampling<config_http_conn_man_runtime_path_with_escaped_slashes_action_enabled>` runtime
    // variable can be used to apply the action to a portion of all requests.
    PathWithEscapedSlashesAction path_with_escaped_slashes_action = 26;

    enum CodecType {
        // For every new connection, the connection manager will determine which
        // codec to use. This mode supports both ALPN for TLS listeners as well as
        // protocol inference for plaintext listeners. If ALPN data is available, it
        // is preferred, otherwise protocol inference is used. In almost all cases,
        // this is the right option to choose for this setting.
        AUTO = 0;

        // The connection manager will assume that the client is speaking HTTP/1.1.
        HTTP1 = 1;

        // The connection manager will assume that the client is speaking HTTP/2
        // (Envoy does not require HTTP/2 to take place over TLS or to use ALPN.
        // Prior knowledge is allowed).
        HTTP2 = 2;
    }
    // Supplies the type of codec that the connection manager should use.
    // See here for more information: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto#extensions-filters-network-http-connection-manager-v3-httpconnectionmanager
    CodecType codec_type = 28;

    // Determines if adjacent slashes in the path are merged into one before any processing of requests by HTTP filters or routing.
    // See here for more information: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
    google.protobuf.BoolValue merge_slashes = 29;

    // Should paths be normalized according to RFC 3986 before any processing of requests by HTTP filters or routing? Defaults to True.
    // See here for more information: https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto
    google.protobuf.BoolValue normalize_path = 30;

    // Contains setup for Envoy's UuidRequestIdConfig
    message UuidRequestIdConfigSettings {
        // Whether the implementation alters the UUID to contain the trace sampling decision as per the
        // `UuidRequestIdConfig` message documentation. This defaults to true. If disabled no
        // modification to the UUID will be performed. It is important to note that if disabled,
        // stable sampling of traces, access logs, etc. will no longer work and only random sampling will
        // be possible.
        google.protobuf.BoolValue pack_trace_reason = 1;

        // Set whether to use :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` for sampling or not.
        // This defaults to true. See the :ref:`context propagation <arch_overview_tracing_context_propagation>`
        // overview for more information.
        google.protobuf.BoolValue use_request_id_for_trace_sampling = 2;
    }

    UuidRequestIdConfigSettings uuid_request_id_config = 37;

    // Additional HTTP/2 settings that are passed directly to the HTTP/2 codec.
    protocol.options.gloo.solo.io.Http2ProtocolOptions http2_protocol_options = 39;

    // Subnet mask for CIDR ranges
    message CidrRange {
        // IPv4 or IPv6 address
        string address_prefix = 1;

        // Length of prefix in bits
        google.protobuf.UInt32Value prefix_len = 2;
    }

    // Manages Envoy's internal address configuration
    message InternalAddressConfig {
        // Whether unix socket addresses should be considered internal
        google.protobuf.BoolValue unix_sockets = 1;

        // List of CIDR ranges that are treated as internal
        repeated CidrRange cidr_ranges = 2;
    }

    // Configuration of internal addresses
    InternalAddressConfig internal_address_config = 38;
    // If true, configure Envoy to set the x-fowarded-port header to allow services to find Envoy's listener port.
    google.protobuf.BoolValue append_x_forwarded_port = 40;

    // Configuration for early header manipulation
    headers.options.gloo.solo.io.EarlyHeaderManipulation early_header_manipulation = 41;
}
