// Mostly taken from https://github.com/envoyproxy/envoy/blob/317efa53c6add02fa9533fc8f93f10f590077dca/api/envoy/config/accesslog/v3/accesslog.proto
// because we are passing through the filter settings and therefore using the same message definitions
syntax = "proto3";
package als.options.gloo.solo.io;

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/als";


import "extproto/ext.proto";option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/solo-kit/api/v1/ref.proto";
import "validate/validate.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/core/v3/base.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/type/v3/percent.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/route/v3/route_components.proto";

import "google/protobuf/struct.proto";

// Contains various settings for Envoy's access logging service.
// See here for more information: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/accesslog/v3/accesslog.proto
message AccessLoggingService {
    repeated AccessLog access_log = 1;
}

message AccessLog {
    // type of Access Logging service to implement
    oneof OutputDestination {
        // Output access logs to local file
        FileSink file_sink = 2;
        // Send access logs to gRPC service
        GrpcService grpc_service = 3;
    }

    AccessLogFilter filter = 4;
}

message FileSink {
    // the file path to which the file access logging service will sink
    string path = 1;
    // the format which the logs should be outputted by
    oneof output_format {
        // the format string by which envoy will format the log lines
        // https://www.envoyproxy.io/docs/envoy/v1.14.1/configuration/observability/access_log#config-access-log-format-strings
        string string_format = 2;
        // the format object by which to envoy will emit the logs in a structured way.
        // https://www.envoyproxy.io/docs/envoy/v1.14.1/configuration/observability/access_log#format-dictionaries
        google.protobuf.Struct json_format = 3;
    }
}

message GrpcService {
    // name of log stream
    string log_name = 1;
    // The static cluster defined in bootstrap config to route to
    oneof service_ref {
        string static_cluster_name = 2;
    }

    repeated string additional_request_headers_to_log = 4;

    repeated string additional_response_headers_to_log = 5;

    repeated string additional_response_trailers_to_log = 6;

    // Additional filter state objects to log in filter_state_objects. Logger will call FilterState::Object::serializeAsProto to serialize the filter state object.
    // See https://www.envoyproxy.io/docs/envoy/latest/api-v3/extensions/access_loggers/grpc/v3/als.proto#extensions-access-loggers-grpc-v3-commongrpcaccesslogconfig
    repeated string filter_state_objects_to_log = 7;
}

message AccessLogFilter {
    oneof filter_specifier {
      option (validate.required) = true;
        // Status code filter.
        StatusCodeFilter status_code_filter = 1;

        // Duration filter.
        DurationFilter duration_filter = 2;

        // Not health check filter.
        NotHealthCheckFilter not_health_check_filter = 3;

        // Traceable filter.
        TraceableFilter traceable_filter = 4;

        // Runtime filter.
        RuntimeFilter runtime_filter = 5;

        // And filter.
        AndFilter and_filter = 6;

        // Or filter.
        OrFilter or_filter = 7;

        // Header filter.
        HeaderFilter header_filter = 8;

        // Response flag filter.
        ResponseFlagFilter response_flag_filter = 9;

        // gRPC status filter.
        GrpcStatusFilter grpc_status_filter = 10;
    }
}

// Filter on an integer comparison.
message ComparisonFilter {
    enum Op {
      // =
      EQ = 0;
  
      // >=
      GE = 1;
  
      // <=
      LE = 2;
    }
  
    // Comparison operator.
    Op op = 1 [(validate.rules).enum = {defined_only: true}];
  
    // Value to compare against. Note that the `defaultValue` field must be defined unless 
    // the `runtimeKey` matches a key that is defined in Envoy's [runtime configuration layer](https://www.envoyproxy.io/docs/envoy/v1.30.0/configuration/operations/runtime#config-runtime-bootstrap). 
    // Gloo Gateway does not include a key by default. To specify a key-value pair, use the 
    // [gatewayProxies.NAME.customStaticLayer]({{< versioned_link_path fromRoot="/reference/helm_chart_values/" >}})
    // Helm value or set the key at runtime by using the gateway proxy admin interface. 
    .solo.io.envoy.config.core.v3.RuntimeUInt32 value = 2 [(validate.rules).message = {required: true}];
}

// Filters on HTTP response/status code.
message StatusCodeFilter {
    // Comparison.
    ComparisonFilter comparison = 1 [(validate.rules).message = {required: true}];
  }

// Filters on total request duration in milliseconds.
message DurationFilter {
    // Comparison.
    ComparisonFilter comparison = 1 [(validate.rules).message = {required: true}];
}

// Filters for requests that are not health check requests. A health check
// request is marked by the health check filter.
message NotHealthCheckFilter {
}
  
// Filters for requests that are traceable. See the tracing overview for more
// information on how a request becomes traceable.
message TraceableFilter {
}

// Filters for random sampling of requests.
message RuntimeFilter {  
    // Runtime key to get an optional overridden numerator for use in the
    // `percent_sampled` field. If found in runtime, this value will replace the
    // default numerator.
    string runtime_key = 1 [(validate.rules).string = {min_len: 1}];
  
    // The default sampling percentage. If not specified, defaults to 0% with
    // denominator of 100.
    .solo.io.envoy.type.v3.FractionalPercent percent_sampled = 2;

    // By default, sampling pivots on the header
    // :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` being
    // present. If :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`
    // is present, the filter will consistently sample across multiple hosts based
    // on the runtime key value and the value extracted from
    // :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`. If it is
    // missing, or `use_independent_randomness` is set to true, the filter will
    // randomly sample based on the runtime key value alone.
    // `use_independent_randomness` can be used for logging kill switches within
    // complex nested :ref:`AndFilter
    // <envoy_v3_api_msg_config.accesslog.v3.AndFilter>` and :ref:`OrFilter
    // <envoy_v3_api_msg_config.accesslog.v3.OrFilter>` blocks that are easier to
    // reason about from a probability perspective (i.e., setting to true will
    // cause the filter to behave like an independent random variable when
    // composed within logical operator filters).
    bool use_independent_randomness = 3;
  }

// Performs a logical “and” operation on the result of each filter in filters.
// Filters are evaluated sequentially and if one of them returns false, the
// filter returns false immediately.
message AndFilter {
    repeated AccessLogFilter filters = 1 [(validate.rules).repeated = {min_items: 2}];
}
  
// Performs a logical “or” operation on the result of each individual filter.
// Filters are evaluated sequentially and if one of them returns true, the
// filter returns true immediately.
message OrFilter {
    repeated AccessLogFilter filters = 2 [(validate.rules).repeated = {min_items: 2}];
}

// Filters requests based on the presence or value of a request header.
message HeaderFilter {
  
    // Only requests with a header which matches the specified HeaderMatcher will
    // pass the filter check.
    .solo.io.envoy.config.route.v3.HeaderMatcher header = 1 [(validate.rules).message = {required: true}];
}
  
// Filters requests that received responses with an Envoy response flag set.
// A list of the response flags can be found
// in the access log formatter
// :ref:`documentation<config_access_log_format_response_flags>`.
message ResponseFlagFilter {

  // Only responses with the any of the flags listed in this field will be
  // logged. This field is optional. If it is not specified, then any response
  // flag will pass the filter check.
  repeated string flags = 1 [(validate.rules).repeated = {
    items {
      string {
        in: "LH"
        in: "UH"
        in: "UT"
        in: "LR"
        in: "UR"
        in: "UF"
        in: "UC"
        in: "UO"
        in: "NR"
        in: "DI"
        in: "FI"
        in: "RL"
        in: "UAEX"
        in: "RLSE"
        in: "DC"
        in: "URX"
        in: "SI"
        in: "IH"
        in: "DPE"
        in: "UMSDR"
        in: "RFCF"
        in: "NFCF"
        in: "DT"
        in: "UPE"
        in: "NC"
        in: "OM"
      }
    }
  }];
}

// Filters gRPC requests based on their response status. If a gRPC status is not
// provided, the filter will infer the status from the HTTP status code.
message GrpcStatusFilter {
  enum Status {
    OK = 0;
    CANCELED = 1;
    UNKNOWN = 2;
    INVALID_ARGUMENT = 3;
    DEADLINE_EXCEEDED = 4;
    NOT_FOUND = 5;
    ALREADY_EXISTS = 6;
    PERMISSION_DENIED = 7;
    RESOURCE_EXHAUSTED = 8;
    FAILED_PRECONDITION = 9;
    ABORTED = 10;
    OUT_OF_RANGE = 11;
    UNIMPLEMENTED = 12;
    INTERNAL = 13;
    UNAVAILABLE = 14;
    DATA_LOSS = 15;
    UNAUTHENTICATED = 16;
  }

  // Logs only responses that have any one of the gRPC statuses in this field.
  repeated Status statuses = 1 [(validate.rules).repeated = {items {enum {defined_only: true}}}];

  // If included and set to true, the filter will instead block all responses
  // with a gRPC status or inferred gRPC status enumerated in statuses, and
  // allow all other responses.
  bool exclude = 2;
}

