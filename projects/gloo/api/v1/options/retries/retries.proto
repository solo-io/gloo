syntax = "proto3";

package retries.options.gloo.solo.io;

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/retries";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
// Validate is added to mimic envoy's setup and for when we finally implement validation.
// For now we reiterate this in code as we do not check the validation rules. 
import "validate/validate.proto";
import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;


// This specifies the retry policy interval for backoffs. Note that if the base interval provided is larger than the maximum interval OR if any of the durations passed are <= 0 MS, there will be an error.
message RetryBackOff {

    // Specifies the base interval for a retry
    google.protobuf.Duration base_interval = 1 [(validate.rules).duration = {
        required: true
        gte {nanos: 1000000}
      }];

    // Specifies the max interval for a retry
    google.protobuf.Duration max_interval = 2 [(validate.rules).duration = {gt {}}];
}

message ResetHeader {
    // The name of the header to set
    string name = 1;

    enum HeaderFormat {
        SECONDS = 0;
        UNIX_TIMESTAMP = 1;
    }

    // The format of the header to set
    HeaderFormat format = 2;
}

// This specifies the retry policy interval for rate limited requests.
// Inspired by: https://github.com/envoyproxy/envoy/blob/4a134ce926cf0b882a4c416734b579f9722ed1eb/api/envoy/config/route/v3/route_components.proto#L1522
// We chose a more simple approach to avoid the complexity of the Envoy implementation.
message RateLimitedRetryBackOff {

    // The ordered list of reset headers to consider for the rate limited retry backoff.
    repeated ResetHeader reset_headers = 1;

    // Specifies the max interval for a retry
    google.protobuf.Duration max_interval = 2 [(validate.rules).duration = {gt {}}];
}

// Retry Policy applied at the Route and/or Virtual Hosts levels.
message RetryPolicy {
    // Specifies the conditions under which retry takes place. These are the same
    // conditions [documented for Envoy](https://www.envoyproxy.io/docs/envoy/v1.14.1/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-retry-on)
    string retry_on = 1;

    // Specifies the allowed number of retries. This parameter is optional and
    // defaults to 1. These are the same conditions [documented for Envoy](https://www.envoyproxy.io/docs/envoy/v1.14.1/configuration/http/http_filters/router_filter#config-http-filters-router-x-envoy-retry-on)
    uint32 num_retries = 2;

    // Specifies a non-zero upstream timeout per retry attempt. This parameter is optional.
    google.protobuf.Duration per_try_timeout = 3;

    // Specifies the retry policy interval
    RetryBackOff retry_back_off = 4;

    message PreviousPriorities {
        // Specify the update frequency for the previous priorities. For more information about previous priorities, see the [Envoy docs](https://www.envoyproxy.io/docs/envoy/v1.30.1/api-v3/extensions/retry/priority/previous_priorities/v3/previous_priorities_config.proto#envoy-v3-api-file-envoy-extensions-retry-priority-previous-priorities-v3-previous-priorities-config-proto).
        // This option only works in combination with an Upstream failover policy that enables priorities. 
        google.protobuf.UInt32Value update_frequency = 1;
    }

    oneof priority_predicate {
        // Specify the previous priorities.
        // For more information about previous priorities, see the [Envoy docs](https://www.envoyproxy.io/docs/envoy/v1.30.1/api-v3/extensions/retry/priority/previous_priorities/v3/previous_priorities_config.proto#envoy-v3-api-file-envoy-extensions-retry-priority-previous-priorities-v3-previous-priorities-config-proto).
        PreviousPriorities previous_priorities = 5;
    }


    // Optional: HTTP status codes that should trigger a retry in addition to those specified by retry_on.
    // This can be useful if you want to retry on a status code that is not in the retry_on list.
    // Specifically those in the 4xx range.
    repeated uint32 retriable_status_codes = 6;


    // Optional: Specifies the retry backoff for rate limited requests.
    RateLimitedRetryBackOff rate_limited_retry_back_off = 7;


}