// mostly copied from https://github.com/envoyproxy/envoy/blob/374dca7905fc048be74169a7655d0462606555ad/api/envoy/extensions/filters/http/grpc_json_transcoder/v3/transcoder.proto
syntax = "proto3";

package grpc_json.options.gloo.solo.io;

import "github.com/solo-io/solo-kit/api/v1/ref.proto";

option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/grpc_json";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "validate/validate.proto";

// [#protodoc-title: gRPC-JSON transcoder]
// gRPC-JSON transcoder configuration overview.
// [#extension: envoy.filters.http.grpc_json_transcoder]

// [#next-free-field: 10]
message GrpcJsonTranscoder {

    message PrintOptions {

        // Whether to add spaces, line breaks and indentation to make the JSON
        // output easy to read. Defaults to false.
        bool add_whitespace = 1;

        // Whether to always print primitive fields. By default primitive
        // fields with default values will be omitted in JSON output. For
        // example, an int32 field set to 0 will be omitted. Setting this flag to
        // true will override the default behavior and print primitive fields
        // regardless of their values. Defaults to false.
        bool always_print_primitive_fields = 2;

        // Whether to always print enums as ints. By default they are rendered
        // as strings. Defaults to false.
        bool always_print_enums_as_ints = 3;

        // Whether to preserve proto field names. By default protobuf will
        // generate JSON field names using the `json_name` option, or lower camel case,
        // in that order. Setting this flag will preserve the original field names. Defaults to false.
        bool preserve_proto_field_names = 4;
    }

    // Allows the user to store the binary content of a [proto descriptor set](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_json_transcoder_filter#config-grpc-json-generate-proto-descriptor-set) in a ConfigMap.
    message DescriptorConfigMap {

        // A reference to a ConfigMap containing the base64-encoded binary content of a proto descriptor set.
        // The ConfigMap must be in a namespace watched by Gloo Edge.
        core.solo.io.ResourceRef config_map_ref = 1;
        
        // The ConfigMap data key whose value contains the proto descriptor set.
        // If the ConfigMap contains multiple key-value pairs, this field is required.
        // If the ConfigMap contains exactly one key-value pair, this field is optional.
        string key = 2;
    }

    oneof descriptor_set {
        option (validate.required) = true;

        // Supplies the filename of the [proto descriptor set](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_json_transcoder_filter#config-grpc-json-generate-proto-descriptor-set)
        // for the gRPC services.
        string proto_descriptor = 1;

        // Supplies the binary content of the [proto descriptor set](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_json_transcoder_filter#config-grpc-json-generate-proto-descriptor-set)
        // for the gRPC services.
        // Note: in yaml, this must be provided as a base64 standard encoded string; yaml can't handle binary bytes.
        bytes proto_descriptor_bin = 4;

        // A reference to a ConfigMap containing the base64-encoded binary content of the [proto descriptor set](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_json_transcoder_filter#config-grpc-json-generate-proto-descriptor-set)
        // for the gRPC services.
        DescriptorConfigMap proto_descriptor_config_map = 10;
    }


    // A list of strings that
    // supplies the fully qualified service names (i.e. "package_name.service_name") that
    // the transcoder will translate. If the service name doesn't exist in `proto_descriptor`,
    // Envoy will fail at startup. The `proto_descriptor` may contain more services than
    // the service names specified here, but they won't be translated.
    repeated string services = 2 [(validate.rules).repeated = {min_items: 1}];

    // Control options for response JSON. These options are passed directly to
    // [JsonPrintOptions](https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.util.json_util#JsonPrintOptions).
    PrintOptions print_options = 3;

    // Whether to keep the incoming request route after the outgoing headers have been transformed to
    // the match the upstream gRPC service.
    // Note: When set to false, assumptions about the way that route matching is handled may be broken at the gateway/cluster level.
    // In short, Envoy will not match in the incoming request path when this is false. See <https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_json_transcoder_filter#route-configs-for-transcoded-requests> for more details.
    // Note: This means that routes for gRPC services that are not transcoded cannot be used in combination with *match_incoming_request_route*.
    
    // Set this value to true to keep the incoming request route after the outgoing headers are transformed to match the upstream gRPC service.
    // Note that you cannot set this value to true with routes for gRPC services that are not transcoded.
    // When set to false, Envoy does not match against the incoming request path.
    // For more information, see the Envoy docs <https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_json_transcoder_filter#route-configs-for-transcoded-requests>.
    bool match_incoming_request_route = 5;

    // A list of query parameters to be ignored for transcoding method mapping.
    // By default, the transcoder filter will not transcode a request if there are any
    // unknown/invalid query parameters.
    //
    // Example :
    //
    // .. code-block:: proto
    //
    //     service Bookstore {
    //       rpc GetShelf(GetShelfRequest) returns (Shelf) {
    //         option (google.api.http) = {
    //           get: "/shelves/{shelf}"
    //         };
    //       }
    //     }
    //
    //     message GetShelfRequest {
    //       int64 shelf = 1;
    //     }
    //
    //     message Shelf {}
    //
    // The request `/shelves/100?foo=bar` will not be mapped to `GetShelf` because variable
    // binding for `foo` is not defined. Adding `foo` to `ignored_query_parameters` will allow
    // the same request to be mapped to `GetShelf`.
    repeated string ignored_query_parameters = 6;

    // Whether to route methods without the `google.api.http` option.
    //
    // Example :
    //
    // .. code-block:: proto
    //
    //     package bookstore;
    //
    //     service Bookstore {
    //       rpc GetShelf(GetShelfRequest) returns (Shelf) {}
    //     }
    //
    //     message GetShelfRequest {
    //       int64 shelf = 1;
    //     }
    //
    //     message Shelf {}
    //
    // The client could `post` a json body `{"shelf": 1234}` with the path of
    // `/bookstore.Bookstore/GetShelfRequest` to call `GetShelfRequest`.
    bool auto_mapping = 7;

    // Whether to ignore query parameters that cannot be mapped to a corresponding
    // protobuf field. Use this if you cannot control the query parameters and do
    // not know them beforehand. Otherwise use `ignored_query_parameters`.
    // Defaults to false.
    bool ignore_unknown_query_parameters = 8;

    // Whether to convert gRPC status headers to JSON.
    // When trailer indicates a gRPC error and there was no HTTP body, take `google.rpc.Status`
    // from the `grpc-status-details-bin` header and use it as JSON body.
    // If there was no such header, make `google.rpc.Status` out of the `grpc-status` and
    // `grpc-message` headers.
    // The error details types must be present in the `proto_descriptor`.
    //
    // For example, if an upstream server replies with headers:
    //
    // .. code-block:: none
    //
    //     grpc-status: 5
    //     grpc-status-details-bin:
    //         CAUaMwoqdHlwZS5nb29nbGVhcGlzLmNvbS9nb29nbGUucnBjLlJlcXVlc3RJbmZvEgUKA3ItMQ
    //
    // The `grpc-status-details-bin` header contains a base64-encoded protobuf message
    // `google.rpc.Status`. It will be transcoded into:
    //
    // .. code-block:: none
    //
    //     HTTP/1.1 404 Not Found
    //     content-type: application/json
    //
    //     {"code":5,"details":[{"@type":"type.googleapis.com/google.rpc.RequestInfo","requestId":"r-1"}]}
    //
    //  In order to transcode the message, the `google.rpc.RequestInfo` type from
    //  the `google/rpc/error_details.proto` should be included in the configured
    //  proto descriptor set.
    bool convert_grpc_status = 9;
}