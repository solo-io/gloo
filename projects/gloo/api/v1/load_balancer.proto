syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

import "extproto/ext.proto";
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;
option (extproto.equal_all) = true;



// LoadBalancerConfig is the settings for the load balancer used to send requests to the Upstream endpoints.
message LoadBalancerConfig {
    // Configures envoy's panic threshold Percent between 0-100. Once the number of non health hosts
    // reaches this percentage, envoy disregards health information.
    // see more info [here](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/panic_threshold.html).
    google.protobuf.DoubleValue healthy_panic_threshold = 1;

    // This allows batch updates of endpoints health/weight/metadata that happen during a time window.
    // this help lower cpu usage when endpoint change rate is high. defaults to 1 second.
    // Set to 0 to disable and have changes applied immediately.
    google.protobuf.Duration update_merge_window = 2;

    message RoundRobin {
        // Configuration for slow start mode. If this configuration is not set, slow start will not be not enabled.
        SlowStartConfig slow_start_config = 1;
    }
    message LeastRequest {
        // How many choices to take into account. defaults to 2.
        uint32 choice_count = 1;

        // Configuration for slow start mode. If this configuration is not set, slow start will not be not enabled.
        SlowStartConfig slow_start_config = 2;
    }
    message Random {}

    // Customizes the parameters used in the hashing algorithm to refine performance or resource usage.
    message RingHashConfig {
        // Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each provided host)
        // the better the request distribution will reflect the desired weights. Defaults to 1024 entries, and limited
        // to 8M entries.
        uint64 minimum_ring_size = 1;
        // Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered to further
        // constrain resource use.
        uint64 maximum_ring_size = 2;
    }

    message RingHash {
        // Optional, customizes the parameters used in the hashing algorithm
        RingHashConfig ring_hash_config = 1;
    }

    message Maglev {
    }

    oneof type {
        // Use round robin for load balancing. Round robin is the default load balancing method.
        RoundRobin round_robin = 3;
        // Use least request for load balancing.
        LeastRequest least_request = 4;
        // Use random for load balancing.
        Random random = 5;
        // Use ring hash for load balancing.
        RingHash ring_hash = 6;
        // Use maglev for load balancing.
        Maglev maglev = 7;
    }

    oneof locality_config {
        // (Enterprise Only)
        // https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/locality_weight#locality-weighted-load-balancing
        // Locality weighted load balancing enables weighting assignments across different zones and geographical locations by using explicit weights.
        // This field is required to enable locality weighted load balancing
        google.protobuf.Empty locality_weighted_lb_config = 8;
    }


    // Default: false, If set to true, the hostname will be used for hashing when using maglev for example, useful when using multiple host in the upstreams that resolve to the same IP.
    google.protobuf.BoolValue  use_hostname_for_hashing = 9;

    message SlowStartConfig {
        // Represents the size of slow start window.
        // If set, the newly created host remains in slow start mode starting from its creation time
        // for the duration of slow start window.
        google.protobuf.Duration slow_start_window = 1;

        // This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
        // so that endpoint would get linearly increasing amount of traffic.
        // When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
        // The value of aggression parameter should be greater than 0.0.
        // By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.
        //
        // During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
        // `new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))`,
        // where `time_factor=(time_since_start_seconds / slow_start_time_seconds)`.
        //
        // As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
        // Once host exits slow start, time_factor and aggression no longer affect its weight.
        google.protobuf.DoubleValue aggression = 2;

        // Configures the minimum percentage of origin weight that avoids too small new weight,
        // which may cause endpoints in slow start mode receive no traffic in slow start window.
        // If not specified, the default is 10%.
        google.protobuf.DoubleValue min_weight_percent = 3;
    }

    // If set to true, the load balancer will drain connections when the host set changes.
    //
    // Ring Hash or Maglev can be used to ensure that clients with the same key 
    // are routed to the same upstream host.
    // Distruptions can cause new connections with the same key as existing connections
    // to be routed to different hosts.
    // Enabling this feature will cause the load balancer to drain existing connections
    // when the host set changes, ensuring that new connections with the same key are
    // consistently routed to the same host.
    // Connections are not immediately closed, but are allowed to drain.
    bool close_connections_on_host_set_change = 10;
}
