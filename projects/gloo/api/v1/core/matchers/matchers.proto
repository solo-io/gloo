syntax = "proto3";
package matchers.core.gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/core/matchers";

import "google/protobuf/wrappers.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

// Parameters for matching routes to requests received by a Gloo-managed proxy
message Matcher {
    message ConnectMatcher {
    }

    oneof path_specifier {
        // If specified, the route is a prefix rule meaning that the prefix must
        // match the beginning of the *:path* header.
        string prefix = 1;

        // If specified, the route is an exact path rule meaning that the path must
        // exactly match the *:path* header once the query string is removed.
        string exact = 2;

        // If specified, the route is a regular expression rule meaning that the
        // regex must match the *:path* header once the query string is removed. The entire path
        // (without the query string) must match the regex. The rule will not match if only a
        // sub-sequence of the *:path* header matches the regex. The regex grammar is defined [here](http://en.cppreference.com/w/cpp/regex/ecmascript).
        //
        // Examples:<br/>
        //
        // * The regex */b[io]t* matches the path */bit*<br/>
        // * The regex */b[io]t* matches the path */bot*<br/>
        // * The regex */b[io]t* does not match the path */bite*<br/>
        // * The regex */b[io]t* does not match the path */bit/bot*<br/><br/>
        //
        // Note that the complexity of the regex is constrained by the regex engine's "program size" setting.
        // If your regex is too complex, you may need to adjust the `regexMaxProgramSize` field
        // in the `GlooOptions` section of your `Settings` resource (The gloo default is 1024)
        string regex = 3;

        // If this is used as the matcher, the matcher will only match CONNECT requests.
        // Note that this will not match HTTP/2 upgrade-style CONNECT requests
        // (WebSocket and the like) as they are normalized in Envoy as HTTP/1.1 style
        // upgrades.
        // This is the only way to match CONNECT requests for HTTP/1.1. For HTTP/2,
        // where CONNECT requests may have a path, the path matchers will work if
        // there is a path present.
        // Note that CONNECT support is currently considered alpha in Envoy.
        ConnectMatcher connect_matcher = 9;
    }

    // Indicates that prefix/path matching should be case sensitive. The default is true.
    google.protobuf.BoolValue case_sensitive = 4;

    // Specifies a set of headers that the route should match on. The router will
    // check the request’s headers against all the specified headers in the route
    // config. A match will happen if all the headers in the route are present in
    // the request with the same values (or based on presence if the value field
    // is not in the config).
    repeated HeaderMatcher headers = 6;

    // Specifies a set of URL query parameters on which the route should
    // match. The router will check the query string from the *path* header
    // against all the specified query parameters. If the number of specified
    // query parameters is nonzero, they all must match the *path* header's
    // query string for a match to occur.
    repeated QueryParameterMatcher query_parameters = 7;

    // HTTP Method/Verb(s) to match on. If none specified, the matcher will ignore the HTTP Method
    repeated string methods = 8;
}

// Internally, Gloo always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host* header.
// Thus, if attempting to match on *Host*, match on *:authority* instead.
message HeaderMatcher {
    // Specifies the name of the header in the request.
    string name = 1;

    // Specifies the value of the header. If the value is absent a request that
    // has the name header will match, regardless of the header’s value.
    string value = 2;

    // Specifies whether the header value should be treated as regex or not.
    bool regex = 3;

    // If set to true, the result of the match will be inverted. Defaults to false.
    //
    // Examples:
    // * name=foo, invert_match=true: matches if no header named `foo` is present
    // * name=foo, value=bar, invert_match=true: matches if no header named `foo` with value `bar` is present
    // * name=foo, value=`\d{3}`, regex=true, invert_match=true: matches if no header named `foo` with a value consisting of three integers is present
    bool invert_match = 4;
}

// Query parameter matching treats the query string of a request's :path header
// as an ampersand-separated list of keys and/or key=value elements.
message QueryParameterMatcher {
    // Specifies the name of a key that must be present in the requested
    // *path*'s query string.
    string name = 1;

    // Specifies the value of the key. If the value is absent, a request
    // that contains the key in its query string will match, whether the
    // key appears with a value (e.g., "?debug=true") or not (e.g., "?debug")
    string value = 2;

    // Specifies whether the query parameter value is a regular expression.
    // Defaults to false. The entire query parameter value (i.e., the part to
    // the right of the equals sign in "key=value") must match the regex.
    // E.g., the regex "\d+$" will match "123" but not "a123" or "123a".
    bool regex = 3;
}
