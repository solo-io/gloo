syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto";
import "github.com/solo-io/solo-kit/api/external/envoy/api/v2/core/socket_option.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/proxy_protocol/proxy_protocol.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/als/als.proto";

import "google/protobuf/wrappers.proto";

// Optional, feature-specific configuration that lives on gateways.
// Each ListenerOption object contains configuration for a specific feature.
// Note to developers: new Listener plugins must be added to this struct
// to be usable by Gloo. (plugins currently need to be compiled into Gloo)
message ListenerOptions {
  // Configuration for access logging in a filter like the HttpConnectionManager.
  als.options.gloo.solo.io.AccessLoggingService access_logging_service = 1;

  // Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
  // underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
  //
  // Some sample use cases:
  // * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
  // * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
  // Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
  Extensions extensions = 2;

  // Soft limit on size of the listener's new connection read and write buffers. If unspecified, defaults to 1MiB
  // For more info, check out the [Envoy docs](https://www.envoyproxy.io/docs/envoy/v1.14.1/api-v2/api/v2/listener.proto)
  google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 3;

  // Additional socket options that may not be present in Envoy source code or
  // precompiled binaries.
  repeated .solo.io.envoy.api.v2.core.SocketOption socket_options = 4;

  // Enable ProxyProtocol support for this listener.
  proxy_protocol.options.gloo.solo.io.ProxyProtocol proxy_protocol = 5;

  // Configuration for listener connection balancing.
  ConnectionBalanceConfig connection_balance_config = 6;

  // If enabled this sets up an early access logging service for the listener.
  // Added initially to support listener level logging for HTTP listeners.
  // For more info see https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto#envoy-v3-api-field-config-listener-v3-listener-access-log
  als.options.gloo.solo.io.AccessLoggingService listener_access_logging_service = 7;

  // If true, will wrap all filter chains in the listener with a TCP stats transport socket, which is a
  // passthrough listener that can report low-level Linux TCP stats, useful for diagnosis
  // and triage.
  google.protobuf.BoolValue tcp_stats = 8;
}

// Configuration for listener connection balancing.
message ConnectionBalanceConfig {

  // A connection balancer implementation that does exact balancing. This means that a lock is
  // held during balancing so that connection counts are nearly exactly balanced between worker
  // threads. This is "nearly" exact in the sense that a connection might close in parallel thus
  // making the counts incorrect, but this should be rectified on the next accept. This balancer
  // sacrifices accept throughput for accuracy and should be used when there are a small number of
  // connections that rarely cycle (e.g., service mesh gRPC egress).
  message ExactBalance {
  }


  ExactBalance exact_balance = 1;
}
