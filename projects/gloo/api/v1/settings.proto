syntax = "proto3";
package gloo.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gloo/pkg/api/v1";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";

import "github.com/solo-io/gloo/projects/gloo/api/v1/extensions.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/ratelimit/ratelimit.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/caching/caching.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extproc/extproc.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/rbac/rbac.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/circuit_breaker.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/ssl/ssl.proto";
import "github.com/solo-io/gloo/projects/gloo/api/external/envoy/extensions/aws/filter.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/options/consul/query_options.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

// Represents global settings for all the Gloo components.
message Settings {

    option (core.solo.io.resource).short_name = "st";
    option (core.solo.io.resource).plural_name = "settings";

    // This is the namespace to which Gloo controllers will write their own resources, e.g. discovered Upstreams or default Gateways.
    // If empty, this will default to "gloo-system".
    string discovery_namespace = 1;

    // Use this setting to restrict the namespaces that Gloo controllers take into consideration when watching for resources.In a
    // usual production scenario, RBAC policies will limit the namespaces that Gloo has access to. If `watch_namespaces`
    // contains namespaces outside of this whitelist, Gloo will fail to start.
    //
    // If not set, this defaults to all available namespaces. Please note that, the `discovery_namespace` will always
    // be included in this list.
    // If this is specified, it overwrites the `watch_namespace_selectors` specified
    repeated string watch_namespaces = 2;

    // This setting determines where Gloo controllers will store its resources
    oneof config_source {
        KubernetesCrds kubernetes_config_source = 4;
        Directory directory_config_source = 5;
        ConsulKv consul_kv_source = 21;
    };

    // Determines where Gloo will read/write secrets from/to.
    oneof secret_source {
        KubernetesSecrets kubernetes_secret_source = 6;
        VaultSecrets vault_secret_source = 7;
        Directory directory_secret_source = 8;
    };

    // Settings for secrets storage.
    // This API is beta and should be tested thoroughly before production use
    SecretOptions secret_options = 38;

    message SecretOptions {
        message Source {
            // Determines where Gloo will read/write secrets from/to.
            oneof source {
                KubernetesSecrets kubernetes = 1;
                VaultSecrets vault = 2;
                Directory directory = 3;
            };
        }

        // Required. List of configured secret sources. These clients will be sorted and
        // initialized in a stable order kubernetes > directory > vault.
        repeated Source sources = 1;
    }

    // Where to read artifacts from.
    oneof artifact_source {
        KubernetesConfigmaps kubernetes_artifact_source = 9;
        Directory directory_artifact_source = 10;
        ConsulKv consul_kv_artifact_source = 23;
    };

    // How frequently to resync watches, etc
    google.protobuf.Duration refresh_rate = 12;


    // DEPRECATED: In the past DevMode was used to expose endpoints that behave as an Admin API
    // https://github.com/solo-io/gloo/issues/6494
    // We now support an Admin API on port 9091. See the following guide for more details
    // https://docs.solo.io/gloo-edge/latest/operations/debugging_gloo/#debugging-the-control-plane
    bool dev_mode = 13 [deprecated=true];

    // Enable automatic linkerd upstream header addition for easier routing to linkerd services
    bool linkerd = 17;

    // Use Kubernetes CRDs as storage.
    message KubernetesCrds {
    }

    // Use Kubernetes as storage for secret data.
    message KubernetesSecrets {
    }

    // Use [HashiCorp Vault](https://www.vaultproject.io/) as storage for secret data.
    message VaultSecrets {
        // DEPRECATED: use field accessToken
        // the Token used to authenticate to Vault
        string token = 1;

        // address is the address of the Vault server. This should be a complete
        // URL such as http://solo.io and include port if necessary (vault's default port is 8200)
        string address = 2;

        // DEPRECATED: use field tls_config to configure TLS connection to Vault
        // caCert is the path to a PEM-encoded CA cert file to use to verify the
        // Vault server SSL certificate.
        string ca_cert = 3;

        // DEPRECATED: use field tls_config to configure TLS connection to Vault
        // caPath is the path to a directory of PEM-encoded CA cert files to verify
        // the Vault server SSL certificate.
        string ca_path = 4;

        // DEPRECATED: use field tls_config to configure TLS connection to Vault
        // clientCert is the path to the certificate for Vault communication
        string client_cert = 5;

        // DEPRECATED: use field tls_config to configure TLS connection to Vault
        // clientKey is the path to the private key for Vault communication
        string client_key = 6;

        // DEPRECATED: use field tls_config to configure TLS connection to Vault
        // tlsServerName, if set, is used to set the SNI host when connecting via
        // TLS.
        string tls_server_name = 7;

        // DEPRECATED: use field tls_config to configure TLS connection to Vault
        // When set to true, disables TLS verification
        google.protobuf.BoolValue insecure = 8;

        // all keys stored in Vault will begin with this Vault
        // this can be used to run multiple instances of Gloo against the same Vault cluster
        // defaults to `gloo`
        string root_key = 9;

        // Optional: The name of a Vault Secrets Engine to which Vault should route traffic.
        // For more info see https://learn.hashicorp.com/tutorials/vault/getting-started-secrets-engines.
        // Defaults to 'secret'
        string path_prefix = 10;

        // Configure TLS options for client connection to Vault. This is only available when running
        // Gloo Edge outside of an container orchestration tool such as Kubernetes or Nomad.
        VaultTlsConfig tls_config = 11;

        // Support for multiple authentication methods
        oneof auth_method {
            string access_token = 12;
            VaultAwsAuth aws = 13;
        }
    }

    // Configure Vault client to authenticate to server via AWS auth (IAM only).
    // For more info see https://developer.hashicorp.com/vault/docs/auth/aws
    message VaultAwsAuth {
        // The Vault role we are trying to authenticate to.
        // This is not necessarily the same as the AWS role to which the Vault role is configured.
        string vault_role = 1;
        // The AWS region to use for the login attempt
        string region = 2;
        // The IAM Server ID Header required to be included in the request
        string iam_server_id_header = 3;
        // The Vault path on which the AWS auth is mounted
        string mount_path = 4;
        // The Access Key ID as provided by the security credentials on the AWS IAM resource.
        // Optional: In cases such as receiving temporary credentials through assumed roles with AWS Security Token Service (STS) or IAM Roles for Service Accounts (IRSA), this field can be omitted.
        // https://developer.hashicorp.com/vault/docs/auth/aws#iam-authentication-inferences
        string access_key_id = 5;
        // The Secret Access Key as provided by the security credentials on the AWS IAM resource.
        // Optional: In cases such as receiving temporary credentials through assumed roles with AWS Security Token Service (STS) or IAM Roles for Service Accounts (IRSA), this field can be omitted.
        // https://developer.hashicorp.com/vault/docs/auth/aws#iam-authentication-inferences
        string secret_access_key = 6;
        // The Session Token as provided by the security credentials on the AWS IAM resource
        string session_token = 7;
        // The time increment, in seconds, used in renewing the lease of the Vault token. See: https://developer.hashicorp.com/vault/docs/concepts/lease#lease-durations-and-renewal. Defaults to 0, which causes the default TTL to be used.
        int32 lease_increment = 8;
    }

    // Settings to configure TLS-enabled Vault as a secret store
    message VaultTlsConfig {
        // caCert is the path to a PEM-encoded CA cert file to use to verify the
        // Vault server SSL certificate.
        string ca_cert = 1;

        // caPath is the path to a directory of PEM-encoded CA cert files to verify
        // the Vault server SSL certificate.
        string ca_path = 2;

        // clientCert is the path to the certificate for Vault communication
        string client_cert = 3;

        // clientKey is the path to the private key for Vault communication
        string client_key = 4;

        // tlsServerName, if set, is used to set the SNI host when connecting via
        // TLS.
        string tls_server_name = 5;

        // When set to true, disables TLS verification
        google.protobuf.BoolValue insecure = 6;
    }
    // Use [HashiCorp Consul Key-Value](https://www.consul.io/api/kv.html/) as storage for config data.
    // Configuration options for connecting to Consul can be configured in the Settings' root
    // `consul` field
    message ConsulKv {
        // all keys stored in Consul will begin with this prefix
        // this can be used to run multiple instances of Gloo against the same Consul cluster
        // defaults to `gloo`
        string root_key = 1;
    }

    // Use Kubernetes ConfigMaps as storage.
    message KubernetesConfigmaps {
    }

    // As an alternative to Kubernetes CRDs, Gloo is able to store resources in a local file system.
    // This option determines the root of the directory tree used to this end.
    message Directory {
        string directory = 1;
    } // watch a directory

    message KnativeOptions {
        // Address of the clusteringress proxy.
        // If empty, it will default to clusteringress-proxy.$POD_NAMESPACE.svc.cluster.local.
        // Use if running Knative Version 0.7.X or less
        string cluster_ingress_proxy_address = 1;

        // Address of the externally-facing knative proxy.
        // If empty, it will default to knative-external-proxy.$POD_NAMESPACE.svc.cluster.local.
        // Use if running Knative Version 0.8.X or higher
        string knative_external_proxy_address = 2;

        // Address of the internally-facing knative proxy.
        // If empty, it will default to knative-internal-proxy.$POD_NAMESPACE.svc.cluster.local.
        // Use if running Knative Version 0.8.X or higher
        string knative_internal_proxy_address = 3;
    }

    // Configuration options for the Clusteringress Controller (for Knative).
    // Deprecated: Will not be available in Gloo Edge 1.11
    KnativeOptions knative = 18 [deprecated=true];

    message DiscoveryOptions {

        // Possible modes for running the function discovery service (FDS). FDS polls services in-cluster for Swagger
        // and gRPC endpoints. This behavior can be controlled with the use of annotations.
        // FdsMode specifies what policy FDS will use when determining which services to poll.
        enum FdsMode {
            // In BLACKLIST mode (default), FDS will poll all services in cluster except those services labeled with
            // `discovery.solo.io/function_discovery=disabled`. This label can also be used on namespaces to apply to
            // all services within a namespace **which are not explicitly whitelisted**.
            // Note that `kube-system` and `kube-public` namespaces must be explicitly whitelisted even in blacklist mode.
            BLACKLIST = 0;
            // In WHITELIST mode, FDS will poll only services in cluster labeled with
            // `discovery.solo.io/function_discovery=enabled`. This label can also be used on namespaces to apply to all
            // services **which are not explicitly blacklisted** within a namespace.
            WHITELIST = 1;
            // In DISABLED mode, FDS will not run.
            DISABLED = 2;
        }

        FdsMode fds_mode = 1;

        message UdsOptions {
            // Enable upstream discovery service. Defaults to true.
            google.protobuf.BoolValue enabled = 1;

            // Map of labels to watch. Only services which match all of the selectors specified here will be discovered by UDS.
            map<string, string> watch_labels = 2;
        }

        UdsOptions uds_options = 2;

        message FdsOptions {
            // Deprecated: The GraphQL feature will be removed in a future release.
            // Enable function discovery service on GraphQL gRPC and OpenApi upstreams. Defaults to true.
            google.protobuf.BoolValue graphql_enabled = 1 [deprecated = true];
        }

        FdsOptions fds_options = 3;
    }

    // Options for configuring Gloo's Discovery service
    DiscoveryOptions discovery = 19;

    // Options for configuring `gloo`, the core Gloo controller,
    // which serves dynamic configuration to Envoy
    GlooOptions gloo = 24;

    // Options for configuring `gateway`, the Gateway Gloo controller,
    // which enables the VirtualService/Gateway API in Gloo
    GatewayOptions gateway = 25;

    // Provides overrides for the default configuration parameters used to connect to Consul.
    //
    // Note: It is also possible to configure the Consul client Gloo uses via the environment variables
    // described [here](https://www.consul.io/docs/commands/index.html#environment-variables). These
    // need to be set on the Gloo container.
    message ConsulConfiguration {

        // Deprecated: prefer http_address.
        // The address of the Consul HTTP server.
        // Used by service discovery and key-value storage (if-enabled).
        // Defaults to the value of the standard CONSUL_HTTP_ADDR env if set, otherwise to 127.0.0.1:8500.
        string address = 1 [deprecated=true];

        // Datacenter to use. If not provided, the default agent datacenter is used.
        string datacenter = 2;

        // Username to use for HTTP Basic Authentication
        string username = 3;

        // Password to use for HTTP Basic Authentication
        string password = 4;

        // Token is used to provide a per-request ACL token
        // which overrides the agent's default token.
        string token = 5;

        // caFile is the optional path to the CA certificate used for Consul
        // communication, defaults to the system bundle if not specified.
        string ca_file = 6;

        // caPath is the optional path to a directory of CA certificates to use for
        // Consul communication, defaults to the system bundle if not specified.
        string ca_path = 7;

        // CertFile is the optional path to the certificate for Consul
        // communication. If this is set then you need to also set KeyFile.
        string cert_file = 8;

        // KeyFile is the optional path to the private key for Consul communication.
        // If this is set then you need to also set CertFile.
        string key_file = 9;

        // InsecureSkipVerify if set to true will disable TLS host verification.
        google.protobuf.BoolValue insecure_skip_verify = 10;

        // WaitTime limits how long a watches for Consul resources will block.
        // If not provided, the agent default values will be used.
        google.protobuf.Duration wait_time = 11;

        // service discovery options for Consul
        message ServiceDiscoveryOptions {
            // Use this parameter to restrict the data centers that will be considered when discovering and routing to
            // services. If not provided, Gloo will use all available data centers.
            repeated string data_centers = 1;
        }

        // Enable Service Discovery via Consul with this field
        // set to empty struct `{}` to enable with defaults
        ServiceDiscoveryOptions service_discovery = 12;

        // The address of the Consul HTTP server.
        // Used by service discovery and key-value storage (if-enabled).
        // Defaults to the value of the standard CONSUL_HTTP_ADDR env if set, otherwise to 127.0.0.1:8500.
        string http_address = 13;

        // The address of the DNS server used to resolve hostnames in the Consul service address.
        // Used by service discovery (required when Consul service instances are stored as DNS names).
        // Defaults to 127.0.0.1:8600. (the default Consul DNS server)
        string dns_address = 14;

        // The polling interval for the DNS server.
        // If there is a Consul service address with a hostname instead of an IP, Gloo will resolve the
        // hostname with the configured frequency to update endpoints with any changes to DNS resolution.
        // Defaults to 5s.
        google.protobuf.Duration dns_polling_interval = 15;
    }

    // Options to configure Gloo's integration with [HashiCorp Consul](https://www.consul.io/).
    ConsulConfiguration consul = 20;

    // Settings related to gloo's behavior when discovering consul services and creating
    // upstreams to connect to those services and their instances.
    message ConsulUpstreamDiscoveryConfiguration {
         // If true, then gloo will add TLS to upstreams created for any consul service that has the tag specified by
         // tlsTagName. If splitTlsServices is true, then this tag is also used to identify serviceInstances that
         // should be tied to the TLS upstream. Requires rootCa to be set if true.
         bool useTlsTagging = 16;

         // The tag that gloo should use to make TLS upstreams from consul services, and to partition consul
         // serviceInstances between TLS/non-TLS upstreams. Defaults to 'glooUseTls'
         string tlsTagName = 17;

         // The reference for the root CA resource to be used by discovered consul TLS upstreams.
         core.solo.io.ResourceRef rootCa = 18;

         // If true, then create two upstreams when the tlsTagName is found on a consul service,
         // one with tls and one without. This requires a consul service's serviceInstances
         // be individually tagged; servicesInstances with the tlsTagName tag are directed to the TLS upstream, while those
         // without the tlsTagName tag are sorted into the non-TLS upstream.
         bool splitTlsServices = 19;

        // Sets the consistency mode. The default is DefaultMode.
        //
        // Note: Gloo handles staleness well (as it runs update loops ~ once/second) but makes many requests
        // to get consul endpoints so users may want to opt into stale reads once the implications are understood.
        .consul.options.gloo.solo.io.ConsulConsistencyModes consistencyMode = 20;

        // QueryOptions are the query options to use for all Consul queries.
        .consul.options.gloo.solo.io.QueryOptions query_options = 21;

        // All Services with tags in the allowlisted values will have endpoints and upstreams discovered.
        // Default is all services - if values specified this will limit discovery to only services with specified tags
        repeated string service_tags_allowlist = 22;

        // Enables blocking queries for Gloo's requests to the Consul Catalog API for each service
        // (`/catalog/service/:servicename`) to get endpoints for EDS. For more on blocking queries, see
        // https://www.consul.io/api-docs/features/blocking
        //
        // Enabling this feature will likely result in fewer network calls to Consul, but may also result in
        // fewer local consul agent cache hits for Gloo's requests to the Consul Catalog API. (see
        // `query_options` above to configure caching; caching is enabled by default).
        //
        // Defaults to false.
        google.protobuf.BoolValue eds_blocking_queries = 23;
    }

    ConsulUpstreamDiscoveryConfiguration consulDiscovery = 30;


    // Provides overrides for the default configuration parameters used to interact with Kubernetes.
    message KubernetesConfiguration {

        message RateLimits {
            // The maximum queries-per-second Gloo can make to the Kubernetes API Server. Defaults to 50.
            float QPS = 1;
            // Maximum burst for throttle. When a steady state of QPS requests per second,
            // this is an additional number of allowed, to allow for short bursts. Defaults to 100.
            uint32 burst = 2;
        }
        // Rate limits for the kubernetes clients
        RateLimits rate_limits = 1;
    }

    // Options to configure Gloo's integration with [Kubernetes](https://www.kubernetes.io/).
    KubernetesConfiguration kubernetes = 22;

    // Extensions will be passed along from Listeners, Gateways, VirtualServices, Routes, and Route tables to the
    // underlying Proxy, making them useful for controllers, validation tools, etc. which interact with kubernetes yaml.
    //
    // Some sample use cases:
    // * controllers, deployment pipelines, helm charts, etc. which wish to use extensions as a kind of opaque metadata.
    // * In the future, Gloo may support gRPC-based plugins which communicate with the Gloo translator out-of-process.
    // Opaque Extensions enables development of out-of-process plugins without requiring recompiling & redeploying Gloo's API.
    Extensions extensions = 16;

    // Enterprise-only: Partial config for GlooE's rate-limiting service, based on Envoy's rate-limit service;
    // supports Envoy's rate-limit service API. (reference here: https://github.com/lyft/ratelimit#configuration)
    // Configure rate-limit *descriptors* here, which define the limits for requests based on their descriptors.
    // Configure rate-limits (composed of *actions*, which define how request characteristics get translated into
    // descriptors) on the VirtualHost or its routes
    ratelimit.options.gloo.solo.io.ServiceSettings ratelimit = 26;

    // Enterprise-only: Settings for the rate limiting server itself
    ratelimit.options.gloo.solo.io.Settings ratelimit_server = 27;

    // Enterprise-only: Settings for RBAC across all Gloo resources (VirtualServices, Routes, etc.)
    rbac.options.gloo.solo.io.Settings rbac = 28;

    // Enterprise-only: External auth related settings
    enterprise.gloo.solo.io.Settings extauth = 29;

    // Enterprise-only: External auth related settings for additional auth servers
    // This should only be used in the case where separate servers are needed to authorize separate routes.
    // With multiple auth servers configured in Settings, multiple filters will be configured
    // on the filter chain, but only 1 will be executed on a route.
    // The name of the auth server (ie the key in the map) will be used to apply the configuration on the route.
    // If an auth server name is not supplied on a route, the default auth server will be applied.
    map<string, enterprise.gloo.solo.io.Settings> named_extauth = 33;

    // Enterprise-only: Settings for the caching server itself
    // This may eventually be able to be set at a per listener level.
	// At this time is used for plugin translation via the init.Params.
    caching.options.gloo.solo.io.Settings caching_server = 36;


    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 14;

    reserved 15;
    // NamespacedStatuses indicates the validation status of this resource.
    // NamespacedStatuses is read-only by clients, and set by gloo during validation
    core.solo.io.NamespacedStatuses namespaced_statuses = 34 [(extproto.skip_hashing) = true];

    message ObservabilityOptions {

        // Provides settings related to the observability pod's interactions with grafana
        message GrafanaIntegration {

            // (UInt32Value) Grafana allows dashboards to be added to specific folders by specifying that folder's ID
            // If unset, automatic upstream dashboards are generated in the general folder (folderId: 0).
            // If set, the observability deployment will try to create/move all upstreams without their own folderId
            // to the folder specified here, after verifying that a folder with such an ID exists.
            // Be aware that grafana requires a folders ID, which
            // should not be confused with the similarly-named and more easily accessible folder UID value.
            // If individual upstream dashboards need to be placed specific granafa folders, they can be given their own
            // folder IDs by annotating the upstreams. The annotation key must be
            // 'observability.solo.io/dashboard_folder_id' and the value must be the folder ID.
            // Folder IDs can be retrieved from grafana with a pair of terminal commands:
            // 1. Port forward the grafana deployment to surface its API:
            // kubectl -n gloo-system port-forward deployment/glooe-grafana 3000
            // 2. Request all folder data (after admin:admin is replaced with the correct credentials):
            // curl http://admin:admin@localhost:3000/api/folders
            google.protobuf.UInt32Value default_dashboard_folder_id = 1;

            // The prefix of the UIDs and Titles for all dashboards created on grafana.
            // This is restricted to 20 characters.
            string dashboard_prefix = 2;

            // Extra parameters when querying metrics from Grafana dashboards.
            // This string will be appended to every query for metrics in the definition of all gloo managed dashboards.
            // It can consist of multiple query parameters separated by a comma.
            // For example `cluster="some-cluster",gateway_proxy_id="proxy-2"`
            string extra_metric_query_parameters = 3;
        }

        // Options to configure Gloo's integration with [Kubernetes](https://www.kubernetes.io/).
        GrafanaIntegration grafanaIntegration = 1;


        message MetricLabels {
            // Each (key, value) pair in the map defines a label to be applied. Keys specify the name of the label
            // (e.g. "namespace"). Values specify the jsonpath (https://kubernetes.io/docs/reference/kubectl/jsonpath/)
            // string corresponding to the field of a resource to use as the label value (e.g. "{.metadata.namespace}").
            // For example, if labelToPath = {name: '{.metadata.name}', namespace: '{.metadata.namespace}'} for
            // Upstream.v1.gateway.solo.io, the following metric would be produced:
            // validation_gateway_solo_io_upstream_config_status{name="default-petstore-8080",namespace="gloo-system"} 0
            map<string, string> labelToPath = 1;
        }

        // Enable metrics that track the configuration status of various resource types.
        // Each (key, value) pair in the map defines a metric for a particular resource type. Configuration status
        // metrics are not recorded by default; metrics are recorded only for the resources specified in this map.
        // Keys specify the resource type (GroupVersionKind) to track for status changes
        // (e.g. "VirtualService.v1.gateway.solo.io"). Values specify the labels to set on the metric.
        map<string, MetricLabels> configStatusMetricLabels = 2;
    }

    // Provides settings related to the observability deployment (enterprise only)
    ObservabilityOptions observabilityOptions = 31;

    // Default configuration to use for upstreams, when not provided by specific upstream
    // When these properties are defined on an upstream, this configuration will be ignored
    UpstreamOptions upstreamOptions = 32;

    // Enterprise-only: Settings for the Gloo Edge Enterprise Console (UI)
    ConsoleOptions console_options = 35;

    // Deprecated: The GraphQL feature will be removed in a future release.
    // Enterprise-only: GraphQL settings
    GraphqlOptions graphql_options = 37 [deprecated = true];

    // Enterprise-only: External Processing filter settings. These settings are used as
    // defaults globally, and can be overridden by HttpListenerOptions, VirtualHostOptions,
    // or RouteOptions.
    extproc.options.gloo.solo.io.Settings ext_proc = 39;

    // A list of Kubernetes selectors that specify the set of namespaces to restrict the namespaces that Gloo controllers
    // take into consideration when watching for resources.
    // Elements in the list are disjunctive (OR semantics), i.e. a namespace will be included if it matches any selector.
    // The following example selects any namespace that matches either below:
    // 1. The namespace has both of these labels: `env: prod` and `region: us-east1`
    // 2. The namespace has label `app` equal to `cassandra` or `spark`.
    // ```yaml
    // watchNamespaceSelectors:
    //   - matchLabels:
    //       env: prod
    //       region: us-east1
    //   - matchExpressions:
    //     - key: app
    //       operator: In
    //       values:
    //         - cassandra
    //         - spark
    // ```
    // However, if the match conditions are part of the same same list item, the namespace must match all conditions.
    // ```yaml
    // watchNamespaceSelectors:
    //   - matchLabels:
    //       env: prod
    //       region: us-east1
    //     matchExpressions:
    //     - key: app
    //       operator: In
    //       values:
    //         - cassandra
    //         - spark
    // ```
    // Refer to the [Kubernetes selector docs](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors)
    // for additional detail on selector semantics.
    repeated LabelSelector watch_namespace_selectors = 40;
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
// Copied from Kubernetes to avoid expensive dependency on Kubernetes libraries.
// Ref: https://github.com/kubernetes/apimachinery/blob/f7615f37d717297aca51101478406af712553c5b/pkg/apis/meta/v1/generated.proto#L442-L453
message LabelSelector {
    // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    // map is equivalent to an element of matchExpressions, whose key field is "key", the
    // operator is "In", and the values array contains only "value". The requirements are ANDed.
    // +optional
    map<string, string> match_labels = 1;

    // matchExpressions is a list of label selector requirements. The requirements are ANDed.
    // +optional
    repeated LabelSelectorRequirement match_expressions = 2;
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
// Copied from Kubernetes to avoid expensive dependency on Kubernetes libraries.
// Ref: https://github.com/kubernetes/apimachinery/blob/f7615f37d717297aca51101478406af712553c5b/pkg/apis/meta/v1/generated.proto#L455-L472
message LabelSelectorRequirement {
    // key is the label key that the selector applies to.
    // +patchMergeKey=key
    // +patchStrategy=merge
    string key = 1;

    // operator represents a key's relationship to a set of values.
    // Valid operators are In, NotIn, Exists and DoesNotExist.
    string operator = 2;

    // values is an array of string values. If the operator is In or NotIn,
    // the values array must be non-empty. If the operator is Exists or DoesNotExist,
    // the values array must be empty. This array is replaced during a strategic
    // merge patch.
    // +optional
    repeated string values = 3;
}

// Default configuration to use for upstreams, when not provided by a specific upstream
// When these properties are defined on a specific upstream, this configuration will be ignored
message UpstreamOptions {
    // Default ssl parameter configuration to use for upstreams
    SslParameters ssl_parameters = 1;

    // Annotations to apply to all upstreams
    map<string, string> global_annotations = 2;
}

// Settings specific to the gloo (Envoy xDS server) controller
message GlooOptions {
    // Where the `gloo` xDS server should bind. Defaults to `0.0.0.0:9977`
    string xds_bind_addr = 1;

    // Where the `gloo` validation server should bind. Defaults to `0.0.0.0:9988`
    string validation_bind_addr = 2;

    // Default circuit breaker configuration to use for upstream requests,
    // when not provided by specific upstream.
    CircuitBreakerConfig circuit_breakers = 3;

    // Timeout to get initial snapshot of resources. If set to zero, Gloo will not wait for initial
    // snapshot - if nonzero and gloo could not fetch it's initial snapshot before the timeout
    // reached, gloo will panic. If unset, Gloo defaults to 5 minutes.
    google.protobuf.Duration endpoints_warming_timeout = 4;

    message AWSOptions {

        oneof credentials_fetcher {
            // Enable credential discovery via IAM; when this is set, there's no need provide a secret
            // on the upstream when running on AWS environment.
            //
            // Note: This should **ONLY** be enabled when running in an AWS environment, as the AWS
            // code blocks the envoy main thread. This should be negligible when running inside AWS.
            bool enable_credentials_discovey = 1;

            // Use projected service account token, and role arn to create temporary
            // credentials with which to authenticate lambda requests.
            // This functionality is meant to work along side EKS service account to IAM
            // binding functionality as outlined here:
            // https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
            //
            // If the following environment values are not present in the gateway-proxy, this option cannot be used.
            //   1. AWS_WEB_IDENTITY_TOKEN_FILE
            //   2. AWS_ROLE_ARN
            //
            // The role which will be assumed by the credentials will be the one specified by AWS_ROLE_ARN, however, this
            // can also be overwritten in the AWS Upstream spec via the role_arn field
            //
            // If they are not specified envoy will NACK the config update, which will show up in the logs when running OS Gloo.
            // When running Gloo enterprise it will be reflected in the prometheus stat: "glooe.solo.io/xds/nack"
            //
            // In order to specify the aws sts endpoint, both the cluster and uri must be set.
            // This is due to an envoy limitation which cannot infer the host or path from the cluster,
            // and therefore must be explicitly specified via the uri
            envoy.config.filter.http.aws_lambda.v2.AWSLambdaConfig.ServiceAccountCredentials service_account_credentials = 2;
        }

        // Send downstream path and method as `x-envoy-original-path` and
        // `x-envoy-original-method` headers on the request to AWS lambda.
        // Defaults to false.
        google.protobuf.BoolValue propagate_original_routing = 3;

        // Sets cadence for refreshing credentials for Service Account.
        // Does nothing if Service account is not set.
        // Does not affect the default filewatch for service account only augments it.
        // Defaults to not refreshing on time period. Suggested is 15 minutes.
        google.protobuf.Duration credential_refresh_delay = 4;

        // Sets the unsafe behavior where a route can specify a lambda upstream
        // but not set the function to target. It will use the first function which
        // if discovery is enabled the first function is the first function name alphabetically
        // from the last discovery run. This means that the lambda being pointed to could change.
        // Defaults to false.
        google.protobuf.BoolValue fallback_to_first_function = 5;
    }

    AWSOptions aws_options = 5;

    // Policy for how Gloo should handle invalid config
    // [#next-free-field: 15]
    message InvalidConfigPolicy {

        // if set to `true`, Gloo removes any routes from the provided configuration
        // which point to a missing destination. Routes that are removed in this way
        // will instead return a configurable direct response to clients. When routes are replaced,
        // Gloo will configure Envoy with a special listener which serves direct responses.
        //
        // Note: enabling this option allows Gloo to accept partially valid proxy configurations.
        bool replace_invalid_routes = 1;

        // replaced routes reply to clients with this response code.
        // default is 404.
        uint32 invalid_route_response_code = 2;

        // replaced routes reply to clients with this response body.
        // default is 'Gloo Edge has invalid configuration. Administrators should run `glooctl check` to find and fix config errors.'
        string invalid_route_response_body = 3;
    }

    // set these options to fine-tune the way Gloo handles invalid user configuration
    InvalidConfigPolicy invalid_config_policy = 6;

    // Enable or disable Gloo Edge to scan Kubernetes services in the cluster and create in-memory Upstream resources
    // to represent them. These resources enable Gloo Edge to route requests to a Kubernetes service. Note that if
    // you have a large number of services in your cluster and you do not restrict the namespaces that Gloo Edge watches,
    // the API snapshot increases which can have a negative impact on the Gloo Edge translation time. In addition, load
    // balancing is done in `kube-proxy` which can have further performance impacts. Using Gloo Upstreams as a routing
    // destination bypasses `kube-proxy` as the request is routed to the pod directly. Alternatively, you can use
    // [`Kubernetes`](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/options/kubernetes/kubernetes.proto.sk/)
    // Upstream resources as a routing destination to forward requests to the pod directly.
    //
    // For more information, see the [docs](https://docs.solo.io/gloo-edge/latest/guides/traffic_management/destination_types/kubernetes_services/).
    bool disable_kubernetes_destinations = 7;

    // Default policy for grpc-web.
    // set to true if you do not wish grpc-web to be automatically enabled.
    // set to false if you wish grpc-web enabled unless disabled on the listener level.
    // If not specified, defaults to `false`.
    google.protobuf.BoolValue disable_grpc_web = 8;

    // Set this option to determine the state of the envoy configuration when a virtual service is deleted, resulting in a
    // proxy with no configured routes.
    // set to true if you wish to keep envoy serving the routes from the latest valid configuration.
    // set to false if you wish to reset the envoy configuration to a clean slate with no routes.
    // If not specified, defaults to `false`.
    google.protobuf.BoolValue disable_proxy_garbage_collection = 9;

    // Set this option to specify the default max program size for regexes. If not specified,
    // defaults to 100.
    google.protobuf.UInt32Value regex_max_program_size = 10;

    // Where the `gloo` REST xDS server should bind.
    // Defaults to `0.0.0.0:9976`
    string rest_xds_bind_addr = 11;

    // Whether or not to use rest xds for all EDS by default.
    // Rest XDS, as opposed to grpc, uses http polling rather than streaming
    // It is strongly recommended that this field be set to false, due to the superior performance of GRPC XDS
    google.protobuf.BoolValue enable_rest_eds = 12;

    // The polling interval for the DNS server if upstream failover is configured.
    // If there is a failover upstream address with a hostname instead of an IP, Gloo will resolve the
    // hostname with the configured frequency to update endpoints with any changes to DNS resolution.
    // Defaults to 10s.
    google.protobuf.Duration failover_upstream_dns_polling_interval = 13;

    // By default gloo adds a series of filters to envoy to ensure that new routes are picked up
    // Even if the listener previously did not have a filter on the chain previously.
    // When set to true unused filters are not added to the chain by default.
    // Defaults to false
    google.protobuf.BoolValue remove_unused_filters = 14;

    // Where the `gloo` proxy debug server should bind. Defaults to `gloo:9966`
    string proxy_debug_bind_addr = 15;

    // When enabled, log the request/response body and headers before and after
    // any transformations are applied. May be useful in the case where many
    // transformations are applied and it is difficult to determine which are
    // causing issues. Defaults to false.
    google.protobuf.BoolValue log_transformation_request_response_info = 16;

    // Set escapeCharacters for all TransformationTemplates on all vhosts and routes.
    // This setting can be overridden in individual TransformationTemplates
    google.protobuf.BoolValue transformation_escape_characters = 17;

    message IstioOptions {
        // Set to false to disable adding X-Forwarded-Host header in Istio integration
        // Defaults to true
        // Warning: This value is deprecated and will be removed in a future release. Also, you cannot use this value with a Kubernetes Gateway API proxy.
        google.protobuf.BoolValue append_x_forwarded_host = 1 [deprecated = true];

        // Set to true to enable automatic mTLS for all upstreams. Istio integration must be enabled for this to take effect.
        // Defaults to false
        google.protobuf.BoolValue enable_auto_mtls = 2;

        // Istio integration is enabled via global.istioIntegration.enabled on the helm chart.
        // If enabled, an istio-proxy container and sds container are assumed to exist alongside the
        // gateway proxy. These containers are created by enabling the istioIntegration.enabled option in the helm chart.
        // Defaults to false
        google.protobuf.BoolValue enable_integration = 3;
    }

    IstioOptions istio_options = 18;
}


// Default configuration to use for VirtualServices, when not provided by a specific virtual service
// When these properties are defined on a specific VirtualService, this configuration will be ignored
message VirtualServiceOptions {
    // Default one_way_tls value to use for all virtual services where one_way_tls config has not been specified.
    // If the SSL config has the ca.crt (root CA) provided, Gloo uses it to perform mTLS by default.
    // Set oneWayTls to true to disable mTLS in favor of server-only TLS (one-way TLS), even if Gloo has the root CA.
    google.protobuf.BoolValue one_way_tls = 1;
}

// Settings specific to the Gateway controller
message GatewayOptions {
    // Address of the `gloo` config validation server. Defaults to `gloo:9988`.
    string validation_server_addr = 1;

    // options for configuring admission control / validation
    message ValidationOptions {
        // Address of the `gloo` proxy validation grpc server. Defaults to `gloo:9988`.
        // This field is required in order to enable fine-grained admission control.
        string proxy_validation_server_addr = 2;

        // Path to TLS Certificate for Kubernetes Validating webhook. Defaults to `/etc/gateway/validation-certs/tls.crt`.
        string validation_webhook_tls_cert = 3;

        // Path to TLS Private Key for Kubernetes Validating webhook. Defaults to `/etc/gateway/validation-certs/tls.key`.
        string validation_webhook_tls_key = 4;

        // Deprecated: the Gateway and the Gloo pods are now merged together, there are no longer
        // requests made to a Gloo Validation server.
        // When Gateway cannot communicate with Gloo (e.g. Gloo is offline)
        // resources will be rejected by default.
        // Enable the `ignoreGlooValidationFailure` to prevent the Validation server from rejecting
        // resources due to network errors.
        bool ignore_gloo_validation_failure = 5 [deprecated = true];

        // Always accept resources even if validation produced an error.
        // Validation will still log the error and increment the validation.gateway.solo.io/resources_rejected stat.
        // Currently defaults to true - must be set to `false` to prevent writing invalid resources to storage.
        google.protobuf.BoolValue always_accept = 6;

        // Accept resources if validation produced a warning (defaults to true).
        // By setting to false, this means that validation will start rejecting resources that would result
        // in warnings, rather than just those that would result in errors. Note that this setting has no impact on
        // Kubernetes Gateway API validation, as warnings will always be allowed in that context.
        google.protobuf.BoolValue allow_warnings = 7;

        // Deprecated: See `server_enabled` and consider configuring it to `false` instead.
        // Write a warning to route resources if validation produced a route ordering warning (defaults to false).
        // By setting to true, this means that Gloo will start assigning warnings to resources that would result
        // in route short-circuiting within a virtual host, for example:
        //   - prefix routes that make later routes unreachable
        //   - regex routes that make later routes unreachable
        //   - duplicate matchers
        google.protobuf.BoolValue warn_route_short_circuiting = 8 [deprecated = true];

        // By default gloo will attempt to validate transformations by calling out to a local envoy binary in `validate` mode.
        // Calling this local envoy binary can become slow when done many times during a single validation.
        // Setting this to true will stop gloo from calling out to envoy to validate the transformations, which may speed up the
        // validation time considerably, but may also cause the transformation config to fail after being sent to envoy.
        // When disabling this, ensure that your transformations are valid prior to applying them.
        google.protobuf.BoolValue disable_transformation_validation = 9;

        reserved 10;

        // By default, gRPC validation messages between gateway and gloo pods have a max message size of 100 MB.
        // Setting this value sets the gRPC max message size in bytes for the gloo validation server. This should
        // only be changed if necessary.
        // If not included, the gRPC max message size will be the default of 100 MB.
        google.protobuf.Int32Value validation_server_grpc_max_size_bytes = 11;

        // By providing the validation field (parent of this object) the user is implicitly opting into validation.
        // This field allows the user to opt out of the validation server, while still configuring pre-existing fields
        // such as `warn_route_short_circuiting` and `disable_transformation_validation`.
        //
        // If not included, the validation server will be enabled.
        google.protobuf.BoolValue server_enabled = 12;

        // Allows configuring validation to report a missing TLS secret referenced by a SslConfig or UpstreamSslConfig
        // as a warning instead of an error. This will allow for eventually consistent workloads, but will also permit
        // the accidental deletion of secrets being referenced, which would cause disruption in traffic.
        google.protobuf.BoolValue warn_missing_tls_secret = 13;

        // Configures the Gloo translation loop to send the final product of translation through Envoy
        // validation mode. This has an negative impact on the total translation throughput, but it
        // helps ensure the configuration will not be nacked when served to Envoy.
        //
        // This feature is disabled by default and is not recommended for production deployments unless
        // the performance implications are well understood and acceptable.
        //
        // Large configurations can take more than 10 seconds to validate, causing the validating webhook to timeout.
        // When enabling this feature, consider increasing the timeout for the validating webhook
        // (`.Values.gateway.validation.webhook.timeoutSeconds`).
        google.protobuf.BoolValue full_envoy_validation = 14;
    }

    // If provided, the Gateway will perform [Dynamic Admission Control](https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/)
    // of Gateways, Virtual Services, and Route Tables when running in Kubernetes.
    ValidationOptions validation = 3;

    // When true, the Gateway controller will consume Gateway custom resources from all watch namespaces, rather
    // than just the Gateway CRDs in its own namespace.
    bool read_gateways_from_all_namespaces = 4;

    // Deprecated.
    // This setting is ignored. Maintained for backwards compatibility with settings exposed on 1.2.x branch of Gloo.
    bool always_sort_route_table_routes = 5 [deprecated=true];

    // If set, compresses proxy space. This can help make the Proxy CRD smaller to fit in etcd.
    // This is an advanced option. Use with care.
    bool compressed_proxy_spec = 6;

    // Default configuration to use for VirtualServices, when not provided by a specific virtual service
    // When these properties are defined on a specific VirtualService, this configuration will be ignored
    VirtualServiceOptions virtual_service_options = 7;

    // Set this to persist the Proxy CRD to etcd By default, proxies are kept in memory to improve performance.
    // Proxies can be persisted to etcd to allow external tools and other pods to read the contents the Proxy CRD.
    google.protobuf.BoolValue persist_proxy_spec = 8;

    // This is set based on the install mode. It indicates to gloo whether or not it should run the gateway
    // translations and validation.
    google.protobuf.BoolValue enable_gateway_controller = 9;

    // If set, group virtual hosts by matching ssl config, and isolate them on separate filter chains
    // The default behavior is to aggregate all virtual hosts, and expose them on identical filter chains,
    // each with a FilterChainMatch that corresponds to the ssl config.
    // Individual Gateways can override this behavior by configuring the "gateway.solo.io/isolate_vhost" annotation
    // to be a truthy ("true", "false") value
    google.protobuf.BoolValue isolate_virtual_hosts_by_ssl_config = 10;

    // If set, gateways will be translated into Envoy listeners even if no VirtualServices exist or match a gateway.
    // When there are no VirtualServices that implies there are no routes to serve, so all requests will return a 404.
    // Defaults to false.
    // The default behavior when no VirtualServices are defined or no Gateways match a VirtualService is that
    // the gateway is not converted into an Envoy listener.
    google.protobuf.BoolValue translate_empty_gateways = 11;
}

// Deprecated: The GraphQL feature will be removed in a future release.
// Settings used by the Enterprise Console (UI)
message ConsoleOptions {
    // If true, then custom resources can only be viewed in read-only mode in the UI.
    // If false, then resources can be created, updated, and deleted via the UI.
    // Currently, create/update/delete operations are only supported for GraphQL resources.
    // This feature requires a Gloo Edge Enterprise license with GraphQL enabled.
    // Defaults to true.
    google.protobuf.BoolValue read_only = 1;

    // Whether to enable the GraphQL API Explorer. This feature requires a Gloo Edge Enterprise license with GraphQL enabled.
    // Defaults to true.
    google.protobuf.BoolValue api_explorer_enabled = 2;
}

// Deprecated: The GraphQL feature will be removed in a future release.
// GraphQL settings used by the control plane and UI.
message GraphqlOptions {

    // Options for how to validate changes to schema definitions.
    SchemaChangeValidationOptions schema_change_validation_options = 1;

    message SchemaChangeValidationOptions {
        // Schema definition updates can be considered safe, dangerous, or breaking.
        // If this field is set to true, then breaking schema updates will be rejected.
        // Defaults to false.
        google.protobuf.BoolValue reject_breaking_changes = 1;

        // We use [GraphQL Inspector](https://www.graphql-inspector.com/docs/essentials/diff) to detect breaking changes
        // to GraphQL schemas. This field allows for passing [processing rules](https://www.graphql-inspector.com/docs/essentials/diff#rules)
        // to GraphQL Inspector to customize how various change types are handled.
        repeated ProcessingRule processing_rules = 2;

        enum ProcessingRule {
            RULE_UNSPECIFIED = 0;

            // Turn every dangerous change into a breaking change.
            RULE_DANGEROUS_TO_BREAKING = 1;

            // Treat the removal of a deprecated field as a dangerous change, instead of a breaking change.
            RULE_DEPRECATED_FIELD_REMOVAL_DANGEROUS = 2;

            // Ignore description changes.
            RULE_IGNORE_DESCRIPTION_CHANGES = 3;

            // Ignore breaking changes on parts of the schema that are not reachable starting from the root types.
            RULE_IGNORE_UNREACHABLE = 4;
        }
    }
}
