// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gateway/api/v1/route_table.proto

package v1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The **RouteTable** is a child routing object for the Gloo Gateway.
//
// A **RouteTable** gets built into the complete routing configuration when it is referenced by a `delegateAction`,
// either in a parent VirtualService or another RouteTable.
//
// Routes specified in a RouteTable must have their paths start with the prefix provided in the parent's matcher.
//
// For example, the following configuration:
//
// ```
// virtualService: mydomain.com
// match: /a
// delegate: a-routes
// ---
// routeTable: a-routes
// match: /1
//
// ```
//
// would *not be valid*, while
//
// ```
// virtualService: mydomain.com
// match: /a
// delegate: a-routes
// ---
// routeTable: a-routes
// match: /a/1
//
// ```
//
// *would* be valid.
//
// A complete configuration might look as follows:
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: VirtualService
// metadata:
//
//	name: 'any'
//	namespace: 'any'
//
// spec:
//
//	virtualHost:
//	  domains:
//	  - 'any.com'
//	  routes:
//	  - matchers:
//	    - prefix: '/a' # delegate ownership of routes for `any.com/a`
//	    delegateAction:
//	      ref:
//	        name: 'a-routes'
//	        namespace: 'a'
//	  - matchers:
//	    - prefix: '/b' # delegate ownership of routes for `any.com/b`
//	    delegateAction:
//	      ref:
//	        name: 'b-routes'
//	        namespace: 'b'
//
// ```
//
// * A root-level **VirtualService** which delegates routing to to the `a-routes` and `b-routes` **RouteTables**.
// * Routes with `delegateActions` can only use a `prefix` matcher.
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: RouteTable
// metadata:
//
//	name: 'a-routes'
//	namespace: 'a'
//
// spec:
//
//	routes:
//	  - matchers:
//	    # the path matchers in this RouteTable must begin with the prefix `/a/`
//	    - prefix: '/a/1'
//	    routeAction:
//	      single:
//	        upstream:
//	          name: 'foo-upstream'
//
//	  - matchers:
//	    - prefix: '/a/2'
//	    routeAction:
//	      single:
//	        upstream:
//	          name: 'bar-upstream'
//
// ```
//
// * A **RouteTable** which defines two routes.
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: RouteTable
// metadata:
//
//	name: 'b-routes'
//	namespace: 'b'
//
// spec:
//
//	routes:
//	  - matchers:
//	    # the path matchers in this RouteTable must begin with the prefix `/b/`
//	    - regex: '/b/3'
//	    routeAction:
//	      single:
//	        upstream:
//	          name: 'bar-upstream'
//	  - matchers:
//	    - prefix: '/b/c/'
//	    # routes in the RouteTable can perform any action, including a delegateAction
//	    delegateAction:
//	      ref:
//	        name: 'c-routes'
//	        namespace: 'c'
//
// ```
//
// * A **RouteTable** which both *defines a route* and *delegates to* another **RouteTable**.
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: RouteTable
// metadata:
//
//	name: 'c-routes'
//	namespace: 'c'
//
// spec:
//
//	routes:
//	  - matchers:
//	    - exact: '/b/c/4'
//	    routeAction:
//	      single:
//	        upstream:
//	          name: 'qux-upstream'
//
// ```
//
// * A RouteTable which is a child of another route table.
//
// Would produce the following route config for `mydomain.com`:
//
// ```
// /a/1 -> foo-upstream
// /a/2 -> bar-upstream
// /b/3 -> baz-upstream
// /b/c/4 -> qux-upstream
// ```
type RouteTable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of routes for the route table
	Routes []*Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	// When a delegated route in a VirtualService or RouteTable defines a `RouteTableSelector` that matches
	// multiple route tables, Gloo will inspect this field to determine the order in which
	// the route tables are to be evaluated. This determines the order in which
	// the routes will appear on the final `Proxy` resource. The field is optional; if no value is specified, the weight
	// defaults to 0 (zero). Note that this field is ignored if it is not used in a route delegation scenario.
	//
	// Gloo will process the route tables matched by a selector in ascending order by weight and collect the routes of
	// each route table in the order they are defined. If multiple route tables define the same weight, Gloo will sort the
	// routes which belong to those tables to avoid short-circuiting (e.g. making sure `/foo/bar` comes before `/foo`).
	// In this scenario, Gloo will also alert the user by adding a warning to the status of the parent resource
	// (the one that specifies the `RouteTableSelector`).
	Weight *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// NamespacedStatuses indicates the validation status of this resource.
	// NamespacedStatuses is read-only by clients, and set by gateway during validation
	NamespacedStatuses *core.NamespacedStatuses `protobuf:"bytes,8,opt,name=namespaced_statuses,json=namespacedStatuses,proto3" json:"namespaced_statuses,omitempty"`
	// Metadata contains the object metadata for this resource
	Metadata      *core.Metadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteTable) Reset() {
	*x = RouteTable{}
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTable) ProtoMessage() {}

func (x *RouteTable) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTable.ProtoReflect.Descriptor instead.
func (*RouteTable) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_rawDescGZIP(), []int{0}
}

func (x *RouteTable) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *RouteTable) GetWeight() *wrapperspb.Int32Value {
	if x != nil {
		return x.Weight
	}
	return nil
}

func (x *RouteTable) GetNamespacedStatuses() *core.NamespacedStatuses {
	if x != nil {
		return x.NamespacedStatuses
	}
	return nil
}

func (x *RouteTable) GetMetadata() *core.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_rawDesc = "" +
	"\n" +
	"Agithub.com/solo-io/gloo/projects/gateway/api/v1/route_table.proto\x12\x0fgateway.solo.io\x1a\x12extproto/ext.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a1github.com/solo-io/solo-kit/api/v1/metadata.proto\x1a/github.com/solo-io/solo-kit/api/v1/status.proto\x1a1github.com/solo-io/solo-kit/api/v1/solo-kit.proto\x1aEgithub.com/solo-io/gloo/projects/gateway/api/v1/virtual_service.proto\"\x9c\x02\n" +
	"\n" +
	"RouteTable\x12.\n" +
	"\x06routes\x18\x01 \x03(\v2\x16.gateway.solo.io.RouteR\x06routes\x123\n" +
	"\x06weight\x18\x02 \x01(\v2\x1b.google.protobuf.Int32ValueR\x06weight\x12W\n" +
	"\x13namespaced_statuses\x18\b \x01(\v2 .core.solo.io.NamespacedStatusesB\x04\xb8\xf5\x04\x01R\x12namespacedStatuses\x122\n" +
	"\bmetadata\x18\a \x01(\v2\x16.core.solo.io.MetadataR\bmetadata:\x16\x82\xf1\x04\x12\n" +
	"\x02rt\x12\froute_tablesJ\x04\b\x06\x10\aBA\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z3github.com/solo-io/gloo/projects/gateway/pkg/api/v1b\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_goTypes = []any{
	(*RouteTable)(nil),              // 0: gateway.solo.io.RouteTable
	(*Route)(nil),                   // 1: gateway.solo.io.Route
	(*wrapperspb.Int32Value)(nil),   // 2: google.protobuf.Int32Value
	(*core.NamespacedStatuses)(nil), // 3: core.solo.io.NamespacedStatuses
	(*core.Metadata)(nil),           // 4: core.solo.io.Metadata
}
var file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_depIdxs = []int32{
	1, // 0: gateway.solo.io.RouteTable.routes:type_name -> gateway.solo.io.Route
	2, // 1: gateway.solo.io.RouteTable.weight:type_name -> google.protobuf.Int32Value
	3, // 2: gateway.solo.io.RouteTable.namespaced_statuses:type_name -> core.solo.io.NamespacedStatuses
	4, // 3: gateway.solo.io.RouteTable.metadata:type_name -> core.solo.io.Metadata
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_init() }
func file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_init() {
	if File_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gateway_api_v1_virtual_service_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto = out.File
	file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gateway_api_v1_route_table_proto_depIdxs = nil
}
