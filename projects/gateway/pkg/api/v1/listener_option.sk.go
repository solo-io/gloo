// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"log"
	"sort"

	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"github.com/solo-io/solo-kit/pkg/utils/statusutils"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

var (
	// Compile-time assertion
	_ resources.InputResource = new(ListenerOption)
)

func NewListenerOptionHashableResource() resources.HashableResource {
	return new(ListenerOption)
}

func NewListenerOption(namespace, name string) *ListenerOption {
	listeneroption := &ListenerOption{}
	listeneroption.SetMetadata(&core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return listeneroption
}

func (r *ListenerOption) SetMetadata(meta *core.Metadata) {
	r.Metadata = meta
}

// Deprecated
func (r *ListenerOption) SetStatus(status *core.Status) {
	statusutils.SetSingleStatusInNamespacedStatuses(r, status)
}

// Deprecated
func (r *ListenerOption) GetStatus() *core.Status {
	if r != nil {
		return statusutils.GetSingleStatusInNamespacedStatuses(r)
	}
	return nil
}

func (r *ListenerOption) SetNamespacedStatuses(namespacedStatuses *core.NamespacedStatuses) {
	r.NamespacedStatuses = namespacedStatuses
}

func (r *ListenerOption) MustHash() uint64 {
	hashVal, err := r.Hash(nil)
	if err != nil {
		log.Panicf("error while hashing: (%s) this should never happen", err)
	}
	return hashVal
}

func (r *ListenerOption) GroupVersionKind() schema.GroupVersionKind {
	return ListenerOptionGVK
}

type ListenerOptionList []*ListenerOption

func (list ListenerOptionList) Find(namespace, name string) (*ListenerOption, error) {
	for _, listenerOption := range list {
		if listenerOption.GetMetadata().Name == name && listenerOption.GetMetadata().Namespace == namespace {
			return listenerOption, nil
		}
	}
	return nil, errors.Errorf("list did not find listenerOption %v.%v", namespace, name)
}

func (list ListenerOptionList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, listenerOption := range list {
		ress = append(ress, listenerOption)
	}
	return ress
}

func (list ListenerOptionList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, listenerOption := range list {
		ress = append(ress, listenerOption)
	}
	return ress
}

func (list ListenerOptionList) Names() []string {
	var names []string
	for _, listenerOption := range list {
		names = append(names, listenerOption.GetMetadata().Name)
	}
	return names
}

func (list ListenerOptionList) NamespacesDotNames() []string {
	var names []string
	for _, listenerOption := range list {
		names = append(names, listenerOption.GetMetadata().Namespace+"."+listenerOption.GetMetadata().Name)
	}
	return names
}

func (list ListenerOptionList) Sort() ListenerOptionList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list ListenerOptionList) Clone() ListenerOptionList {
	var listenerOptionList ListenerOptionList
	for _, listenerOption := range list {
		listenerOptionList = append(listenerOptionList, resources.Clone(listenerOption).(*ListenerOption))
	}
	return listenerOptionList
}

func (list ListenerOptionList) Each(f func(element *ListenerOption)) {
	for _, listenerOption := range list {
		f(listenerOption)
	}
}

func (list ListenerOptionList) EachResource(f func(element resources.Resource)) {
	for _, listenerOption := range list {
		f(listenerOption)
	}
}

func (list ListenerOptionList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *ListenerOption) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

// Kubernetes Adapter for ListenerOption

func (o *ListenerOption) GetObjectKind() schema.ObjectKind {
	t := ListenerOptionCrd.TypeMeta()
	return &t
}

func (o *ListenerOption) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*ListenerOption)
}

func (o *ListenerOption) DeepCopyInto(out *ListenerOption) {
	clone := resources.Clone(o).(*ListenerOption)
	*out = *clone
}

var (
	ListenerOptionCrd = crd.NewCrd(
		"listeneroptions",
		ListenerOptionGVK.Group,
		ListenerOptionGVK.Version,
		ListenerOptionGVK.Kind,
		"lisopts",
		false,
		&ListenerOption{})
)

var (
	ListenerOptionGVK = schema.GroupVersionKind{
		Version: "v1",
		Group:   "gateway.solo.io",
		Kind:    "ListenerOption",
	}
)
