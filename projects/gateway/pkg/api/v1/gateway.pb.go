// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gateway/api/v1/gateway.proto

package v1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	v3 "github.com/solo-io/gloo/projects/gloo/pkg/api/external/envoy/config/core/v3"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	selectors "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/core/selectors"
	hcm "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/options/hcm"
	ssl "github.com/solo-io/gloo/projects/gloo/pkg/api/v1/ssl"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A Gateway describes a single Listener (bind address:port)
// and the routing configuration to upstreams that are reachable via a specific port on the Gateway Proxy itself.
type Gateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// if set to false, only use virtual services without ssl configured.
	// if set to true, only use virtual services with ssl configured.
	// this field is ignored if GatewayType is HybridGateway.
	Ssl bool `protobuf:"varint,1,opt,name=ssl,proto3" json:"ssl,omitempty"`
	// the bind address the gateway should serve traffic on
	BindAddress string `protobuf:"bytes,3,opt,name=bind_address,json=bindAddress,proto3" json:"bind_address,omitempty"`
	// bind ports must not conflict across gateways for a single proxy
	BindPort uint32 `protobuf:"varint,4,opt,name=bind_port,json=bindPort,proto3" json:"bind_port,omitempty"`
	// top level optional configuration for all routes on the gateway
	Options *v1.ListenerOptions `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	// NamespacedStatuses indicates the validation status of this resource.
	// NamespacedStatuses is read-only by clients, and set by gateway during validation
	NamespacedStatuses *core.NamespacedStatuses `protobuf:"bytes,14,opt,name=namespaced_statuses,json=namespacedStatuses,proto3" json:"namespaced_statuses,omitempty"`
	// Metadata contains the object metadata for this resource
	Metadata *core.Metadata `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Enable ProxyProtocol support for this listener.
	// Deprecated: prefer setting the listener option.
	// If configured, the listener option (filter config) overrides any setting here.
	//
	// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gateway/api/v1/gateway.proto.
	UseProxyProto *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=use_proxy_proto,json=useProxyProto,proto3" json:"use_proxy_proto,omitempty"`
	// The type of gateway being created
	// HttpGateway creates a listener with an http_connection_manager
	// TcpGateway creates a listener with a tcp proxy filter
	// HybridGateway creates a listener with any number of filter chains that each may have either an http_connection_manager or a tcp proxy filter
	//
	// Types that are valid to be assigned to GatewayType:
	//
	//	*Gateway_HttpGateway
	//	*Gateway_TcpGateway
	//	*Gateway_HybridGateway
	GatewayType isGateway_GatewayType `protobuf_oneof:"GatewayType"`
	// Names of the [`Proxy`](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/proxy.proto.sk/)
	// resources to generate from this gateway. If other gateways exist which point to the same proxy,
	// Gloo will join them together.
	//
	// Proxies have a one-to-many relationship with Envoy bootstrap configuration.
	// In order to connect to Gloo, the Envoy bootstrap configuration sets a `role` in
	// the [node metadata](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/base.proto#envoy-api-msg-core-node)
	// Envoy instances announce their `role` to Gloo, which maps to the  `{{ .Namespace }}~{{ .Name }}`
	// of the Proxy resource.
	//
	// The template for this value can be seen in the [Gloo Helm chart](https://github.com/solo-io/gloo/blob/main/install/helm/gloo/templates/9-gateway-proxy-configmap.yaml#L22)
	//
	// Note: this field also accepts fields written in camel-case. They will be converted
	// to kebab-case in the Proxy name. This allows use of the [Gateway Name Helm value](https://github.com/solo-io/gloo/blob/main/install/helm/gloo/values-gateway-template.yaml#L47)
	// for this field
	//
	// Defaults to `["gateway-proxy"]`
	ProxyNames []string `protobuf:"bytes,12,rep,name=proxy_names,json=proxyNames,proto3" json:"proxy_names,omitempty"`
	// Route configuration options that live under Envoy's [RouteConfigurationOptions](https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto#config-route-v3-routeconfiguration)
	RouteOptions  *v1.RouteConfigurationOptions `protobuf:"bytes,13,opt,name=route_options,json=routeOptions,proto3" json:"route_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gateway) Reset() {
	*x = Gateway{}
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway) ProtoMessage() {}

func (x *Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway.ProtoReflect.Descriptor instead.
func (*Gateway) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *Gateway) GetSsl() bool {
	if x != nil {
		return x.Ssl
	}
	return false
}

func (x *Gateway) GetBindAddress() string {
	if x != nil {
		return x.BindAddress
	}
	return ""
}

func (x *Gateway) GetBindPort() uint32 {
	if x != nil {
		return x.BindPort
	}
	return 0
}

func (x *Gateway) GetOptions() *v1.ListenerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Gateway) GetNamespacedStatuses() *core.NamespacedStatuses {
	if x != nil {
		return x.NamespacedStatuses
	}
	return nil
}

func (x *Gateway) GetMetadata() *core.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Deprecated: Marked as deprecated in github.com/solo-io/gloo/projects/gateway/api/v1/gateway.proto.
func (x *Gateway) GetUseProxyProto() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseProxyProto
	}
	return nil
}

func (x *Gateway) GetGatewayType() isGateway_GatewayType {
	if x != nil {
		return x.GatewayType
	}
	return nil
}

func (x *Gateway) GetHttpGateway() *HttpGateway {
	if x != nil {
		if x, ok := x.GatewayType.(*Gateway_HttpGateway); ok {
			return x.HttpGateway
		}
	}
	return nil
}

func (x *Gateway) GetTcpGateway() *TcpGateway {
	if x != nil {
		if x, ok := x.GatewayType.(*Gateway_TcpGateway); ok {
			return x.TcpGateway
		}
	}
	return nil
}

func (x *Gateway) GetHybridGateway() *HybridGateway {
	if x != nil {
		if x, ok := x.GatewayType.(*Gateway_HybridGateway); ok {
			return x.HybridGateway
		}
	}
	return nil
}

func (x *Gateway) GetProxyNames() []string {
	if x != nil {
		return x.ProxyNames
	}
	return nil
}

func (x *Gateway) GetRouteOptions() *v1.RouteConfigurationOptions {
	if x != nil {
		return x.RouteOptions
	}
	return nil
}

type isGateway_GatewayType interface {
	isGateway_GatewayType()
}

type Gateway_HttpGateway struct {
	HttpGateway *HttpGateway `protobuf:"bytes,9,opt,name=http_gateway,json=httpGateway,proto3,oneof"`
}

type Gateway_TcpGateway struct {
	TcpGateway *TcpGateway `protobuf:"bytes,10,opt,name=tcp_gateway,json=tcpGateway,proto3,oneof"`
}

type Gateway_HybridGateway struct {
	HybridGateway *HybridGateway `protobuf:"bytes,11,opt,name=hybrid_gateway,json=hybridGateway,proto3,oneof"`
}

func (*Gateway_HttpGateway) isGateway_GatewayType() {}

func (*Gateway_TcpGateway) isGateway_GatewayType() {}

func (*Gateway_HybridGateway) isGateway_GatewayType() {}

type TcpGateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// TCP hosts that the gateway can route to
	TcpHosts []*v1.TcpHost `protobuf:"bytes,1,rep,name=tcp_hosts,json=tcpHosts,proto3" json:"tcp_hosts,omitempty"`
	// TCP Gateway configuration
	Options       *v1.TcpListenerOptions `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpGateway) Reset() {
	*x = TcpGateway{}
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpGateway) ProtoMessage() {}

func (x *TcpGateway) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpGateway.ProtoReflect.Descriptor instead.
func (*TcpGateway) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *TcpGateway) GetTcpHosts() []*v1.TcpHost {
	if x != nil {
		return x.TcpHosts
	}
	return nil
}

func (x *TcpGateway) GetOptions() *v1.TcpListenerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type HybridGateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MatchedGateways can be used to define both HttpGateways and TcpGateways directly on the Gateway resource.
	// If `MatchedGateways` is provided, then `DelegatedHttpGateways` and `DelegatedTcpGateways` are ignored.
	MatchedGateways []*MatchedGateway `protobuf:"bytes,1,rep,name=matched_gateways,json=matchedGateways,proto3" json:"matched_gateways,omitempty"`
	// DelegatedHttpGateways can be used to configure multiple HttpGateways
	// using the MatchableHttpGateway CR and select them on this Gateway
	// using a resourceRef or label selection.
	// If `MatchedGateways` is provided, then `DelegatedHttpGateways` is ignored.
	DelegatedHttpGateways *DelegatedHttpGateway `protobuf:"bytes,2,opt,name=delegated_http_gateways,json=delegatedHttpGateways,proto3" json:"delegated_http_gateways,omitempty"`
	// DelegatedTcpGateways can be used to configure multiple TcpGateways
	// using the MatchableTcpGateway CR and select them on this Gateway
	// using a resourceRef or label selection.
	// If `MatchedGateways` is provided, then `DelegatedTcpGateways` is ignored.
	DelegatedTcpGateways *DelegatedTcpGateway `protobuf:"bytes,3,opt,name=delegated_tcp_gateways,json=delegatedTcpGateways,proto3" json:"delegated_tcp_gateways,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *HybridGateway) Reset() {
	*x = HybridGateway{}
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridGateway) ProtoMessage() {}

func (x *HybridGateway) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridGateway.ProtoReflect.Descriptor instead.
func (*HybridGateway) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *HybridGateway) GetMatchedGateways() []*MatchedGateway {
	if x != nil {
		return x.MatchedGateways
	}
	return nil
}

func (x *HybridGateway) GetDelegatedHttpGateways() *DelegatedHttpGateway {
	if x != nil {
		return x.DelegatedHttpGateways
	}
	return nil
}

func (x *HybridGateway) GetDelegatedTcpGateways() *DelegatedTcpGateway {
	if x != nil {
		return x.DelegatedTcpGateways
	}
	return nil
}

type DelegatedHttpGateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// How to select MatchableHttpGateways
	//
	// Types that are valid to be assigned to SelectionType:
	//
	//	*DelegatedHttpGateway_Ref
	//	*DelegatedHttpGateway_Selector
	SelectionType isDelegatedHttpGateway_SelectionType `protobuf_oneof:"selection_type"`
	// Used as a meta modifier to the `http_connection_manager_settings` and `ssl_config` fields in a DelegatedHttpGateway.  When set, provided ancestor config cannot be overriden by matched HttpGateways.
	// Useful in a multi-team context, where a controlling team managing a primary Gateway file may want to lock down specific functionality
	// from other teams.
	//
	// For example: (DelegatedHttpGateway, MatchableHttpGateway) = {"a": "a1", "b": "b1"}, {"b": "b2", "c": "c2"}
	// When true:    get_config(MatchableHttpGateway) --> {"a": "a1", "b": "b1", "c": "c2"}
	// When false:   get_config(MatchableHttpGateway) --> {"a": "a1", "b": "b2", "c": "c2"}
	PreventChildOverrides bool `protobuf:"varint,5,opt,name=prevent_child_overrides,json=preventChildOverrides,proto3" json:"prevent_child_overrides,omitempty"`
	// Anscestry-level HTTP Gateway configuration.  Options specified here will be passed down to each `MatchableHttpGateway` that is matched via `selector` or `ref`.  Ultimately, said options will be consumed by instances of `MatchableHttpGateway.http_gateway`
	HttpConnectionManagerSettings *hcm.HttpConnectionManagerSettings `protobuf:"bytes,6,opt,name=http_connection_manager_settings,json=httpConnectionManagerSettings,proto3" json:"http_connection_manager_settings,omitempty"`
	// Anscestry-level TLS/SSL traffic configuration.  Options specified here will be passed down to each `MatchableHttpGateway` that is matched via `selector` or `ref`.  From there, they are passed to all VirtualServices associated with said `MatchableHttpGateway`s.
	SslConfig     *ssl.SslConfig `protobuf:"bytes,2,opt,name=ssl_config,json=sslConfig,proto3" json:"ssl_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelegatedHttpGateway) Reset() {
	*x = DelegatedHttpGateway{}
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelegatedHttpGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatedHttpGateway) ProtoMessage() {}

func (x *DelegatedHttpGateway) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatedHttpGateway.ProtoReflect.Descriptor instead.
func (*DelegatedHttpGateway) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *DelegatedHttpGateway) GetSelectionType() isDelegatedHttpGateway_SelectionType {
	if x != nil {
		return x.SelectionType
	}
	return nil
}

func (x *DelegatedHttpGateway) GetRef() *core.ResourceRef {
	if x != nil {
		if x, ok := x.SelectionType.(*DelegatedHttpGateway_Ref); ok {
			return x.Ref
		}
	}
	return nil
}

func (x *DelegatedHttpGateway) GetSelector() *selectors.Selector {
	if x != nil {
		if x, ok := x.SelectionType.(*DelegatedHttpGateway_Selector); ok {
			return x.Selector
		}
	}
	return nil
}

func (x *DelegatedHttpGateway) GetPreventChildOverrides() bool {
	if x != nil {
		return x.PreventChildOverrides
	}
	return false
}

func (x *DelegatedHttpGateway) GetHttpConnectionManagerSettings() *hcm.HttpConnectionManagerSettings {
	if x != nil {
		return x.HttpConnectionManagerSettings
	}
	return nil
}

func (x *DelegatedHttpGateway) GetSslConfig() *ssl.SslConfig {
	if x != nil {
		return x.SslConfig
	}
	return nil
}

type isDelegatedHttpGateway_SelectionType interface {
	isDelegatedHttpGateway_SelectionType()
}

type DelegatedHttpGateway_Ref struct {
	// Delegate to the resource with the given `name` and `namespace.
	Ref *core.ResourceRef `protobuf:"bytes,3,opt,name=ref,proto3,oneof"`
}

type DelegatedHttpGateway_Selector struct {
	// Delegate to the MatchableHttpGateways that match the given selector.
	Selector *selectors.Selector `protobuf:"bytes,4,opt,name=selector,proto3,oneof"`
}

func (*DelegatedHttpGateway_Ref) isDelegatedHttpGateway_SelectionType() {}

func (*DelegatedHttpGateway_Selector) isDelegatedHttpGateway_SelectionType() {}

type DelegatedTcpGateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// How to select MatchableTcpGateways
	//
	// Types that are valid to be assigned to SelectionType:
	//
	//	*DelegatedTcpGateway_Ref
	//	*DelegatedTcpGateway_Selector
	SelectionType isDelegatedTcpGateway_SelectionType `protobuf_oneof:"selection_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DelegatedTcpGateway) Reset() {
	*x = DelegatedTcpGateway{}
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelegatedTcpGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatedTcpGateway) ProtoMessage() {}

func (x *DelegatedTcpGateway) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatedTcpGateway.ProtoReflect.Descriptor instead.
func (*DelegatedTcpGateway) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *DelegatedTcpGateway) GetSelectionType() isDelegatedTcpGateway_SelectionType {
	if x != nil {
		return x.SelectionType
	}
	return nil
}

func (x *DelegatedTcpGateway) GetRef() *core.ResourceRef {
	if x != nil {
		if x, ok := x.SelectionType.(*DelegatedTcpGateway_Ref); ok {
			return x.Ref
		}
	}
	return nil
}

func (x *DelegatedTcpGateway) GetSelector() *selectors.Selector {
	if x != nil {
		if x, ok := x.SelectionType.(*DelegatedTcpGateway_Selector); ok {
			return x.Selector
		}
	}
	return nil
}

type isDelegatedTcpGateway_SelectionType interface {
	isDelegatedTcpGateway_SelectionType()
}

type DelegatedTcpGateway_Ref struct {
	// Delegate to the resource with the given `name` and `namespace.
	Ref *core.ResourceRef `protobuf:"bytes,1,opt,name=ref,proto3,oneof"`
}

type DelegatedTcpGateway_Selector struct {
	// Delegate to the MatchableTcpGateways that match the given selector.
	Selector *selectors.Selector `protobuf:"bytes,2,opt,name=selector,proto3,oneof"`
}

func (*DelegatedTcpGateway_Ref) isDelegatedTcpGateway_SelectionType() {}

func (*DelegatedTcpGateway_Selector) isDelegatedTcpGateway_SelectionType() {}

type MatchedGateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Matchers are used to define unique matching criteria for each MatchedGateway
	// Each MatchedGateway within a HybridGateway must have a unique Matcher
	// If multiple matchers in a HybridGateway are identical, the HybridGateway will not be accepted
	// Empty Matchers are effectively catch-alls, and there can be no more than one empty Matcher per HybridGateway
	Matcher *Matcher `protobuf:"bytes,1,opt,name=matcher,proto3" json:"matcher,omitempty"`
	// Types that are valid to be assigned to GatewayType:
	//
	//	*MatchedGateway_HttpGateway
	//	*MatchedGateway_TcpGateway
	GatewayType   isMatchedGateway_GatewayType `protobuf_oneof:"GatewayType"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MatchedGateway) Reset() {
	*x = MatchedGateway{}
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchedGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchedGateway) ProtoMessage() {}

func (x *MatchedGateway) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchedGateway.ProtoReflect.Descriptor instead.
func (*MatchedGateway) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *MatchedGateway) GetMatcher() *Matcher {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *MatchedGateway) GetGatewayType() isMatchedGateway_GatewayType {
	if x != nil {
		return x.GatewayType
	}
	return nil
}

func (x *MatchedGateway) GetHttpGateway() *HttpGateway {
	if x != nil {
		if x, ok := x.GatewayType.(*MatchedGateway_HttpGateway); ok {
			return x.HttpGateway
		}
	}
	return nil
}

func (x *MatchedGateway) GetTcpGateway() *TcpGateway {
	if x != nil {
		if x, ok := x.GatewayType.(*MatchedGateway_TcpGateway); ok {
			return x.TcpGateway
		}
	}
	return nil
}

type isMatchedGateway_GatewayType interface {
	isMatchedGateway_GatewayType()
}

type MatchedGateway_HttpGateway struct {
	HttpGateway *HttpGateway `protobuf:"bytes,2,opt,name=http_gateway,json=httpGateway,proto3,oneof"`
}

type MatchedGateway_TcpGateway struct {
	TcpGateway *TcpGateway `protobuf:"bytes,3,opt,name=tcp_gateway,json=tcpGateway,proto3,oneof"`
}

func (*MatchedGateway_HttpGateway) isMatchedGateway_GatewayType() {}

func (*MatchedGateway_TcpGateway) isMatchedGateway_GatewayType() {}

type Matcher struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gloo use SNI domains as matching criteria for Gateway selection
	// The other ssl_config properties will be applied to the outputFilterChain's transport socket
	// SslConfig from VirtualServices will be ignored in a MatchedGateway
	SslConfig *ssl.SslConfig `protobuf:"bytes,1,opt,name=ssl_config,json=sslConfig,proto3" json:"ssl_config,omitempty"`
	// CidrRange specifies an IP Address and a prefix length to construct the subnet mask for a CIDR range.
	// See https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/address.proto#envoy-v3-api-msg-config-core-v3-cidrrange
	SourcePrefixRanges []*v3.CidrRange `protobuf:"bytes,2,rep,name=source_prefix_ranges,json=sourcePrefixRanges,proto3" json:"source_prefix_ranges,omitempty"`
	// Enterprise-only: Passthrough cipher suites is an allow-list of OpenSSL cipher suite names for which TLS passthrough will be enabled.
	// If a client does not support any ciphers that are natively supported by Envoy, but does support one of the ciphers in the passthrough list,
	// then traffic will be routed via TCP Proxy to a destination specified by the TcpGateway, where TLS can then be terminated.
	// This field is only applicable to TcpGateways.
	PassthroughCipherSuites []string `protobuf:"bytes,3,rep,name=passthrough_cipher_suites,json=passthroughCipherSuites,proto3" json:"passthrough_cipher_suites,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Matcher) Reset() {
	*x = Matcher{}
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Matcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matcher) ProtoMessage() {}

func (x *Matcher) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matcher.ProtoReflect.Descriptor instead.
func (*Matcher) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *Matcher) GetSslConfig() *ssl.SslConfig {
	if x != nil {
		return x.SslConfig
	}
	return nil
}

func (x *Matcher) GetSourcePrefixRanges() []*v3.CidrRange {
	if x != nil {
		return x.SourcePrefixRanges
	}
	return nil
}

func (x *Matcher) GetPassthroughCipherSuites() []string {
	if x != nil {
		return x.PassthroughCipherSuites
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDesc = "" +
	"\n" +
	"=github.com/solo-io/gloo/projects/gateway/api/v1/gateway.proto\x12\x0fgateway.solo.io\x1a\x12extproto/ext.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a1github.com/solo-io/solo-kit/api/v1/metadata.proto\x1a/github.com/solo-io/solo-kit/api/v1/status.proto\x1a,github.com/solo-io/solo-kit/api/v1/ref.proto\x1a1github.com/solo-io/solo-kit/api/v1/solo-kit.proto\x1aBgithub.com/solo-io/gloo/projects/gateway/api/v1/http_gateway.proto\x1a8github.com/solo-io/gloo/projects/gloo/api/v1/proxy.proto\x1aCgithub.com/solo-io/gloo/projects/gloo/api/v1/listener_options.proto\x1aGgithub.com/solo-io/gloo/projects/gloo/api/v1/tcp_listener_options.proto\x1aNgithub.com/solo-io/gloo/projects/gloo/api/v1/route_configuration_options.proto\x1aBgithub.com/solo-io/gloo/projects/gloo/api/v1/options/hcm/hcm.proto\x1a:github.com/solo-io/gloo/projects/gloo/api/v1/ssl/ssl.proto\x1aKgithub.com/solo-io/gloo/projects/gloo/api/v1/core/selectors/selectors.proto\x1aUgithub.com/solo-io/gloo/projects/gloo/api/external/envoy/config/core/v3/address.proto\"\xcd\x05\n" +
	"\aGateway\x12\x10\n" +
	"\x03ssl\x18\x01 \x01(\bR\x03ssl\x12!\n" +
	"\fbind_address\x18\x03 \x01(\tR\vbindAddress\x12\x1b\n" +
	"\tbind_port\x18\x04 \x01(\rR\bbindPort\x127\n" +
	"\aoptions\x18\x05 \x01(\v2\x1d.gloo.solo.io.ListenerOptionsR\aoptions\x12W\n" +
	"\x13namespaced_statuses\x18\x0e \x01(\v2 .core.solo.io.NamespacedStatusesB\x04\xb8\xf5\x04\x01R\x12namespacedStatuses\x122\n" +
	"\bmetadata\x18\a \x01(\v2\x16.core.solo.io.MetadataR\bmetadata\x12F\n" +
	"\x0fuse_proxy_proto\x18\b \x01(\v2\x1a.google.protobuf.BoolValueB\x02\x18\x01R\ruseProxyProto\x12A\n" +
	"\fhttp_gateway\x18\t \x01(\v2\x1c.gateway.solo.io.HttpGatewayH\x00R\vhttpGateway\x12>\n" +
	"\vtcp_gateway\x18\n" +
	" \x01(\v2\x1b.gateway.solo.io.TcpGatewayH\x00R\n" +
	"tcpGateway\x12G\n" +
	"\x0ehybrid_gateway\x18\v \x01(\v2\x1e.gateway.solo.io.HybridGatewayH\x00R\rhybridGateway\x12\x1f\n" +
	"\vproxy_names\x18\f \x03(\tR\n" +
	"proxyNames\x12L\n" +
	"\rroute_options\x18\r \x01(\v2'.gloo.solo.io.RouteConfigurationOptionsR\frouteOptions:\x12\x82\xf1\x04\x0e\n" +
	"\x02gw\x12\bgatewaysB\r\n" +
	"\vGatewayTypeJ\x04\b\x06\x10\a\"|\n" +
	"\n" +
	"TcpGateway\x122\n" +
	"\ttcp_hosts\x18\x01 \x03(\v2\x15.gloo.solo.io.TcpHostR\btcpHosts\x12:\n" +
	"\aoptions\x18\b \x01(\v2 .gloo.solo.io.TcpListenerOptionsR\aoptions\"\x96\x02\n" +
	"\rHybridGateway\x12J\n" +
	"\x10matched_gateways\x18\x01 \x03(\v2\x1f.gateway.solo.io.MatchedGatewayR\x0fmatchedGateways\x12]\n" +
	"\x17delegated_http_gateways\x18\x02 \x01(\v2%.gateway.solo.io.DelegatedHttpGatewayR\x15delegatedHttpGateways\x12Z\n" +
	"\x16delegated_tcp_gateways\x18\x03 \x01(\v2$.gateway.solo.io.DelegatedTcpGatewayR\x14delegatedTcpGateways\"\x8f\x03\n" +
	"\x14DelegatedHttpGateway\x12-\n" +
	"\x03ref\x18\x03 \x01(\v2\x19.core.solo.io.ResourceRefH\x00R\x03ref\x12C\n" +
	"\bselector\x18\x04 \x01(\v2%.selectors.core.gloo.solo.io.SelectorH\x00R\bselector\x126\n" +
	"\x17prevent_child_overrides\x18\x05 \x01(\bR\x15preventChildOverrides\x12\x80\x01\n" +
	" http_connection_manager_settings\x18\x06 \x01(\v27.hcm.options.gloo.solo.io.HttpConnectionManagerSettingsR\x1dhttpConnectionManagerSettings\x126\n" +
	"\n" +
	"ssl_config\x18\x02 \x01(\v2\x17.gloo.solo.io.SslConfigR\tsslConfigB\x10\n" +
	"\x0eselection_type\"\x9b\x01\n" +
	"\x13DelegatedTcpGateway\x12-\n" +
	"\x03ref\x18\x01 \x01(\v2\x19.core.solo.io.ResourceRefH\x00R\x03ref\x12C\n" +
	"\bselector\x18\x02 \x01(\v2%.selectors.core.gloo.solo.io.SelectorH\x00R\bselectorB\x10\n" +
	"\x0eselection_type\"\xd6\x01\n" +
	"\x0eMatchedGateway\x122\n" +
	"\amatcher\x18\x01 \x01(\v2\x18.gateway.solo.io.MatcherR\amatcher\x12A\n" +
	"\fhttp_gateway\x18\x02 \x01(\v2\x1c.gateway.solo.io.HttpGatewayH\x00R\vhttpGateway\x12>\n" +
	"\vtcp_gateway\x18\x03 \x01(\v2\x1b.gateway.solo.io.TcpGatewayH\x00R\n" +
	"tcpGatewayB\r\n" +
	"\vGatewayType\"\xd8\x01\n" +
	"\aMatcher\x126\n" +
	"\n" +
	"ssl_config\x18\x01 \x01(\v2\x17.gloo.solo.io.SslConfigR\tsslConfig\x12Y\n" +
	"\x14source_prefix_ranges\x18\x02 \x03(\v2'.solo.io.envoy.config.core.v3.CidrRangeR\x12sourcePrefixRanges\x12:\n" +
	"\x19passthrough_cipher_suites\x18\x03 \x03(\tR\x17passthroughCipherSuitesBA\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z3github.com/solo-io/gloo/projects/gateway/pkg/api/v1b\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_goTypes = []any{
	(*Gateway)(nil),                           // 0: gateway.solo.io.Gateway
	(*TcpGateway)(nil),                        // 1: gateway.solo.io.TcpGateway
	(*HybridGateway)(nil),                     // 2: gateway.solo.io.HybridGateway
	(*DelegatedHttpGateway)(nil),              // 3: gateway.solo.io.DelegatedHttpGateway
	(*DelegatedTcpGateway)(nil),               // 4: gateway.solo.io.DelegatedTcpGateway
	(*MatchedGateway)(nil),                    // 5: gateway.solo.io.MatchedGateway
	(*Matcher)(nil),                           // 6: gateway.solo.io.Matcher
	(*v1.ListenerOptions)(nil),                // 7: gloo.solo.io.ListenerOptions
	(*core.NamespacedStatuses)(nil),           // 8: core.solo.io.NamespacedStatuses
	(*core.Metadata)(nil),                     // 9: core.solo.io.Metadata
	(*wrapperspb.BoolValue)(nil),              // 10: google.protobuf.BoolValue
	(*HttpGateway)(nil),                       // 11: gateway.solo.io.HttpGateway
	(*v1.RouteConfigurationOptions)(nil),      // 12: gloo.solo.io.RouteConfigurationOptions
	(*v1.TcpHost)(nil),                        // 13: gloo.solo.io.TcpHost
	(*v1.TcpListenerOptions)(nil),             // 14: gloo.solo.io.TcpListenerOptions
	(*core.ResourceRef)(nil),                  // 15: core.solo.io.ResourceRef
	(*selectors.Selector)(nil),                // 16: selectors.core.gloo.solo.io.Selector
	(*hcm.HttpConnectionManagerSettings)(nil), // 17: hcm.options.gloo.solo.io.HttpConnectionManagerSettings
	(*ssl.SslConfig)(nil),                     // 18: gloo.solo.io.SslConfig
	(*v3.CidrRange)(nil),                      // 19: solo.io.envoy.config.core.v3.CidrRange
}
var file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_depIdxs = []int32{
	7,  // 0: gateway.solo.io.Gateway.options:type_name -> gloo.solo.io.ListenerOptions
	8,  // 1: gateway.solo.io.Gateway.namespaced_statuses:type_name -> core.solo.io.NamespacedStatuses
	9,  // 2: gateway.solo.io.Gateway.metadata:type_name -> core.solo.io.Metadata
	10, // 3: gateway.solo.io.Gateway.use_proxy_proto:type_name -> google.protobuf.BoolValue
	11, // 4: gateway.solo.io.Gateway.http_gateway:type_name -> gateway.solo.io.HttpGateway
	1,  // 5: gateway.solo.io.Gateway.tcp_gateway:type_name -> gateway.solo.io.TcpGateway
	2,  // 6: gateway.solo.io.Gateway.hybrid_gateway:type_name -> gateway.solo.io.HybridGateway
	12, // 7: gateway.solo.io.Gateway.route_options:type_name -> gloo.solo.io.RouteConfigurationOptions
	13, // 8: gateway.solo.io.TcpGateway.tcp_hosts:type_name -> gloo.solo.io.TcpHost
	14, // 9: gateway.solo.io.TcpGateway.options:type_name -> gloo.solo.io.TcpListenerOptions
	5,  // 10: gateway.solo.io.HybridGateway.matched_gateways:type_name -> gateway.solo.io.MatchedGateway
	3,  // 11: gateway.solo.io.HybridGateway.delegated_http_gateways:type_name -> gateway.solo.io.DelegatedHttpGateway
	4,  // 12: gateway.solo.io.HybridGateway.delegated_tcp_gateways:type_name -> gateway.solo.io.DelegatedTcpGateway
	15, // 13: gateway.solo.io.DelegatedHttpGateway.ref:type_name -> core.solo.io.ResourceRef
	16, // 14: gateway.solo.io.DelegatedHttpGateway.selector:type_name -> selectors.core.gloo.solo.io.Selector
	17, // 15: gateway.solo.io.DelegatedHttpGateway.http_connection_manager_settings:type_name -> hcm.options.gloo.solo.io.HttpConnectionManagerSettings
	18, // 16: gateway.solo.io.DelegatedHttpGateway.ssl_config:type_name -> gloo.solo.io.SslConfig
	15, // 17: gateway.solo.io.DelegatedTcpGateway.ref:type_name -> core.solo.io.ResourceRef
	16, // 18: gateway.solo.io.DelegatedTcpGateway.selector:type_name -> selectors.core.gloo.solo.io.Selector
	6,  // 19: gateway.solo.io.MatchedGateway.matcher:type_name -> gateway.solo.io.Matcher
	11, // 20: gateway.solo.io.MatchedGateway.http_gateway:type_name -> gateway.solo.io.HttpGateway
	1,  // 21: gateway.solo.io.MatchedGateway.tcp_gateway:type_name -> gateway.solo.io.TcpGateway
	18, // 22: gateway.solo.io.Matcher.ssl_config:type_name -> gloo.solo.io.SslConfig
	19, // 23: gateway.solo.io.Matcher.source_prefix_ranges:type_name -> solo.io.envoy.config.core.v3.CidrRange
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_init() }
func file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_init() {
	if File_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_projects_gateway_api_v1_http_gateway_proto_init()
	file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[0].OneofWrappers = []any{
		(*Gateway_HttpGateway)(nil),
		(*Gateway_TcpGateway)(nil),
		(*Gateway_HybridGateway)(nil),
	}
	file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[3].OneofWrappers = []any{
		(*DelegatedHttpGateway_Ref)(nil),
		(*DelegatedHttpGateway_Selector)(nil),
	}
	file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[4].OneofWrappers = []any{
		(*DelegatedTcpGateway_Ref)(nil),
		(*DelegatedTcpGateway_Selector)(nil),
	}
	file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes[5].OneofWrappers = []any{
		(*MatchedGateway_HttpGateway)(nil),
		(*MatchedGateway_TcpGateway)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto = out.File
	file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gateway_api_v1_gateway_proto_depIdxs = nil
}
