// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo/projects/gateway/api/v1/external_options.proto

package v1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	_ "github.com/golang/protobuf/ptypes/wrappers"
	v1 "github.com/solo-io/gloo/projects/gloo/pkg/api/v1"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The **VirtualHostOption** holds `options` configuration for a VirtualHost.
// VirtualHosts can inherit `options` config from `VirtualHostOption` objects by delegating to them.
//
// When a VirtualHost delegates to an external VirtualHostOptions object, any options config
// defined on the VirtualHost will override the external options config.
// Similarly, `VirtualHostOption`s which are delegated to first will get priority over following `VirtualHostOption`s.
//
// An example configuration with a VirtualService with its own options config and delegating to two VirtualHostOption objects:
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: VirtualService
// metadata:
//
//	name: http
//	namespace: gloo-system
//
// spec:
//
//	virtualHost:
//	  domains:
//	  - '*'
//	  options:
//	    headerManipulation:
//	      requestHeadersToRemove: ["header-from-vhost"]
//	  optionsConfigRefs:
//	    delegateOptions:
//	      - name: virtualhost-external-options-1
//	        namespace: opt-namespace
//	      - name: virtualhost-external-options-2
//	        namespace: opt-namespace
//
// ```
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: VirtualHostOption
// metadata:
//
//	name: virtualhost-external-options-1
//	namespace: opt-namespace
//
// spec:
//
//	options:
//	  headerManipulation:
//	    requestHeadersToRemove: ["header-from-external-options1"]
//	  cors:
//	    exposeHeaders:
//	      - header-from-extopt1
//	    allowOrigin:
//	      - 'https://solo.io'
//
// ```
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: VirtualHostOption
// metadata:
//
//	name: virtualhost-external-options-2
//	namespace: opt-namespace
//
// spec:
//
//	options:
//	  headerManipulation:
//	    requestHeadersToRemove: ["header-from-external-options2"]
//	  cors:
//	    exposeHeaders:
//	      - header-from-extopt2
//	    maxAge: 2s
//	    allowOrigin:
//	      - 'https://solo.io'
//	  transformations:
//	    requestTransformation:
//	      transformationTemplate:
//	        headers:
//	          x-header-added-in-opt2:
//	            text: this header was added in the VirtualHostOption object - #2
//
// ```
//
// The final virtual host options (visible in the Proxy CR) would be:
// ```yaml
// spec:
//
//	virtualHost:
//	  domains:
//	  - '*'
//	  options:
//	    # from Virtual host options
//	    headerManipulation:
//	      requestHeadersToRemove: ["header-from-vhost"]
//	    # from delegated virtualhost-external-options-1
//	    cors:
//	      exposeHeaders:
//	        - header-from-extopt1
//	      allowOrigin:
//	        - 'https://solo.io'
//	    # from delegated virtualhost-external-options-2
//	    transformations:
//	      requestTransformation:
//	        transformationTemplate:
//	          headers:
//	            x-header-added-in-opt2:
//	              text: this header was added in the VirtualHostOption object - #2
//
// ```
//
// Notice how the order of VirtualHostOption delegations matters, and that the VirtualHost-level config overrides all delegated configs.
type VirtualHostOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// NamespacedStatuses indicates the validation status of this resource.
	// NamespacedStatuses is read-only by clients, and set by gateway during validation
	NamespacedStatuses *core.NamespacedStatuses `protobuf:"bytes,4,opt,name=namespaced_statuses,json=namespacedStatuses,proto3" json:"namespaced_statuses,omitempty"`
	// Metadata contains the object metadata for this resource
	Metadata *core.Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// VirtualHost options. See VirtualHost for delegation behavior.
	Options       *v1.VirtualHostOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VirtualHostOption) Reset() {
	*x = VirtualHostOption{}
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VirtualHostOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualHostOption) ProtoMessage() {}

func (x *VirtualHostOption) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualHostOption.ProtoReflect.Descriptor instead.
func (*VirtualHostOption) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_rawDescGZIP(), []int{0}
}

func (x *VirtualHostOption) GetNamespacedStatuses() *core.NamespacedStatuses {
	if x != nil {
		return x.NamespacedStatuses
	}
	return nil
}

func (x *VirtualHostOption) GetMetadata() *core.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VirtualHostOption) GetOptions() *v1.VirtualHostOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// The **RouteOption** holds `options` configuration for a Route.
// Routes can inherit `options` config from `RouteOption` objects by delegating to them.
//
// When a Route delegates to an external RouteOptions object, any options config
// defined on the Route will override the external options config.
// Similarly, `RouteOption`s which are delegated to first will get priority over following `RouteOption`s.
//
// An example configuration with a Route with its own options config and delegating to two RouteOption objects:
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: VirtualService
// metadata:
//
//	name: http
//	namespace: gloo-system
//
// spec:
//
//	virtualHost:
//	  domains:
//	  - '*'
//	  routes:
//	  - matchers:
//	    - prefix: /
//	    options:
//	      headerManipulation:
//	        requestHeadersToRemove: ["header-from-route"]
//	    optionsConfigRefs:
//	      delegateOptions:
//	        - name: route-external-options-1
//	          namespace: opt-namespace
//	        - name: route-external-options-2
//	          namespace: opt-namespace
//
// ```
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: RouteOption
// metadata:
//
//	name: route-external-options-1
//	namespace: opt-namespace
//
// spec:
//
//	options:
//	  headerManipulation:
//	    requestHeadersToRemove: ["header-from-external-options1"]
//	  cors:
//	    exposeHeaders:
//	      - header-from-extopt1
//	    allowOrigin:
//	      - 'https://solo.io'
//
// ```
//
// ```yaml
// apiVersion: gateway.solo.io/v1
// kind: RouteOption
// metadata:
//
//	name: route-external-options-2
//	namespace: opt-namespace
//
// spec:
//
//	options:
//	  headerManipulation:
//	    requestHeadersToRemove: ["header-from-external-options2"]
//	  cors:
//	    exposeHeaders:
//	      - header-from-extopt2
//	    maxAge: 2s
//	    allowOrigin:
//	      - 'https://solo.io'
//	  transformations:
//	    requestTransformation:
//	      transformationTemplate:
//	        headers:
//	          x-header-added-in-opt2:
//	            text: this header was added in the RouteOption object - #2
//
// ```
//
// The final route options would bewould be:
// ```yaml
// routes:
//   - matchers:
//   - prefix: /
//     options:
//     # from Route options
//     headerManipulation:
//     requestHeadersToRemove: ["header-from-route"]
//     # from delegated route-external-options-1
//     cors:
//     exposeHeaders:
//   - header-from-extopt1
//     allowOrigin:
//   - 'https://solo.io'
//     # from delegated route-external-options-2
//     transformations:
//     requestTransformation:
//     transformationTemplate:
//     headers:
//     x-header-added-in-opt2:
//     text: this header was added in the Route object - #2
//
// ```
//
// Notice how the order of RouteOption delegations matters, and that the Route-level option config overrides all delegated option configs.
type RouteOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// NamespacedStatuses indicates the validation status of this resource.
	// NamespacedStatuses is read-only by clients, and set by gateway during validation
	NamespacedStatuses *core.NamespacedStatuses `protobuf:"bytes,4,opt,name=namespaced_statuses,json=namespacedStatuses,proto3" json:"namespaced_statuses,omitempty"`
	// Metadata contains the object metadata for this resource
	Metadata *core.Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Route options. See Route for delegation behavior.
	Options       *v1.RouteOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteOption) Reset() {
	*x = RouteOption{}
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteOption) ProtoMessage() {}

func (x *RouteOption) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteOption.ProtoReflect.Descriptor instead.
func (*RouteOption) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_rawDescGZIP(), []int{1}
}

func (x *RouteOption) GetNamespacedStatuses() *core.NamespacedStatuses {
	if x != nil {
		return x.NamespacedStatuses
	}
	return nil
}

func (x *RouteOption) GetMetadata() *core.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RouteOption) GetOptions() *v1.RouteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

var File_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto protoreflect.FileDescriptor

const file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_rawDesc = "" +
	"\n" +
	"Fgithub.com/solo-io/gloo/projects/gateway/api/v1/external_options.proto\x12\x0fgateway.solo.io\x1a\x12extproto/ext.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a1github.com/solo-io/solo-kit/api/v1/metadata.proto\x1a/github.com/solo-io/solo-kit/api/v1/status.proto\x1a,github.com/solo-io/solo-kit/api/v1/ref.proto\x1a1github.com/solo-io/solo-kit/api/v1/solo-kit.proto\x1a:github.com/solo-io/gloo/projects/gloo/api/v1/options.proto\"\x86\x02\n" +
	"\x11VirtualHostOption\x12W\n" +
	"\x13namespaced_statuses\x18\x04 \x01(\v2 .core.solo.io.NamespacedStatusesB\x04\xb8\xf5\x04\x01R\x12namespacedStatuses\x122\n" +
	"\bmetadata\x18\x02 \x01(\v2\x16.core.solo.io.MetadataR\bmetadata\x12:\n" +
	"\aoptions\x18\x03 \x01(\v2 .gloo.solo.io.VirtualHostOptionsR\aoptions:\"\x82\xf1\x04\x1e\n" +
	"\x06vhopts\x12\x14virtual_host_optionsJ\x04\b\x01\x10\x02\"\xf3\x01\n" +
	"\vRouteOption\x12W\n" +
	"\x13namespaced_statuses\x18\x04 \x01(\v2 .core.solo.io.NamespacedStatusesB\x04\xb8\xf5\x04\x01R\x12namespacedStatuses\x122\n" +
	"\bmetadata\x18\x02 \x01(\v2\x16.core.solo.io.MetadataR\bmetadata\x124\n" +
	"\aoptions\x18\x03 \x01(\v2\x1a.gloo.solo.io.RouteOptionsR\aoptions:\x1b\x82\xf1\x04\x17\n" +
	"\x06rtopts\x12\rroute_optionsJ\x04\b\x01\x10\x02BA\xb8\xf5\x04\x01\xc0\xf5\x04\x01\xd0\xf5\x04\x01Z3github.com/solo-io/gloo/projects/gateway/pkg/api/v1b\x06proto3"

var (
	file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_rawDescData []byte
)

func file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_rawDesc)))
	})
	return file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_rawDescData
}

var file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_goTypes = []any{
	(*VirtualHostOption)(nil),       // 0: gateway.solo.io.VirtualHostOption
	(*RouteOption)(nil),             // 1: gateway.solo.io.RouteOption
	(*core.NamespacedStatuses)(nil), // 2: core.solo.io.NamespacedStatuses
	(*core.Metadata)(nil),           // 3: core.solo.io.Metadata
	(*v1.VirtualHostOptions)(nil),   // 4: gloo.solo.io.VirtualHostOptions
	(*v1.RouteOptions)(nil),         // 5: gloo.solo.io.RouteOptions
}
var file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_depIdxs = []int32{
	2, // 0: gateway.solo.io.VirtualHostOption.namespaced_statuses:type_name -> core.solo.io.NamespacedStatuses
	3, // 1: gateway.solo.io.VirtualHostOption.metadata:type_name -> core.solo.io.Metadata
	4, // 2: gateway.solo.io.VirtualHostOption.options:type_name -> gloo.solo.io.VirtualHostOptions
	2, // 3: gateway.solo.io.RouteOption.namespaced_statuses:type_name -> core.solo.io.NamespacedStatuses
	3, // 4: gateway.solo.io.RouteOption.metadata:type_name -> core.solo.io.Metadata
	5, // 5: gateway.solo.io.RouteOption.options:type_name -> gloo.solo.io.RouteOptions
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_init() }
func file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_init() {
	if File_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_rawDesc), len(file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto = out.File
	file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_goTypes = nil
	file_github_com_solo_io_gloo_projects_gateway_api_v1_external_options_proto_depIdxs = nil
}
