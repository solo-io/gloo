syntax = "proto3";
package gateway.solo.io;
option go_package = "github.com/solo-io/gloo/projects/gateway/pkg/api/v1";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.hash_all) = true;
option (extproto.clone_all) = true;

import "google/protobuf/wrappers.proto";
import "github.com/solo-io/solo-kit/api/v1/metadata.proto";
import "github.com/solo-io/solo-kit/api/v1/status.proto";
import "github.com/solo-io/solo-kit/api/v1/ref.proto";
import "github.com/solo-io/solo-kit/api/v1/solo-kit.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/ssl/ssl.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/proxy.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/virtual_host_options.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/route_options.proto";
import "github.com/solo-io/gloo/projects/gloo/api/v1/core/matchers/matchers.proto";

/*
*
* The **VirtualService** is the root routing object for the Gloo Gateway.
* A virtual service describes the set of routes to match for a set of domains.
*
* It defines:
* - a set of domains
* - the root set of routes for those domains
* - an optional SSL configuration for server TLS Termination
* - VirtualHostOptions that will apply configuration to all routes that live on the VirtualService.
*
* Domains must be unique across all virtual services within a gateway (i.e. no overlap between sets).
*
* VirtualServices can delegate routing behavior to the RouteTable resource by using the `delegateAction` on routes.
*
* An example configuration using two VirtualServices (one with TLS termination and one without) which share
* a RouteTable looks as follows:
*
* ```yaml
* # HTTP VirtualService:
* apiVersion: gateway.solo.io/v1
* kind: VirtualService
* metadata:
*   name: 'http'
*   namespace: 'usernamespace'
* spec:
*   virtualHost:
*     domains:
*     - '*.mydomain.com'
*     - 'mydomain.com'
*     routes:
*     - matchers:
*       - prefix: '/'
*       # delegate all traffic to the `shared-routes` RouteTable
*       delegateAction:
*         ref:
*           name: 'shared-routes'
*           namespace: 'usernamespace'
*
* ```
*
* ```yaml
* # HTTPS VirtualService:
* apiVersion: gateway.solo.io/v1
* kind: VirtualService
* metadata:
*   name: 'https'
*   namespace: 'usernamespace'
* spec:
*   virtualHost:
*     domains:
*     - '*.mydomain.com'
*     - 'mydomain.com'
*     routes:
*     - matchers:
*       - prefix: '/'
*       # delegate all traffic to the `shared-routes` RouteTable
*       delegateAction:
*         ref:
*           name: 'shared-routes'
*           namespace: 'usernamespace'
*   sslConfig:
*     secretRef:
*       name: gateway-tls
*       namespace: gloo-system
*
* ```
*
* ```yaml
* # the RouteTable shared by both VirtualServices:
* apiVersion: gateway.solo.io/v1
* kind: RouteTable
* metadata:
*   name: 'shared-routes'
*   namespace: 'usernamespace'
* spec:
*   routes:
*     - matchers:
*       - prefix: '/some-route'
*       routeAction:
*         single:
*           upstream:
*             name: 'some-upstream'
*      ...
* ```
*
* **Delegated Routes** are routes that use the `delegateAction` routing action. Delegated Routes obey the following
* constraints:
*
* - delegate routes must use `prefix` path matchers
* - delegated routes cannot specify header, query, or methods portion of the normal route matcher.
* - `routeOptions` configuration will be inherited from parent routes, but can be overridden by the child
*
*/
message VirtualService {

    option (core.solo.io.resource).short_name = "vs";
    option (core.solo.io.resource).plural_name = "virtual_services";

    // The VirtualHost contains configuration for serving a list of routes for a set of domains along with options for
    // configuring traffic
    VirtualHost virtual_host = 1;

    // If provided, the Gateway will serve TLS/SSL traffic for this set of routes
    gloo.solo.io.SslConfig ssl_config = 2;

    // Display only, optional descriptive name.
    // Unlike metadata.name, DisplayName can be any string
    // and can be changed after creating the resource.
    string display_name = 3 [(extproto.skip_hashing) = true];

    reserved 6;
    // NamespacedStatuses indicates the validation status of this resource.
    // NamespacedStatuses is read-only by clients, and set by gateway during validation
    core.solo.io.NamespacedStatuses namespaced_statuses = 8 [(extproto.skip_hashing) = true];

    // Metadata contains the object metadata for this resource
    core.solo.io.Metadata metadata = 7;
}


/*
Virtual Hosts serve an ordered list of routes for a set of domains.

An HTTP request is first matched to a virtual host based on its host header, then to a route within the virtual host.

If a request is not matched to any virtual host or a route therein, the target proxy will reply with a 404.

Unlike the [Gloo Virtual Host]({{< versioned_link_path fromRoot="/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/proxy.proto.sk/#virtualhost" >}}),
_Gateway_ Virtual Hosts can delegate their routes to `RouteTables`.

 */
message VirtualHost {
    // The list of domains (i.e.: matching the `Host` header of a request) that belong to this virtual host.
    // Note that the wildcard will not match the empty string. e.g. “\*-bar.foo.com” will match “baz-bar.foo.com”
    // but not “-bar.foo.com”. Additionally, a special entry “*” is allowed which will match any host/authority header.
    // Only a single virtual host on a gateway can match on “*”. A domain must be unique across all
    // virtual hosts on a gateway or the config will be invalidated by Gloo
    // Domains on virtual hosts obey the same rules as [Envoy Virtual Hosts](https://github.com/envoyproxy/envoy/blob/main/api/envoy/api/v2/route/route.proto)
    repeated string domains = 2;

    // The list of HTTP routes define routing actions to be taken for incoming HTTP requests whose host header matches
    // this virtual host. If the request matches more than one route in the list, the first route matched will be selected.
    // If the list of routes is empty, the virtual host will be ignored by Gloo.
    repeated Route routes = 3;

    // Virtual host options contain additional configuration to be applied to all traffic served by the Virtual Host.
    // Some configuration here can be overridden by Route Options.
    gloo.solo.io.VirtualHostOptions options = 4;

    oneof external_options_config {
    /* Delegate the VirtualHost options to an external VirtualHostOption Resource.
     Any options configured in the VirtualHost's `options` field will override all
     delegated options. If multiple VirtualHostOption CRs are delegated to, configuration will
     be taken from prior VirtualHostOption CRs over later ones.
     For example if `headerManipulation` is specified on the VirtualHost options, a delegated
     `VirtualHostOption` vhost-opt-1, and a second delegated `VirtualHostOption` vhost-opt-2, the `headerManipulation`
     config from only the VirtualHost-level `options` will be applied. If the config is removed from the VirtualHost-level `options` field,
     then the config from the first delegated `VirtualHostOption`, vhost-opt-1, is applied.
    */
      DelegateOptionsRefs options_config_refs = 5;
    }

}

/*
* A route specifies how to match a request and what action to take when the request is matched.
*
* When a request matches on a route, the route can perform one of the following actions:
* - *Route* the request to a destination
* - Reply with a *Direct Response*
* - Send a *Redirect* response to the client
* - *Delegate* the action for the request to one or more top-level [`RouteTable`]({{< versioned_link_path fromRoot="/reference/api/github.com/solo-io/gloo/projects/gateway/api/v1/route_table.proto.sk.md" >}}) resources
* DelegateActions can be used to delegate the behavior for a set out routes with a given *prefix* to
* top-level `RouteTable` resources.
*/
message Route {
    // Matchers contain parameters for matching requests (i.e., based on HTTP path, headers, etc.).
    // If empty, the route will match all requests (i.e, a single "/" path prefix matcher).
    // For delegated routes, any parent matcher must have a `prefix` path matcher.
    repeated matchers.core.gloo.solo.io.Matcher matchers = 1;

    // Whether this route as a child should inherit headers, methods, and query parameter matchers from the parent.
    // Defaults to value of parent; for virtual services (no parent) defaults to false.
    google.protobuf.BoolValue inheritable_matchers = 8;

    // Whether this route as a child should inherit path matchers (i.e., path itself, case-sensitive setting) from
    // the parent. Defaults to value of parent; for virtual services (no parent) defaults to false.
    google.protobuf.BoolValue inheritable_path_matchers = 9;

    // The Route Action Defines what action the proxy should take when a request matches the route.
    oneof action {
        // This action is the primary action to be selected for most routes. The RouteAction tells the proxy to
        // route requests to an upstream.
        gloo.solo.io.RouteAction route_action = 2;

        // Redirect actions tell the proxy to return a redirect response to the downstream client.
        gloo.solo.io.RedirectAction redirect_action = 3;

        // Return an arbitrary HTTP response directly, without proxying.
        gloo.solo.io.DirectResponseAction direct_response_action = 4;

        // Delegate routing actions for the given matcher to one or more RouteTables.
        DelegateAction delegate_action = 5;

        // Deprecated, Enterprise-Only: THIS FEATURE WILL BE REMOVED IN A FUTURE RELEASE. APIs are versioned as alpha and subject to change.
        // A reference to a GraphQLApi CR. Resolution of the client request to upstream(s) will be delegated to
        // the resolution policies defined in the GraphQLApi CR. If configured, the graphql filter will operate
        // instead of the envoy router filter, so configuration (such as retries) that applies to the router filter
        // will not be applied.
        core.solo.io.ResourceRef graphql_api_ref = 11;
    }

    // Route Options extend the behavior of routes.
    // Route options include configuration such as retries, rate limiting, and request/response transformation.
    // RouteOption behavior will be inherited by delegated routes which do not specify their own `options`
    gloo.solo.io.RouteOptions options = 6;

    // The name provides a convenience for users to be able to refer to a route by name.
    string name = 7;

    oneof external_options_config {

      /* Delegate the Route options to an external RouteOption Resource.
     Any options configured in the Route's `options` field will override all
     delegated options. If multiple RouteOption CRs are delegated to, configuration will
     be taken from prior RouteOption CRs over later ones.
     For example if `headerManipulation` is specified on the route options, a delegated
     `RouteOption` route-opt-1, and a second delegated `RouteOption` route-opt-2, the `headerManipulation`
     config from only the Route-level `options` will be applied. If the config is removed from the Route-level `options` field,
     then the config from the first delegated `RouteOption`, route-opt-1, is applied.
     */
      DelegateOptionsRefs options_config_refs = 10;
    }

}

message DelegateOptionsRefs {
  /*
    List of resource refs to Option CRs
   */
  repeated core.solo.io.ResourceRef delegate_options = 1;
}

// DelegateActions are used to delegate routing decisions to Route Tables.
message DelegateAction {

    // The name of the Route Table to delegate to.
    // Deprecated: these fields have been added for backwards-compatibility. Please use the `ref` field. If `name`
    // and/or `namespace` have been specified, Gloo will ignore `ref` and `selector`.
    string name = 1 [deprecated = true];

    // The namespace of the Route Table to delegate to.
    // Deprecated: these fields have been added for backwards-compatibility. Please use the `ref` field. If `name`
    // and/or `namespace` have been specified, Gloo will ignore `ref` and `selector`.
    string namespace = 2 [deprecated = true];

    oneof delegation_type {
        // Delegate to the Route Table resource with the given `name` and `namespace.
        core.solo.io.ResourceRef ref = 3;

        // Delegate to the Route Tables that match the given selector.
        RouteTableSelector selector = 4;
    }
}

// Select route tables for delegation by namespace, labels, or both.
message RouteTableSelector {

    // Delegate to Route Tables in these namespaces. If omitted, Gloo will only select Route Tables in the same namespace
    // as the resource (Virtual Service or Route Table) that owns this selector. The reserved value "*" can be used to
    // select Route Tables in all namespaces watched by Gloo.
    repeated string namespaces = 1;

    // Delegate to Route Tables whose labels match the ones specified here.
    map<string, string> labels = 2;

    message Expression {
      // Kubernetes label key, must conform to Kubernetes syntax requirements
      // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set
      string key = 1;

      // Route Table Selector expression operator, while the set-based syntax differs from Kubernetes (kubernetes: `key: !mylabel`, gloo: `key: mylabel, operator: "!"` | kubernetes: `key: mylabel`, gloo: `key: mylabel, operator: exists`), the functionality remains the same.
      enum Operator {
        // =
        Equals = 0;
        // ==
        DoubleEquals = 1;
        // !=
        NotEquals = 2;
        // in
        In = 3;
        // notin
        NotIn = 4;
        // exists
        Exists = 5;
        // !
        DoesNotExist = 6;
        // gt
        GreaterThan = 7;
        // lt
        LessThan = 8;
      }
      // The operator can only be in, notin, =, ==, !=, exists, ! (DoesNotExist), gt (GreaterThan), lt (LessThan).
      Operator operator = 2;
      repeated string values = 3;
    }

    // Expressions allow for more flexible Route Tables label matching, such as equality-based requirements, set-based requirements, or a combination of both.
    // https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#equality-based-requirement
    repeated Expression expressions = 3;
}
