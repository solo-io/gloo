
apiVersion: v1
kind: ServiceAccount
metadata:
  name: httpbin
  namespace: full-envoy-validation-test 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpbin
  namespace: full-envoy-validation-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpbin
      version: v1
  template:
    metadata:
      labels:
        app: httpbin
        version: v1
    spec:
      serviceAccountName: httpbin
      containers:
        - name: httpbin
          image: docker.io/mccutchen/go-httpbin:v2.6.0
          imagePullPolicy: IfNotPresent
          command: [ go-httpbin ]
          args:
            - "-port"
            - "8080"
            - "-max-duration"
            - "600s" # override default 10s
          ports:
            - containerPort: 8080
        # Include curl container for e2e testing, allows sending traffic mediated by the proxy sidecar
        - name: curl
          image: curlimages/curl:7.83.1
          resources:
            requests:
              cpu: "100m"
            limits:
              cpu: "200m"
          imagePullPolicy: IfNotPresent
          command:
            - "tail"
            - "-f"
            - "/dev/null"
        - name: hey
          image: gcr.io/solo-public/docs/hey:0.1.4
          imagePullPolicy: IfNotPresent
---
apiVersion: v1
kind: Service
metadata:
  name: httpbin
  namespace: full-envoy-validation-test
  labels:
    app: httpbin
    service: httpbin
spec:
  ports:
    - name: http
      port: 8000
      targetPort: 8080
  selector:
    app: httpbin
---
apiVersion: gloo.solo.io/v1
kind: Upstream
metadata:
  name: nginx-upstream
  namespace: full-envoy-validation-test
spec:
  static:
    hosts:
    - addr: nginx-upstream.com
      port: 80
---
apiVersion: gateway.solo.io/v1
kind: VirtualHostOption
metadata:
  name: jwt-validation-company
  namespace: full-envoy-validation-test
spec:
  options:
---
apiVersion: gateway.solo.io/v1
kind: RouteOption
metadata:
  name: jwt-route-ip
  namespace: full-envoy-validation-test
spec:
  options:
    autoHostRewrite: true
    prefixRewrite: /get
    stagedTransformations:
      early:
        responseTransforms:
        - responseTransformation:
            logRequestResponseInfo: true
            transformationTemplate:
              body:
                text: '{% if header("server") == "Google Frontend" %}{{ body() }}{% else %}{% if header(":status") == "401" %}{"error":"Invalid Token","errorCode":"INVALID_TOKEN","message":"Invalid Token","statusCode":403}{% else if header(":status") == "429" %}{"status":"fail","data":{"error":"QUOTA_EXCEEDED","path": "{{ request_header(":path") }}" }}{% else %}{{ body() }}{% endif %}{% endif %}'
              headers:
                :status:
                  text: '{% if header("server") == "Google Frontend" %}{{ header(":status") }}{% else %}{% if header(":status") == "401" %}403{% else if header(":status") == "429" %}450{% else %}{{ header(":status") }}{% endif %}{% endif %}'
              ignoreErrorOnParse: true
      inheritTransformation: true
    timeout: 31s
---
apiVersion: gateway.solo.io/v1
kind: VirtualHostOption
metadata:
  name: cors-company
  namespace: full-envoy-validation-test
spec:
  options:
    cors:
      allowCredentials: true
      allowHeaders:
      - origin,
      - x-requested-with,
      - accept,
      - content-type,
      - authorization,
      - x-something-api-key,
      - x-something-device-type,
      - x-something-platform,
      - x-something-app-version,
      - x-something-platform-version,
      - x-something-default-language,
      - x-something-country-code-override,
      - x-something-user-token,
      - x-something-install-id,
      - x-something-profile-id,
      - x-something-install-date,
      - x-something-context-override,
      - x-something-is-kid-profile,
      - x-something-cosed,
      - x-px-block-error,
      - x-something-debug,
      - x-something-token-key-id
      allowMethods:
      - GET
      - PUT
      - POST
      - DELETE
      - PATCH
      allowOrigin:
      - http://localhost:3000
      allowOriginRegex:
      - https://*.company.com
      exposeHeaders:
      - '*'
      maxAge: 3628800s
---
apiVersion: gateway.solo.io/v1
kind: VirtualHostOption
metadata:
  name: jwt-decode-company
  namespace: full-envoy-validation-test
spec:
  options:
    stagedTransformations:
      early:
        requestTransforms:
        - clearRouteCache: true
          requestTransformation:
            transformationTemplate:
              advancedTemplates: true
              extractors:
                bearer:
                  header: authorization
                  regex: Bearer.(.*)\.(.*)\.(.*)
                  subgroup: 2
      regular:
        requestTransforms:
        - clearRouteCache: true
          requestTransformation:
            logRequestResponseInfo: true
            transformationTemplate:
              advancedTemplates: true
              body:
                text: '{% if existsIn(context(), "video")%}{"video":{% set seriesMediaIdValue="default"
                  %}{% set nextEpisodeMediaIdValue="default" %}{% set page = at(context(),
                  "video") %}{ {% for key, value in page %} {% if at(loop, "is_first")
                  and key != "seriesMediaId" and key != "mediaId" and key != "nextEpisodeMediaId"
                  %}{% set first_key=key %}{% set first_value=value %}{% endif %}{%
                  if key == "mediaId" and substring(value, 0, 21) == "transmission:matchid:"
                  %}"mediaId":"video:mcp:unexpected-live-match",{% else %}{% if
                  key == "mediaId" %}"{{key}}":{% if not isNumber(value) %}"{% endif
                  %}{{value}}{% if not isNumber(value) %}"{% endif %},{% endif %}{%
                  endif %}{% if key == "seriesMediaId" %}{% set seriesMediaIdValue=value
                  %}{% endif %}{% if key == "nextEpisodeMediaId" %}{% set nextEpisodeMediaIdValue=value
                  %}{% endif %}{% if key != "seriesMediaId" and key != "nextEpisodeMediaId"
                  and key != "mediaId" %}"{{key}}":{% if not isNumber(value) %}"{%
                  endif %}{{value}}{% if not isNumber(value) %}"{% endif %},{% endif
                  %}{% endfor %}"{{first_key}}":{% if not isNumber(first_value)
                  %}"{% endif %}{{first_value}}{% if not isNumber(first_value) %}"{%
                  endif %}{% if seriesMediaIdValue != "default" and seriesMediaIdValue
                  != "" %},"seriesMediaId":{% if not isNumber(seriesMediaIdValue)%}"{%
                  endif %}{{seriesMediaIdValue}}{% if not isNumber(seriesMediaIdValue)
                  %}"{% endif %}{% endif %}{% if nextEpisodeMediaIdValue != "default"
                  and seriesMediaIdValue != "default" and seriesMediaIdValue !=
                  "" %},"nextEpisodeMediaId":{% if not isNumber(nextEpisodeMediaIdValue)%}"{%
                  endif %}{{nextEpisodeMediaIdValue}}{% if not isNumber(nextEpisodeMediaIdValue)
                  %}"{% endif %}{% endif %} }} {% else %}{{ context() }}{% endif
                  %}'
              extractors:
                country:
                  header: x-something-country-code
                  regex: (AR|BO|CL|CO|CR|DO|EC|GT|HN|MX|NI|PA|PE|PR|PY|SV|US|UY|VE)
                  subgroup: 1
                profile:
                  header: profile-id
                  regex: .*?"id.{3}(\w*[-_\w*]*).*
                  subgroup: 1
                profile-extractor:
                  header: profile-extended
                  regex: .*?"id.{3}(\w*[-_\w*]*).*
                  subgroup: 1
                sub:
                  header: sub-claim
                  regex: ^(.*\|)?(.*)$
                  subgroup: 2
                subscription-id:
                  header: x-something-subscription-info
                  regex: .*"subscriptionId".*?"([^"]+)".*
                  subgroup: 1
                subscription-id-user-token:
                  header: x-something-subscription-info-user-token
                  regex: .*"subscriptionId".*?"([^"]+)".*
                  subgroup: 1
                subscription-tier:
                  header: x-something-subscription-info-user-token
                  regex: .*"subscriptionTier.{3}(\w*).*
                  subgroup: 1
              headers:
                x-something-country-blocked:
                  text: '{% if extraction("country") == "" %}country_not_allowed{%
                    endif %}'
                x-something-install-id:
                  text: '{% if request_header("x-something-install-id") != "" %}{{ request_header("x-something-install-id")
                    }}{% else %}{% if header("x-something-install-id-claim") != "" %}{{
                    header("x-something-install-id-claim") }}{% else %}asdfasdf{%
                    endif %}{% endif %}'
                x-something-plan-group:
                  text: '{% if extraction("subscription-id") == "" %}default{% else
                    %}{%if extraction("subscription-id") in ["something-sv-web-prepaid-7d",
                    "something-gt-web-prepaid-7d", "something-gt-web-prepaid-15d", "something-gt-web-prepaid-30d",
                    "something-hd-web-prepaid-7d", "something-hd-web-prepaid-15d", "something-hd-web-prepaid-30d",
                    "something-ng-web-prepaid-7d", "something-ng-web-prepaid-15d","something-ng-web-prepaid-30d",
                    "something-pn-web-prepaid-7d", "something-hn-web-prepaid-standalone-7d"]
                    %}something-restricted{% else %}default{% endif %}{% endif%}'
                x-something-plan-ids:
                  text: '{% if extraction("subscription-id") == "" %}{{ extraction("subscription-id-user-token")
                    }}{% else %}{{ extraction("subscription-id") }}{% endif %}'
                x-something-profile-id:
                  text: '{% if request_header("x-something-profile-id") != "" %}{% set
                    a = false %}{% for num in range(length(header("x-something-available-profile-ids"))
                    / 36 ) %}{% if substring(header("x-something-available-profile-ids"),
                    num * 36 + num , 36) == request_header("x-something-profile-id") %}{{
                    request_header("x-something-profile-id") }}{% set a = true %}{% endif
                    %}{% endfor %}{% if a == false  %}{{ request_header("x-something-profile-id")
                    }}{% endif %}{% else %} {% if header("x-iss") == "identity-api.self.something.com"%}    {{
                    extraction("profile") }}{% else %}{% if extraction("profile-extractor")
                    != "" %}{{ extraction("profile-extractor") }}{% else %}{{  extraction("user-token-profile-id")
                    }}{% endif%}{% endif %}{% endif %}'
                x-something-subscription-plan-tier:
                  text: '{{ extraction("subscription-tier") }}'
                x-something-user-id:
                  text: '{{ extraction("sub") }}'
              headersToRemove:
              - authorization
              - x-something-subscription-info
              - x-something-install-id-claim
              - profile-extended
              - x-something-subscription-info-user-token
---
apiVersion: gateway.solo.io/v1
kind: VirtualService
metadata:
  name: httpbin-1
  namespace: full-envoy-validation-test
spec:
  virtualHost:
    domains:
    - httpbin-1.example.io
    optionsConfigRefs:
      delegateOptions:
      - name: cors-company
        namespace: full-envoy-validation-test
      - name: jwt-validation-company
        namespace: full-envoy-validation-test
      - name: jwt-decode-company
        namespace: full-envoy-validation-test
    routes:
    - directResponseAction:
        body: '{"status":"fail","data":{"error":"COUNTRY_BLOCKED"}'
        status: 451
      matchers:
      - headers:
        - name: x-something-country-blocked
          value: country_not_allowed
        prefix: /
    - matchers:
      - exact: /gql/v2/healthcheck
      options:
        autoHostRewrite: true
        prefixRewrite: /healthcheck
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - headers:
        - name: x-something-user-token
        prefix: /gql/v2
      options:
        autoHostRewrite: true
        prefixRewrite: /
        stagedTransformations:
          early:
            responseTransforms:
            - responseTransformation:
                logRequestResponseInfo: true
                transformationTemplate:
                  body:
                    text: '{% if header(":status") == "401" and header("server")
                      == "Google Frontend" %}{{ body() }}{% else if header(":status")
                      != "401" %}{{ body() }}{% else %}{"status":"fail","data":{"error":"INVALID_TOKEN"}{%
                      endif %}'
                  headers:
                    :status:
                      text: '{% if header(":status") == "401" and header("server")
                        == "Google Frontend" %}401{% else if header(":status") !=
                        "401" %}{{ header(":status") }}{% else %}403{% endif %}'
                  ignoreErrorOnParse: true
          inheritTransformation: true
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /ip
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /get
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /headers
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /status
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /user-agent
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /cookies
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /base64
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - headers:
        - invertMatch: true
          name: x-something-api-key
        prefix: /gql/v2
      options:
        autoHostRewrite: true
        prefixRewrite: /
        stagedTransformations:
          early:
            responseTransforms:
            - responseTransformation:
                logRequestResponseInfo: true
                transformationTemplate:
                  body:
                    text: '{% if header(":status") == "401" %}{"status":"fail","data":{"error":"INVALID_TOKEN"}}{%
                      else %}{{ body() }}{% endif%}'
                  headers:
                    :status:
                      text: '{% if header(":status") == "401" %}403{% else %}{{
                        header(":status") }}{% endif %}'
                  ignoreErrorOnParse: true
          inheritTransformation: true
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
            namespace: full-envoy-validation-test
    - matchers:
      - headers:
        - name: x-something-api-key
          regex: true
          value: ^$
        prefix: /gql/v2
      options:
        autoHostRewrite: true
        prefixRewrite: /
        stagedTransformations:
          early:
            responseTransforms:
            - responseTransformation:
                logRequestResponseInfo: true
                transformationTemplate:
                  body:
                    text: '{% if header(":status") == "401" and header("server")
                      == "Frontend" %}{{ body() }}{% else if header(":status")
                      != "401" %}{{ body() }}{% else %}{"status":"fail","data":{"error":"INVALID_TOKEN"}{%
                      endif %}'
                  headers:
                    :status:
                      text: '{% if header(":status") == "401" and header("server")
                        == "Frontend" %}401{% else if header(":status") !=
                        "401" %}{{ header(":status") }}{% else %}403{% endif %}'
                  ignoreErrorOnParse: true
          inheritTransformation: true
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
            namespace: full-envoy-validation-test
    - matchers:
      - headers:
        - name: x-something-api-key
          regex: true
          value: .+
        prefix: /gql/v2
      options:
        autoHostRewrite: true
        prefixRewrite: /
        stagedTransformations:
          early:
            responseTransforms:
            - responseTransformation:
                transformationTemplate:
                  body:
                    text: '{% if header(":status") == "401" %}{"status":"fail","data":{"error":"INVALID_API_KEY"}{%
                      else %}{{ context() }}{% endif %}'
                  headers:
                    :status:
                      text: '{% if header(":status") == "401" %}403{% else %}{{
                        header(":status") }}{% endif %}'
          regular:
            requestTransforms:
            - clearRouteCache: true
              requestTransformation:
                logRequestResponseInfo: true
                transformationTemplate:
                  advancedTemplates: true
                  headers:
                    x-something-profile-id:
                      text: web-app-ssr
                    x-something-user-id:
                      text: web-app-ssr
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
            namespace: full-envoy-validation-test
---
apiVersion: gateway.solo.io/v1
kind: VirtualService
metadata:
  name: httpbin-2
spec:
  virtualHost:
    domains:
    - httpbin-2.example.io
    optionsConfigRefs:
      delegateOptions:
      - name: cors-company
        namespace: full-envoy-validation-test
      - name: jwt-validation-company
        namespace: full-envoy-validation-test
      - name: jwt-decode-company
        namespace: full-envoy-validation-test
    routes:
    - directResponseAction:
        body: '{"status":"fail","data":{"error":"COUNTRY_BLOCKED"}'
        status: 451
      matchers:
      - headers:
        - name: x-something-country-blocked
          value: country_not_allowed
        prefix: /
    - matchers:
      - exact: /gql/v2/healthcheck
      options:
        autoHostRewrite: true
        prefixRewrite: /healthcheck
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - headers:
        - name: x-something-user-token
        prefix: /gql/v2
      options:
        autoHostRewrite: true
        prefixRewrite: /
        stagedTransformations:
          early:
            responseTransforms:
            - responseTransformation:
                logRequestResponseInfo: true
                transformationTemplate:
                  body:
                    text: '{% if header(":status") == "401" and header("server")
                      == "Google Frontend" %}{{ body() }}{% else if header(":status")
                      != "401" %}{{ body() }}{% else %}{"status":"fail","data":{"error":"INVALID_TOKEN"}{%
                      endif %}'
                  headers:
                    :status:
                      text: '{% if header(":status") == "401" and header("server")
                        == "Google Frontend" %}401{% else if header(":status") !=
                        "401" %}{{ header(":status") }}{% else %}403{% endif %}'
                  ignoreErrorOnParse: true
          inheritTransformation: true
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /ip
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /get
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /headers
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /status
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /user-agent
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /cookies
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /base64
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - headers:
        - invertMatch: true
          name: x-something-api-key
        prefix: /gql/v2
      options:
        autoHostRewrite: true
        prefixRewrite: /
        stagedTransformations:
          early:
            responseTransforms:
            - responseTransformation:
                logRequestResponseInfo: true
                transformationTemplate:
                  body:
                    text: '{% if header(":status") == "401" %}{"status":"fail","data":{"error":"INVALID_TOKEN"}}{%
                      else %}{{ body() }}{% endif%}'
                  headers:
                    :status:
                      text: '{% if header(":status") == "401" %}403{% else %}{{
                        header(":status") }}{% endif %}'
                  ignoreErrorOnParse: true
          inheritTransformation: true
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - headers:
        - name: x-something-api-key
          regex: true
          value: ^$
        prefix: /gql/v2
      options:
        autoHostRewrite: true
        prefixRewrite: /
        stagedTransformations:
          early:
            responseTransforms:
            - responseTransformation:
                logRequestResponseInfo: true
                transformationTemplate:
                  body:
                    text: '{% if header(":status") == "401" and header("server")
                      == "Frontend" %}{{ body() }}{% else if header(":status")
                      != "401" %}{{ body() }}{% else %}{"status":"fail","data":{"error":"INVALID_TOKEN"}{%
                      endif %}'
                  headers:
                    :status:
                      text: '{% if header(":status") == "401" and header("server")
                        == "Frontend" %}401{% else if header(":status") !=
                        "401" %}{{ header(":status") }}{% else %}403{% endif %}'
                  ignoreErrorOnParse: true
          inheritTransformation: true
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - headers:
        - name: x-something-api-key
          regex: true
          value: .+
        prefix: /gql/v2
      options:
        autoHostRewrite: true
        prefixRewrite: /
        stagedTransformations:
          early:
            responseTransforms:
            - responseTransformation:
                transformationTemplate:
                  body:
                    text: '{% if header(":status") == "401" %}{"status":"fail","data":{"error":"INVALID_API_KEY"}{%
                      else %}{{ context() }}{% endif %}'
                  headers:
                    :status:
                      text: '{% if header(":status") == "401" %}403{% else %}{{
                        header(":status") }}{% endif %}'
          regular:
            requestTransforms:
            - clearRouteCache: true
              requestTransformation:
                logRequestResponseInfo: true
                transformationTemplate:
                  advancedTemplates: true
                  headers:
                    x-something-profile-id:
                      text: web-app-ssr
                    x-something-user-id:
                      text: web-app-ssr
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
---
apiVersion: gateway.solo.io/v1
kind: VirtualService
metadata:
  name: httpbin-3
spec:
  virtualHost:
    domains:
    - httpbin-3.example.io
    optionsConfigRefs:
      delegateOptions:
      - name: cors-company
        namespace: full-envoy-validation-test
      - name: jwt-validation-company
        namespace: full-envoy-validation-test
      - name: jwt-decode-company
        namespace: full-envoy-validation-test
    routes:
    - directResponseAction:
        body: '{"status":"fail","data":{"error":"COUNTRY_BLOCKED"}'
        status: 451
      matchers:
      - headers:
        - name: x-something-country-blocked
          value: country_not_allowed
        prefix: /
    - matchers:
      - exact: /gql/v2/healthcheck
      options:
        autoHostRewrite: true
        prefixRewrite: /healthcheck
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - headers:
        - name: x-something-user-token
        prefix: /gql/v2
      options:
        autoHostRewrite: true
        prefixRewrite: /
        stagedTransformations:
          early:
            responseTransforms:
            - responseTransformation:
                logRequestResponseInfo: true
                transformationTemplate:
                  body:
                    text: '{% if header(":status") == "401" and header("server")
                      == "Google Frontend" %}{{ body() }}{% else if header(":status")
                      != "401" %}{{ body() }}{% else %}{"status":"fail","data":{"error":"INVALID_TOKEN"}{%
                      endif %}'
                  headers:
                    :status:
                      text: '{% if header(":status") == "401" and header("server")
                        == "Google Frontend" %}401{% else if header(":status") !=
                        "401" %}{{ header(":status") }}{% else %}403{% endif %}'
                  ignoreErrorOnParse: true
          inheritTransformation: true
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /ip
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /get
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /headers
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /status
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /user-agent
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /cookies
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - prefix: /base64
      name: jwt-options-route
      optionsConfigRefs:
        delegateOptions:
        - name: jwt-route-ip
          namespace: full-envoy-validation-test
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - headers:
        - invertMatch: true
          name: x-something-api-key
        prefix: /gql/v2
      options:
        autoHostRewrite: true
        prefixRewrite: /
        stagedTransformations:
          early:
            responseTransforms:
            - responseTransformation:
                logRequestResponseInfo: true
                transformationTemplate:
                  body:
                    text: '{% if header(":status") == "401" %}{"status":"fail","data":{"error":"INVALID_TOKEN"}}{%
                      else %}{{ body() }}{% endif%}'
                  headers:
                    :status:
                      text: '{% if header(":status") == "401" %}403{% else %}{{
                        header(":status") }}{% endif %}'
                  ignoreErrorOnParse: true
          inheritTransformation: true
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - headers:
        - name: x-something-api-key
          regex: true
          value: ^$
        prefix: /gql/v2
      options:
        autoHostRewrite: true
        prefixRewrite: /
        stagedTransformations:
          early:
            responseTransforms:
            - responseTransformation:
                logRequestResponseInfo: true
                transformationTemplate:
                  body:
                    text: '{% if header(":status") == "401" and header("server")
                      == "Frontend" %}{{ body() }}{% else if header(":status")
                      != "401" %}{{ body() }}{% else %}{"status":"fail","data":{"error":"INVALID_TOKEN"}{%
                      endif %}'
                  headers:
                    :status:
                      text: '{% if header(":status") == "401" and header("server")
                        == "Frontend" %}401{% else if header(":status") !=
                        "401" %}{{ header(":status") }}{% else %}403{% endif %}'
                  ignoreErrorOnParse: true
          inheritTransformation: true
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream
    - matchers:
      - headers:
        - name: x-something-api-key
          regex: true
          value: .+
        prefix: /gql/v2
      options:
        autoHostRewrite: true
        prefixRewrite: /
        stagedTransformations:
          early:
            responseTransforms:
            - responseTransformation:
                transformationTemplate:
                  body:
                    text: '{% if header(":status") == "401" %}{"status":"fail","data":{"error":"INVALID_API_KEY"}{%
                      else %}{{ context() }}{% endif %}'
                  headers:
                    :status:
                      text: '{% if header(":status") == "401" %}403{% else %}{{
                        header(":status") }}{% endif %}'
          regular:
            requestTransforms:
            - clearRouteCache: true
              requestTransformation:
                logRequestResponseInfo: true
                transformationTemplate:
                  advancedTemplates: true
                  headers:
                    x-something-profile-id:
                      text: web-app-ssr
                    x-something-user-id:
                      text: web-app-ssr
        timeout: 31s
      routeAction:
        single:
          upstream:
            name: nginx-upstream