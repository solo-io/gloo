name: Nightly

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }} # necessary to pass upgrade tests

on:
  # Since this is an LTS branch, we removed the schedule, since that is defined on the `main` branch
  # schedule:
  # -
  workflow_dispatch:
    inputs:
      branch:
        description: "The branch to run tests against"
        type: choice
        options:
          - workflow_initiating_branch
      run-regression:
        description: "Run regression tests"
        type: boolean
        default: false
      run-performance:
        description: "Run performance tests"
        type: boolean
        default: false
      run-conformance:
        description: "Run conformance tests"
        type: boolean
        default: false
      run-kubernetes-end-to-end:
        # Runs all tests in /tests/kubernetes/e2e/...
        description: "Run Kubernetes e2e tests"
        type: boolean
        default: false
      kubernetes-end-to-end-run-regex:
        # The regex that will be passed to the go test -run invocation
        # This allows users to run just the subset of tests that they care about
        description: "Kubernetes e2e tests -run regex"
        type: string
        required: false
        default: '^Test'

jobs:
  end_to_end_tests_on_demand:
    name: End-to-End (branch=${{ github.ref_name }}, cluster=${{ matrix.test.cluster-name }}, version=${{ matrix.version-files.label }} )
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run-kubernetes-end-to-end && inputs.branch == 'workflow_initiating_branch' }}
    runs-on: ubuntu-22.04
    timeout-minutes: 180
    strategy:
      # Since we are running these on a schedule, there is no value in failing fast
      # In fact, we want to ensure that all tests run, so that we have a clearer picture of which tests are prone to flaking
      fail-fast: false
      matrix:
        test:
          # When running the tests at night, there is no value in splitting the tests across multiple clusters and running them in parallel.
          # As a result, we increase the threshold for the tests, since they all run serially on a single cluster
          - cluster-name: 'cluster-one'
            go-test-args: '-v -timeout=150m'
            go-test-run-regex: ${{ inputs.kubernetes-end-to-end-run-regex }}
        # In our nightly tests, we run the suite of tests using the lower and upper ends of versions that we claim to support
        # The versions should mirror: https://docs.solo.io/gloo-edge/latest/reference/support/
        version-files:
          - label: 'min'
            file: './.github/workflows/.env/nightly-tests/min_versions.env'
          - label: 'max'
            file: './.github/workflows/.env/nightly-tests/max_versions.env'

    steps:
      # Checkout the branch that initiated the action
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
      # The dotenv action is used to load key-value pairs from files.
      # In this case, the file is specified in the matrix and will contain the versions of the tools to use
      - name: Dotenv Action
        uses: falti/dotenv-action@v1.1.4
        id: dotenv
        with:
          path: ${{ matrix.version-files.file }}
          log-variables: true
      - name: Prep Go Runner
        uses: ./.github/workflows/composite-actions/prep-go-runner
      # Set up the KinD cluster that the tests will use
      - id: setup-kind-cluster
        name: Setup KinD Cluster
        uses: ./.github/workflows/composite-actions/setup-kind-cluster
        with:
          cluster-name: ${{ matrix.test.cluster-name }}
          kind-node-version: ${{ steps.dotenv.outputs.node_version }}
          kind-version: ${{ steps.dotenv.outputs.kind_version }}
          kubectl-version: ${{ steps.dotenv.outputs.kubectl_version }}
          helm-version: ${{ steps.dotenv.outputs.helm_version }}
          istio-version: ${{ steps.dotenv.outputs.istio_version }}
          k8sgateway-api-version: ${{ steps.dotenv.outputs.k8sgateway_api_version }}
      # Run the tests
      - id: run-tests
        name: Run Kubernetes e2e Tests
        uses: ./.github/workflows/composite-actions/kubernetes-e2e-tests
        with:
          cluster-name: ${{ matrix.test.cluster-name }}
          test-args: ${{ matrix.test.go-test-args }}
          run-regex: ${{ matrix.test.go-test-run-regex }}
          istio-version: ${{ steps.dotenv.outputs.istio_version }}
          matrix-label: ${{ matrix.version-files.label }}

  regression_tests_on_demand:
    name: on demand regression tests
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run-regression && inputs.branch == 'workflow_initiating_branch' }}
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        kube-e2e-test-type: ['gateway', 'gloo', 'upgrade']
        kube-version: [ { node: 'v1.25.16@sha256:5da57dfc290ac3599e775e63b8b6c49c0c85d3fec771cd7d55b45fae14b38d3b', kubectl: 'v1.25.16', kind: 'v0.20.0', helm: 'v3.13.2' },
                        { node: 'v1.31.0@sha256:53df588e04085fd41ae12de0c3fe4c72f7013bba32a20e7325357a1ac94ba865', kubectl: 'v1.31.0', kind: 'v0.24.0', helm: 'v3.14.4' }]
        image-variant:
          - standard
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref_name }}
    - uses: ./.github/workflows/composite-actions/regression-tests

  performance_tests_on_demand:
    name: on demand performance tests
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run-performance && inputs.branch == 'workflow_initiating_branch' }}
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
      - uses: ./.github/workflows/composite-actions/prep-go-runner
      - uses: ./.github/workflows/composite-actions/performance-tests

  publish_results:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    if: ${{ always() }}
    needs:
      - end_to_end_tests_on_demand
      - regression_tests_on_demand
      - performance_tests_on_demand
    steps:
      - uses: actions/checkout@v4
      - name: compute-preamble
        id: compute-preamble
        shell: bash
        run: |
          echo "SLACK_CHANNEL=C04CJMXAH7A" >> $GITHUB_ENV     #edge-nightly-results by default
          if [[ ${{github.event_name == 'workflow_dispatch'}} = true ]]; then
            trigger="Gloo OSS Manual run"
            branch=${{ inputs.branch }}
            echo "SLACK_CHANNEL=C0314KESVNV" >> $GITHUB_ENV   #slack-integration-testing if manually run
          fi
          preamble="$trigger ($branch)"
          echo "Setting PREAMBLE as $preamble"
          echo "preamble=$preamble" >> $GITHUB_OUTPUT
      - uses: actions/setup-go@v5
        with:
          # Caching in setup-go is on by default
          # In our prep-go-runner we use a more configurable cache https://github.com/actions/cache
          # In this step, we don't need to store a new cache entry because it runs infrequently and
          # will pollute the cache entries
          cache: false
          go-version-file: go.mod
      - name: Send Slack Message
        env:
          PARENT_JOB_URL: https://github.com/solo-io/gloo/actions/runs/${{github.run_id}} # parent job hyperlink
          PREAMBLE: ${{ steps.compute-preamble.outputs.preamble }}  # text to hyperlink at start of slack message
          SLACKBOT_BEARER: ${{ secrets.SLACKBOT_BEARER }}
        run: |
          go run .github/workflows/helpers/notify/slack.go '${{ toJSON(needs) }}'
