{{- if .Values.gateway.updateValues -}}
{{- include "gloo.updatevalues" . -}}
{{- end -}}
{{- define "gatewayProxy.configMapSpec" }}
{{- $name := (index . 1) }}
{{- $gatewaySpec := (index . 2) }}
{{- with (first .) }}
{{- $global := .Values.global }}
{{- $gatewayProxy := .Values.gatewayProxies.gatewayProxy -}}
{{- $spec := include "gloo.util.mergeOverwriteWithOmit" (list $gatewaySpec $gatewayProxy) | fromJson }}
{{- if not $spec.disabled }}
{{- $statsConfig := coalesce $spec.stats $global.glooStats }}
# config_map
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $name | kebabcase }}-envoy-config
  namespace: {{ $spec.namespace | default .Release.Namespace }}
  labels:
{{ include "gloo.labels" . | indent 4}}
    gloo: gateway-proxy
    gateway-proxy-id: {{ $name | kebabcase }}
data:
{{ if (empty $spec.configMap.data) }}
  envoy.yaml: |
    layered_runtime:
      layers:
      - name: static_layer
        static_layer:
{{- if $spec.customStaticLayer }}
{{ toYaml $spec.customStaticLayer | indent 10 }}
{{- end}}
          overload:
            global_downstream_max_connections: {{ $spec.globalDownstreamMaxConnections }}
          upstream:
            healthy_panic_threshold:
              value: {{ $spec.healthyPanicThreshold }}
      - name: admin_layer
        admin_layer: {}
    node:
      cluster: gateway
      id: "{{ `{{.PodName}}.{{.PodNamespace}}` }}"
      metadata:
        # Specifies the proxy's in-memory xds cache key (see projects/gloo/pkg/xds/envoy.go)
        # This value needs to match discoveryNamespace (or "writeNamespace") in the settings template
        role: {{.Values.settings.writeNamespace | default .Release.Namespace }}~{{ $name | kebabcase }}
{{- if $spec.envoyStatsConfig }}
    stats_config: {{- toYaml $spec.envoyStatsConfig | nindent 6}}
{{- end }} {{- /* if $spec.envoyStatsConfig */}}
    static_resources:
{{- if or $statsConfig.enabled (or $spec.readConfig $spec.extraListenersHelper) }}
      listeners:
{{- end }} {{- /* if or $statsConfig.enabled (or $spec.readConfig $spec.extraListenersHelper) */}}
{{- if $spec.extraListenersHelper }}
{{- include $spec.extraListenersHelper . | nindent 8 }}
{{- end }} {{- /* $spec.extraListenersHelper */}}
{{- if $statsConfig.enabled }}
        - name: prometheus_listener
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8081
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: AUTO
                    stat_prefix: prometheus
                    route_config:
                      name: prometheus_route
                      virtual_hosts:
                        - name: prometheus_host
                          domains:
                            - "*"
                          routes:
                            - match:
                                path: "/ready"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                cluster: admin_port_cluster
                            - match:
                                prefix: "/metrics"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                prefix_rewrite: {{ $statsConfig.routePrefixRewrite }}
                                cluster: admin_port_cluster
                            {{- if .Values.global.glooStats.enableStatsRoute}}
                            - match:
                                prefix: "/stats"
                                headers:
                                - name: ":method"
                                  exact_match: GET
                              route:
                                prefix_rewrite: {{ .Values.global.glooStats.statsPrefixRewrite }}
                                cluster: admin_port_cluster
                            {{- end }}
                    http_filters:
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
{{- end}} {{- /* if $statsConfig.enabled */}}
{{- if $spec.readConfig }}
        - name: read_config_listener
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8082
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: AUTO
                    stat_prefix: read_config
                    route_config:
                      name: read_config_route
                      virtual_hosts:
                        - name: read_config_host
                          domains:
                            - "*"
                          routes:
                            - match:
                                path: "/ready"
                                headers:
                                  - name: ":method"
                                    exact_match: GET
                              route:
                                cluster: admin_port_cluster
                            - match:
                                prefix: "/stats"
                                headers:
                                  - name: ":method"
                                    exact_match: GET
                              route:
                                cluster: admin_port_cluster
                            - match:
                                 prefix: "/config_dump"
                                 headers:
                                   - name: ":method"
                                     exact_match: GET
                              route:
                                cluster: admin_port_cluster
                            - match:
                                prefix: "/clusters"
                                headers:
                                  - name: ":method"
                                    exact_match: GET
                              route:
                                cluster: admin_port_cluster
                    http_filters:
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
{{- end}} {{- /* if $spec.readConfig */}}
      clusters:
      - name: gloo.{{ .Release.Namespace }}.svc.{{ .Values.k8s.clusterName}}:{{ .Values.gloo.deployment.xdsPort }}
        alt_stat_name: xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: gloo.{{ .Release.Namespace }}.svc.{{ .Values.k8s.clusterName}}:{{ .Values.gloo.deployment.xdsPort }}
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    {{- $glooAddress := printf "gloo.%s.svc.%s" .Release.Namespace .Values.k8s.clusterName }}
                    address: {{ empty $spec.xdsServiceAddress | ternary $glooAddress $spec.xdsServiceAddress }}
                    port_value: {{ empty $spec.xdsServicePort | ternary .Values.gloo.deployment.xdsPort $spec.xdsServicePort }}
        http2_protocol_options: {}
        upstream_connection_options:
          tcp_keepalive:
            keepalive_time: {{ $spec.tcpKeepaliveTimeSeconds }}
        type: STRICT_DNS
        respect_dns_ttl: true
{{- if $global.glooMtls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_certificate_sds_secret_configs:
                - name: server_cert
                  sds_config:
                    resource_api_version: V3
                    api_config_source:
                      api_type: GRPC
                      transport_api_version: V3
                      grpc_services:
                      - envoy_grpc:
                          cluster_name: gateway_proxy_sds
              validation_context_sds_secret_config:
                name: validation_context
                sds_config:
                  resource_api_version: V3
                  api_config_source:
                    api_type: GRPC
                    transport_api_version: V3
                    grpc_services:
                    - envoy_grpc:
                        cluster_name: gateway_proxy_sds
{{- end }}
{{- if or (or $global.istioSDS.enabled $global.istioIntegration.enabled) $global.glooMtls.enabled }}
      - name: gateway_proxy_sds
        connect_timeout: 0.25s
        http2_protocol_options: {}
        load_assignment:
          cluster_name: gateway_proxy_sds
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 8234
{{- end }}
      - name: rest_xds_cluster
        alt_stat_name: rest_xds_cluster
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: rest_xds_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    {{- $glooAddress := printf "gloo.%s.svc.%s" .Release.Namespace .Values.k8s.clusterName }}
                    address: {{ empty $spec.xdsServiceAddress | ternary $glooAddress $spec.xdsServiceAddress }}
                    port_value: {{ empty $spec.xdsServicePort | ternary .Values.gloo.deployment.restXdsPort $spec.xdsServicePort }}
        upstream_connection_options:
          tcp_keepalive:
            keepalive_time: {{ $spec.tcpKeepaliveTimeSeconds }}
        type: STRICT_DNS
        respect_dns_ttl: true
{{- if $global.glooMtls.enabled }}
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
            common_tls_context:
              tls_certificate_sds_secret_configs:
                - name: server_cert
                  sds_config:
                    resource_api_version: V3
                    api_config_source:
                      api_type: GRPC
                      transport_api_version: V3
                      grpc_services:
                      - envoy_grpc:
                          cluster_name: gateway_proxy_sds
              validation_context_sds_secret_config:
                name: validation_context
                sds_config:
                  resource_api_version: V3
                  api_config_source:
                    api_type: GRPC
                    transport_api_version: V3
                    grpc_services:
                    - envoy_grpc:
                        cluster_name: gateway_proxy_sds
{{- end }}
      - name: wasm-cache
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: wasm-cache
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: gloo.{{ .Release.Namespace }}.svc.{{ .Values.k8s.clusterName}}
                    port_value: 9979
        upstream_connection_options:
          tcp_keepalive:
            keepalive_time: {{ $spec.tcpKeepaliveTimeSeconds }}
        type: STRICT_DNS
        respect_dns_ttl: true
{{- if .Values.accessLogger.enabled }}
      - name: access_log_cluster
        connect_timeout: 5.000s
        load_assignment:
            cluster_name: access_log_cluster
            endpoints:
            - lb_endpoints:
              - endpoint:
                    address:
                        socket_address:
                            address: gateway-proxy-access-logger.{{ .Release.Namespace }}.svc.{{ .Values.k8s.clusterName}}
                            port_value: {{.Values.accessLogger.port}}
        http2_protocol_options: {}
        type: STRICT_DNS
{{- end}} {{- /* if .Values.accessLogger.enabled */}}
{{- if $spec.tracing -}}
{{- if $spec.tracing.cluster}}
{{ toYaml $spec.tracing.cluster | indent 6}}
{{- end}} {{- /* if $spec.tracing.cluster */}}
{{- end}} {{- /* if $spec.tracing */}}

{{- if .Values.settings.aws.enableServiceAccountCredentials }}
      - name: aws_sts_cluster
        connect_timeout: 5.000s
        type: LOGICAL_DNS
        lb_policy: ROUND_ROBIN
        transport_socket:
          name: envoy.transport_sockets.tls
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
{{- if not .Values.settings.aws.stsCredentialsRegion }}
            sni: sts.amazonaws.com
{{- else }}
            sni: sts.{{ .Values.settings.aws.stsCredentialsRegion }}.amazonaws.com
{{- end }}
        load_assignment:
          cluster_name: aws_sts_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    port_value: 443
{{- if not .Values.settings.aws.stsCredentialsRegion }}
                    address: sts.amazonaws.com
{{- else }}
                    address: sts.{{ .Values.settings.aws.stsCredentialsRegion }}.amazonaws.com
{{- end }}
{{- end}} {{- /* if $.Values.settings.aws.enableServiceAccountCredentials */}}

{{- if or $statsConfig.enabled ($spec.readConfig) }}
      - name: admin_port_cluster
        connect_timeout: 5.000s
        type: STATIC
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: admin_port_cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ $spec.loopBackAddress }}
                    port_value: 19000
{{- end}} {{- /* if or $statsConfig.enabled ($spec.readConfig) */}}
{{- if $spec.envoyStaticClusters }}
{{ toYaml $spec.envoyStaticClusters | indent 6}}
{{- end}}

    dynamic_resources:
      ads_config:
        transport_api_version: {{ $spec.envoyApiVersion }}
        api_type: GRPC
        rate_limit_settings: {}
        grpc_services:
        - envoy_grpc: {cluster_name: gloo.{{ .Release.Namespace }}.svc.{{ .Values.k8s.clusterName}}:{{ .Values.gloo.deployment.xdsPort }}}
      cds_config:
        resource_api_version: {{ $spec.envoyApiVersion }}
        ads: {}
      lds_config:
        resource_api_version: {{ $spec.envoyApiVersion }}
        ads: {}
{{- if $spec.envoyBootstrapExtensions }}
    bootstrap_extensions:
{{ toYaml $spec.envoyBootstrapExtensions | indent 4}}
{{- end}}
{{- if $spec.envoyOverloadManager.enabled }}
    overload_manager:
      actions: {{- toYaml $spec.envoyOverloadManager.actions | nindent 8 }}
      buffer_factory_config: {{ if $spec.envoyOverloadManager.bufferFactoryConfig }}{{- toYaml $spec.envoyOverloadManager.bufferFactoryConfig | nindent 8 }}{{ else }}{}{{ end }}
      refresh_interval: {{ $spec.envoyOverloadManager.refreshInterval }}
      resource_monitors: {{- toYaml $spec.envoyOverloadManager.resourceMonitors | nindent 8 }}
{{- end }}
    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: {{ $spec.loopBackAddress }}
          port_value: 19000
{{- else}}{{ toYaml $spec.configMap.data | indent 2}}
{{- end }} {{/* if (empty $spec.configMap.data) ## allows full custom */}}
{{- end }} {{/* if not $spec.disabled */}}
{{- end }} {{/* with */}}

{{- end }} {{/* define gatewayProxy.configMapSpec*/}}

{{- if .Values.gateway.enabled }}
{{- range $name, $gatewaySpec := .Values.gatewayProxies }}
{{/* Render each gatewayProxy template with it's yaml overrides */}}
---
{{- $kubeResourceOverride := dict -}}
{{- if $gatewaySpec.configMap -}}
{{- $kubeResourceOverride = $gatewaySpec.configMap.kubeResourceOverride -}}
{{- end -}} {{/* if $gatewaySpec.configMap */}}
{{- $ctx := (list $ $name $gatewaySpec)}}
{{- $configmap := include "gloo.util.merge" (list $ctx $kubeResourceOverride "gatewayProxy.configMapSpec") -}}
{{- $checksum := $configmap | sha256sum -}}
{{- $_ := set $gatewaySpec "checksum" $checksum -}}
{{- $configmap -}}
{{- end }}{{/* range $name, $gatewaySpec := .Values.gatewayProxies */}}
{{- end }}{{/* if .Values.gateway.enabled */}}
