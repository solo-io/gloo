namespace:
  create: false
k8s:
  clusterName: cluster.local

# Default values for the Gloo Gateway - Kubernetes Gateway API integration
kubeGateway:
  # disable the integration by default, since it requires extra steps to set up (i.e. applying Gateway API CRDs)
  enabled: false
  gatewayParameters:
    glooGateway:
      envoyContainer:
        image:
          repository: gloo-envoy-wrapper
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10101
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
      # If proxyDeployment or proxyDeployment.replicas are null, a default of 1 will be
      # imposed by the template.
      proxyDeployment:
        replicas: 1
      # If service or service.type are null, a default of LoadBalancer will be
      # imposed by the template.
      service:
        type: LoadBalancer
      sdsContainer:
        image:
          repository: sds
        logLevel: info
      istio:
        istioProxyContainer:
          image:
            repository: proxyv2
            registry: docker.io/istio
            tag: 1.22.0
          logLevel: warning
          istioDiscoveryAddress: istiod.istio-system.svc:15012
          istioMetaMeshId: cluster.local
          istioMetaClusterId: Kubernetes
      aiExtension:
        enabled: false
        image:
          repository: gloo-ai-extension
          registry: quay.io/solo-io
          pullPolicy: IfNotPresent
        env: []
        ports: []
      stats:
        enabled: true
        routePrefixRewrite: "/stats/prometheus"
        enableStatsRoute: true
        statsRoutePrefixRewrite: "/stats"
  portal:
    enabled: false

settings:
  # if this is set to false, default settings will be created by pods upon boot
  create: true
  linkerd: false
  enableRestEds: false
  aws: {}
  invalidConfigPolicy:
    replaceInvalidRoutes: false
    invalidRouteResponseCode: 404
    invalidRouteResponseBody: 'Gloo Gateway has invalid configuration. Administrators should run `glooctl check` to find and fix config errors.'
  integrations:
    knative:
      enabled: false
      version: "0.10.0"
      proxy:
        loopBackAddress: 127.0.0.1
        image:
          repository: gloo-envoy-wrapper
        httpPort: 8080
        httpsPort: 8443
        replicas: 1
        runAsUser: 10101
        service:
          type: LoadBalancer
          extraAnnotations: {}
          httpPort: 80
          httpsPort: 443
  # Namespaces that Gloo should watch. This includes watches set for pods, services, as well as CRD configuration objects.
  watchNamespaces: []
  # Gloo allows you to directly reference a Kubernetes service as a routing destination. To enable this feature,
  # Gloo scans the cluster for Kubernetes services and creates a special type of in-memory Upstream to represent them.
  # If the cluster contains a lot of services and you do not restrict the namespaces Gloo is watching, this can result
  # in significant overhead. If you do not plan on using this feature, you can set this flag to true to turn it off.
  disableKubernetesDestinations: false
  # Set this option to determine the state of an Envoy listener when the corresponding Gloo Proxy resource has no routes.
  # If false (default), Gloo will propagate the state of the Proxy to Envoy, resetting the listener to a clean slate with no routes.
  # If true, Gloo will keep serving the routes from the last applied valid configuration.
  disableProxyGarbageCollection: false
  # Envoy default max program size is 100 which is too often not enough for users. We will set all users to base value of 1024
  # This can be overriden if users wish to be more stringent
  regexMaxProgramSize: 1024
gloo:
  deployment:
    image:
      repository: gloo
    xdsPort: 9977
    restXdsPort: 9976
    validationPort: 9988
    proxyDebugPort: 9966
    replicas: 1
    runAsUser: 10101
    serviceAccount: {}
discovery:
  enabled: false
  fdsMode: WHITELIST
  serviceAccount: {}
  deployment:
    image:
      repository: discovery
    replicas: 1
    runAsUser: 10101
    enablePodSecurityContext: true
    fsGroup: 10101
gateway:
  enabled: true
  translateEmptyGateways: false
  readGatewaysFromAllNamespaces: false
  isolateVirtualHostsBySslConfig: false
  validation:
    enabled: true
    failurePolicy: "Ignore"
    # This is the recommended setting because if it set to "Fail" modifications to core resources such as secrets and namespace that are defined
    # in the validating webhook will be blocked if the Gloo Service is not available.
    kubeCoreFailurePolicy: "Ignore"
    secretName: gateway-validation-certs
    alwaysAcceptResources: true
    allowWarnings: true
    warnMissingTlsSecret: true
    serverEnabled: true
    disableTransformationValidation: false
    warnRouteShortCircuiting: false
    validationServerGrpcMaxSizeBytes: 104857600
    webhook:
      enabled: true
      disableHelmHook: false
      extraAnnotations: {}
      # We have learned that defaulting validation behavior leads to unintentional usage of it
      # https://github.com/solo-io/gloo/issues/9309
      # As a result, for our Policy API, we default it to on, and provide users the way to opt-out of it
      enablePolicyApi: true
    fullEnvoyValidation: false
  certGenJob:
    enabled: true
    image:
      repository: certgen
    restartPolicy: OnFailure
    setTtlAfterFinished: true
    ttlSecondsAfterFinished: 60
    runAsUser: 10101
    forceRotation: true
    rotationDuration: 65s
    cron:
      enabled: false
      schedule: "* * * * *"
    runOnUpdate: false
  rolloutJob:
    enabled: true
    image:
      repository: kubectl
    restartPolicy: OnFailure
    runAsUser: 10101
    # When adding the --wait && --wait-for-jobs flag in helm, sometimes the job can complete and be deleted before helm can check if it has finished (for instance, while helm is waiting on a deployment).
    # So set this to a higher value where it should still be around after all the other resources are ready
    ttlSecondsAfterFinished: 300
    timeout: 120
  cleanupJob:
    enabled: true
    image:
      repository: kubectl
    restartPolicy: OnFailure
    runAsUser: 10101
    ttlSecondsAfterFinished: 60
  proxyServiceAccount: {}
gatewayProxies:
  gatewayProxy:
    envoyApiVersion: V3
    gatewaySettings:
      enabled: true
      useProxyProto: false
    failover:
      enabled: false
      port: 15443
      secretName: failover-downstream
    istioDiscoveryAddress: istiod.istio-system.svc:15012
    kind:
      deployment:
        replicas: 1
    podTemplate:
      probes: false
      image:
        repository: gloo-envoy-wrapper
      httpPort: 8080
      httpsPort: 8443
      runAsUser: 10101
      enablePodSecurityContext: true
      fsGroup: 10101
      runUnprivileged: true
      disableNetBind: true
      gracefulShutdown:
        enabled: false
        sleepTimeSeconds: 25
      customReadinessProbe: {}
      customLivenessProbe: {}
    service:
      customPorts: []
      type: LoadBalancer
      # clusterIP: None
      httpPort: 80
      httpsPort: 443
    # Annotation example: setup ssl with aws cert when service.type is LoadBalancer
    # extraAnnotations:
    #   service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:EXAMPLE_CERT
    tracing:
    configMap:
      data:
    loopBackAddress: 127.0.0.1
    envoyOverloadManager:
      enabled: false
      actions: []
      bufferFactoryConfig:
      refreshInterval: 1s
      resourceMonitors: []
    globalDownstreamMaxConnections: 250000
    healthyPanicThreshold: 50
    tcpKeepaliveTimeSeconds: 60
    disableCoreDumps: false
    disableExtauthSidecar: false
    # intentionally unset, so we default to the gloo service address. if set, this overrides the derived gloo service address
    # xdsServiceAddress: xds-relay.default.svc.cluster.local
    # intentionally unset, so we default to the gloo service port. if set, this overrides .Values.gloo.deployment.xdsPort
    # xdsServicePort: 9991
accessLogger:
  enabled: false
  port: 8083
  serviceName: AccessLog
  image:
    repository: access-logger
  runAsUser: 10101
  replicas: 1
  stats:
    enabled: true
ingress:
  enabled: false
  deployment:
    image:
      repository: ingress
    replicas: 1
    runAsUser: 10101
ingressProxy:
  # Set to a unique value to allow using several ingress proxy instances in the same cluster.
  label: ingress-proxy
  loopBackAddress: 127.0.0.1
  deployment:
    image:
      repository: gloo-envoy-wrapper
    httpPort: 8080
    httpsPort: 8443
    replicas: 1
    runAsUser: 10101
  service:
    type: LoadBalancer
    extraAnnotations: {}
    httpPort: 80
    httpsPort: 443
  configMap:
    data:
  tracing:
global:
  image:
    registry: quay.io/solo-io
    pullPolicy: IfNotPresent
    disableDigest: false
  glooRbac:
    create: true
    namespaced: false
  glooStats:
    enabled: true
    routePrefixRewrite: /stats/prometheus
    setDatadogAnnotations: false
    enableStatsRoute: false
    statsPrefixRewrite: /stats
  glooMtls:
    enabled: false
    sds:
      image:
        repository: sds
      logLevel: info
    istioProxy:
      image:
        repository: proxyv2
        registry: docker.io/istio
        tag: 1.22.0
      logLevel: warning
    envoy:
      image:
        repository: gloo-envoy-wrapper
  istioSDS:
    enabled: false
  istioIntegration:
    enabled: false
    disableAutoinjection: false
    enableAutoMtls: false
    # To be deprecated in future release
    labelInstallNamespace: false
    # To be deprecated in future release
    whitelistDiscovery: false
    # To be deprecated in future release
    enableIstioSidecarOnGateway: false
    # To be deprecated in future release
    appendXForwardedHost: true
  # AddEnterpriseSettings and extauthCustomYaml control differences in the settings manifest between open source and enterprise
  AddEnterpriseSettings: false
  extauthCustomYaml: true
  # additionalLabels adds a label to all object metadata
  additionalLabels: {}
  # securitySettings defines global security settings such as `floatingUserId`
  securitySettings: {}
